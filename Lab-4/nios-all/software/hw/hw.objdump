
hw.elf:     file format elf32-littlenios2
hw.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00020244

Program Header:
    LOAD off    0x00001000 vaddr 0x00020000 paddr 0x00020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00020020 paddr 0x00020020 align 2**12
         filesz 0x00002520 memsz 0x00002520 flags r-x
    LOAD off    0x00003540 vaddr 0x00022540 paddr 0x00022820 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x00003b00 vaddr 0x00022b00 paddr 0x00022b00 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00020000  00020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00020020  00020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000022bc  00020244  00020244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  00022500  00022500  00003500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  00022540  00022820  00003540  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  00022b00  00022b00  00003b00  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00022c20  00022c20  00003820  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003820  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000630  00000000  00000000  00003848  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00007c6d  00000000  00000000  00003e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002bd6  00000000  00000000  0000bae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00002f15  00000000  00000000  0000e6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000b94  00000000  00000000  000115d0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001d3d  00000000  00000000  00012164  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000145d  00000000  00000000  00013ea1  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000030  00000000  00000000  00015300  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002a8  00000000  00000000  00015330  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000170ca  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000170cd  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000170d9  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000170da  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000170db  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000170df  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000170e3  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000170e7  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000170f2  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000170fd  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 00000009  00000000  00000000  00017108  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000051  00000000  00000000  00017111  2**0
                  CONTENTS, READONLY
 29 .jdi          00005818  00000000  00000000  00017162  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048c62  00000000  00000000  0001c97a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00020000 l    d  .entry	00000000 .entry
00020020 l    d  .exceptions	00000000 .exceptions
00020244 l    d  .text	00000000 .text
00022500 l    d  .rodata	00000000 .rodata
00022540 l    d  .rwdata	00000000 .rwdata
00022b00 l    d  .bss	00000000 .bss
00022c20 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../hw_bsp//obj/HAL/src/crt0.o
0002028c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hw.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0002034c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00022540 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00020bd8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00020d40 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00020e74 l     F .text	00000034 alt_dev_reg
00022620 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
00021170 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_close.c
00021264 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
000213b8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
000213e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00021858 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00021998 l     F .text	0000003c alt_get_errno
000219d4 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00022b1c g     O .bss	00000004 alt_instruction_exception_handler
00020cc4 g     F .text	0000007c alt_main
00022b20 g     O .bss	00000100 alt_irq
00022820 g       *ABS*	00000000 __flash_rwdata_start
00020300 g     F .text	0000004c printf
00021df4 g     F .text	00000024 altera_nios2_gen2_irq_init
00020000 g     F .entry	0000001c __reset
00020020 g       *ABS*	00000000 __flash_exceptions_start
00022b00 g     O .bss	00000004 errno
00022b08 g     O .bss	00000004 alt_argv
0002a7f4 g       *ABS*	00000000 _gp
00022674 g     O .rwdata	00000180 alt_fd_list
00021e18 g     F .text	00000090 alt_find_dev
0002191c g     F .text	0000007c alt_io_redirect
00022500 g       *ABS*	00000000 __DTOR_END__
000220e4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00020ff0 g     F .text	000000ec altera_avalon_jtag_uart_read
000202c4 g     F .text	0000003c _printf_r
00020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00020b1c g     F .text	00000064 .hidden __udivsi3
00022054 g     F .text	00000090 alt_icache_flush
0002280c g     O .rwdata	00000004 alt_max_fd
000227f4 g     O .rwdata	00000004 _global_impure_ptr
00022c20 g       *ABS*	00000000 __bss_end
00021768 g     F .text	000000f0 alt_iic_isr_register
00021cec g     F .text	00000108 alt_tick
0002171c g     F .text	0000004c alt_ic_irq_enabled
00021c50 g     F .text	0000009c alt_alarm_stop
00022b10 g     O .bss	00000004 alt_irq_active
000200fc g     F .exceptions	000000d4 alt_irq_handler
0002264c g     O .rwdata	00000028 alt_dev_null
00021370 g     F .text	00000048 alt_dcache_flush_all
00022820 g       *ABS*	00000000 __ram_rwdata_end
00022804 g     O .rwdata	00000008 alt_dev_list
00020d7c g     F .text	000000f8 write
00022540 g       *ABS*	00000000 __ram_rodata_end
00020b80 g     F .text	00000058 .hidden __umodsi3
00022c20 g       *ABS*	00000000 end
000201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00022500 g       *ABS*	00000000 __CTOR_LIST__
00040000 g       *ABS*	00000000 __alt_stack_pointer
000211e8 g     F .text	0000007c alt_avalon_timer_sc_init
000210dc g     F .text	00000094 altera_avalon_jtag_uart_write
000203b8 g     F .text	00000524 ___vfprintf_internal_r
0002233c g     F .text	00000190 __call_exitprocs
00020244 g     F .text	0000004c _start
00022b14 g     O .bss	00000004 _alt_tick_rate
00022b18 g     O .bss	00000004 _alt_nticks
00020ee0 g     F .text	00000050 alt_sys_init
000221e4 g     F .text	00000158 __register_exitproc
00022540 g       *ABS*	00000000 __ram_rwdata_start
00022500 g       *ABS*	00000000 __ram_rodata_start
00020f30 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00021fb0 g     F .text	000000a4 alt_get_fd
000221b4 g     F .text	00000030 memcmp
00022c20 g       *ABS*	00000000 __alt_stack_base
00021ea8 g     F .text	00000108 alt_find_file
00021420 g     F .text	000000a4 alt_dev_llist_insert
000208f8 g     F .text	000000b8 __sfvwrite_small_dev
00022b00 g       *ABS*	00000000 __bss_start
00020290 g     F .text	00000034 main
00022b0c g     O .bss	00000004 alt_envp
00020f90 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
00022810 g     O .rwdata	00000004 alt_errno
00020a24 g     F .text	00000084 .hidden __divsi3
00022500 g       *ABS*	00000000 __CTOR_END__
00022500 g       *ABS*	00000000 __flash_rodata_start
00022500 g       *ABS*	00000000 __DTOR_LIST__
00020ea8 g     F .text	00000038 alt_irq_init
00021bec g     F .text	00000064 alt_release_fd
00022180 g     F .text	00000014 atexit
000209cc g     F .text	00000058 _write_r
000227f8 g     O .rwdata	00000004 _impure_ptr
00022b04 g     O .bss	00000004 alt_argc
00021524 g     F .text	00000060 _do_dtors
00020020 g       .exceptions	00000000 alt_irq_entry
000227fc g     O .rwdata	00000008 alt_fs_list
00020020 g       *ABS*	00000000 __ram_exceptions_start
000215b8 g     F .text	00000050 alt_ic_isr_register
00022820 g       *ABS*	00000000 _edata
00022c20 g       *ABS*	00000000 _end
00020244 g       *ABS*	00000000 __ram_exceptions_end
00021690 g     F .text	0000008c alt_ic_irq_disable
00022194 g     F .text	00000020 exit
00020aa8 g     F .text	00000074 .hidden __modsi3
00040000 g       *ABS*	00000000 __alt_data_end
00020020 g     F .exceptions	00000000 alt_exception
000224cc g     F .text	00000034 _exit
000209b0 g     F .text	0000001c strlen
00021a98 g     F .text	00000154 open
00021584 g     F .text	00000034 alt_icache_flush_all
00022814 g     O .rwdata	00000004 alt_priority_mask
00021608 g     F .text	00000088 alt_ic_irq_enable
000208dc g     F .text	0000001c __vfprintf_internal
00022818 g     O .rwdata	00000008 alt_alarm_list
000214c4 g     F .text	00000060 _do_ctors
000212a0 g     F .text	000000d0 close
00020c40 g     F .text	00000084 alt_load



Disassembly of section .entry:

00020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
   20000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
   20004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
   20008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
   2000c:	00bffd16 	blt	zero,r2,20004 <__alt_data_end+0xfffe0004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   20010:	004000b4 	movhi	at,2
    ori r1, r1, %lo(_start)
   20014:	08409114 	ori	at,at,580
    jmp r1
   20018:	0800683a 	jmp	at
   2001c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>

Disassembly of section .exceptions:

00020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
   20020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
   20024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
   20028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
   2002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
   20030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
   20034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
   20038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
   2003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
   20040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
   20044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
   20048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
   2004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
   20050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
   20054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
   20058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
   2005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
   20060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
   20064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
   20068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
   2006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   20070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
   20074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
   20078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
   2007c:	10000326 	beq	r2,zero,2008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
   20080:	20000226 	beq	r4,zero,2008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
   20084:	00200fc0 	call	200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
   20088:	00000706 	br	200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
   2008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
   20090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
   20094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
   20098:	00201d00 	call	201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
   2009c:	1000021e 	bne	r2,zero,200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
   200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
   200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
   200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
   200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
   200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
   200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
   200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
   200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
   200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
   200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
   200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
   200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
   200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
   200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
   200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
   200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
   200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
   200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
   200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
   200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
   200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
   200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
   200f8:	ef80083a 	eret

000200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
   200fc:	defff904 	addi	sp,sp,-28
   20100:	dfc00615 	stw	ra,24(sp)
   20104:	df000515 	stw	fp,20(sp)
   20108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
   2010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   20110:	0005313a 	rdctl	r2,ipending
   20114:	e0bffe15 	stw	r2,-8(fp)

  return active;
   20118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
   2011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
   20120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
   20124:	00800044 	movi	r2,1
   20128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
   2012c:	e0fffb17 	ldw	r3,-20(fp)
   20130:	e0bffc17 	ldw	r2,-16(fp)
   20134:	1884703a 	and	r2,r3,r2
   20138:	10001426 	beq	r2,zero,2018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
   2013c:	008000b4 	movhi	r2,2
   20140:	108ac804 	addi	r2,r2,11040
   20144:	e0fffd17 	ldw	r3,-12(fp)
   20148:	180690fa 	slli	r3,r3,3
   2014c:	10c5883a 	add	r2,r2,r3
   20150:	10c00017 	ldw	r3,0(r2)
   20154:	008000b4 	movhi	r2,2
   20158:	108ac804 	addi	r2,r2,11040
   2015c:	e13ffd17 	ldw	r4,-12(fp)
   20160:	200890fa 	slli	r4,r4,3
   20164:	1105883a 	add	r2,r2,r4
   20168:	10800104 	addi	r2,r2,4
   2016c:	10800017 	ldw	r2,0(r2)
   20170:	1009883a 	mov	r4,r2
   20174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
   20178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
   2017c:	0005313a 	rdctl	r2,ipending
   20180:	e0bfff15 	stw	r2,-4(fp)

  return active;
   20184:	e0bfff17 	ldw	r2,-4(fp)
   20188:	00000706 	br	201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
   2018c:	e0bffc17 	ldw	r2,-16(fp)
   20190:	1085883a 	add	r2,r2,r2
   20194:	e0bffc15 	stw	r2,-16(fp)
      i++;
   20198:	e0bffd17 	ldw	r2,-12(fp)
   2019c:	10800044 	addi	r2,r2,1
   201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
   201a4:	003fe106 	br	2012c <__alt_data_end+0xfffe012c>

    active = alt_irq_pending ();
   201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
   201ac:	e0bffb17 	ldw	r2,-20(fp)
   201b0:	103fdb1e 	bne	r2,zero,20120 <__alt_data_end+0xfffe0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
   201b4:	0001883a 	nop
}
   201b8:	0001883a 	nop
   201bc:	e037883a 	mov	sp,fp
   201c0:	dfc00117 	ldw	ra,4(sp)
   201c4:	df000017 	ldw	fp,0(sp)
   201c8:	dec00204 	addi	sp,sp,8
   201cc:	f800283a 	ret

000201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
   201d0:	defffb04 	addi	sp,sp,-20
   201d4:	dfc00415 	stw	ra,16(sp)
   201d8:	df000315 	stw	fp,12(sp)
   201dc:	df000304 	addi	fp,sp,12
   201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
   201e4:	000531fa 	rdctl	r2,exception
   201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
   201ec:	e0bffd17 	ldw	r2,-12(fp)
   201f0:	10801f0c 	andi	r2,r2,124
   201f4:	1004d0ba 	srli	r2,r2,2
   201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
   201fc:	0005333a 	rdctl	r2,badaddr
   20200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
   20204:	d0a0ca17 	ldw	r2,-31960(gp)
   20208:	10000726 	beq	r2,zero,20228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
   2020c:	d0a0ca17 	ldw	r2,-31960(gp)
   20210:	e0fffd17 	ldw	r3,-12(fp)
   20214:	e1bffe17 	ldw	r6,-8(fp)
   20218:	e17fff17 	ldw	r5,-4(fp)
   2021c:	1809883a 	mov	r4,r3
   20220:	103ee83a 	callr	r2
   20224:	00000206 	br	20230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
   20228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
   2022c:	0005883a 	mov	r2,zero
}
   20230:	e037883a 	mov	sp,fp
   20234:	dfc00117 	ldw	ra,4(sp)
   20238:	df000017 	ldw	fp,0(sp)
   2023c:	dec00204 	addi	sp,sp,8
   20240:	f800283a 	ret

Disassembly of section .text:

00020244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
   20244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
   20248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
   2024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
   20250:	00bffd16 	blt	zero,r2,20248 <__alt_data_end+0xfffe0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   20254:	06c00134 	movhi	sp,4
    ori sp, sp, %lo(__alt_stack_pointer)
   20258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
   2025c:	068000b4 	movhi	gp,2
    ori gp, gp, %lo(_gp)
   20260:	d6a9fd14 	ori	gp,gp,42996
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   20264:	008000b4 	movhi	r2,2
    ori r2, r2, %lo(__bss_start)
   20268:	108ac014 	ori	r2,r2,11008

    movhi r3, %hi(__bss_end)
   2026c:	00c000b4 	movhi	r3,2
    ori r3, r3, %lo(__bss_end)
   20270:	18cb0814 	ori	r3,r3,11296

    beq r2, r3, 1f
   20274:	10c00326 	beq	r2,r3,20284 <_start+0x40>

0:
    stw zero, (r2)
   20278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   2027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   20280:	10fffd36 	bltu	r2,r3,20278 <__alt_data_end+0xfffe0278>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   20284:	0020c400 	call	20c40 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   20288:	0020cc40 	call	20cc4 <alt_main>

0002028c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   2028c:	003fff06 	br	2028c <__alt_data_end+0xfffe028c>

00020290 <main>:
 *      Author: hiemenzpe
 */

#include <stdio.h>

int main() {
   20290:	defffe04 	addi	sp,sp,-8
   20294:	dfc00115 	stw	ra,4(sp)
   20298:	df000015 	stw	fp,0(sp)
   2029c:	d839883a 	mov	fp,sp
	printf("Hello World");
   202a0:	010000b4 	movhi	r4,2
   202a4:	21094004 	addi	r4,r4,9472
   202a8:	00203000 	call	20300 <printf>
	return 0;
   202ac:	0005883a 	mov	r2,zero
}
   202b0:	e037883a 	mov	sp,fp
   202b4:	dfc00117 	ldw	ra,4(sp)
   202b8:	df000017 	ldw	fp,0(sp)
   202bc:	dec00204 	addi	sp,sp,8
   202c0:	f800283a 	ret

000202c4 <_printf_r>:
   202c4:	defffd04 	addi	sp,sp,-12
   202c8:	dfc00015 	stw	ra,0(sp)
   202cc:	d9800115 	stw	r6,4(sp)
   202d0:	d9c00215 	stw	r7,8(sp)
   202d4:	20c00217 	ldw	r3,8(r4)
   202d8:	018000b4 	movhi	r6,2
   202dc:	31823e04 	addi	r6,r6,2296
   202e0:	19800115 	stw	r6,4(r3)
   202e4:	280d883a 	mov	r6,r5
   202e8:	21400217 	ldw	r5,8(r4)
   202ec:	d9c00104 	addi	r7,sp,4
   202f0:	00203b80 	call	203b8 <___vfprintf_internal_r>
   202f4:	dfc00017 	ldw	ra,0(sp)
   202f8:	dec00304 	addi	sp,sp,12
   202fc:	f800283a 	ret

00020300 <printf>:
   20300:	defffc04 	addi	sp,sp,-16
   20304:	dfc00015 	stw	ra,0(sp)
   20308:	d9400115 	stw	r5,4(sp)
   2030c:	d9800215 	stw	r6,8(sp)
   20310:	d9c00315 	stw	r7,12(sp)
   20314:	008000b4 	movhi	r2,2
   20318:	1089fe04 	addi	r2,r2,10232
   2031c:	10800017 	ldw	r2,0(r2)
   20320:	014000b4 	movhi	r5,2
   20324:	29423e04 	addi	r5,r5,2296
   20328:	10c00217 	ldw	r3,8(r2)
   2032c:	d9800104 	addi	r6,sp,4
   20330:	19400115 	stw	r5,4(r3)
   20334:	200b883a 	mov	r5,r4
   20338:	11000217 	ldw	r4,8(r2)
   2033c:	00208dc0 	call	208dc <__vfprintf_internal>
   20340:	dfc00017 	ldw	ra,0(sp)
   20344:	dec00404 	addi	sp,sp,16
   20348:	f800283a 	ret

0002034c <print_repeat>:
   2034c:	defffb04 	addi	sp,sp,-20
   20350:	dc800315 	stw	r18,12(sp)
   20354:	dc400215 	stw	r17,8(sp)
   20358:	dc000115 	stw	r16,4(sp)
   2035c:	dfc00415 	stw	ra,16(sp)
   20360:	2025883a 	mov	r18,r4
   20364:	2823883a 	mov	r17,r5
   20368:	d9800005 	stb	r6,0(sp)
   2036c:	3821883a 	mov	r16,r7
   20370:	04000a0e 	bge	zero,r16,2039c <print_repeat+0x50>
   20374:	88800117 	ldw	r2,4(r17)
   20378:	01c00044 	movi	r7,1
   2037c:	d80d883a 	mov	r6,sp
   20380:	880b883a 	mov	r5,r17
   20384:	9009883a 	mov	r4,r18
   20388:	103ee83a 	callr	r2
   2038c:	843fffc4 	addi	r16,r16,-1
   20390:	103ff726 	beq	r2,zero,20370 <__alt_data_end+0xfffe0370>
   20394:	00bfffc4 	movi	r2,-1
   20398:	00000106 	br	203a0 <print_repeat+0x54>
   2039c:	0005883a 	mov	r2,zero
   203a0:	dfc00417 	ldw	ra,16(sp)
   203a4:	dc800317 	ldw	r18,12(sp)
   203a8:	dc400217 	ldw	r17,8(sp)
   203ac:	dc000117 	ldw	r16,4(sp)
   203b0:	dec00504 	addi	sp,sp,20
   203b4:	f800283a 	ret

000203b8 <___vfprintf_internal_r>:
   203b8:	deffe504 	addi	sp,sp,-108
   203bc:	d8c00804 	addi	r3,sp,32
   203c0:	df001915 	stw	fp,100(sp)
   203c4:	ddc01815 	stw	r23,96(sp)
   203c8:	dd801715 	stw	r22,92(sp)
   203cc:	dd401615 	stw	r21,88(sp)
   203d0:	dd001515 	stw	r20,84(sp)
   203d4:	dcc01415 	stw	r19,80(sp)
   203d8:	dc801315 	stw	r18,76(sp)
   203dc:	dc401215 	stw	r17,72(sp)
   203e0:	dc001115 	stw	r16,68(sp)
   203e4:	dfc01a15 	stw	ra,104(sp)
   203e8:	2027883a 	mov	r19,r4
   203ec:	2839883a 	mov	fp,r5
   203f0:	382d883a 	mov	r22,r7
   203f4:	d9800f15 	stw	r6,60(sp)
   203f8:	0021883a 	mov	r16,zero
   203fc:	d8000e15 	stw	zero,56(sp)
   20400:	002f883a 	mov	r23,zero
   20404:	002b883a 	mov	r21,zero
   20408:	0025883a 	mov	r18,zero
   2040c:	0023883a 	mov	r17,zero
   20410:	d8000c15 	stw	zero,48(sp)
   20414:	d8000b15 	stw	zero,44(sp)
   20418:	0029883a 	mov	r20,zero
   2041c:	d8c00915 	stw	r3,36(sp)
   20420:	d8c00f17 	ldw	r3,60(sp)
   20424:	19000003 	ldbu	r4,0(r3)
   20428:	20803fcc 	andi	r2,r4,255
   2042c:	1080201c 	xori	r2,r2,128
   20430:	10bfe004 	addi	r2,r2,-128
   20434:	10011c26 	beq	r2,zero,208a8 <___vfprintf_internal_r+0x4f0>
   20438:	00c00044 	movi	r3,1
   2043c:	a0c01426 	beq	r20,r3,20490 <___vfprintf_internal_r+0xd8>
   20440:	1d000216 	blt	r3,r20,2044c <___vfprintf_internal_r+0x94>
   20444:	a0000626 	beq	r20,zero,20460 <___vfprintf_internal_r+0xa8>
   20448:	00011306 	br	20898 <___vfprintf_internal_r+0x4e0>
   2044c:	01400084 	movi	r5,2
   20450:	a1401d26 	beq	r20,r5,204c8 <___vfprintf_internal_r+0x110>
   20454:	014000c4 	movi	r5,3
   20458:	a1402926 	beq	r20,r5,20500 <___vfprintf_internal_r+0x148>
   2045c:	00010e06 	br	20898 <___vfprintf_internal_r+0x4e0>
   20460:	01400944 	movi	r5,37
   20464:	1140fb26 	beq	r2,r5,20854 <___vfprintf_internal_r+0x49c>
   20468:	e0800117 	ldw	r2,4(fp)
   2046c:	d9000005 	stb	r4,0(sp)
   20470:	01c00044 	movi	r7,1
   20474:	d80d883a 	mov	r6,sp
   20478:	e00b883a 	mov	r5,fp
   2047c:	9809883a 	mov	r4,r19
   20480:	103ee83a 	callr	r2
   20484:	1000d61e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   20488:	84000044 	addi	r16,r16,1
   2048c:	00010206 	br	20898 <___vfprintf_internal_r+0x4e0>
   20490:	01400c04 	movi	r5,48
   20494:	1140f826 	beq	r2,r5,20878 <___vfprintf_internal_r+0x4c0>
   20498:	01400944 	movi	r5,37
   2049c:	11400a1e 	bne	r2,r5,204c8 <___vfprintf_internal_r+0x110>
   204a0:	d8800005 	stb	r2,0(sp)
   204a4:	e0800117 	ldw	r2,4(fp)
   204a8:	a00f883a 	mov	r7,r20
   204ac:	d80d883a 	mov	r6,sp
   204b0:	e00b883a 	mov	r5,fp
   204b4:	9809883a 	mov	r4,r19
   204b8:	103ee83a 	callr	r2
   204bc:	1000c81e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   204c0:	84000044 	addi	r16,r16,1
   204c4:	0000f306 	br	20894 <___vfprintf_internal_r+0x4dc>
   204c8:	217ff404 	addi	r5,r4,-48
   204cc:	29403fcc 	andi	r5,r5,255
   204d0:	00c00244 	movi	r3,9
   204d4:	19400736 	bltu	r3,r5,204f4 <___vfprintf_internal_r+0x13c>
   204d8:	00bfffc4 	movi	r2,-1
   204dc:	88800226 	beq	r17,r2,204e8 <___vfprintf_internal_r+0x130>
   204e0:	8c4002a4 	muli	r17,r17,10
   204e4:	00000106 	br	204ec <___vfprintf_internal_r+0x134>
   204e8:	0023883a 	mov	r17,zero
   204ec:	2c63883a 	add	r17,r5,r17
   204f0:	0000e206 	br	2087c <___vfprintf_internal_r+0x4c4>
   204f4:	01400b84 	movi	r5,46
   204f8:	1140e426 	beq	r2,r5,2088c <___vfprintf_internal_r+0x4d4>
   204fc:	05000084 	movi	r20,2
   20500:	213ff404 	addi	r4,r4,-48
   20504:	21003fcc 	andi	r4,r4,255
   20508:	00c00244 	movi	r3,9
   2050c:	19000736 	bltu	r3,r4,2052c <___vfprintf_internal_r+0x174>
   20510:	00bfffc4 	movi	r2,-1
   20514:	90800226 	beq	r18,r2,20520 <___vfprintf_internal_r+0x168>
   20518:	948002a4 	muli	r18,r18,10
   2051c:	00000106 	br	20524 <___vfprintf_internal_r+0x16c>
   20520:	0025883a 	mov	r18,zero
   20524:	24a5883a 	add	r18,r4,r18
   20528:	0000db06 	br	20898 <___vfprintf_internal_r+0x4e0>
   2052c:	00c01b04 	movi	r3,108
   20530:	10c0d426 	beq	r2,r3,20884 <___vfprintf_internal_r+0x4cc>
   20534:	013fffc4 	movi	r4,-1
   20538:	91000226 	beq	r18,r4,20544 <___vfprintf_internal_r+0x18c>
   2053c:	d8000b15 	stw	zero,44(sp)
   20540:	00000106 	br	20548 <___vfprintf_internal_r+0x190>
   20544:	04800044 	movi	r18,1
   20548:	01001a44 	movi	r4,105
   2054c:	11001626 	beq	r2,r4,205a8 <___vfprintf_internal_r+0x1f0>
   20550:	20800916 	blt	r4,r2,20578 <___vfprintf_internal_r+0x1c0>
   20554:	010018c4 	movi	r4,99
   20558:	11008a26 	beq	r2,r4,20784 <___vfprintf_internal_r+0x3cc>
   2055c:	01001904 	movi	r4,100
   20560:	11001126 	beq	r2,r4,205a8 <___vfprintf_internal_r+0x1f0>
   20564:	01001604 	movi	r4,88
   20568:	1100ca1e 	bne	r2,r4,20894 <___vfprintf_internal_r+0x4dc>
   2056c:	00c00044 	movi	r3,1
   20570:	d8c00e15 	stw	r3,56(sp)
   20574:	00001406 	br	205c8 <___vfprintf_internal_r+0x210>
   20578:	01001cc4 	movi	r4,115
   2057c:	11009a26 	beq	r2,r4,207e8 <___vfprintf_internal_r+0x430>
   20580:	20800416 	blt	r4,r2,20594 <___vfprintf_internal_r+0x1dc>
   20584:	01001bc4 	movi	r4,111
   20588:	1100c21e 	bne	r2,r4,20894 <___vfprintf_internal_r+0x4dc>
   2058c:	05400204 	movi	r21,8
   20590:	00000e06 	br	205cc <___vfprintf_internal_r+0x214>
   20594:	01001d44 	movi	r4,117
   20598:	11000c26 	beq	r2,r4,205cc <___vfprintf_internal_r+0x214>
   2059c:	01001e04 	movi	r4,120
   205a0:	11000926 	beq	r2,r4,205c8 <___vfprintf_internal_r+0x210>
   205a4:	0000bb06 	br	20894 <___vfprintf_internal_r+0x4dc>
   205a8:	b5000104 	addi	r20,r22,4
   205ac:	b8000726 	beq	r23,zero,205cc <___vfprintf_internal_r+0x214>
   205b0:	dd000d15 	stw	r20,52(sp)
   205b4:	b5800017 	ldw	r22,0(r22)
   205b8:	b000080e 	bge	r22,zero,205dc <___vfprintf_internal_r+0x224>
   205bc:	05adc83a 	sub	r22,zero,r22
   205c0:	02800044 	movi	r10,1
   205c4:	00000606 	br	205e0 <___vfprintf_internal_r+0x228>
   205c8:	05400404 	movi	r21,16
   205cc:	b0c00104 	addi	r3,r22,4
   205d0:	d8c00d15 	stw	r3,52(sp)
   205d4:	b5800017 	ldw	r22,0(r22)
   205d8:	002f883a 	mov	r23,zero
   205dc:	0015883a 	mov	r10,zero
   205e0:	d829883a 	mov	r20,sp
   205e4:	b0001426 	beq	r22,zero,20638 <___vfprintf_internal_r+0x280>
   205e8:	b009883a 	mov	r4,r22
   205ec:	a80b883a 	mov	r5,r21
   205f0:	da801015 	stw	r10,64(sp)
   205f4:	0020b1c0 	call	20b1c <__udivsi3>
   205f8:	1549383a 	mul	r4,r2,r21
   205fc:	00c00244 	movi	r3,9
   20600:	da801017 	ldw	r10,64(sp)
   20604:	b12dc83a 	sub	r22,r22,r4
   20608:	1d800216 	blt	r3,r22,20614 <___vfprintf_internal_r+0x25c>
   2060c:	b5800c04 	addi	r22,r22,48
   20610:	00000506 	br	20628 <___vfprintf_internal_r+0x270>
   20614:	d8c00e17 	ldw	r3,56(sp)
   20618:	18000226 	beq	r3,zero,20624 <___vfprintf_internal_r+0x26c>
   2061c:	b5800dc4 	addi	r22,r22,55
   20620:	00000106 	br	20628 <___vfprintf_internal_r+0x270>
   20624:	b58015c4 	addi	r22,r22,87
   20628:	a5800005 	stb	r22,0(r20)
   2062c:	a5000044 	addi	r20,r20,1
   20630:	102d883a 	mov	r22,r2
   20634:	003feb06 	br	205e4 <__alt_data_end+0xfffe05e4>
   20638:	a6c7c83a 	sub	r3,r20,sp
   2063c:	d8c00a15 	stw	r3,40(sp)
   20640:	90c5c83a 	sub	r2,r18,r3
   20644:	00800a0e 	bge	zero,r2,20670 <___vfprintf_internal_r+0x2b8>
   20648:	a085883a 	add	r2,r20,r2
   2064c:	01400c04 	movi	r5,48
   20650:	d8c00917 	ldw	r3,36(sp)
   20654:	a009883a 	mov	r4,r20
   20658:	a0c0032e 	bgeu	r20,r3,20668 <___vfprintf_internal_r+0x2b0>
   2065c:	a5000044 	addi	r20,r20,1
   20660:	21400005 	stb	r5,0(r4)
   20664:	a0bffa1e 	bne	r20,r2,20650 <__alt_data_end+0xfffe0650>
   20668:	a6c7c83a 	sub	r3,r20,sp
   2066c:	d8c00a15 	stw	r3,40(sp)
   20670:	d8c00a17 	ldw	r3,40(sp)
   20674:	50d3883a 	add	r9,r10,r3
   20678:	d8c00b17 	ldw	r3,44(sp)
   2067c:	8a6dc83a 	sub	r22,r17,r9
   20680:	18001726 	beq	r3,zero,206e0 <___vfprintf_internal_r+0x328>
   20684:	50000a26 	beq	r10,zero,206b0 <___vfprintf_internal_r+0x2f8>
   20688:	00800b44 	movi	r2,45
   2068c:	d8800805 	stb	r2,32(sp)
   20690:	e0800117 	ldw	r2,4(fp)
   20694:	01c00044 	movi	r7,1
   20698:	d9800804 	addi	r6,sp,32
   2069c:	e00b883a 	mov	r5,fp
   206a0:	9809883a 	mov	r4,r19
   206a4:	103ee83a 	callr	r2
   206a8:	10004d1e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   206ac:	84000044 	addi	r16,r16,1
   206b0:	0580070e 	bge	zero,r22,206d0 <___vfprintf_internal_r+0x318>
   206b4:	b00f883a 	mov	r7,r22
   206b8:	01800c04 	movi	r6,48
   206bc:	e00b883a 	mov	r5,fp
   206c0:	9809883a 	mov	r4,r19
   206c4:	002034c0 	call	2034c <print_repeat>
   206c8:	1000451e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   206cc:	85a1883a 	add	r16,r16,r22
   206d0:	d8c00a17 	ldw	r3,40(sp)
   206d4:	a013883a 	mov	r9,r20
   206d8:	1d2dc83a 	sub	r22,r3,r20
   206dc:	00002206 	br	20768 <___vfprintf_internal_r+0x3b0>
   206e0:	0580090e 	bge	zero,r22,20708 <___vfprintf_internal_r+0x350>
   206e4:	b00f883a 	mov	r7,r22
   206e8:	01800804 	movi	r6,32
   206ec:	e00b883a 	mov	r5,fp
   206f0:	9809883a 	mov	r4,r19
   206f4:	da801015 	stw	r10,64(sp)
   206f8:	002034c0 	call	2034c <print_repeat>
   206fc:	da801017 	ldw	r10,64(sp)
   20700:	1000371e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   20704:	85a1883a 	add	r16,r16,r22
   20708:	503ff126 	beq	r10,zero,206d0 <__alt_data_end+0xfffe06d0>
   2070c:	00800b44 	movi	r2,45
   20710:	d8800805 	stb	r2,32(sp)
   20714:	e0800117 	ldw	r2,4(fp)
   20718:	01c00044 	movi	r7,1
   2071c:	d9800804 	addi	r6,sp,32
   20720:	e00b883a 	mov	r5,fp
   20724:	9809883a 	mov	r4,r19
   20728:	103ee83a 	callr	r2
   2072c:	10002c1e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   20730:	84000044 	addi	r16,r16,1
   20734:	003fe606 	br	206d0 <__alt_data_end+0xfffe06d0>
   20738:	4a7fffc4 	addi	r9,r9,-1
   2073c:	48800003 	ldbu	r2,0(r9)
   20740:	01c00044 	movi	r7,1
   20744:	d9800804 	addi	r6,sp,32
   20748:	d8800805 	stb	r2,32(sp)
   2074c:	e0800117 	ldw	r2,4(fp)
   20750:	e00b883a 	mov	r5,fp
   20754:	da401015 	stw	r9,64(sp)
   20758:	9809883a 	mov	r4,r19
   2075c:	103ee83a 	callr	r2
   20760:	da401017 	ldw	r9,64(sp)
   20764:	10001e1e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   20768:	8245c83a 	sub	r2,r16,r9
   2076c:	4d89883a 	add	r4,r9,r22
   20770:	a085883a 	add	r2,r20,r2
   20774:	013ff016 	blt	zero,r4,20738 <__alt_data_end+0xfffe0738>
   20778:	1021883a 	mov	r16,r2
   2077c:	dd800d17 	ldw	r22,52(sp)
   20780:	00004406 	br	20894 <___vfprintf_internal_r+0x4dc>
   20784:	00800044 	movi	r2,1
   20788:	1440080e 	bge	r2,r17,207ac <___vfprintf_internal_r+0x3f4>
   2078c:	8d3fffc4 	addi	r20,r17,-1
   20790:	a00f883a 	mov	r7,r20
   20794:	01800804 	movi	r6,32
   20798:	e00b883a 	mov	r5,fp
   2079c:	9809883a 	mov	r4,r19
   207a0:	002034c0 	call	2034c <print_repeat>
   207a4:	10000e1e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   207a8:	8521883a 	add	r16,r16,r20
   207ac:	b0800017 	ldw	r2,0(r22)
   207b0:	01c00044 	movi	r7,1
   207b4:	d80d883a 	mov	r6,sp
   207b8:	d8800005 	stb	r2,0(sp)
   207bc:	e0800117 	ldw	r2,4(fp)
   207c0:	e00b883a 	mov	r5,fp
   207c4:	9809883a 	mov	r4,r19
   207c8:	b5000104 	addi	r20,r22,4
   207cc:	103ee83a 	callr	r2
   207d0:	1000031e 	bne	r2,zero,207e0 <___vfprintf_internal_r+0x428>
   207d4:	84000044 	addi	r16,r16,1
   207d8:	a02d883a 	mov	r22,r20
   207dc:	00002d06 	br	20894 <___vfprintf_internal_r+0x4dc>
   207e0:	00bfffc4 	movi	r2,-1
   207e4:	00003106 	br	208ac <___vfprintf_internal_r+0x4f4>
   207e8:	b5000017 	ldw	r20,0(r22)
   207ec:	b0c00104 	addi	r3,r22,4
   207f0:	d8c00a15 	stw	r3,40(sp)
   207f4:	a009883a 	mov	r4,r20
   207f8:	00209b00 	call	209b0 <strlen>
   207fc:	8893c83a 	sub	r9,r17,r2
   20800:	102d883a 	mov	r22,r2
   20804:	0240090e 	bge	zero,r9,2082c <___vfprintf_internal_r+0x474>
   20808:	480f883a 	mov	r7,r9
   2080c:	01800804 	movi	r6,32
   20810:	e00b883a 	mov	r5,fp
   20814:	9809883a 	mov	r4,r19
   20818:	da401015 	stw	r9,64(sp)
   2081c:	002034c0 	call	2034c <print_repeat>
   20820:	da401017 	ldw	r9,64(sp)
   20824:	103fee1e 	bne	r2,zero,207e0 <__alt_data_end+0xfffe07e0>
   20828:	8261883a 	add	r16,r16,r9
   2082c:	e0800117 	ldw	r2,4(fp)
   20830:	b00f883a 	mov	r7,r22
   20834:	a00d883a 	mov	r6,r20
   20838:	e00b883a 	mov	r5,fp
   2083c:	9809883a 	mov	r4,r19
   20840:	103ee83a 	callr	r2
   20844:	103fe61e 	bne	r2,zero,207e0 <__alt_data_end+0xfffe07e0>
   20848:	85a1883a 	add	r16,r16,r22
   2084c:	dd800a17 	ldw	r22,40(sp)
   20850:	00001006 	br	20894 <___vfprintf_internal_r+0x4dc>
   20854:	05c00044 	movi	r23,1
   20858:	04bfffc4 	movi	r18,-1
   2085c:	d8000e15 	stw	zero,56(sp)
   20860:	05400284 	movi	r21,10
   20864:	9023883a 	mov	r17,r18
   20868:	d8000c15 	stw	zero,48(sp)
   2086c:	d8000b15 	stw	zero,44(sp)
   20870:	b829883a 	mov	r20,r23
   20874:	00000806 	br	20898 <___vfprintf_internal_r+0x4e0>
   20878:	dd000b15 	stw	r20,44(sp)
   2087c:	05000084 	movi	r20,2
   20880:	00000506 	br	20898 <___vfprintf_internal_r+0x4e0>
   20884:	00c00044 	movi	r3,1
   20888:	d8c00c15 	stw	r3,48(sp)
   2088c:	050000c4 	movi	r20,3
   20890:	00000106 	br	20898 <___vfprintf_internal_r+0x4e0>
   20894:	0029883a 	mov	r20,zero
   20898:	d8c00f17 	ldw	r3,60(sp)
   2089c:	18c00044 	addi	r3,r3,1
   208a0:	d8c00f15 	stw	r3,60(sp)
   208a4:	003ede06 	br	20420 <__alt_data_end+0xfffe0420>
   208a8:	8005883a 	mov	r2,r16
   208ac:	dfc01a17 	ldw	ra,104(sp)
   208b0:	df001917 	ldw	fp,100(sp)
   208b4:	ddc01817 	ldw	r23,96(sp)
   208b8:	dd801717 	ldw	r22,92(sp)
   208bc:	dd401617 	ldw	r21,88(sp)
   208c0:	dd001517 	ldw	r20,84(sp)
   208c4:	dcc01417 	ldw	r19,80(sp)
   208c8:	dc801317 	ldw	r18,76(sp)
   208cc:	dc401217 	ldw	r17,72(sp)
   208d0:	dc001117 	ldw	r16,68(sp)
   208d4:	dec01b04 	addi	sp,sp,108
   208d8:	f800283a 	ret

000208dc <__vfprintf_internal>:
   208dc:	008000b4 	movhi	r2,2
   208e0:	1089fe04 	addi	r2,r2,10232
   208e4:	300f883a 	mov	r7,r6
   208e8:	280d883a 	mov	r6,r5
   208ec:	200b883a 	mov	r5,r4
   208f0:	11000017 	ldw	r4,0(r2)
   208f4:	00203b81 	jmpi	203b8 <___vfprintf_internal_r>

000208f8 <__sfvwrite_small_dev>:
   208f8:	2880000b 	ldhu	r2,0(r5)
   208fc:	1080020c 	andi	r2,r2,8
   20900:	10002126 	beq	r2,zero,20988 <__sfvwrite_small_dev+0x90>
   20904:	2880008f 	ldh	r2,2(r5)
   20908:	defffa04 	addi	sp,sp,-24
   2090c:	dc000015 	stw	r16,0(sp)
   20910:	dfc00515 	stw	ra,20(sp)
   20914:	dd000415 	stw	r20,16(sp)
   20918:	dcc00315 	stw	r19,12(sp)
   2091c:	dc800215 	stw	r18,8(sp)
   20920:	dc400115 	stw	r17,4(sp)
   20924:	2821883a 	mov	r16,r5
   20928:	10001216 	blt	r2,zero,20974 <__sfvwrite_small_dev+0x7c>
   2092c:	2027883a 	mov	r19,r4
   20930:	3025883a 	mov	r18,r6
   20934:	3823883a 	mov	r17,r7
   20938:	05010004 	movi	r20,1024
   2093c:	04400b0e 	bge	zero,r17,2096c <__sfvwrite_small_dev+0x74>
   20940:	880f883a 	mov	r7,r17
   20944:	a440010e 	bge	r20,r17,2094c <__sfvwrite_small_dev+0x54>
   20948:	01c10004 	movi	r7,1024
   2094c:	8140008f 	ldh	r5,2(r16)
   20950:	900d883a 	mov	r6,r18
   20954:	9809883a 	mov	r4,r19
   20958:	00209cc0 	call	209cc <_write_r>
   2095c:	0080050e 	bge	zero,r2,20974 <__sfvwrite_small_dev+0x7c>
   20960:	88a3c83a 	sub	r17,r17,r2
   20964:	90a5883a 	add	r18,r18,r2
   20968:	003ff406 	br	2093c <__alt_data_end+0xfffe093c>
   2096c:	0005883a 	mov	r2,zero
   20970:	00000706 	br	20990 <__sfvwrite_small_dev+0x98>
   20974:	8080000b 	ldhu	r2,0(r16)
   20978:	10801014 	ori	r2,r2,64
   2097c:	8080000d 	sth	r2,0(r16)
   20980:	00bfffc4 	movi	r2,-1
   20984:	00000206 	br	20990 <__sfvwrite_small_dev+0x98>
   20988:	00bfffc4 	movi	r2,-1
   2098c:	f800283a 	ret
   20990:	dfc00517 	ldw	ra,20(sp)
   20994:	dd000417 	ldw	r20,16(sp)
   20998:	dcc00317 	ldw	r19,12(sp)
   2099c:	dc800217 	ldw	r18,8(sp)
   209a0:	dc400117 	ldw	r17,4(sp)
   209a4:	dc000017 	ldw	r16,0(sp)
   209a8:	dec00604 	addi	sp,sp,24
   209ac:	f800283a 	ret

000209b0 <strlen>:
   209b0:	2005883a 	mov	r2,r4
   209b4:	10c00007 	ldb	r3,0(r2)
   209b8:	18000226 	beq	r3,zero,209c4 <strlen+0x14>
   209bc:	10800044 	addi	r2,r2,1
   209c0:	003ffc06 	br	209b4 <__alt_data_end+0xfffe09b4>
   209c4:	1105c83a 	sub	r2,r2,r4
   209c8:	f800283a 	ret

000209cc <_write_r>:
   209cc:	defffd04 	addi	sp,sp,-12
   209d0:	dc000015 	stw	r16,0(sp)
   209d4:	040000b4 	movhi	r16,2
   209d8:	dc400115 	stw	r17,4(sp)
   209dc:	840ac004 	addi	r16,r16,11008
   209e0:	2023883a 	mov	r17,r4
   209e4:	2809883a 	mov	r4,r5
   209e8:	300b883a 	mov	r5,r6
   209ec:	380d883a 	mov	r6,r7
   209f0:	dfc00215 	stw	ra,8(sp)
   209f4:	80000015 	stw	zero,0(r16)
   209f8:	0020d7c0 	call	20d7c <write>
   209fc:	00ffffc4 	movi	r3,-1
   20a00:	10c0031e 	bne	r2,r3,20a10 <_write_r+0x44>
   20a04:	80c00017 	ldw	r3,0(r16)
   20a08:	18000126 	beq	r3,zero,20a10 <_write_r+0x44>
   20a0c:	88c00015 	stw	r3,0(r17)
   20a10:	dfc00217 	ldw	ra,8(sp)
   20a14:	dc400117 	ldw	r17,4(sp)
   20a18:	dc000017 	ldw	r16,0(sp)
   20a1c:	dec00304 	addi	sp,sp,12
   20a20:	f800283a 	ret

00020a24 <__divsi3>:
   20a24:	20001b16 	blt	r4,zero,20a94 <__divsi3+0x70>
   20a28:	000f883a 	mov	r7,zero
   20a2c:	28001616 	blt	r5,zero,20a88 <__divsi3+0x64>
   20a30:	200d883a 	mov	r6,r4
   20a34:	29001a2e 	bgeu	r5,r4,20aa0 <__divsi3+0x7c>
   20a38:	00800804 	movi	r2,32
   20a3c:	00c00044 	movi	r3,1
   20a40:	00000106 	br	20a48 <__divsi3+0x24>
   20a44:	10000d26 	beq	r2,zero,20a7c <__divsi3+0x58>
   20a48:	294b883a 	add	r5,r5,r5
   20a4c:	10bfffc4 	addi	r2,r2,-1
   20a50:	18c7883a 	add	r3,r3,r3
   20a54:	293ffb36 	bltu	r5,r4,20a44 <__alt_data_end+0xfffe0a44>
   20a58:	0005883a 	mov	r2,zero
   20a5c:	18000726 	beq	r3,zero,20a7c <__divsi3+0x58>
   20a60:	0005883a 	mov	r2,zero
   20a64:	31400236 	bltu	r6,r5,20a70 <__divsi3+0x4c>
   20a68:	314dc83a 	sub	r6,r6,r5
   20a6c:	10c4b03a 	or	r2,r2,r3
   20a70:	1806d07a 	srli	r3,r3,1
   20a74:	280ad07a 	srli	r5,r5,1
   20a78:	183ffa1e 	bne	r3,zero,20a64 <__alt_data_end+0xfffe0a64>
   20a7c:	38000126 	beq	r7,zero,20a84 <__divsi3+0x60>
   20a80:	0085c83a 	sub	r2,zero,r2
   20a84:	f800283a 	ret
   20a88:	014bc83a 	sub	r5,zero,r5
   20a8c:	39c0005c 	xori	r7,r7,1
   20a90:	003fe706 	br	20a30 <__alt_data_end+0xfffe0a30>
   20a94:	0109c83a 	sub	r4,zero,r4
   20a98:	01c00044 	movi	r7,1
   20a9c:	003fe306 	br	20a2c <__alt_data_end+0xfffe0a2c>
   20aa0:	00c00044 	movi	r3,1
   20aa4:	003fee06 	br	20a60 <__alt_data_end+0xfffe0a60>

00020aa8 <__modsi3>:
   20aa8:	20001716 	blt	r4,zero,20b08 <__modsi3+0x60>
   20aac:	000f883a 	mov	r7,zero
   20ab0:	2005883a 	mov	r2,r4
   20ab4:	28001216 	blt	r5,zero,20b00 <__modsi3+0x58>
   20ab8:	2900162e 	bgeu	r5,r4,20b14 <__modsi3+0x6c>
   20abc:	01800804 	movi	r6,32
   20ac0:	00c00044 	movi	r3,1
   20ac4:	00000106 	br	20acc <__modsi3+0x24>
   20ac8:	30000a26 	beq	r6,zero,20af4 <__modsi3+0x4c>
   20acc:	294b883a 	add	r5,r5,r5
   20ad0:	31bfffc4 	addi	r6,r6,-1
   20ad4:	18c7883a 	add	r3,r3,r3
   20ad8:	293ffb36 	bltu	r5,r4,20ac8 <__alt_data_end+0xfffe0ac8>
   20adc:	18000526 	beq	r3,zero,20af4 <__modsi3+0x4c>
   20ae0:	1806d07a 	srli	r3,r3,1
   20ae4:	11400136 	bltu	r2,r5,20aec <__modsi3+0x44>
   20ae8:	1145c83a 	sub	r2,r2,r5
   20aec:	280ad07a 	srli	r5,r5,1
   20af0:	183ffb1e 	bne	r3,zero,20ae0 <__alt_data_end+0xfffe0ae0>
   20af4:	38000126 	beq	r7,zero,20afc <__modsi3+0x54>
   20af8:	0085c83a 	sub	r2,zero,r2
   20afc:	f800283a 	ret
   20b00:	014bc83a 	sub	r5,zero,r5
   20b04:	003fec06 	br	20ab8 <__alt_data_end+0xfffe0ab8>
   20b08:	0109c83a 	sub	r4,zero,r4
   20b0c:	01c00044 	movi	r7,1
   20b10:	003fe706 	br	20ab0 <__alt_data_end+0xfffe0ab0>
   20b14:	00c00044 	movi	r3,1
   20b18:	003ff106 	br	20ae0 <__alt_data_end+0xfffe0ae0>

00020b1c <__udivsi3>:
   20b1c:	200d883a 	mov	r6,r4
   20b20:	2900152e 	bgeu	r5,r4,20b78 <__udivsi3+0x5c>
   20b24:	28001416 	blt	r5,zero,20b78 <__udivsi3+0x5c>
   20b28:	00800804 	movi	r2,32
   20b2c:	00c00044 	movi	r3,1
   20b30:	00000206 	br	20b3c <__udivsi3+0x20>
   20b34:	10000e26 	beq	r2,zero,20b70 <__udivsi3+0x54>
   20b38:	28000516 	blt	r5,zero,20b50 <__udivsi3+0x34>
   20b3c:	294b883a 	add	r5,r5,r5
   20b40:	10bfffc4 	addi	r2,r2,-1
   20b44:	18c7883a 	add	r3,r3,r3
   20b48:	293ffa36 	bltu	r5,r4,20b34 <__alt_data_end+0xfffe0b34>
   20b4c:	18000826 	beq	r3,zero,20b70 <__udivsi3+0x54>
   20b50:	0005883a 	mov	r2,zero
   20b54:	31400236 	bltu	r6,r5,20b60 <__udivsi3+0x44>
   20b58:	314dc83a 	sub	r6,r6,r5
   20b5c:	10c4b03a 	or	r2,r2,r3
   20b60:	1806d07a 	srli	r3,r3,1
   20b64:	280ad07a 	srli	r5,r5,1
   20b68:	183ffa1e 	bne	r3,zero,20b54 <__alt_data_end+0xfffe0b54>
   20b6c:	f800283a 	ret
   20b70:	0005883a 	mov	r2,zero
   20b74:	f800283a 	ret
   20b78:	00c00044 	movi	r3,1
   20b7c:	003ff406 	br	20b50 <__alt_data_end+0xfffe0b50>

00020b80 <__umodsi3>:
   20b80:	2005883a 	mov	r2,r4
   20b84:	2900122e 	bgeu	r5,r4,20bd0 <__umodsi3+0x50>
   20b88:	28001116 	blt	r5,zero,20bd0 <__umodsi3+0x50>
   20b8c:	01800804 	movi	r6,32
   20b90:	00c00044 	movi	r3,1
   20b94:	00000206 	br	20ba0 <__umodsi3+0x20>
   20b98:	30000c26 	beq	r6,zero,20bcc <__umodsi3+0x4c>
   20b9c:	28000516 	blt	r5,zero,20bb4 <__umodsi3+0x34>
   20ba0:	294b883a 	add	r5,r5,r5
   20ba4:	31bfffc4 	addi	r6,r6,-1
   20ba8:	18c7883a 	add	r3,r3,r3
   20bac:	293ffa36 	bltu	r5,r4,20b98 <__alt_data_end+0xfffe0b98>
   20bb0:	18000626 	beq	r3,zero,20bcc <__umodsi3+0x4c>
   20bb4:	1806d07a 	srli	r3,r3,1
   20bb8:	11400136 	bltu	r2,r5,20bc0 <__umodsi3+0x40>
   20bbc:	1145c83a 	sub	r2,r2,r5
   20bc0:	280ad07a 	srli	r5,r5,1
   20bc4:	183ffb1e 	bne	r3,zero,20bb4 <__alt_data_end+0xfffe0bb4>
   20bc8:	f800283a 	ret
   20bcc:	f800283a 	ret
   20bd0:	00c00044 	movi	r3,1
   20bd4:	003ff706 	br	20bb4 <__alt_data_end+0xfffe0bb4>

00020bd8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
   20bd8:	defffc04 	addi	sp,sp,-16
   20bdc:	df000315 	stw	fp,12(sp)
   20be0:	df000304 	addi	fp,sp,12
   20be4:	e13ffd15 	stw	r4,-12(fp)
   20be8:	e17ffe15 	stw	r5,-8(fp)
   20bec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
   20bf0:	e0fffe17 	ldw	r3,-8(fp)
   20bf4:	e0bffd17 	ldw	r2,-12(fp)
   20bf8:	18800c26 	beq	r3,r2,20c2c <alt_load_section+0x54>
  {
    while( to != end )
   20bfc:	00000806 	br	20c20 <alt_load_section+0x48>
    {
      *to++ = *from++;
   20c00:	e0bffe17 	ldw	r2,-8(fp)
   20c04:	10c00104 	addi	r3,r2,4
   20c08:	e0fffe15 	stw	r3,-8(fp)
   20c0c:	e0fffd17 	ldw	r3,-12(fp)
   20c10:	19000104 	addi	r4,r3,4
   20c14:	e13ffd15 	stw	r4,-12(fp)
   20c18:	18c00017 	ldw	r3,0(r3)
   20c1c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   20c20:	e0fffe17 	ldw	r3,-8(fp)
   20c24:	e0bfff17 	ldw	r2,-4(fp)
   20c28:	18bff51e 	bne	r3,r2,20c00 <__alt_data_end+0xfffe0c00>
    {
      *to++ = *from++;
    }
  }
}
   20c2c:	0001883a 	nop
   20c30:	e037883a 	mov	sp,fp
   20c34:	df000017 	ldw	fp,0(sp)
   20c38:	dec00104 	addi	sp,sp,4
   20c3c:	f800283a 	ret

00020c40 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   20c40:	defffe04 	addi	sp,sp,-8
   20c44:	dfc00115 	stw	ra,4(sp)
   20c48:	df000015 	stw	fp,0(sp)
   20c4c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   20c50:	018000b4 	movhi	r6,2
   20c54:	318a0804 	addi	r6,r6,10272
   20c58:	014000b4 	movhi	r5,2
   20c5c:	29495004 	addi	r5,r5,9536
   20c60:	010000b4 	movhi	r4,2
   20c64:	210a0804 	addi	r4,r4,10272
   20c68:	0020bd80 	call	20bd8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   20c6c:	018000b4 	movhi	r6,2
   20c70:	31809104 	addi	r6,r6,580
   20c74:	014000b4 	movhi	r5,2
   20c78:	29400804 	addi	r5,r5,32
   20c7c:	010000b4 	movhi	r4,2
   20c80:	21000804 	addi	r4,r4,32
   20c84:	0020bd80 	call	20bd8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   20c88:	018000b4 	movhi	r6,2
   20c8c:	31895004 	addi	r6,r6,9536
   20c90:	014000b4 	movhi	r5,2
   20c94:	29494004 	addi	r5,r5,9472
   20c98:	010000b4 	movhi	r4,2
   20c9c:	21094004 	addi	r4,r4,9472
   20ca0:	0020bd80 	call	20bd8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   20ca4:	00213700 	call	21370 <alt_dcache_flush_all>
  alt_icache_flush_all();
   20ca8:	00215840 	call	21584 <alt_icache_flush_all>
}
   20cac:	0001883a 	nop
   20cb0:	e037883a 	mov	sp,fp
   20cb4:	dfc00117 	ldw	ra,4(sp)
   20cb8:	df000017 	ldw	fp,0(sp)
   20cbc:	dec00204 	addi	sp,sp,8
   20cc0:	f800283a 	ret

00020cc4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   20cc4:	defffd04 	addi	sp,sp,-12
   20cc8:	dfc00215 	stw	ra,8(sp)
   20ccc:	df000115 	stw	fp,4(sp)
   20cd0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   20cd4:	0009883a 	mov	r4,zero
   20cd8:	0020ea80 	call	20ea8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
   20cdc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   20ce0:	0020ee00 	call	20ee0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
   20ce4:	018000b4 	movhi	r6,2
   20ce8:	31894304 	addi	r6,r6,9484
   20cec:	014000b4 	movhi	r5,2
   20cf0:	29494304 	addi	r5,r5,9484
   20cf4:	010000b4 	movhi	r4,2
   20cf8:	21094304 	addi	r4,r4,9484
   20cfc:	002191c0 	call	2191c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
   20d00:	00214c40 	call	214c4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
   20d04:	010000b4 	movhi	r4,2
   20d08:	21054904 	addi	r4,r4,5412
   20d0c:	00221800 	call	22180 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
   20d10:	d0a0c417 	ldw	r2,-31984(gp)
   20d14:	d0e0c517 	ldw	r3,-31980(gp)
   20d18:	d120c617 	ldw	r4,-31976(gp)
   20d1c:	200d883a 	mov	r6,r4
   20d20:	180b883a 	mov	r5,r3
   20d24:	1009883a 	mov	r4,r2
   20d28:	00202900 	call	20290 <main>
   20d2c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
   20d30:	01000044 	movi	r4,1
   20d34:	00212a00 	call	212a0 <close>
  exit (result);
   20d38:	e13fff17 	ldw	r4,-4(fp)
   20d3c:	00221940 	call	22194 <exit>

00020d40 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   20d40:	defffe04 	addi	sp,sp,-8
   20d44:	dfc00115 	stw	ra,4(sp)
   20d48:	df000015 	stw	fp,0(sp)
   20d4c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   20d50:	d0a00717 	ldw	r2,-32740(gp)
   20d54:	10000326 	beq	r2,zero,20d64 <alt_get_errno+0x24>
   20d58:	d0a00717 	ldw	r2,-32740(gp)
   20d5c:	103ee83a 	callr	r2
   20d60:	00000106 	br	20d68 <alt_get_errno+0x28>
   20d64:	d0a0c304 	addi	r2,gp,-31988
}
   20d68:	e037883a 	mov	sp,fp
   20d6c:	dfc00117 	ldw	ra,4(sp)
   20d70:	df000017 	ldw	fp,0(sp)
   20d74:	dec00204 	addi	sp,sp,8
   20d78:	f800283a 	ret

00020d7c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
   20d7c:	defff904 	addi	sp,sp,-28
   20d80:	dfc00615 	stw	ra,24(sp)
   20d84:	df000515 	stw	fp,20(sp)
   20d88:	df000504 	addi	fp,sp,20
   20d8c:	e13ffd15 	stw	r4,-12(fp)
   20d90:	e17ffe15 	stw	r5,-8(fp)
   20d94:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
   20d98:	e0bffd17 	ldw	r2,-12(fp)
   20d9c:	10000616 	blt	r2,zero,20db8 <write+0x3c>
   20da0:	e0bffd17 	ldw	r2,-12(fp)
   20da4:	10c00324 	muli	r3,r2,12
   20da8:	008000b4 	movhi	r2,2
   20dac:	10899d04 	addi	r2,r2,9844
   20db0:	1885883a 	add	r2,r3,r2
   20db4:	00000106 	br	20dbc <write+0x40>
   20db8:	0005883a 	mov	r2,zero
   20dbc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
   20dc0:	e0bffb17 	ldw	r2,-20(fp)
   20dc4:	10002126 	beq	r2,zero,20e4c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
   20dc8:	e0bffb17 	ldw	r2,-20(fp)
   20dcc:	10800217 	ldw	r2,8(r2)
   20dd0:	108000cc 	andi	r2,r2,3
   20dd4:	10001826 	beq	r2,zero,20e38 <write+0xbc>
   20dd8:	e0bffb17 	ldw	r2,-20(fp)
   20ddc:	10800017 	ldw	r2,0(r2)
   20de0:	10800617 	ldw	r2,24(r2)
   20de4:	10001426 	beq	r2,zero,20e38 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
   20de8:	e0bffb17 	ldw	r2,-20(fp)
   20dec:	10800017 	ldw	r2,0(r2)
   20df0:	10800617 	ldw	r2,24(r2)
   20df4:	e0ffff17 	ldw	r3,-4(fp)
   20df8:	180d883a 	mov	r6,r3
   20dfc:	e17ffe17 	ldw	r5,-8(fp)
   20e00:	e13ffb17 	ldw	r4,-20(fp)
   20e04:	103ee83a 	callr	r2
   20e08:	e0bffc15 	stw	r2,-16(fp)
   20e0c:	e0bffc17 	ldw	r2,-16(fp)
   20e10:	1000070e 	bge	r2,zero,20e30 <write+0xb4>
      {
        ALT_ERRNO = -rval;
   20e14:	0020d400 	call	20d40 <alt_get_errno>
   20e18:	1007883a 	mov	r3,r2
   20e1c:	e0bffc17 	ldw	r2,-16(fp)
   20e20:	0085c83a 	sub	r2,zero,r2
   20e24:	18800015 	stw	r2,0(r3)
        return -1;
   20e28:	00bfffc4 	movi	r2,-1
   20e2c:	00000c06 	br	20e60 <write+0xe4>
      }
      return rval;
   20e30:	e0bffc17 	ldw	r2,-16(fp)
   20e34:	00000a06 	br	20e60 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
   20e38:	0020d400 	call	20d40 <alt_get_errno>
   20e3c:	1007883a 	mov	r3,r2
   20e40:	00800344 	movi	r2,13
   20e44:	18800015 	stw	r2,0(r3)
   20e48:	00000406 	br	20e5c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
   20e4c:	0020d400 	call	20d40 <alt_get_errno>
   20e50:	1007883a 	mov	r3,r2
   20e54:	00801444 	movi	r2,81
   20e58:	18800015 	stw	r2,0(r3)
  }
  return -1;
   20e5c:	00bfffc4 	movi	r2,-1
}
   20e60:	e037883a 	mov	sp,fp
   20e64:	dfc00117 	ldw	ra,4(sp)
   20e68:	df000017 	ldw	fp,0(sp)
   20e6c:	dec00204 	addi	sp,sp,8
   20e70:	f800283a 	ret

00020e74 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
   20e74:	defffd04 	addi	sp,sp,-12
   20e78:	dfc00215 	stw	ra,8(sp)
   20e7c:	df000115 	stw	fp,4(sp)
   20e80:	df000104 	addi	fp,sp,4
   20e84:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
   20e88:	d1600404 	addi	r5,gp,-32752
   20e8c:	e13fff17 	ldw	r4,-4(fp)
   20e90:	00214200 	call	21420 <alt_dev_llist_insert>
}
   20e94:	e037883a 	mov	sp,fp
   20e98:	dfc00117 	ldw	ra,4(sp)
   20e9c:	df000017 	ldw	fp,0(sp)
   20ea0:	dec00204 	addi	sp,sp,8
   20ea4:	f800283a 	ret

00020ea8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   20ea8:	defffd04 	addi	sp,sp,-12
   20eac:	dfc00215 	stw	ra,8(sp)
   20eb0:	df000115 	stw	fp,4(sp)
   20eb4:	df000104 	addi	fp,sp,4
   20eb8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
   20ebc:	0021df40 	call	21df4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   20ec0:	00800044 	movi	r2,1
   20ec4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   20ec8:	0001883a 	nop
   20ecc:	e037883a 	mov	sp,fp
   20ed0:	dfc00117 	ldw	ra,4(sp)
   20ed4:	df000017 	ldw	fp,0(sp)
   20ed8:	dec00204 	addi	sp,sp,8
   20edc:	f800283a 	ret

00020ee0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
   20ee0:	defffe04 	addi	sp,sp,-8
   20ee4:	dfc00115 	stw	ra,4(sp)
   20ee8:	df000015 	stw	fp,0(sp)
   20eec:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
   20ef0:	01c0fa04 	movi	r7,1000
   20ef4:	01800044 	movi	r6,1
   20ef8:	000b883a 	mov	r5,zero
   20efc:	01000134 	movhi	r4,4
   20f00:	21040004 	addi	r4,r4,4096
   20f04:	00211e80 	call	211e8 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
   20f08:	010000b4 	movhi	r4,2
   20f0c:	21098804 	addi	r4,r4,9760
   20f10:	0020e740 	call	20e74 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
   20f14:	0001883a 	nop
}
   20f18:	0001883a 	nop
   20f1c:	e037883a 	mov	sp,fp
   20f20:	dfc00117 	ldw	ra,4(sp)
   20f24:	df000017 	ldw	fp,0(sp)
   20f28:	dec00204 	addi	sp,sp,8
   20f2c:	f800283a 	ret

00020f30 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
   20f30:	defffa04 	addi	sp,sp,-24
   20f34:	dfc00515 	stw	ra,20(sp)
   20f38:	df000415 	stw	fp,16(sp)
   20f3c:	df000404 	addi	fp,sp,16
   20f40:	e13ffd15 	stw	r4,-12(fp)
   20f44:	e17ffe15 	stw	r5,-8(fp)
   20f48:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20f4c:	e0bffd17 	ldw	r2,-12(fp)
   20f50:	10800017 	ldw	r2,0(r2)
   20f54:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
   20f58:	e0bffc17 	ldw	r2,-16(fp)
   20f5c:	10c00a04 	addi	r3,r2,40
   20f60:	e0bffd17 	ldw	r2,-12(fp)
   20f64:	10800217 	ldw	r2,8(r2)
   20f68:	100f883a 	mov	r7,r2
   20f6c:	e1bfff17 	ldw	r6,-4(fp)
   20f70:	e17ffe17 	ldw	r5,-8(fp)
   20f74:	1809883a 	mov	r4,r3
   20f78:	0020ff00 	call	20ff0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
   20f7c:	e037883a 	mov	sp,fp
   20f80:	dfc00117 	ldw	ra,4(sp)
   20f84:	df000017 	ldw	fp,0(sp)
   20f88:	dec00204 	addi	sp,sp,8
   20f8c:	f800283a 	ret

00020f90 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
   20f90:	defffa04 	addi	sp,sp,-24
   20f94:	dfc00515 	stw	ra,20(sp)
   20f98:	df000415 	stw	fp,16(sp)
   20f9c:	df000404 	addi	fp,sp,16
   20fa0:	e13ffd15 	stw	r4,-12(fp)
   20fa4:	e17ffe15 	stw	r5,-8(fp)
   20fa8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
   20fac:	e0bffd17 	ldw	r2,-12(fp)
   20fb0:	10800017 	ldw	r2,0(r2)
   20fb4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
   20fb8:	e0bffc17 	ldw	r2,-16(fp)
   20fbc:	10c00a04 	addi	r3,r2,40
   20fc0:	e0bffd17 	ldw	r2,-12(fp)
   20fc4:	10800217 	ldw	r2,8(r2)
   20fc8:	100f883a 	mov	r7,r2
   20fcc:	e1bfff17 	ldw	r6,-4(fp)
   20fd0:	e17ffe17 	ldw	r5,-8(fp)
   20fd4:	1809883a 	mov	r4,r3
   20fd8:	00210dc0 	call	210dc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
   20fdc:	e037883a 	mov	sp,fp
   20fe0:	dfc00117 	ldw	ra,4(sp)
   20fe4:	df000017 	ldw	fp,0(sp)
   20fe8:	dec00204 	addi	sp,sp,8
   20fec:	f800283a 	ret

00020ff0 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
   20ff0:	defff704 	addi	sp,sp,-36
   20ff4:	df000815 	stw	fp,32(sp)
   20ff8:	df000804 	addi	fp,sp,32
   20ffc:	e13ffc15 	stw	r4,-16(fp)
   21000:	e17ffd15 	stw	r5,-12(fp)
   21004:	e1bffe15 	stw	r6,-8(fp)
   21008:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   2100c:	e0bffc17 	ldw	r2,-16(fp)
   21010:	10800017 	ldw	r2,0(r2)
   21014:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
   21018:	e0bffd17 	ldw	r2,-12(fp)
   2101c:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
   21020:	e0bffe17 	ldw	r2,-8(fp)
   21024:	e0fffd17 	ldw	r3,-12(fp)
   21028:	1885883a 	add	r2,r3,r2
   2102c:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
   21030:	00001206 	br	2107c <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
   21034:	e0bff917 	ldw	r2,-28(fp)
   21038:	10800037 	ldwio	r2,0(r2)
   2103c:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
   21040:	e0bffb17 	ldw	r2,-20(fp)
   21044:	10a0000c 	andi	r2,r2,32768
   21048:	10000626 	beq	r2,zero,21064 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
   2104c:	e0bff817 	ldw	r2,-32(fp)
   21050:	10c00044 	addi	r3,r2,1
   21054:	e0fff815 	stw	r3,-32(fp)
   21058:	e0fffb17 	ldw	r3,-20(fp)
   2105c:	10c00005 	stb	r3,0(r2)
   21060:	00000606 	br	2107c <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
   21064:	e0fff817 	ldw	r3,-32(fp)
   21068:	e0bffd17 	ldw	r2,-12(fp)
   2106c:	1880071e 	bne	r3,r2,2108c <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
   21070:	e0bfff17 	ldw	r2,-4(fp)
   21074:	1090000c 	andi	r2,r2,16384
   21078:	1000061e 	bne	r2,zero,21094 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
   2107c:	e0fff817 	ldw	r3,-32(fp)
   21080:	e0bffa17 	ldw	r2,-24(fp)
   21084:	18bfeb36 	bltu	r3,r2,21034 <__alt_data_end+0xfffe1034>
   21088:	00000306 	br	21098 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
   2108c:	0001883a 	nop
   21090:	00000106 	br	21098 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
   21094:	0001883a 	nop
    
  }

  if (ptr != buffer)
   21098:	e0fff817 	ldw	r3,-32(fp)
   2109c:	e0bffd17 	ldw	r2,-12(fp)
   210a0:	18800426 	beq	r3,r2,210b4 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
   210a4:	e0fff817 	ldw	r3,-32(fp)
   210a8:	e0bffd17 	ldw	r2,-12(fp)
   210ac:	1885c83a 	sub	r2,r3,r2
   210b0:	00000606 	br	210cc <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
   210b4:	e0bfff17 	ldw	r2,-4(fp)
   210b8:	1090000c 	andi	r2,r2,16384
   210bc:	10000226 	beq	r2,zero,210c8 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
   210c0:	00bffd44 	movi	r2,-11
   210c4:	00000106 	br	210cc <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
   210c8:	00bffec4 	movi	r2,-5
}
   210cc:	e037883a 	mov	sp,fp
   210d0:	df000017 	ldw	fp,0(sp)
   210d4:	dec00104 	addi	sp,sp,4
   210d8:	f800283a 	ret

000210dc <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
   210dc:	defff904 	addi	sp,sp,-28
   210e0:	df000615 	stw	fp,24(sp)
   210e4:	df000604 	addi	fp,sp,24
   210e8:	e13ffc15 	stw	r4,-16(fp)
   210ec:	e17ffd15 	stw	r5,-12(fp)
   210f0:	e1bffe15 	stw	r6,-8(fp)
   210f4:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
   210f8:	e0bffc17 	ldw	r2,-16(fp)
   210fc:	10800017 	ldw	r2,0(r2)
   21100:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
   21104:	e0bffe17 	ldw	r2,-8(fp)
   21108:	e0fffd17 	ldw	r3,-12(fp)
   2110c:	1885883a 	add	r2,r3,r2
   21110:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
   21114:	00000e06 	br	21150 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   21118:	e0bffa17 	ldw	r2,-24(fp)
   2111c:	10800104 	addi	r2,r2,4
   21120:	10800037 	ldwio	r2,0(r2)
   21124:	10bfffec 	andhi	r2,r2,65535
   21128:	10000926 	beq	r2,zero,21150 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   2112c:	e0fffa17 	ldw	r3,-24(fp)
   21130:	e0bffd17 	ldw	r2,-12(fp)
   21134:	11000044 	addi	r4,r2,1
   21138:	e13ffd15 	stw	r4,-12(fp)
   2113c:	10800003 	ldbu	r2,0(r2)
   21140:	10803fcc 	andi	r2,r2,255
   21144:	1080201c 	xori	r2,r2,128
   21148:	10bfe004 	addi	r2,r2,-128
   2114c:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   21150:	e0fffd17 	ldw	r3,-12(fp)
   21154:	e0bffb17 	ldw	r2,-20(fp)
   21158:	18bfef36 	bltu	r3,r2,21118 <__alt_data_end+0xfffe1118>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
   2115c:	e0bffe17 	ldw	r2,-8(fp)
}
   21160:	e037883a 	mov	sp,fp
   21164:	df000017 	ldw	fp,0(sp)
   21168:	dec00104 	addi	sp,sp,4
   2116c:	f800283a 	ret

00021170 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
   21170:	defffa04 	addi	sp,sp,-24
   21174:	dfc00515 	stw	ra,20(sp)
   21178:	df000415 	stw	fp,16(sp)
   2117c:	df000404 	addi	fp,sp,16
   21180:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
   21184:	0007883a 	mov	r3,zero
   21188:	e0bfff17 	ldw	r2,-4(fp)
   2118c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
   21190:	e0bfff17 	ldw	r2,-4(fp)
   21194:	10800104 	addi	r2,r2,4
   21198:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   2119c:	0005303a 	rdctl	r2,status
   211a0:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   211a4:	e0fffd17 	ldw	r3,-12(fp)
   211a8:	00bfff84 	movi	r2,-2
   211ac:	1884703a 	and	r2,r3,r2
   211b0:	1001703a 	wrctl	status,r2
  
  return context;
   211b4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
   211b8:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
   211bc:	0021cec0 	call	21cec <alt_tick>
   211c0:	e0bffc17 	ldw	r2,-16(fp)
   211c4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   211c8:	e0bffe17 	ldw	r2,-8(fp)
   211cc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
   211d0:	0001883a 	nop
   211d4:	e037883a 	mov	sp,fp
   211d8:	dfc00117 	ldw	ra,4(sp)
   211dc:	df000017 	ldw	fp,0(sp)
   211e0:	dec00204 	addi	sp,sp,8
   211e4:	f800283a 	ret

000211e8 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
   211e8:	defff804 	addi	sp,sp,-32
   211ec:	dfc00715 	stw	ra,28(sp)
   211f0:	df000615 	stw	fp,24(sp)
   211f4:	df000604 	addi	fp,sp,24
   211f8:	e13ffc15 	stw	r4,-16(fp)
   211fc:	e17ffd15 	stw	r5,-12(fp)
   21200:	e1bffe15 	stw	r6,-8(fp)
   21204:	e1ffff15 	stw	r7,-4(fp)
   21208:	e0bfff17 	ldw	r2,-4(fp)
   2120c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
   21210:	d0a0c817 	ldw	r2,-31968(gp)
   21214:	1000021e 	bne	r2,zero,21220 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
   21218:	e0bffb17 	ldw	r2,-20(fp)
   2121c:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
   21220:	e0bffc17 	ldw	r2,-16(fp)
   21224:	10800104 	addi	r2,r2,4
   21228:	00c001c4 	movi	r3,7
   2122c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
   21230:	d8000015 	stw	zero,0(sp)
   21234:	e1fffc17 	ldw	r7,-16(fp)
   21238:	018000b4 	movhi	r6,2
   2123c:	31845c04 	addi	r6,r6,4464
   21240:	e17ffe17 	ldw	r5,-8(fp)
   21244:	e13ffd17 	ldw	r4,-12(fp)
   21248:	00215b80 	call	215b8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
   2124c:	0001883a 	nop
   21250:	e037883a 	mov	sp,fp
   21254:	dfc00117 	ldw	ra,4(sp)
   21258:	df000017 	ldw	fp,0(sp)
   2125c:	dec00204 	addi	sp,sp,8
   21260:	f800283a 	ret

00021264 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21264:	defffe04 	addi	sp,sp,-8
   21268:	dfc00115 	stw	ra,4(sp)
   2126c:	df000015 	stw	fp,0(sp)
   21270:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   21274:	d0a00717 	ldw	r2,-32740(gp)
   21278:	10000326 	beq	r2,zero,21288 <alt_get_errno+0x24>
   2127c:	d0a00717 	ldw	r2,-32740(gp)
   21280:	103ee83a 	callr	r2
   21284:	00000106 	br	2128c <alt_get_errno+0x28>
   21288:	d0a0c304 	addi	r2,gp,-31988
}
   2128c:	e037883a 	mov	sp,fp
   21290:	dfc00117 	ldw	ra,4(sp)
   21294:	df000017 	ldw	fp,0(sp)
   21298:	dec00204 	addi	sp,sp,8
   2129c:	f800283a 	ret

000212a0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
   212a0:	defffb04 	addi	sp,sp,-20
   212a4:	dfc00415 	stw	ra,16(sp)
   212a8:	df000315 	stw	fp,12(sp)
   212ac:	df000304 	addi	fp,sp,12
   212b0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
   212b4:	e0bfff17 	ldw	r2,-4(fp)
   212b8:	10000616 	blt	r2,zero,212d4 <close+0x34>
   212bc:	e0bfff17 	ldw	r2,-4(fp)
   212c0:	10c00324 	muli	r3,r2,12
   212c4:	008000b4 	movhi	r2,2
   212c8:	10899d04 	addi	r2,r2,9844
   212cc:	1885883a 	add	r2,r3,r2
   212d0:	00000106 	br	212d8 <close+0x38>
   212d4:	0005883a 	mov	r2,zero
   212d8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
   212dc:	e0bffd17 	ldw	r2,-12(fp)
   212e0:	10001926 	beq	r2,zero,21348 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
   212e4:	e0bffd17 	ldw	r2,-12(fp)
   212e8:	10800017 	ldw	r2,0(r2)
   212ec:	10800417 	ldw	r2,16(r2)
   212f0:	10000626 	beq	r2,zero,2130c <close+0x6c>
   212f4:	e0bffd17 	ldw	r2,-12(fp)
   212f8:	10800017 	ldw	r2,0(r2)
   212fc:	10800417 	ldw	r2,16(r2)
   21300:	e13ffd17 	ldw	r4,-12(fp)
   21304:	103ee83a 	callr	r2
   21308:	00000106 	br	21310 <close+0x70>
   2130c:	0005883a 	mov	r2,zero
   21310:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
   21314:	e13fff17 	ldw	r4,-4(fp)
   21318:	0021bec0 	call	21bec <alt_release_fd>
    if (rval < 0)
   2131c:	e0bffe17 	ldw	r2,-8(fp)
   21320:	1000070e 	bge	r2,zero,21340 <close+0xa0>
    {
      ALT_ERRNO = -rval;
   21324:	00212640 	call	21264 <alt_get_errno>
   21328:	1007883a 	mov	r3,r2
   2132c:	e0bffe17 	ldw	r2,-8(fp)
   21330:	0085c83a 	sub	r2,zero,r2
   21334:	18800015 	stw	r2,0(r3)
      return -1;
   21338:	00bfffc4 	movi	r2,-1
   2133c:	00000706 	br	2135c <close+0xbc>
    }
    return 0;
   21340:	0005883a 	mov	r2,zero
   21344:	00000506 	br	2135c <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
   21348:	00212640 	call	21264 <alt_get_errno>
   2134c:	1007883a 	mov	r3,r2
   21350:	00801444 	movi	r2,81
   21354:	18800015 	stw	r2,0(r3)
    return -1;
   21358:	00bfffc4 	movi	r2,-1
  }
}
   2135c:	e037883a 	mov	sp,fp
   21360:	dfc00117 	ldw	ra,4(sp)
   21364:	df000017 	ldw	fp,0(sp)
   21368:	dec00204 	addi	sp,sp,8
   2136c:	f800283a 	ret

00021370 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
   21370:	defffe04 	addi	sp,sp,-8
   21374:	df000115 	stw	fp,4(sp)
   21378:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2137c:	e03fff15 	stw	zero,-4(fp)
   21380:	00000506 	br	21398 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
   21384:	e0bfff17 	ldw	r2,-4(fp)
   21388:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
   2138c:	e0bfff17 	ldw	r2,-4(fp)
   21390:	10800804 	addi	r2,r2,32
   21394:	e0bfff15 	stw	r2,-4(fp)
   21398:	e0bfff17 	ldw	r2,-4(fp)
   2139c:	10820030 	cmpltui	r2,r2,2048
   213a0:	103ff81e 	bne	r2,zero,21384 <__alt_data_end+0xfffe1384>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   213a4:	0001883a 	nop
   213a8:	e037883a 	mov	sp,fp
   213ac:	df000017 	ldw	fp,0(sp)
   213b0:	dec00104 	addi	sp,sp,4
   213b4:	f800283a 	ret

000213b8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
   213b8:	defffc04 	addi	sp,sp,-16
   213bc:	df000315 	stw	fp,12(sp)
   213c0:	df000304 	addi	fp,sp,12
   213c4:	e13ffd15 	stw	r4,-12(fp)
   213c8:	e17ffe15 	stw	r5,-8(fp)
   213cc:	e1bfff15 	stw	r6,-4(fp)
  return len;
   213d0:	e0bfff17 	ldw	r2,-4(fp)
}
   213d4:	e037883a 	mov	sp,fp
   213d8:	df000017 	ldw	fp,0(sp)
   213dc:	dec00104 	addi	sp,sp,4
   213e0:	f800283a 	ret

000213e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   213e4:	defffe04 	addi	sp,sp,-8
   213e8:	dfc00115 	stw	ra,4(sp)
   213ec:	df000015 	stw	fp,0(sp)
   213f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   213f4:	d0a00717 	ldw	r2,-32740(gp)
   213f8:	10000326 	beq	r2,zero,21408 <alt_get_errno+0x24>
   213fc:	d0a00717 	ldw	r2,-32740(gp)
   21400:	103ee83a 	callr	r2
   21404:	00000106 	br	2140c <alt_get_errno+0x28>
   21408:	d0a0c304 	addi	r2,gp,-31988
}
   2140c:	e037883a 	mov	sp,fp
   21410:	dfc00117 	ldw	ra,4(sp)
   21414:	df000017 	ldw	fp,0(sp)
   21418:	dec00204 	addi	sp,sp,8
   2141c:	f800283a 	ret

00021420 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
   21420:	defffa04 	addi	sp,sp,-24
   21424:	dfc00515 	stw	ra,20(sp)
   21428:	df000415 	stw	fp,16(sp)
   2142c:	df000404 	addi	fp,sp,16
   21430:	e13ffe15 	stw	r4,-8(fp)
   21434:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
   21438:	e0bffe17 	ldw	r2,-8(fp)
   2143c:	10000326 	beq	r2,zero,2144c <alt_dev_llist_insert+0x2c>
   21440:	e0bffe17 	ldw	r2,-8(fp)
   21444:	10800217 	ldw	r2,8(r2)
   21448:	1000061e 	bne	r2,zero,21464 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
   2144c:	00213e40 	call	213e4 <alt_get_errno>
   21450:	1007883a 	mov	r3,r2
   21454:	00800584 	movi	r2,22
   21458:	18800015 	stw	r2,0(r3)
    return -EINVAL;
   2145c:	00bffa84 	movi	r2,-22
   21460:	00001306 	br	214b0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
   21464:	e0bffe17 	ldw	r2,-8(fp)
   21468:	e0ffff17 	ldw	r3,-4(fp)
   2146c:	e0fffc15 	stw	r3,-16(fp)
   21470:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
   21474:	e0bffd17 	ldw	r2,-12(fp)
   21478:	e0fffc17 	ldw	r3,-16(fp)
   2147c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
   21480:	e0bffc17 	ldw	r2,-16(fp)
   21484:	10c00017 	ldw	r3,0(r2)
   21488:	e0bffd17 	ldw	r2,-12(fp)
   2148c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
   21490:	e0bffc17 	ldw	r2,-16(fp)
   21494:	10800017 	ldw	r2,0(r2)
   21498:	e0fffd17 	ldw	r3,-12(fp)
   2149c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
   214a0:	e0bffc17 	ldw	r2,-16(fp)
   214a4:	e0fffd17 	ldw	r3,-12(fp)
   214a8:	10c00015 	stw	r3,0(r2)

  return 0;  
   214ac:	0005883a 	mov	r2,zero
}
   214b0:	e037883a 	mov	sp,fp
   214b4:	dfc00117 	ldw	ra,4(sp)
   214b8:	df000017 	ldw	fp,0(sp)
   214bc:	dec00204 	addi	sp,sp,8
   214c0:	f800283a 	ret

000214c4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
   214c4:	defffd04 	addi	sp,sp,-12
   214c8:	dfc00215 	stw	ra,8(sp)
   214cc:	df000115 	stw	fp,4(sp)
   214d0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   214d4:	008000b4 	movhi	r2,2
   214d8:	10893f04 	addi	r2,r2,9468
   214dc:	e0bfff15 	stw	r2,-4(fp)
   214e0:	00000606 	br	214fc <_do_ctors+0x38>
        (*ctor) (); 
   214e4:	e0bfff17 	ldw	r2,-4(fp)
   214e8:	10800017 	ldw	r2,0(r2)
   214ec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
   214f0:	e0bfff17 	ldw	r2,-4(fp)
   214f4:	10bfff04 	addi	r2,r2,-4
   214f8:	e0bfff15 	stw	r2,-4(fp)
   214fc:	e0ffff17 	ldw	r3,-4(fp)
   21500:	008000b4 	movhi	r2,2
   21504:	10894004 	addi	r2,r2,9472
   21508:	18bff62e 	bgeu	r3,r2,214e4 <__alt_data_end+0xfffe14e4>
        (*ctor) (); 
}
   2150c:	0001883a 	nop
   21510:	e037883a 	mov	sp,fp
   21514:	dfc00117 	ldw	ra,4(sp)
   21518:	df000017 	ldw	fp,0(sp)
   2151c:	dec00204 	addi	sp,sp,8
   21520:	f800283a 	ret

00021524 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
   21524:	defffd04 	addi	sp,sp,-12
   21528:	dfc00215 	stw	ra,8(sp)
   2152c:	df000115 	stw	fp,4(sp)
   21530:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21534:	008000b4 	movhi	r2,2
   21538:	10893f04 	addi	r2,r2,9468
   2153c:	e0bfff15 	stw	r2,-4(fp)
   21540:	00000606 	br	2155c <_do_dtors+0x38>
        (*dtor) (); 
   21544:	e0bfff17 	ldw	r2,-4(fp)
   21548:	10800017 	ldw	r2,0(r2)
   2154c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
   21550:	e0bfff17 	ldw	r2,-4(fp)
   21554:	10bfff04 	addi	r2,r2,-4
   21558:	e0bfff15 	stw	r2,-4(fp)
   2155c:	e0ffff17 	ldw	r3,-4(fp)
   21560:	008000b4 	movhi	r2,2
   21564:	10894004 	addi	r2,r2,9472
   21568:	18bff62e 	bgeu	r3,r2,21544 <__alt_data_end+0xfffe1544>
        (*dtor) (); 
}
   2156c:	0001883a 	nop
   21570:	e037883a 	mov	sp,fp
   21574:	dfc00117 	ldw	ra,4(sp)
   21578:	df000017 	ldw	fp,0(sp)
   2157c:	dec00204 	addi	sp,sp,8
   21580:	f800283a 	ret

00021584 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
   21584:	defffe04 	addi	sp,sp,-8
   21588:	dfc00115 	stw	ra,4(sp)
   2158c:	df000015 	stw	fp,0(sp)
   21590:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
   21594:	01440004 	movi	r5,4096
   21598:	0009883a 	mov	r4,zero
   2159c:	00220540 	call	22054 <alt_icache_flush>
#endif
}
   215a0:	0001883a 	nop
   215a4:	e037883a 	mov	sp,fp
   215a8:	dfc00117 	ldw	ra,4(sp)
   215ac:	df000017 	ldw	fp,0(sp)
   215b0:	dec00204 	addi	sp,sp,8
   215b4:	f800283a 	ret

000215b8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   215b8:	defff904 	addi	sp,sp,-28
   215bc:	dfc00615 	stw	ra,24(sp)
   215c0:	df000515 	stw	fp,20(sp)
   215c4:	df000504 	addi	fp,sp,20
   215c8:	e13ffc15 	stw	r4,-16(fp)
   215cc:	e17ffd15 	stw	r5,-12(fp)
   215d0:	e1bffe15 	stw	r6,-8(fp)
   215d4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
   215d8:	e0800217 	ldw	r2,8(fp)
   215dc:	d8800015 	stw	r2,0(sp)
   215e0:	e1ffff17 	ldw	r7,-4(fp)
   215e4:	e1bffe17 	ldw	r6,-8(fp)
   215e8:	e17ffd17 	ldw	r5,-12(fp)
   215ec:	e13ffc17 	ldw	r4,-16(fp)
   215f0:	00217680 	call	21768 <alt_iic_isr_register>
}  
   215f4:	e037883a 	mov	sp,fp
   215f8:	dfc00117 	ldw	ra,4(sp)
   215fc:	df000017 	ldw	fp,0(sp)
   21600:	dec00204 	addi	sp,sp,8
   21604:	f800283a 	ret

00021608 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
   21608:	defff904 	addi	sp,sp,-28
   2160c:	df000615 	stw	fp,24(sp)
   21610:	df000604 	addi	fp,sp,24
   21614:	e13ffe15 	stw	r4,-8(fp)
   21618:	e17fff15 	stw	r5,-4(fp)
   2161c:	e0bfff17 	ldw	r2,-4(fp)
   21620:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21624:	0005303a 	rdctl	r2,status
   21628:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   2162c:	e0fffb17 	ldw	r3,-20(fp)
   21630:	00bfff84 	movi	r2,-2
   21634:	1884703a 	and	r2,r3,r2
   21638:	1001703a 	wrctl	status,r2
  
  return context;
   2163c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   21640:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
   21644:	00c00044 	movi	r3,1
   21648:	e0bffa17 	ldw	r2,-24(fp)
   2164c:	1884983a 	sll	r2,r3,r2
   21650:	1007883a 	mov	r3,r2
   21654:	d0a0c717 	ldw	r2,-31972(gp)
   21658:	1884b03a 	or	r2,r3,r2
   2165c:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   21660:	d0a0c717 	ldw	r2,-31972(gp)
   21664:	100170fa 	wrctl	ienable,r2
   21668:	e0bffc17 	ldw	r2,-16(fp)
   2166c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21670:	e0bffd17 	ldw	r2,-12(fp)
   21674:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21678:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
   2167c:	0001883a 	nop
}
   21680:	e037883a 	mov	sp,fp
   21684:	df000017 	ldw	fp,0(sp)
   21688:	dec00104 	addi	sp,sp,4
   2168c:	f800283a 	ret

00021690 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
   21690:	defff904 	addi	sp,sp,-28
   21694:	df000615 	stw	fp,24(sp)
   21698:	df000604 	addi	fp,sp,24
   2169c:	e13ffe15 	stw	r4,-8(fp)
   216a0:	e17fff15 	stw	r5,-4(fp)
   216a4:	e0bfff17 	ldw	r2,-4(fp)
   216a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   216ac:	0005303a 	rdctl	r2,status
   216b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   216b4:	e0fffb17 	ldw	r3,-20(fp)
   216b8:	00bfff84 	movi	r2,-2
   216bc:	1884703a 	and	r2,r3,r2
   216c0:	1001703a 	wrctl	status,r2
  
  return context;
   216c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
   216c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
   216cc:	00c00044 	movi	r3,1
   216d0:	e0bffa17 	ldw	r2,-24(fp)
   216d4:	1884983a 	sll	r2,r3,r2
   216d8:	0084303a 	nor	r2,zero,r2
   216dc:	1007883a 	mov	r3,r2
   216e0:	d0a0c717 	ldw	r2,-31972(gp)
   216e4:	1884703a 	and	r2,r3,r2
   216e8:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
   216ec:	d0a0c717 	ldw	r2,-31972(gp)
   216f0:	100170fa 	wrctl	ienable,r2
   216f4:	e0bffc17 	ldw	r2,-16(fp)
   216f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   216fc:	e0bffd17 	ldw	r2,-12(fp)
   21700:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
   21704:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
   21708:	0001883a 	nop
}
   2170c:	e037883a 	mov	sp,fp
   21710:	df000017 	ldw	fp,0(sp)
   21714:	dec00104 	addi	sp,sp,4
   21718:	f800283a 	ret

0002171c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
   2171c:	defffc04 	addi	sp,sp,-16
   21720:	df000315 	stw	fp,12(sp)
   21724:	df000304 	addi	fp,sp,12
   21728:	e13ffe15 	stw	r4,-8(fp)
   2172c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
   21730:	000530fa 	rdctl	r2,ienable
   21734:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
   21738:	00c00044 	movi	r3,1
   2173c:	e0bfff17 	ldw	r2,-4(fp)
   21740:	1884983a 	sll	r2,r3,r2
   21744:	1007883a 	mov	r3,r2
   21748:	e0bffd17 	ldw	r2,-12(fp)
   2174c:	1884703a 	and	r2,r3,r2
   21750:	1004c03a 	cmpne	r2,r2,zero
   21754:	10803fcc 	andi	r2,r2,255
}
   21758:	e037883a 	mov	sp,fp
   2175c:	df000017 	ldw	fp,0(sp)
   21760:	dec00104 	addi	sp,sp,4
   21764:	f800283a 	ret

00021768 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
   21768:	defff504 	addi	sp,sp,-44
   2176c:	dfc00a15 	stw	ra,40(sp)
   21770:	df000915 	stw	fp,36(sp)
   21774:	df000904 	addi	fp,sp,36
   21778:	e13ffc15 	stw	r4,-16(fp)
   2177c:	e17ffd15 	stw	r5,-12(fp)
   21780:	e1bffe15 	stw	r6,-8(fp)
   21784:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
   21788:	00bffa84 	movi	r2,-22
   2178c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
   21790:	e0bffd17 	ldw	r2,-12(fp)
   21794:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
   21798:	e0bff817 	ldw	r2,-32(fp)
   2179c:	10800808 	cmpgei	r2,r2,32
   217a0:	1000271e 	bne	r2,zero,21840 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   217a4:	0005303a 	rdctl	r2,status
   217a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   217ac:	e0fffb17 	ldw	r3,-20(fp)
   217b0:	00bfff84 	movi	r2,-2
   217b4:	1884703a 	and	r2,r3,r2
   217b8:	1001703a 	wrctl	status,r2
  
  return context;
   217bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
   217c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
   217c4:	008000b4 	movhi	r2,2
   217c8:	108ac804 	addi	r2,r2,11040
   217cc:	e0fff817 	ldw	r3,-32(fp)
   217d0:	180690fa 	slli	r3,r3,3
   217d4:	10c5883a 	add	r2,r2,r3
   217d8:	e0fffe17 	ldw	r3,-8(fp)
   217dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
   217e0:	008000b4 	movhi	r2,2
   217e4:	108ac804 	addi	r2,r2,11040
   217e8:	e0fff817 	ldw	r3,-32(fp)
   217ec:	180690fa 	slli	r3,r3,3
   217f0:	10c5883a 	add	r2,r2,r3
   217f4:	10800104 	addi	r2,r2,4
   217f8:	e0ffff17 	ldw	r3,-4(fp)
   217fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
   21800:	e0bffe17 	ldw	r2,-8(fp)
   21804:	10000526 	beq	r2,zero,2181c <alt_iic_isr_register+0xb4>
   21808:	e0bff817 	ldw	r2,-32(fp)
   2180c:	100b883a 	mov	r5,r2
   21810:	e13ffc17 	ldw	r4,-16(fp)
   21814:	00216080 	call	21608 <alt_ic_irq_enable>
   21818:	00000406 	br	2182c <alt_iic_isr_register+0xc4>
   2181c:	e0bff817 	ldw	r2,-32(fp)
   21820:	100b883a 	mov	r5,r2
   21824:	e13ffc17 	ldw	r4,-16(fp)
   21828:	00216900 	call	21690 <alt_ic_irq_disable>
   2182c:	e0bff715 	stw	r2,-36(fp)
   21830:	e0bffa17 	ldw	r2,-24(fp)
   21834:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21838:	e0bff917 	ldw	r2,-28(fp)
   2183c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
   21840:	e0bff717 	ldw	r2,-36(fp)
}
   21844:	e037883a 	mov	sp,fp
   21848:	dfc00117 	ldw	ra,4(sp)
   2184c:	df000017 	ldw	fp,0(sp)
   21850:	dec00204 	addi	sp,sp,8
   21854:	f800283a 	ret

00021858 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
   21858:	defff904 	addi	sp,sp,-28
   2185c:	dfc00615 	stw	ra,24(sp)
   21860:	df000515 	stw	fp,20(sp)
   21864:	df000504 	addi	fp,sp,20
   21868:	e13ffc15 	stw	r4,-16(fp)
   2186c:	e17ffd15 	stw	r5,-12(fp)
   21870:	e1bffe15 	stw	r6,-8(fp)
   21874:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
   21878:	e1bfff17 	ldw	r6,-4(fp)
   2187c:	e17ffe17 	ldw	r5,-8(fp)
   21880:	e13ffd17 	ldw	r4,-12(fp)
   21884:	0021a980 	call	21a98 <open>
   21888:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
   2188c:	e0bffb17 	ldw	r2,-20(fp)
   21890:	10001c16 	blt	r2,zero,21904 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
   21894:	008000b4 	movhi	r2,2
   21898:	10899d04 	addi	r2,r2,9844
   2189c:	e0fffb17 	ldw	r3,-20(fp)
   218a0:	18c00324 	muli	r3,r3,12
   218a4:	10c5883a 	add	r2,r2,r3
   218a8:	10c00017 	ldw	r3,0(r2)
   218ac:	e0bffc17 	ldw	r2,-16(fp)
   218b0:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
   218b4:	008000b4 	movhi	r2,2
   218b8:	10899d04 	addi	r2,r2,9844
   218bc:	e0fffb17 	ldw	r3,-20(fp)
   218c0:	18c00324 	muli	r3,r3,12
   218c4:	10c5883a 	add	r2,r2,r3
   218c8:	10800104 	addi	r2,r2,4
   218cc:	10c00017 	ldw	r3,0(r2)
   218d0:	e0bffc17 	ldw	r2,-16(fp)
   218d4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
   218d8:	008000b4 	movhi	r2,2
   218dc:	10899d04 	addi	r2,r2,9844
   218e0:	e0fffb17 	ldw	r3,-20(fp)
   218e4:	18c00324 	muli	r3,r3,12
   218e8:	10c5883a 	add	r2,r2,r3
   218ec:	10800204 	addi	r2,r2,8
   218f0:	10c00017 	ldw	r3,0(r2)
   218f4:	e0bffc17 	ldw	r2,-16(fp)
   218f8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
   218fc:	e13ffb17 	ldw	r4,-20(fp)
   21900:	0021bec0 	call	21bec <alt_release_fd>
  }
} 
   21904:	0001883a 	nop
   21908:	e037883a 	mov	sp,fp
   2190c:	dfc00117 	ldw	ra,4(sp)
   21910:	df000017 	ldw	fp,0(sp)
   21914:	dec00204 	addi	sp,sp,8
   21918:	f800283a 	ret

0002191c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
   2191c:	defffb04 	addi	sp,sp,-20
   21920:	dfc00415 	stw	ra,16(sp)
   21924:	df000315 	stw	fp,12(sp)
   21928:	df000304 	addi	fp,sp,12
   2192c:	e13ffd15 	stw	r4,-12(fp)
   21930:	e17ffe15 	stw	r5,-8(fp)
   21934:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
   21938:	01c07fc4 	movi	r7,511
   2193c:	01800044 	movi	r6,1
   21940:	e17ffd17 	ldw	r5,-12(fp)
   21944:	010000b4 	movhi	r4,2
   21948:	2109a004 	addi	r4,r4,9856
   2194c:	00218580 	call	21858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
   21950:	01c07fc4 	movi	r7,511
   21954:	000d883a 	mov	r6,zero
   21958:	e17ffe17 	ldw	r5,-8(fp)
   2195c:	010000b4 	movhi	r4,2
   21960:	21099d04 	addi	r4,r4,9844
   21964:	00218580 	call	21858 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
   21968:	01c07fc4 	movi	r7,511
   2196c:	01800044 	movi	r6,1
   21970:	e17fff17 	ldw	r5,-4(fp)
   21974:	010000b4 	movhi	r4,2
   21978:	2109a304 	addi	r4,r4,9868
   2197c:	00218580 	call	21858 <alt_open_fd>
}  
   21980:	0001883a 	nop
   21984:	e037883a 	mov	sp,fp
   21988:	dfc00117 	ldw	ra,4(sp)
   2198c:	df000017 	ldw	fp,0(sp)
   21990:	dec00204 	addi	sp,sp,8
   21994:	f800283a 	ret

00021998 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
   21998:	defffe04 	addi	sp,sp,-8
   2199c:	dfc00115 	stw	ra,4(sp)
   219a0:	df000015 	stw	fp,0(sp)
   219a4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
   219a8:	d0a00717 	ldw	r2,-32740(gp)
   219ac:	10000326 	beq	r2,zero,219bc <alt_get_errno+0x24>
   219b0:	d0a00717 	ldw	r2,-32740(gp)
   219b4:	103ee83a 	callr	r2
   219b8:	00000106 	br	219c0 <alt_get_errno+0x28>
   219bc:	d0a0c304 	addi	r2,gp,-31988
}
   219c0:	e037883a 	mov	sp,fp
   219c4:	dfc00117 	ldw	ra,4(sp)
   219c8:	df000017 	ldw	fp,0(sp)
   219cc:	dec00204 	addi	sp,sp,8
   219d0:	f800283a 	ret

000219d4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
   219d4:	defffd04 	addi	sp,sp,-12
   219d8:	df000215 	stw	fp,8(sp)
   219dc:	df000204 	addi	fp,sp,8
   219e0:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
   219e4:	e0bfff17 	ldw	r2,-4(fp)
   219e8:	10800217 	ldw	r2,8(r2)
   219ec:	10d00034 	orhi	r3,r2,16384
   219f0:	e0bfff17 	ldw	r2,-4(fp)
   219f4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   219f8:	e03ffe15 	stw	zero,-8(fp)
   219fc:	00001d06 	br	21a74 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21a00:	008000b4 	movhi	r2,2
   21a04:	10899d04 	addi	r2,r2,9844
   21a08:	e0fffe17 	ldw	r3,-8(fp)
   21a0c:	18c00324 	muli	r3,r3,12
   21a10:	10c5883a 	add	r2,r2,r3
   21a14:	10c00017 	ldw	r3,0(r2)
   21a18:	e0bfff17 	ldw	r2,-4(fp)
   21a1c:	10800017 	ldw	r2,0(r2)
   21a20:	1880111e 	bne	r3,r2,21a68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21a24:	008000b4 	movhi	r2,2
   21a28:	10899d04 	addi	r2,r2,9844
   21a2c:	e0fffe17 	ldw	r3,-8(fp)
   21a30:	18c00324 	muli	r3,r3,12
   21a34:	10c5883a 	add	r2,r2,r3
   21a38:	10800204 	addi	r2,r2,8
   21a3c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
   21a40:	1000090e 	bge	r2,zero,21a68 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
   21a44:	e0bffe17 	ldw	r2,-8(fp)
   21a48:	10c00324 	muli	r3,r2,12
   21a4c:	008000b4 	movhi	r2,2
   21a50:	10899d04 	addi	r2,r2,9844
   21a54:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
   21a58:	e0bfff17 	ldw	r2,-4(fp)
   21a5c:	18800226 	beq	r3,r2,21a68 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
   21a60:	00bffcc4 	movi	r2,-13
   21a64:	00000806 	br	21a88 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
   21a68:	e0bffe17 	ldw	r2,-8(fp)
   21a6c:	10800044 	addi	r2,r2,1
   21a70:	e0bffe15 	stw	r2,-8(fp)
   21a74:	d0a00617 	ldw	r2,-32744(gp)
   21a78:	1007883a 	mov	r3,r2
   21a7c:	e0bffe17 	ldw	r2,-8(fp)
   21a80:	18bfdf2e 	bgeu	r3,r2,21a00 <__alt_data_end+0xfffe1a00>
    }
  }
  
  /* The device is not locked */
 
  return 0;
   21a84:	0005883a 	mov	r2,zero
}
   21a88:	e037883a 	mov	sp,fp
   21a8c:	df000017 	ldw	fp,0(sp)
   21a90:	dec00104 	addi	sp,sp,4
   21a94:	f800283a 	ret

00021a98 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
   21a98:	defff604 	addi	sp,sp,-40
   21a9c:	dfc00915 	stw	ra,36(sp)
   21aa0:	df000815 	stw	fp,32(sp)
   21aa4:	df000804 	addi	fp,sp,32
   21aa8:	e13ffd15 	stw	r4,-12(fp)
   21aac:	e17ffe15 	stw	r5,-8(fp)
   21ab0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
   21ab4:	00bfffc4 	movi	r2,-1
   21ab8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
   21abc:	00bffb44 	movi	r2,-19
   21ac0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
   21ac4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
   21ac8:	d1600404 	addi	r5,gp,-32752
   21acc:	e13ffd17 	ldw	r4,-12(fp)
   21ad0:	0021e180 	call	21e18 <alt_find_dev>
   21ad4:	e0bff815 	stw	r2,-32(fp)
   21ad8:	e0bff817 	ldw	r2,-32(fp)
   21adc:	1000051e 	bne	r2,zero,21af4 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
   21ae0:	e13ffd17 	ldw	r4,-12(fp)
   21ae4:	0021ea80 	call	21ea8 <alt_find_file>
   21ae8:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
   21aec:	00800044 	movi	r2,1
   21af0:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
   21af4:	e0bff817 	ldw	r2,-32(fp)
   21af8:	10002926 	beq	r2,zero,21ba0 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
   21afc:	e13ff817 	ldw	r4,-32(fp)
   21b00:	0021fb00 	call	21fb0 <alt_get_fd>
   21b04:	e0bff915 	stw	r2,-28(fp)
   21b08:	e0bff917 	ldw	r2,-28(fp)
   21b0c:	1000030e 	bge	r2,zero,21b1c <open+0x84>
    {
      status = index;
   21b10:	e0bff917 	ldw	r2,-28(fp)
   21b14:	e0bffa15 	stw	r2,-24(fp)
   21b18:	00002306 	br	21ba8 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
   21b1c:	e0bff917 	ldw	r2,-28(fp)
   21b20:	10c00324 	muli	r3,r2,12
   21b24:	008000b4 	movhi	r2,2
   21b28:	10899d04 	addi	r2,r2,9844
   21b2c:	1885883a 	add	r2,r3,r2
   21b30:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
   21b34:	e0fffe17 	ldw	r3,-8(fp)
   21b38:	00900034 	movhi	r2,16384
   21b3c:	10bfffc4 	addi	r2,r2,-1
   21b40:	1886703a 	and	r3,r3,r2
   21b44:	e0bffc17 	ldw	r2,-16(fp)
   21b48:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
   21b4c:	e0bffb17 	ldw	r2,-20(fp)
   21b50:	1000051e 	bne	r2,zero,21b68 <open+0xd0>
   21b54:	e13ffc17 	ldw	r4,-16(fp)
   21b58:	00219d40 	call	219d4 <alt_file_locked>
   21b5c:	e0bffa15 	stw	r2,-24(fp)
   21b60:	e0bffa17 	ldw	r2,-24(fp)
   21b64:	10001016 	blt	r2,zero,21ba8 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
   21b68:	e0bff817 	ldw	r2,-32(fp)
   21b6c:	10800317 	ldw	r2,12(r2)
   21b70:	10000826 	beq	r2,zero,21b94 <open+0xfc>
   21b74:	e0bff817 	ldw	r2,-32(fp)
   21b78:	10800317 	ldw	r2,12(r2)
   21b7c:	e1ffff17 	ldw	r7,-4(fp)
   21b80:	e1bffe17 	ldw	r6,-8(fp)
   21b84:	e17ffd17 	ldw	r5,-12(fp)
   21b88:	e13ffc17 	ldw	r4,-16(fp)
   21b8c:	103ee83a 	callr	r2
   21b90:	00000106 	br	21b98 <open+0x100>
   21b94:	0005883a 	mov	r2,zero
   21b98:	e0bffa15 	stw	r2,-24(fp)
   21b9c:	00000206 	br	21ba8 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
   21ba0:	00bffb44 	movi	r2,-19
   21ba4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
   21ba8:	e0bffa17 	ldw	r2,-24(fp)
   21bac:	1000090e 	bge	r2,zero,21bd4 <open+0x13c>
  {
    alt_release_fd (index);  
   21bb0:	e13ff917 	ldw	r4,-28(fp)
   21bb4:	0021bec0 	call	21bec <alt_release_fd>
    ALT_ERRNO = -status;
   21bb8:	00219980 	call	21998 <alt_get_errno>
   21bbc:	1007883a 	mov	r3,r2
   21bc0:	e0bffa17 	ldw	r2,-24(fp)
   21bc4:	0085c83a 	sub	r2,zero,r2
   21bc8:	18800015 	stw	r2,0(r3)
    return -1;
   21bcc:	00bfffc4 	movi	r2,-1
   21bd0:	00000106 	br	21bd8 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
   21bd4:	e0bff917 	ldw	r2,-28(fp)
}
   21bd8:	e037883a 	mov	sp,fp
   21bdc:	dfc00117 	ldw	ra,4(sp)
   21be0:	df000017 	ldw	fp,0(sp)
   21be4:	dec00204 	addi	sp,sp,8
   21be8:	f800283a 	ret

00021bec <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
   21bec:	defffe04 	addi	sp,sp,-8
   21bf0:	df000115 	stw	fp,4(sp)
   21bf4:	df000104 	addi	fp,sp,4
   21bf8:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
   21bfc:	e0bfff17 	ldw	r2,-4(fp)
   21c00:	108000d0 	cmplti	r2,r2,3
   21c04:	10000d1e 	bne	r2,zero,21c3c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
   21c08:	008000b4 	movhi	r2,2
   21c0c:	10899d04 	addi	r2,r2,9844
   21c10:	e0ffff17 	ldw	r3,-4(fp)
   21c14:	18c00324 	muli	r3,r3,12
   21c18:	10c5883a 	add	r2,r2,r3
   21c1c:	10800204 	addi	r2,r2,8
   21c20:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
   21c24:	008000b4 	movhi	r2,2
   21c28:	10899d04 	addi	r2,r2,9844
   21c2c:	e0ffff17 	ldw	r3,-4(fp)
   21c30:	18c00324 	muli	r3,r3,12
   21c34:	10c5883a 	add	r2,r2,r3
   21c38:	10000015 	stw	zero,0(r2)
  }
}
   21c3c:	0001883a 	nop
   21c40:	e037883a 	mov	sp,fp
   21c44:	df000017 	ldw	fp,0(sp)
   21c48:	dec00104 	addi	sp,sp,4
   21c4c:	f800283a 	ret

00021c50 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
   21c50:	defffa04 	addi	sp,sp,-24
   21c54:	df000515 	stw	fp,20(sp)
   21c58:	df000504 	addi	fp,sp,20
   21c5c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
   21c60:	0005303a 	rdctl	r2,status
   21c64:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
   21c68:	e0fffc17 	ldw	r3,-16(fp)
   21c6c:	00bfff84 	movi	r2,-2
   21c70:	1884703a 	and	r2,r3,r2
   21c74:	1001703a 	wrctl	status,r2
  
  return context;
   21c78:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
   21c7c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
   21c80:	e0bfff17 	ldw	r2,-4(fp)
   21c84:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
   21c88:	e0bffd17 	ldw	r2,-12(fp)
   21c8c:	10800017 	ldw	r2,0(r2)
   21c90:	e0fffd17 	ldw	r3,-12(fp)
   21c94:	18c00117 	ldw	r3,4(r3)
   21c98:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
   21c9c:	e0bffd17 	ldw	r2,-12(fp)
   21ca0:	10800117 	ldw	r2,4(r2)
   21ca4:	e0fffd17 	ldw	r3,-12(fp)
   21ca8:	18c00017 	ldw	r3,0(r3)
   21cac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
   21cb0:	e0bffd17 	ldw	r2,-12(fp)
   21cb4:	e0fffd17 	ldw	r3,-12(fp)
   21cb8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
   21cbc:	e0bffd17 	ldw	r2,-12(fp)
   21cc0:	e0fffd17 	ldw	r3,-12(fp)
   21cc4:	10c00015 	stw	r3,0(r2)
   21cc8:	e0bffb17 	ldw	r2,-20(fp)
   21ccc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
   21cd0:	e0bffe17 	ldw	r2,-8(fp)
   21cd4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
   21cd8:	0001883a 	nop
   21cdc:	e037883a 	mov	sp,fp
   21ce0:	df000017 	ldw	fp,0(sp)
   21ce4:	dec00104 	addi	sp,sp,4
   21ce8:	f800283a 	ret

00021cec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
   21cec:	defffb04 	addi	sp,sp,-20
   21cf0:	dfc00415 	stw	ra,16(sp)
   21cf4:	df000315 	stw	fp,12(sp)
   21cf8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
   21cfc:	d0a00917 	ldw	r2,-32732(gp)
   21d00:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
   21d04:	d0a0c917 	ldw	r2,-31964(gp)
   21d08:	10800044 	addi	r2,r2,1
   21d0c:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   21d10:	00002e06 	br	21dcc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
   21d14:	e0bffd17 	ldw	r2,-12(fp)
   21d18:	10800017 	ldw	r2,0(r2)
   21d1c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
   21d20:	e0bffd17 	ldw	r2,-12(fp)
   21d24:	10800403 	ldbu	r2,16(r2)
   21d28:	10803fcc 	andi	r2,r2,255
   21d2c:	10000426 	beq	r2,zero,21d40 <alt_tick+0x54>
   21d30:	d0a0c917 	ldw	r2,-31964(gp)
   21d34:	1000021e 	bne	r2,zero,21d40 <alt_tick+0x54>
    {
      alarm->rollover = 0;
   21d38:	e0bffd17 	ldw	r2,-12(fp)
   21d3c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
   21d40:	e0bffd17 	ldw	r2,-12(fp)
   21d44:	10800217 	ldw	r2,8(r2)
   21d48:	d0e0c917 	ldw	r3,-31964(gp)
   21d4c:	18801d36 	bltu	r3,r2,21dc4 <alt_tick+0xd8>
   21d50:	e0bffd17 	ldw	r2,-12(fp)
   21d54:	10800403 	ldbu	r2,16(r2)
   21d58:	10803fcc 	andi	r2,r2,255
   21d5c:	1000191e 	bne	r2,zero,21dc4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
   21d60:	e0bffd17 	ldw	r2,-12(fp)
   21d64:	10800317 	ldw	r2,12(r2)
   21d68:	e0fffd17 	ldw	r3,-12(fp)
   21d6c:	18c00517 	ldw	r3,20(r3)
   21d70:	1809883a 	mov	r4,r3
   21d74:	103ee83a 	callr	r2
   21d78:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
   21d7c:	e0bfff17 	ldw	r2,-4(fp)
   21d80:	1000031e 	bne	r2,zero,21d90 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
   21d84:	e13ffd17 	ldw	r4,-12(fp)
   21d88:	0021c500 	call	21c50 <alt_alarm_stop>
   21d8c:	00000d06 	br	21dc4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
   21d90:	e0bffd17 	ldw	r2,-12(fp)
   21d94:	10c00217 	ldw	r3,8(r2)
   21d98:	e0bfff17 	ldw	r2,-4(fp)
   21d9c:	1887883a 	add	r3,r3,r2
   21da0:	e0bffd17 	ldw	r2,-12(fp)
   21da4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
   21da8:	e0bffd17 	ldw	r2,-12(fp)
   21dac:	10c00217 	ldw	r3,8(r2)
   21db0:	d0a0c917 	ldw	r2,-31964(gp)
   21db4:	1880032e 	bgeu	r3,r2,21dc4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
   21db8:	e0bffd17 	ldw	r2,-12(fp)
   21dbc:	00c00044 	movi	r3,1
   21dc0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
   21dc4:	e0bffe17 	ldw	r2,-8(fp)
   21dc8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
   21dcc:	e0fffd17 	ldw	r3,-12(fp)
   21dd0:	d0a00904 	addi	r2,gp,-32732
   21dd4:	18bfcf1e 	bne	r3,r2,21d14 <__alt_data_end+0xfffe1d14>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
   21dd8:	0001883a 	nop
}
   21ddc:	0001883a 	nop
   21de0:	e037883a 	mov	sp,fp
   21de4:	dfc00117 	ldw	ra,4(sp)
   21de8:	df000017 	ldw	fp,0(sp)
   21dec:	dec00204 	addi	sp,sp,8
   21df0:	f800283a 	ret

00021df4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
   21df4:	deffff04 	addi	sp,sp,-4
   21df8:	df000015 	stw	fp,0(sp)
   21dfc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
   21e00:	000170fa 	wrctl	ienable,zero
}
   21e04:	0001883a 	nop
   21e08:	e037883a 	mov	sp,fp
   21e0c:	df000017 	ldw	fp,0(sp)
   21e10:	dec00104 	addi	sp,sp,4
   21e14:	f800283a 	ret

00021e18 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
   21e18:	defffa04 	addi	sp,sp,-24
   21e1c:	dfc00515 	stw	ra,20(sp)
   21e20:	df000415 	stw	fp,16(sp)
   21e24:	df000404 	addi	fp,sp,16
   21e28:	e13ffe15 	stw	r4,-8(fp)
   21e2c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
   21e30:	e0bfff17 	ldw	r2,-4(fp)
   21e34:	10800017 	ldw	r2,0(r2)
   21e38:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
   21e3c:	e13ffe17 	ldw	r4,-8(fp)
   21e40:	00209b00 	call	209b0 <strlen>
   21e44:	10800044 	addi	r2,r2,1
   21e48:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21e4c:	00000d06 	br	21e84 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
   21e50:	e0bffc17 	ldw	r2,-16(fp)
   21e54:	10800217 	ldw	r2,8(r2)
   21e58:	e0fffd17 	ldw	r3,-12(fp)
   21e5c:	180d883a 	mov	r6,r3
   21e60:	e17ffe17 	ldw	r5,-8(fp)
   21e64:	1009883a 	mov	r4,r2
   21e68:	00221b40 	call	221b4 <memcmp>
   21e6c:	1000021e 	bne	r2,zero,21e78 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
   21e70:	e0bffc17 	ldw	r2,-16(fp)
   21e74:	00000706 	br	21e94 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
   21e78:	e0bffc17 	ldw	r2,-16(fp)
   21e7c:	10800017 	ldw	r2,0(r2)
   21e80:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
   21e84:	e0fffc17 	ldw	r3,-16(fp)
   21e88:	e0bfff17 	ldw	r2,-4(fp)
   21e8c:	18bff01e 	bne	r3,r2,21e50 <__alt_data_end+0xfffe1e50>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
   21e90:	0005883a 	mov	r2,zero
}
   21e94:	e037883a 	mov	sp,fp
   21e98:	dfc00117 	ldw	ra,4(sp)
   21e9c:	df000017 	ldw	fp,0(sp)
   21ea0:	dec00204 	addi	sp,sp,8
   21ea4:	f800283a 	ret

00021ea8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
   21ea8:	defffb04 	addi	sp,sp,-20
   21eac:	dfc00415 	stw	ra,16(sp)
   21eb0:	df000315 	stw	fp,12(sp)
   21eb4:	df000304 	addi	fp,sp,12
   21eb8:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
   21ebc:	d0a00217 	ldw	r2,-32760(gp)
   21ec0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   21ec4:	00003106 	br	21f8c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
   21ec8:	e0bffd17 	ldw	r2,-12(fp)
   21ecc:	10800217 	ldw	r2,8(r2)
   21ed0:	1009883a 	mov	r4,r2
   21ed4:	00209b00 	call	209b0 <strlen>
   21ed8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
   21edc:	e0bffd17 	ldw	r2,-12(fp)
   21ee0:	10c00217 	ldw	r3,8(r2)
   21ee4:	e0bffe17 	ldw	r2,-8(fp)
   21ee8:	10bfffc4 	addi	r2,r2,-1
   21eec:	1885883a 	add	r2,r3,r2
   21ef0:	10800003 	ldbu	r2,0(r2)
   21ef4:	10803fcc 	andi	r2,r2,255
   21ef8:	1080201c 	xori	r2,r2,128
   21efc:	10bfe004 	addi	r2,r2,-128
   21f00:	10800bd8 	cmpnei	r2,r2,47
   21f04:	1000031e 	bne	r2,zero,21f14 <alt_find_file+0x6c>
    {
      len -= 1;
   21f08:	e0bffe17 	ldw	r2,-8(fp)
   21f0c:	10bfffc4 	addi	r2,r2,-1
   21f10:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   21f14:	e0bffe17 	ldw	r2,-8(fp)
   21f18:	e0ffff17 	ldw	r3,-4(fp)
   21f1c:	1885883a 	add	r2,r3,r2
   21f20:	10800003 	ldbu	r2,0(r2)
   21f24:	10803fcc 	andi	r2,r2,255
   21f28:	1080201c 	xori	r2,r2,128
   21f2c:	10bfe004 	addi	r2,r2,-128
   21f30:	10800be0 	cmpeqi	r2,r2,47
   21f34:	1000081e 	bne	r2,zero,21f58 <alt_find_file+0xb0>
   21f38:	e0bffe17 	ldw	r2,-8(fp)
   21f3c:	e0ffff17 	ldw	r3,-4(fp)
   21f40:	1885883a 	add	r2,r3,r2
   21f44:	10800003 	ldbu	r2,0(r2)
   21f48:	10803fcc 	andi	r2,r2,255
   21f4c:	1080201c 	xori	r2,r2,128
   21f50:	10bfe004 	addi	r2,r2,-128
   21f54:	10000a1e 	bne	r2,zero,21f80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
   21f58:	e0bffd17 	ldw	r2,-12(fp)
   21f5c:	10800217 	ldw	r2,8(r2)
   21f60:	e0fffe17 	ldw	r3,-8(fp)
   21f64:	180d883a 	mov	r6,r3
   21f68:	e17fff17 	ldw	r5,-4(fp)
   21f6c:	1009883a 	mov	r4,r2
   21f70:	00221b40 	call	221b4 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
   21f74:	1000021e 	bne	r2,zero,21f80 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
   21f78:	e0bffd17 	ldw	r2,-12(fp)
   21f7c:	00000706 	br	21f9c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
   21f80:	e0bffd17 	ldw	r2,-12(fp)
   21f84:	10800017 	ldw	r2,0(r2)
   21f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
   21f8c:	e0fffd17 	ldw	r3,-12(fp)
   21f90:	d0a00204 	addi	r2,gp,-32760
   21f94:	18bfcc1e 	bne	r3,r2,21ec8 <__alt_data_end+0xfffe1ec8>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
   21f98:	0005883a 	mov	r2,zero
}
   21f9c:	e037883a 	mov	sp,fp
   21fa0:	dfc00117 	ldw	ra,4(sp)
   21fa4:	df000017 	ldw	fp,0(sp)
   21fa8:	dec00204 	addi	sp,sp,8
   21fac:	f800283a 	ret

00021fb0 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
   21fb0:	defffc04 	addi	sp,sp,-16
   21fb4:	df000315 	stw	fp,12(sp)
   21fb8:	df000304 	addi	fp,sp,12
   21fbc:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
   21fc0:	00bffa04 	movi	r2,-24
   21fc4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   21fc8:	e03ffd15 	stw	zero,-12(fp)
   21fcc:	00001906 	br	22034 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
   21fd0:	008000b4 	movhi	r2,2
   21fd4:	10899d04 	addi	r2,r2,9844
   21fd8:	e0fffd17 	ldw	r3,-12(fp)
   21fdc:	18c00324 	muli	r3,r3,12
   21fe0:	10c5883a 	add	r2,r2,r3
   21fe4:	10800017 	ldw	r2,0(r2)
   21fe8:	10000f1e 	bne	r2,zero,22028 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
   21fec:	008000b4 	movhi	r2,2
   21ff0:	10899d04 	addi	r2,r2,9844
   21ff4:	e0fffd17 	ldw	r3,-12(fp)
   21ff8:	18c00324 	muli	r3,r3,12
   21ffc:	10c5883a 	add	r2,r2,r3
   22000:	e0ffff17 	ldw	r3,-4(fp)
   22004:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
   22008:	d0e00617 	ldw	r3,-32744(gp)
   2200c:	e0bffd17 	ldw	r2,-12(fp)
   22010:	1880020e 	bge	r3,r2,2201c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
   22014:	e0bffd17 	ldw	r2,-12(fp)
   22018:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
   2201c:	e0bffd17 	ldw	r2,-12(fp)
   22020:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
   22024:	00000606 	br	22040 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
   22028:	e0bffd17 	ldw	r2,-12(fp)
   2202c:	10800044 	addi	r2,r2,1
   22030:	e0bffd15 	stw	r2,-12(fp)
   22034:	e0bffd17 	ldw	r2,-12(fp)
   22038:	10800810 	cmplti	r2,r2,32
   2203c:	103fe41e 	bne	r2,zero,21fd0 <__alt_data_end+0xfffe1fd0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
   22040:	e0bffe17 	ldw	r2,-8(fp)
}
   22044:	e037883a 	mov	sp,fp
   22048:	df000017 	ldw	fp,0(sp)
   2204c:	dec00104 	addi	sp,sp,4
   22050:	f800283a 	ret

00022054 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
   22054:	defffb04 	addi	sp,sp,-20
   22058:	df000415 	stw	fp,16(sp)
   2205c:	df000404 	addi	fp,sp,16
   22060:	e13ffe15 	stw	r4,-8(fp)
   22064:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
   22068:	e0bfff17 	ldw	r2,-4(fp)
   2206c:	10840070 	cmpltui	r2,r2,4097
   22070:	1000021e 	bne	r2,zero,2207c <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
   22074:	00840004 	movi	r2,4096
   22078:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
   2207c:	e0fffe17 	ldw	r3,-8(fp)
   22080:	e0bfff17 	ldw	r2,-4(fp)
   22084:	1885883a 	add	r2,r3,r2
   22088:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   2208c:	e0bffe17 	ldw	r2,-8(fp)
   22090:	e0bffc15 	stw	r2,-16(fp)
   22094:	00000506 	br	220ac <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
   22098:	e0bffc17 	ldw	r2,-16(fp)
   2209c:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
   220a0:	e0bffc17 	ldw	r2,-16(fp)
   220a4:	10800804 	addi	r2,r2,32
   220a8:	e0bffc15 	stw	r2,-16(fp)
   220ac:	e0fffc17 	ldw	r3,-16(fp)
   220b0:	e0bffd17 	ldw	r2,-12(fp)
   220b4:	18bff836 	bltu	r3,r2,22098 <__alt_data_end+0xfffe2098>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
   220b8:	e0bffe17 	ldw	r2,-8(fp)
   220bc:	108007cc 	andi	r2,r2,31
   220c0:	10000226 	beq	r2,zero,220cc <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
   220c4:	e0bffc17 	ldw	r2,-16(fp)
   220c8:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
   220cc:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
   220d0:	0001883a 	nop
   220d4:	e037883a 	mov	sp,fp
   220d8:	df000017 	ldw	fp,0(sp)
   220dc:	dec00104 	addi	sp,sp,4
   220e0:	f800283a 	ret

000220e4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
   220e4:	defffe04 	addi	sp,sp,-8
   220e8:	df000115 	stw	fp,4(sp)
   220ec:	df000104 	addi	fp,sp,4
   220f0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
   220f4:	e0bfff17 	ldw	r2,-4(fp)
   220f8:	10bffe84 	addi	r2,r2,-6
   220fc:	10c00428 	cmpgeui	r3,r2,16
   22100:	18001a1e 	bne	r3,zero,2216c <alt_exception_cause_generated_bad_addr+0x88>
   22104:	100690ba 	slli	r3,r2,2
   22108:	008000b4 	movhi	r2,2
   2210c:	10884704 	addi	r2,r2,8476
   22110:	1885883a 	add	r2,r3,r2
   22114:	10800017 	ldw	r2,0(r2)
   22118:	1000683a 	jmp	r2
   2211c:	0002215c 	xori	zero,zero,2181
   22120:	0002215c 	xori	zero,zero,2181
   22124:	0002216c 	andhi	zero,zero,2181
   22128:	0002216c 	andhi	zero,zero,2181
   2212c:	0002216c 	andhi	zero,zero,2181
   22130:	0002215c 	xori	zero,zero,2181
   22134:	00022164 	muli	zero,zero,2181
   22138:	0002216c 	andhi	zero,zero,2181
   2213c:	0002215c 	xori	zero,zero,2181
   22140:	0002215c 	xori	zero,zero,2181
   22144:	0002216c 	andhi	zero,zero,2181
   22148:	0002215c 	xori	zero,zero,2181
   2214c:	00022164 	muli	zero,zero,2181
   22150:	0002216c 	andhi	zero,zero,2181
   22154:	0002216c 	andhi	zero,zero,2181
   22158:	0002215c 	xori	zero,zero,2181
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
   2215c:	00800044 	movi	r2,1
   22160:	00000306 	br	22170 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
   22164:	0005883a 	mov	r2,zero
   22168:	00000106 	br	22170 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
   2216c:	0005883a 	mov	r2,zero
  }
}
   22170:	e037883a 	mov	sp,fp
   22174:	df000017 	ldw	fp,0(sp)
   22178:	dec00104 	addi	sp,sp,4
   2217c:	f800283a 	ret

00022180 <atexit>:
   22180:	200b883a 	mov	r5,r4
   22184:	000f883a 	mov	r7,zero
   22188:	000d883a 	mov	r6,zero
   2218c:	0009883a 	mov	r4,zero
   22190:	00221e41 	jmpi	221e4 <__register_exitproc>

00022194 <exit>:
   22194:	defffe04 	addi	sp,sp,-8
   22198:	000b883a 	mov	r5,zero
   2219c:	dc000015 	stw	r16,0(sp)
   221a0:	dfc00115 	stw	ra,4(sp)
   221a4:	2021883a 	mov	r16,r4
   221a8:	002233c0 	call	2233c <__call_exitprocs>
   221ac:	8009883a 	mov	r4,r16
   221b0:	00224cc0 	call	224cc <_exit>

000221b4 <memcmp>:
   221b4:	218d883a 	add	r6,r4,r6
   221b8:	21800826 	beq	r4,r6,221dc <memcmp+0x28>
   221bc:	20800003 	ldbu	r2,0(r4)
   221c0:	28c00003 	ldbu	r3,0(r5)
   221c4:	10c00226 	beq	r2,r3,221d0 <memcmp+0x1c>
   221c8:	10c5c83a 	sub	r2,r2,r3
   221cc:	f800283a 	ret
   221d0:	21000044 	addi	r4,r4,1
   221d4:	29400044 	addi	r5,r5,1
   221d8:	003ff706 	br	221b8 <__alt_data_end+0xfffe21b8>
   221dc:	0005883a 	mov	r2,zero
   221e0:	f800283a 	ret

000221e4 <__register_exitproc>:
   221e4:	008000b4 	movhi	r2,2
   221e8:	1089fd04 	addi	r2,r2,10228
   221ec:	10c00017 	ldw	r3,0(r2)
   221f0:	defff904 	addi	sp,sp,-28
   221f4:	dc000015 	stw	r16,0(sp)
   221f8:	1c000c17 	ldw	r16,48(r3)
   221fc:	dd400515 	stw	r21,20(sp)
   22200:	dd000415 	stw	r20,16(sp)
   22204:	dcc00315 	stw	r19,12(sp)
   22208:	dc800215 	stw	r18,8(sp)
   2220c:	dc400115 	stw	r17,4(sp)
   22210:	dfc00615 	stw	ra,24(sp)
   22214:	202b883a 	mov	r21,r4
   22218:	2823883a 	mov	r17,r5
   2221c:	3027883a 	mov	r19,r6
   22220:	3825883a 	mov	r18,r7
   22224:	1029883a 	mov	r20,r2
   22228:	8000021e 	bne	r16,zero,22234 <__register_exitproc+0x50>
   2222c:	1c000d04 	addi	r16,r3,52
   22230:	1c000c15 	stw	r16,48(r3)
   22234:	80800117 	ldw	r2,4(r16)
   22238:	00c007c4 	movi	r3,31
   2223c:	1880110e 	bge	r3,r2,22284 <__register_exitproc+0xa0>
   22240:	00800034 	movhi	r2,0
   22244:	10800004 	addi	r2,r2,0
   22248:	1000021e 	bne	r2,zero,22254 <__register_exitproc+0x70>
   2224c:	00bfffc4 	movi	r2,-1
   22250:	00003106 	br	22318 <__register_exitproc+0x134>
   22254:	01002304 	movi	r4,140
   22258:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   2225c:	1021883a 	mov	r16,r2
   22260:	103ffa26 	beq	r2,zero,2224c <__alt_data_end+0xfffe224c>
   22264:	10000115 	stw	zero,4(r2)
   22268:	a0800017 	ldw	r2,0(r20)
   2226c:	10c00c17 	ldw	r3,48(r2)
   22270:	80c00015 	stw	r3,0(r16)
   22274:	14000c15 	stw	r16,48(r2)
   22278:	80002215 	stw	zero,136(r16)
   2227c:	a8001d26 	beq	r21,zero,222f4 <__register_exitproc+0x110>
   22280:	00000606 	br	2229c <__register_exitproc+0xb8>
   22284:	a8001b26 	beq	r21,zero,222f4 <__register_exitproc+0x110>
   22288:	80802217 	ldw	r2,136(r16)
   2228c:	1000091e 	bne	r2,zero,222b4 <__register_exitproc+0xd0>
   22290:	00800034 	movhi	r2,0
   22294:	10800004 	addi	r2,r2,0
   22298:	103fec26 	beq	r2,zero,2224c <__alt_data_end+0xfffe224c>
   2229c:	01004204 	movi	r4,264
   222a0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   222a4:	103fe926 	beq	r2,zero,2224c <__alt_data_end+0xfffe224c>
   222a8:	10004015 	stw	zero,256(r2)
   222ac:	10004115 	stw	zero,260(r2)
   222b0:	80802215 	stw	r2,136(r16)
   222b4:	81400117 	ldw	r5,4(r16)
   222b8:	01000044 	movi	r4,1
   222bc:	2947883a 	add	r3,r5,r5
   222c0:	18c7883a 	add	r3,r3,r3
   222c4:	10c7883a 	add	r3,r2,r3
   222c8:	1cc00015 	stw	r19,0(r3)
   222cc:	2148983a 	sll	r4,r4,r5
   222d0:	11404017 	ldw	r5,256(r2)
   222d4:	290ab03a 	or	r5,r5,r4
   222d8:	11404015 	stw	r5,256(r2)
   222dc:	1c802015 	stw	r18,128(r3)
   222e0:	00c00084 	movi	r3,2
   222e4:	a8c0031e 	bne	r21,r3,222f4 <__register_exitproc+0x110>
   222e8:	10c04117 	ldw	r3,260(r2)
   222ec:	1908b03a 	or	r4,r3,r4
   222f0:	11004115 	stw	r4,260(r2)
   222f4:	80800117 	ldw	r2,4(r16)
   222f8:	10c00044 	addi	r3,r2,1
   222fc:	10800084 	addi	r2,r2,2
   22300:	1085883a 	add	r2,r2,r2
   22304:	1085883a 	add	r2,r2,r2
   22308:	80c00115 	stw	r3,4(r16)
   2230c:	80a1883a 	add	r16,r16,r2
   22310:	84400015 	stw	r17,0(r16)
   22314:	0005883a 	mov	r2,zero
   22318:	dfc00617 	ldw	ra,24(sp)
   2231c:	dd400517 	ldw	r21,20(sp)
   22320:	dd000417 	ldw	r20,16(sp)
   22324:	dcc00317 	ldw	r19,12(sp)
   22328:	dc800217 	ldw	r18,8(sp)
   2232c:	dc400117 	ldw	r17,4(sp)
   22330:	dc000017 	ldw	r16,0(sp)
   22334:	dec00704 	addi	sp,sp,28
   22338:	f800283a 	ret

0002233c <__call_exitprocs>:
   2233c:	defff504 	addi	sp,sp,-44
   22340:	dd000515 	stw	r20,20(sp)
   22344:	050000b4 	movhi	r20,2
   22348:	dc800315 	stw	r18,12(sp)
   2234c:	dfc00a15 	stw	ra,40(sp)
   22350:	df000915 	stw	fp,36(sp)
   22354:	ddc00815 	stw	r23,32(sp)
   22358:	dd800715 	stw	r22,28(sp)
   2235c:	dd400615 	stw	r21,24(sp)
   22360:	dcc00415 	stw	r19,16(sp)
   22364:	dc400215 	stw	r17,8(sp)
   22368:	dc000115 	stw	r16,4(sp)
   2236c:	d9000015 	stw	r4,0(sp)
   22370:	2825883a 	mov	r18,r5
   22374:	a509fd04 	addi	r20,r20,10228
   22378:	a4400017 	ldw	r17,0(r20)
   2237c:	8cc00c17 	ldw	r19,48(r17)
   22380:	8c400c04 	addi	r17,r17,48
   22384:	98004526 	beq	r19,zero,2249c <__call_exitprocs+0x160>
   22388:	9c000117 	ldw	r16,4(r19)
   2238c:	00900034 	movhi	r2,16384
   22390:	10bfffc4 	addi	r2,r2,-1
   22394:	9d402217 	ldw	r21,136(r19)
   22398:	85bfffc4 	addi	r22,r16,-1
   2239c:	80a1883a 	add	r16,r16,r2
   223a0:	8421883a 	add	r16,r16,r16
   223a4:	8421883a 	add	r16,r16,r16
   223a8:	ac2f883a 	add	r23,r21,r16
   223ac:	84000204 	addi	r16,r16,8
   223b0:	9c21883a 	add	r16,r19,r16
   223b4:	b0002716 	blt	r22,zero,22454 <__call_exitprocs+0x118>
   223b8:	90000726 	beq	r18,zero,223d8 <__call_exitprocs+0x9c>
   223bc:	a800041e 	bne	r21,zero,223d0 <__call_exitprocs+0x94>
   223c0:	b5bfffc4 	addi	r22,r22,-1
   223c4:	bdffff04 	addi	r23,r23,-4
   223c8:	843fff04 	addi	r16,r16,-4
   223cc:	003ff906 	br	223b4 <__alt_data_end+0xfffe23b4>
   223d0:	b9002017 	ldw	r4,128(r23)
   223d4:	913ffa1e 	bne	r18,r4,223c0 <__alt_data_end+0xfffe23c0>
   223d8:	99000117 	ldw	r4,4(r19)
   223dc:	82000017 	ldw	r8,0(r16)
   223e0:	213fffc4 	addi	r4,r4,-1
   223e4:	b100021e 	bne	r22,r4,223f0 <__call_exitprocs+0xb4>
   223e8:	9d800115 	stw	r22,4(r19)
   223ec:	00000106 	br	223f4 <__call_exitprocs+0xb8>
   223f0:	80000015 	stw	zero,0(r16)
   223f4:	403ff226 	beq	r8,zero,223c0 <__alt_data_end+0xfffe23c0>
   223f8:	9f000117 	ldw	fp,4(r19)
   223fc:	a8000526 	beq	r21,zero,22414 <__call_exitprocs+0xd8>
   22400:	00800044 	movi	r2,1
   22404:	1592983a 	sll	r9,r2,r22
   22408:	a9404017 	ldw	r5,256(r21)
   2240c:	494a703a 	and	r5,r9,r5
   22410:	2800021e 	bne	r5,zero,2241c <__call_exitprocs+0xe0>
   22414:	403ee83a 	callr	r8
   22418:	00000906 	br	22440 <__call_exitprocs+0x104>
   2241c:	a9004117 	ldw	r4,260(r21)
   22420:	4908703a 	and	r4,r9,r4
   22424:	2000041e 	bne	r4,zero,22438 <__call_exitprocs+0xfc>
   22428:	b9400017 	ldw	r5,0(r23)
   2242c:	d9000017 	ldw	r4,0(sp)
   22430:	403ee83a 	callr	r8
   22434:	00000206 	br	22440 <__call_exitprocs+0x104>
   22438:	b9000017 	ldw	r4,0(r23)
   2243c:	403ee83a 	callr	r8
   22440:	99000117 	ldw	r4,4(r19)
   22444:	e13fcc1e 	bne	fp,r4,22378 <__alt_data_end+0xfffe2378>
   22448:	89000017 	ldw	r4,0(r17)
   2244c:	993fdc26 	beq	r19,r4,223c0 <__alt_data_end+0xfffe23c0>
   22450:	003fc906 	br	22378 <__alt_data_end+0xfffe2378>
   22454:	00800034 	movhi	r2,0
   22458:	10800004 	addi	r2,r2,0
   2245c:	10000f26 	beq	r2,zero,2249c <__call_exitprocs+0x160>
   22460:	99400117 	ldw	r5,4(r19)
   22464:	99000017 	ldw	r4,0(r19)
   22468:	2800091e 	bne	r5,zero,22490 <__call_exitprocs+0x154>
   2246c:	20000826 	beq	r4,zero,22490 <__call_exitprocs+0x154>
   22470:	89000015 	stw	r4,0(r17)
   22474:	a8000226 	beq	r21,zero,22480 <__call_exitprocs+0x144>
   22478:	a809883a 	mov	r4,r21
   2247c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22480:	9809883a 	mov	r4,r19
   22484:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x20000>
   22488:	8cc00017 	ldw	r19,0(r17)
   2248c:	003fbd06 	br	22384 <__alt_data_end+0xfffe2384>
   22490:	9823883a 	mov	r17,r19
   22494:	2027883a 	mov	r19,r4
   22498:	003fba06 	br	22384 <__alt_data_end+0xfffe2384>
   2249c:	dfc00a17 	ldw	ra,40(sp)
   224a0:	df000917 	ldw	fp,36(sp)
   224a4:	ddc00817 	ldw	r23,32(sp)
   224a8:	dd800717 	ldw	r22,28(sp)
   224ac:	dd400617 	ldw	r21,24(sp)
   224b0:	dd000517 	ldw	r20,20(sp)
   224b4:	dcc00417 	ldw	r19,16(sp)
   224b8:	dc800317 	ldw	r18,12(sp)
   224bc:	dc400217 	ldw	r17,8(sp)
   224c0:	dc000117 	ldw	r16,4(sp)
   224c4:	dec00b04 	addi	sp,sp,44
   224c8:	f800283a 	ret

000224cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
   224cc:	defffd04 	addi	sp,sp,-12
   224d0:	df000215 	stw	fp,8(sp)
   224d4:	df000204 	addi	fp,sp,8
   224d8:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
   224dc:	0001883a 	nop
   224e0:	e0bfff17 	ldw	r2,-4(fp)
   224e4:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
   224e8:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
   224ec:	10000226 	beq	r2,zero,224f8 <_exit+0x2c>
    ALT_SIM_FAIL();
   224f0:	002af070 	cmpltui	zero,zero,43969
   224f4:	00000106 	br	224fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
   224f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
   224fc:	003fff06 	br	224fc <__alt_data_end+0xfffe24fc>
