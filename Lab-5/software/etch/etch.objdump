
etch.elf:     file format elf32-littlenios2
etch.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000224

Program Header:
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x04000000 align 2**12
         filesz 0x00000224 memsz 0x00000224 flags r-x
    LOAD off    0x00002224 vaddr 0x04000224 paddr 0x04000224 align 2**12
         filesz 0x000037c4 memsz 0x000037c4 flags r-x
    LOAD off    0x000059e8 vaddr 0x040039e8 paddr 0x04003d60 align 2**12
         filesz 0x00000378 memsz 0x00000378 flags rw-
    LOAD off    0x000060d8 vaddr 0x040040d8 paddr 0x040040d8 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-
    LOAD off    0x00006000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00006000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  08020020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00003724  04000224  04000224  00002224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000a0  04003948  04003948  00005948  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00000378  040039e8  04003d60  000059e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  040040d8  040040d8  000060d8  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  040041f8  040041f8  00006020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08020244  08020244  00006020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00006020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000690  00000000  00000000  00006048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00008ce1  00000000  00000000  000066d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002efb  00000000  00000000  0000f3b9  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000366c  00000000  00000000  000122b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00000e68  00000000  00000000  00015920  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000217b  00000000  00000000  00016788  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000145d  00000000  00000000  00018903  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00019d60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000002a8  00000000  00000000  00019dc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0001bf4e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  0001bf51  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0001bf5d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0001bf5e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0001bf5f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0001bf63  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  0001bf67  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0001bf6b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  0001bf76  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  0001bf81  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000a  00000000  00000000  0001bf8c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000048  00000000  00000000  0001bf96  2**0
                  CONTENTS, READONLY
 30 .jdi          0000595e  00000000  00000000  0001bfde  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00078474  00000000  00000000  0002193c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
04000224 l    d  .text	00000000 .text
04003948 l    d  .rodata	00000000 .rodata
040039e8 l    d  .rwdata	00000000 .rwdata
040040d8 l    d  .bss	00000000 .bss
040041f8 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08020244 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../etch_bsp//obj/HAL/src/crt0.o
0400026c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 etch.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
0400049c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
040039e8 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
04000d28 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04000ec0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
04000ff4 l     F .text	00000034 alt_dev_reg
04003ac8 l     O .rwdata	0000002c jtag_uart_0
04003af4 l     O .rwdata	00000054 video_pixel_buffer_dma_0
04003b48 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
040015ac l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
040026ac l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04002800 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400282c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04002d30 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04002e70 l     F .text	0000003c alt_get_errno
04002eac l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
040040f4 g     O .bss	00000004 alt_instruction_exception_handler
04000e14 g     F .text	0000007c alt_main
04001f74 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
040040f8 g     O .bss	00000100 alt_irq
04003d60 g       *ABS*	00000000 __flash_rwdata_start
04000450 g     F .text	0000004c printf
040016dc g     F .text	00000194 alt_up_pixel_buffer_dma_draw
040032cc g     F .text	00000024 altera_nios2_gen2_irq_init
040016a0 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08020000 g     F .entry	0000001c __reset
04000000 g       *ABS*	00000000 __flash_exceptions_start
040040d8 g     O .bss	00000004 errno
040040e0 g     O .bss	00000004 alt_argv
0400bd34 g       *ABS*	00000000 _gp
04000e90 g     F .text	00000030 usleep
04001870 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
04003bb4 g     O .rwdata	00000180 alt_fd_list
040029cc g     F .text	00000090 alt_find_dev
04002df4 g     F .text	0000007c alt_io_redirect
04003948 g       *ABS*	00000000 __DTOR_END__
0400352c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400192c g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0400142c g     F .text	000000ec altera_avalon_jtag_uart_read
04000414 g     F .text	0000003c _printf_r
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
04000c6c g     F .text	00000064 .hidden __udivsi3
04001d64 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
0400349c g     F .text	00000090 alt_icache_flush
04002288 g     F .text	00000084 helper_plot_pixel
04003d4c g     O .rwdata	00000004 alt_max_fd
04001960 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
04003d34 g     O .rwdata	00000004 _global_impure_ptr
040041f8 g       *ABS*	00000000 __bss_end
04002c40 g     F .text	000000f0 alt_iic_isr_register
04001a88 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
040031c4 g     F .text	00000108 alt_tick
04002bf4 g     F .text	0000004c alt_ic_irq_enabled
04003128 g     F .text	0000009c alt_alarm_stop
040040e8 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d4 alt_irq_handler
04003b8c g     O .rwdata	00000028 alt_dev_null
040027b8 g     F .text	00000048 alt_dcache_flush_all
040021c0 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
04003d60 g       *ABS*	00000000 __ram_rwdata_end
04003d44 g     O .rwdata	00000008 alt_dev_list
04000efc g     F .text	000000f8 write
0400230c g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
040039e8 g       *ABS*	00000000 __ram_rodata_end
04000cd0 g     F .text	00000058 .hidden __umodsi3
040041f8 g       *ABS*	00000000 end
080201d0 g     F .exceptions	00000074 alt_instruction_exception_entry
04003948 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04001624 g     F .text	0000007c alt_avalon_timer_sc_init
04001518 g     F .text	00000094 altera_avalon_jtag_uart_write
04000508 g     F .text	00000524 ___vfprintf_internal_r
04003784 g     F .text	00000190 __call_exitprocs
04000224 g     F .text	0000004c _start
040040ec g     O .bss	00000004 _alt_tick_rate
040040f0 g     O .bss	00000004 _alt_nticks
04001060 g     F .text	0000030c alt_sys_init
0400362c g     F .text	00000158 __register_exitproc
040039e8 g       *ABS*	00000000 __ram_rwdata_start
04003948 g       *ABS*	00000000 __ram_rodata_start
0400136c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040033f8 g     F .text	000000a4 alt_get_fd
04002554 g     F .text	00000158 alt_busy_sleep
040035fc g     F .text	00000030 memcmp
040041f8 g       *ABS*	00000000 __alt_stack_base
040032f0 g     F .text	00000108 alt_find_file
04002868 g     F .text	000000a4 alt_dev_llist_insert
04000a48 g     F .text	000000b8 __sfvwrite_small_dev
040040d8 g       *ABS*	00000000 __bss_start
04000270 g     F .text	000001a4 main
040040e4 g     O .bss	00000004 alt_envp
040018cc g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
040013cc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003d50 g     O .rwdata	00000004 alt_errno
04000b74 g     F .text	00000084 .hidden __divsi3
04003948 g       *ABS*	00000000 __CTOR_END__
04003948 g       *ABS*	00000000 __flash_rodata_start
04003948 g       *ABS*	00000000 __DTOR_LIST__
04001028 g     F .text	00000038 alt_irq_init
040030c4 g     F .text	00000064 alt_release_fd
040035c8 g     F .text	00000014 atexit
04000b1c g     F .text	00000058 _write_r
04003d38 g     O .rwdata	00000004 _impure_ptr
040040dc g     O .bss	00000004 alt_argc
0400296c g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
04003d3c g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
04002a90 g     F .text	00000050 alt_ic_isr_register
04003d60 g       *ABS*	00000000 _edata
040041f8 g       *ABS*	00000000 _end
08020244 g       *ABS*	00000000 __ram_exceptions_end
04002b68 g     F .text	0000008c alt_ic_irq_disable
040035dc g     F .text	00000020 exit
04000bf8 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
04003914 g     F .text	00000034 _exit
04000b00 g     F .text	0000001c strlen
04002f70 g     F .text	00000154 open
04002a5c g     F .text	00000034 alt_icache_flush_all
04003d54 g     O .rwdata	00000004 alt_priority_mask
04002ae0 g     F .text	00000088 alt_ic_irq_enable
04000a2c g     F .text	0000001c __vfprintf_internal
04003d58 g     O .rwdata	00000008 alt_alarm_list
0400290c g     F .text	00000060 _do_ctors
040026e8 g     F .text	000000d0 close
04000d90 g     F .text	00000084 alt_load



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__ram_exceptions_end+0xfffffdc0>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8020014:	08408914 	ori	at,at,548
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d00 	call	80201d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001426 	beq	r2,zero,802018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 802013c:	00810034 	movhi	r2,1024
 8020140:	10903e04 	addi	r2,r2,16632
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	00810034 	movhi	r2,1024
 8020158:	10903e04 	addi	r2,r2,16632
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	1009883a 	mov	r4,r2
 8020174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8020178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 802017c:	0005313a 	rdctl	r2,ipending
 8020180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020184:	e0bfff17 	ldw	r2,-4(fp)
 8020188:	00000706 	br	80201a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 802018c:	e0bffc17 	ldw	r2,-16(fp)
 8020190:	1085883a 	add	r2,r2,r2
 8020194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8020198:	e0bffd17 	ldw	r2,-12(fp)
 802019c:	10800044 	addi	r2,r2,1
 80201a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a4:	003fe106 	br	802012c <__ram_exceptions_end+0xfffffee8>

    active = alt_irq_pending ();
 80201a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201ac:	e0bffb17 	ldw	r2,-20(fp)
 80201b0:	103fdb1e 	bne	r2,zero,8020120 <__ram_exceptions_end+0xfffffedc>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b4:	0001883a 	nop
}
 80201b8:	0001883a 	nop
 80201bc:	e037883a 	mov	sp,fp
 80201c0:	dfc00117 	ldw	ra,4(sp)
 80201c4:	df000017 	ldw	fp,0(sp)
 80201c8:	dec00204 	addi	sp,sp,8
 80201cc:	f800283a 	ret

080201d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d0:	defffb04 	addi	sp,sp,-20
 80201d4:	dfc00415 	stw	ra,16(sp)
 80201d8:	df000315 	stw	fp,12(sp)
 80201dc:	df000304 	addi	fp,sp,12
 80201e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e4:	000531fa 	rdctl	r2,exception
 80201e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201ec:	e0bffd17 	ldw	r2,-12(fp)
 80201f0:	10801f0c 	andi	r2,r2,124
 80201f4:	1004d0ba 	srli	r2,r2,2
 80201f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80201fc:	0005333a 	rdctl	r2,badaddr
 8020200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020204:	d0a0f017 	ldw	r2,-31808(gp)
 8020208:	10000726 	beq	r2,zero,8020228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 802020c:	d0a0f017 	ldw	r2,-31808(gp)
 8020210:	e0fffd17 	ldw	r3,-12(fp)
 8020214:	e1bffe17 	ldw	r6,-8(fp)
 8020218:	e17fff17 	ldw	r5,-4(fp)
 802021c:	1809883a 	mov	r4,r3
 8020220:	103ee83a 	callr	r2
 8020224:	00000206 	br	8020230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8020228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 802022c:	0005883a 	mov	r2,zero
}
 8020230:	e037883a 	mov	sp,fp
 8020234:	dfc00117 	ldw	ra,4(sp)
 8020238:	df000017 	ldw	fp,0(sp)
 802023c:	dec00204 	addi	sp,sp,8
 8020240:	f800283a 	ret

Disassembly of section .text:

04000224 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000224:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 4000228:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 400022c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000230:	00bffd16 	blt	zero,r2,4000228 <__ram_exceptions_end+0xfbfdffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000234:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000238:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 400023c:	06810034 	movhi	gp,1024
    ori gp, gp, %lo(_gp)
 4000240:	d6af4d14 	ori	gp,gp,48436
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000244:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000248:	10903614 	ori	r2,r2,16600

    movhi r3, %hi(__bss_end)
 400024c:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000250:	18d07e14 	ori	r3,r3,16888

    beq r2, r3, 1f
 4000254:	10c00326 	beq	r2,r3,4000264 <_start+0x40>

0:
    stw zero, (r2)
 4000258:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 400025c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000260:	10fffd36 	bltu	r2,r3,4000258 <__ram_exceptions_end+0xfbfe0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000264:	4000d900 	call	4000d90 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000268:	4000e140 	call	4000e14 <alt_main>

0400026c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 400026c:	003fff06 	br	400026c <__ram_exceptions_end+0xfbfe0028>

04000270 <main>:
#include <unistd.h>
#include <stdlib.h>
#include <stdint.h>
#include <string.h>

int main(){
 4000270:	defff704 	addi	sp,sp,-36
 4000274:	dfc00815 	stw	ra,32(sp)
 4000278:	df000715 	stw	fp,28(sp)
 400027c:	df000704 	addi	fp,sp,28
	printf("entered main");
 4000280:	01010034 	movhi	r4,1024
 4000284:	210e5204 	addi	r4,r4,14664
 4000288:	40004500 	call	4000450 <printf>

	// create pointer to pixel buffer
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 400028c:	01010034 	movhi	r4,1024
 4000290:	210e5604 	addi	r4,r4,14680
 4000294:	40016a00 	call	40016a0 <alt_up_pixel_buffer_dma_open_dev>
 4000298:	e0bfff15 	stw	r2,-4(fp)

	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,0);
 400029c:	000b883a 	mov	r5,zero
 40002a0:	e13fff17 	ldw	r4,-4(fp)
 40002a4:	40019600 	call	4001960 <alt_up_pixel_buffer_dma_clear_screen>
	usleep(200000);
 40002a8:	010000f4 	movhi	r4,3
 40002ac:	21035004 	addi	r4,r4,3392
 40002b0:	4000e900 	call	4000e90 <usleep>

	// coordinate variables
	int x = 160;
 40002b4:	00802804 	movi	r2,160
 40002b8:	e0bffc15 	stw	r2,-16(fp)
	int y = 120;
 40002bc:	00801e04 	movi	r2,120
 40002c0:	e0bffd15 	stw	r2,-12(fp)

	// use flag to avoid constant redrawing
	int draw_flag = 0;
 40002c4:	e03ffe15 	stw	zero,-8(fp)

	while(1){
		// KEY0 controls x coord
		if((IORD(PIO_PUSH_BASE,0) & 0b01) == 0){
 40002c8:	00820134 	movhi	r2,2052
 40002cc:	10840c04 	addi	r2,r2,4144
 40002d0:	10800037 	ldwio	r2,0(r2)
 40002d4:	1080004c 	andi	r2,r2,1
 40002d8:	1000161e 	bne	r2,zero,4000334 <main+0xc4>
			// if SW0 is on, move right, else move left
			if((IORD(PIO_SW_BASE,0) & 0b0001) > 0)
 40002dc:	00820134 	movhi	r2,2052
 40002e0:	10840804 	addi	r2,r2,4128
 40002e4:	10800037 	ldwio	r2,0(r2)
 40002e8:	1080004c 	andi	r2,r2,1
 40002ec:	0080040e 	bge	zero,r2,4000300 <main+0x90>
				x++;
 40002f0:	e0bffc17 	ldw	r2,-16(fp)
 40002f4:	10800044 	addi	r2,r2,1
 40002f8:	e0bffc15 	stw	r2,-16(fp)
 40002fc:	00000306 	br	400030c <main+0x9c>
			else
				x--;
 4000300:	e0bffc17 	ldw	r2,-16(fp)
 4000304:	10bfffc4 	addi	r2,r2,-1
 4000308:	e0bffc15 	stw	r2,-16(fp)

			// set boundaries
			if(x >= 320)
 400030c:	e0bffc17 	ldw	r2,-16(fp)
 4000310:	10805010 	cmplti	r2,r2,320
 4000314:	1000021e 	bne	r2,zero,4000320 <main+0xb0>
				x = 319;
 4000318:	00804fc4 	movi	r2,319
 400031c:	e0bffc15 	stw	r2,-16(fp)
			if(x <= 0)
 4000320:	e0bffc17 	ldw	r2,-16(fp)
 4000324:	00800116 	blt	zero,r2,400032c <main+0xbc>
				x = 0;
 4000328:	e03ffc15 	stw	zero,-16(fp)

			// set draw flag
			draw_flag = 1;
 400032c:	00800044 	movi	r2,1
 4000330:	e0bffe15 	stw	r2,-8(fp)
		}

		// KEY1 controls y coord
		if((IORD(PIO_PUSH_BASE,0) & 0b10) == 0){
 4000334:	00820134 	movhi	r2,2052
 4000338:	10840c04 	addi	r2,r2,4144
 400033c:	10800037 	ldwio	r2,0(r2)
 4000340:	1080008c 	andi	r2,r2,2
 4000344:	1000161e 	bne	r2,zero,40003a0 <main+0x130>
			// if SW1 is on, move up, else move down
			if((IORD(PIO_SW_BASE,0) & 0b0010) > 0)
 4000348:	00820134 	movhi	r2,2052
 400034c:	10840804 	addi	r2,r2,4128
 4000350:	10800037 	ldwio	r2,0(r2)
 4000354:	1080008c 	andi	r2,r2,2
 4000358:	0080040e 	bge	zero,r2,400036c <main+0xfc>
				y++;
 400035c:	e0bffd17 	ldw	r2,-12(fp)
 4000360:	10800044 	addi	r2,r2,1
 4000364:	e0bffd15 	stw	r2,-12(fp)
 4000368:	00000306 	br	4000378 <main+0x108>
			else
				y--;
 400036c:	e0bffd17 	ldw	r2,-12(fp)
 4000370:	10bfffc4 	addi	r2,r2,-1
 4000374:	e0bffd15 	stw	r2,-12(fp)

			// set boundaries
			if(y >= 240)
 4000378:	e0bffd17 	ldw	r2,-12(fp)
 400037c:	10803c10 	cmplti	r2,r2,240
 4000380:	1000021e 	bne	r2,zero,400038c <main+0x11c>
				y = 239;
 4000384:	00803bc4 	movi	r2,239
 4000388:	e0bffd15 	stw	r2,-12(fp)
			if(y <= 0)
 400038c:	e0bffd17 	ldw	r2,-12(fp)
 4000390:	00800116 	blt	zero,r2,4000398 <main+0x128>
				y = 0;
 4000394:	e03ffd15 	stw	zero,-12(fp)

			// set draw flag
			draw_flag = 1;
 4000398:	00800044 	movi	r2,1
 400039c:	e0bffe15 	stw	r2,-8(fp)
		}

		// draw a single white pixel at (x,y)
		if(draw_flag == 1){
 40003a0:	e0bffe17 	ldw	r2,-8(fp)
 40003a4:	10800058 	cmpnei	r2,r2,1
 40003a8:	10000e1e 	bne	r2,zero,40003e4 <main+0x174>
			// draw the pixel
			alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 40003ac:	d8000215 	stw	zero,8(sp)
 40003b0:	00bfffd4 	movui	r2,65535
 40003b4:	d8800115 	stw	r2,4(sp)
 40003b8:	e0bffd17 	ldw	r2,-12(fp)
 40003bc:	d8800015 	stw	r2,0(sp)
 40003c0:	e1fffc17 	ldw	r7,-16(fp)
 40003c4:	e1bffd17 	ldw	r6,-12(fp)
 40003c8:	e17ffc17 	ldw	r5,-16(fp)
 40003cc:	e13fff17 	ldw	r4,-4(fp)
 40003d0:	4001a880 	call	4001a88 <alt_up_pixel_buffer_dma_draw_box>

			// continuous draw @ 5 px/s
			usleep(200000);
 40003d4:	010000f4 	movhi	r4,3
 40003d8:	21035004 	addi	r4,r4,3392
 40003dc:	4000e900 	call	4000e90 <usleep>

			// reset draw flag
			draw_flag = 0;
 40003e0:	e03ffe15 	stw	zero,-8(fp)
		}

		// SW2 clears screen, no position reset like an actual etch-a-sketch
		if((IORD(PIO_SW_BASE,0) & 0b0100) > 0){
 40003e4:	00820134 	movhi	r2,2052
 40003e8:	10840804 	addi	r2,r2,4128
 40003ec:	10800037 	ldwio	r2,0(r2)
 40003f0:	1080010c 	andi	r2,r2,4
 40003f4:	00bfb40e 	bge	zero,r2,40002c8 <__ram_exceptions_end+0xfbfe0084>
			alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,0);
 40003f8:	000b883a 	mov	r5,zero
 40003fc:	e13fff17 	ldw	r4,-4(fp)
 4000400:	40019600 	call	4001960 <alt_up_pixel_buffer_dma_clear_screen>
			usleep(200000);
 4000404:	010000f4 	movhi	r4,3
 4000408:	21035004 	addi	r4,r4,3392
 400040c:	4000e900 	call	4000e90 <usleep>
		}
	}
 4000410:	003fad06 	br	40002c8 <__ram_exceptions_end+0xfbfe0084>

04000414 <_printf_r>:
 4000414:	defffd04 	addi	sp,sp,-12
 4000418:	dfc00015 	stw	ra,0(sp)
 400041c:	d9800115 	stw	r6,4(sp)
 4000420:	d9c00215 	stw	r7,8(sp)
 4000424:	20c00217 	ldw	r3,8(r4)
 4000428:	01810034 	movhi	r6,1024
 400042c:	31829204 	addi	r6,r6,2632
 4000430:	19800115 	stw	r6,4(r3)
 4000434:	280d883a 	mov	r6,r5
 4000438:	21400217 	ldw	r5,8(r4)
 400043c:	d9c00104 	addi	r7,sp,4
 4000440:	40005080 	call	4000508 <___vfprintf_internal_r>
 4000444:	dfc00017 	ldw	ra,0(sp)
 4000448:	dec00304 	addi	sp,sp,12
 400044c:	f800283a 	ret

04000450 <printf>:
 4000450:	defffc04 	addi	sp,sp,-16
 4000454:	dfc00015 	stw	ra,0(sp)
 4000458:	d9400115 	stw	r5,4(sp)
 400045c:	d9800215 	stw	r6,8(sp)
 4000460:	d9c00315 	stw	r7,12(sp)
 4000464:	00810034 	movhi	r2,1024
 4000468:	108f4e04 	addi	r2,r2,15672
 400046c:	10800017 	ldw	r2,0(r2)
 4000470:	01410034 	movhi	r5,1024
 4000474:	29429204 	addi	r5,r5,2632
 4000478:	10c00217 	ldw	r3,8(r2)
 400047c:	d9800104 	addi	r6,sp,4
 4000480:	19400115 	stw	r5,4(r3)
 4000484:	200b883a 	mov	r5,r4
 4000488:	11000217 	ldw	r4,8(r2)
 400048c:	4000a2c0 	call	4000a2c <__vfprintf_internal>
 4000490:	dfc00017 	ldw	ra,0(sp)
 4000494:	dec00404 	addi	sp,sp,16
 4000498:	f800283a 	ret

0400049c <print_repeat>:
 400049c:	defffb04 	addi	sp,sp,-20
 40004a0:	dc800315 	stw	r18,12(sp)
 40004a4:	dc400215 	stw	r17,8(sp)
 40004a8:	dc000115 	stw	r16,4(sp)
 40004ac:	dfc00415 	stw	ra,16(sp)
 40004b0:	2025883a 	mov	r18,r4
 40004b4:	2823883a 	mov	r17,r5
 40004b8:	d9800005 	stb	r6,0(sp)
 40004bc:	3821883a 	mov	r16,r7
 40004c0:	04000a0e 	bge	zero,r16,40004ec <print_repeat+0x50>
 40004c4:	88800117 	ldw	r2,4(r17)
 40004c8:	01c00044 	movi	r7,1
 40004cc:	d80d883a 	mov	r6,sp
 40004d0:	880b883a 	mov	r5,r17
 40004d4:	9009883a 	mov	r4,r18
 40004d8:	103ee83a 	callr	r2
 40004dc:	843fffc4 	addi	r16,r16,-1
 40004e0:	103ff726 	beq	r2,zero,40004c0 <__ram_exceptions_end+0xfbfe027c>
 40004e4:	00bfffc4 	movi	r2,-1
 40004e8:	00000106 	br	40004f0 <print_repeat+0x54>
 40004ec:	0005883a 	mov	r2,zero
 40004f0:	dfc00417 	ldw	ra,16(sp)
 40004f4:	dc800317 	ldw	r18,12(sp)
 40004f8:	dc400217 	ldw	r17,8(sp)
 40004fc:	dc000117 	ldw	r16,4(sp)
 4000500:	dec00504 	addi	sp,sp,20
 4000504:	f800283a 	ret

04000508 <___vfprintf_internal_r>:
 4000508:	deffe504 	addi	sp,sp,-108
 400050c:	d8c00804 	addi	r3,sp,32
 4000510:	df001915 	stw	fp,100(sp)
 4000514:	ddc01815 	stw	r23,96(sp)
 4000518:	dd801715 	stw	r22,92(sp)
 400051c:	dd401615 	stw	r21,88(sp)
 4000520:	dd001515 	stw	r20,84(sp)
 4000524:	dcc01415 	stw	r19,80(sp)
 4000528:	dc801315 	stw	r18,76(sp)
 400052c:	dc401215 	stw	r17,72(sp)
 4000530:	dc001115 	stw	r16,68(sp)
 4000534:	dfc01a15 	stw	ra,104(sp)
 4000538:	2027883a 	mov	r19,r4
 400053c:	2839883a 	mov	fp,r5
 4000540:	382d883a 	mov	r22,r7
 4000544:	d9800f15 	stw	r6,60(sp)
 4000548:	0021883a 	mov	r16,zero
 400054c:	d8000e15 	stw	zero,56(sp)
 4000550:	002f883a 	mov	r23,zero
 4000554:	002b883a 	mov	r21,zero
 4000558:	0025883a 	mov	r18,zero
 400055c:	0023883a 	mov	r17,zero
 4000560:	d8000c15 	stw	zero,48(sp)
 4000564:	d8000b15 	stw	zero,44(sp)
 4000568:	0029883a 	mov	r20,zero
 400056c:	d8c00915 	stw	r3,36(sp)
 4000570:	d8c00f17 	ldw	r3,60(sp)
 4000574:	19000003 	ldbu	r4,0(r3)
 4000578:	20803fcc 	andi	r2,r4,255
 400057c:	1080201c 	xori	r2,r2,128
 4000580:	10bfe004 	addi	r2,r2,-128
 4000584:	10011c26 	beq	r2,zero,40009f8 <___vfprintf_internal_r+0x4f0>
 4000588:	00c00044 	movi	r3,1
 400058c:	a0c01426 	beq	r20,r3,40005e0 <___vfprintf_internal_r+0xd8>
 4000590:	1d000216 	blt	r3,r20,400059c <___vfprintf_internal_r+0x94>
 4000594:	a0000626 	beq	r20,zero,40005b0 <___vfprintf_internal_r+0xa8>
 4000598:	00011306 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 400059c:	01400084 	movi	r5,2
 40005a0:	a1401d26 	beq	r20,r5,4000618 <___vfprintf_internal_r+0x110>
 40005a4:	014000c4 	movi	r5,3
 40005a8:	a1402926 	beq	r20,r5,4000650 <___vfprintf_internal_r+0x148>
 40005ac:	00010e06 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 40005b0:	01400944 	movi	r5,37
 40005b4:	1140fb26 	beq	r2,r5,40009a4 <___vfprintf_internal_r+0x49c>
 40005b8:	e0800117 	ldw	r2,4(fp)
 40005bc:	d9000005 	stb	r4,0(sp)
 40005c0:	01c00044 	movi	r7,1
 40005c4:	d80d883a 	mov	r6,sp
 40005c8:	e00b883a 	mov	r5,fp
 40005cc:	9809883a 	mov	r4,r19
 40005d0:	103ee83a 	callr	r2
 40005d4:	1000d61e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 40005d8:	84000044 	addi	r16,r16,1
 40005dc:	00010206 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 40005e0:	01400c04 	movi	r5,48
 40005e4:	1140f826 	beq	r2,r5,40009c8 <___vfprintf_internal_r+0x4c0>
 40005e8:	01400944 	movi	r5,37
 40005ec:	11400a1e 	bne	r2,r5,4000618 <___vfprintf_internal_r+0x110>
 40005f0:	d8800005 	stb	r2,0(sp)
 40005f4:	e0800117 	ldw	r2,4(fp)
 40005f8:	a00f883a 	mov	r7,r20
 40005fc:	d80d883a 	mov	r6,sp
 4000600:	e00b883a 	mov	r5,fp
 4000604:	9809883a 	mov	r4,r19
 4000608:	103ee83a 	callr	r2
 400060c:	1000c81e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 4000610:	84000044 	addi	r16,r16,1
 4000614:	0000f306 	br	40009e4 <___vfprintf_internal_r+0x4dc>
 4000618:	217ff404 	addi	r5,r4,-48
 400061c:	29403fcc 	andi	r5,r5,255
 4000620:	00c00244 	movi	r3,9
 4000624:	19400736 	bltu	r3,r5,4000644 <___vfprintf_internal_r+0x13c>
 4000628:	00bfffc4 	movi	r2,-1
 400062c:	88800226 	beq	r17,r2,4000638 <___vfprintf_internal_r+0x130>
 4000630:	8c4002a4 	muli	r17,r17,10
 4000634:	00000106 	br	400063c <___vfprintf_internal_r+0x134>
 4000638:	0023883a 	mov	r17,zero
 400063c:	2c63883a 	add	r17,r5,r17
 4000640:	0000e206 	br	40009cc <___vfprintf_internal_r+0x4c4>
 4000644:	01400b84 	movi	r5,46
 4000648:	1140e426 	beq	r2,r5,40009dc <___vfprintf_internal_r+0x4d4>
 400064c:	05000084 	movi	r20,2
 4000650:	213ff404 	addi	r4,r4,-48
 4000654:	21003fcc 	andi	r4,r4,255
 4000658:	00c00244 	movi	r3,9
 400065c:	19000736 	bltu	r3,r4,400067c <___vfprintf_internal_r+0x174>
 4000660:	00bfffc4 	movi	r2,-1
 4000664:	90800226 	beq	r18,r2,4000670 <___vfprintf_internal_r+0x168>
 4000668:	948002a4 	muli	r18,r18,10
 400066c:	00000106 	br	4000674 <___vfprintf_internal_r+0x16c>
 4000670:	0025883a 	mov	r18,zero
 4000674:	24a5883a 	add	r18,r4,r18
 4000678:	0000db06 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 400067c:	00c01b04 	movi	r3,108
 4000680:	10c0d426 	beq	r2,r3,40009d4 <___vfprintf_internal_r+0x4cc>
 4000684:	013fffc4 	movi	r4,-1
 4000688:	91000226 	beq	r18,r4,4000694 <___vfprintf_internal_r+0x18c>
 400068c:	d8000b15 	stw	zero,44(sp)
 4000690:	00000106 	br	4000698 <___vfprintf_internal_r+0x190>
 4000694:	04800044 	movi	r18,1
 4000698:	01001a44 	movi	r4,105
 400069c:	11001626 	beq	r2,r4,40006f8 <___vfprintf_internal_r+0x1f0>
 40006a0:	20800916 	blt	r4,r2,40006c8 <___vfprintf_internal_r+0x1c0>
 40006a4:	010018c4 	movi	r4,99
 40006a8:	11008a26 	beq	r2,r4,40008d4 <___vfprintf_internal_r+0x3cc>
 40006ac:	01001904 	movi	r4,100
 40006b0:	11001126 	beq	r2,r4,40006f8 <___vfprintf_internal_r+0x1f0>
 40006b4:	01001604 	movi	r4,88
 40006b8:	1100ca1e 	bne	r2,r4,40009e4 <___vfprintf_internal_r+0x4dc>
 40006bc:	00c00044 	movi	r3,1
 40006c0:	d8c00e15 	stw	r3,56(sp)
 40006c4:	00001406 	br	4000718 <___vfprintf_internal_r+0x210>
 40006c8:	01001cc4 	movi	r4,115
 40006cc:	11009a26 	beq	r2,r4,4000938 <___vfprintf_internal_r+0x430>
 40006d0:	20800416 	blt	r4,r2,40006e4 <___vfprintf_internal_r+0x1dc>
 40006d4:	01001bc4 	movi	r4,111
 40006d8:	1100c21e 	bne	r2,r4,40009e4 <___vfprintf_internal_r+0x4dc>
 40006dc:	05400204 	movi	r21,8
 40006e0:	00000e06 	br	400071c <___vfprintf_internal_r+0x214>
 40006e4:	01001d44 	movi	r4,117
 40006e8:	11000c26 	beq	r2,r4,400071c <___vfprintf_internal_r+0x214>
 40006ec:	01001e04 	movi	r4,120
 40006f0:	11000926 	beq	r2,r4,4000718 <___vfprintf_internal_r+0x210>
 40006f4:	0000bb06 	br	40009e4 <___vfprintf_internal_r+0x4dc>
 40006f8:	b5000104 	addi	r20,r22,4
 40006fc:	b8000726 	beq	r23,zero,400071c <___vfprintf_internal_r+0x214>
 4000700:	dd000d15 	stw	r20,52(sp)
 4000704:	b5800017 	ldw	r22,0(r22)
 4000708:	b000080e 	bge	r22,zero,400072c <___vfprintf_internal_r+0x224>
 400070c:	05adc83a 	sub	r22,zero,r22
 4000710:	02800044 	movi	r10,1
 4000714:	00000606 	br	4000730 <___vfprintf_internal_r+0x228>
 4000718:	05400404 	movi	r21,16
 400071c:	b0c00104 	addi	r3,r22,4
 4000720:	d8c00d15 	stw	r3,52(sp)
 4000724:	b5800017 	ldw	r22,0(r22)
 4000728:	002f883a 	mov	r23,zero
 400072c:	0015883a 	mov	r10,zero
 4000730:	d829883a 	mov	r20,sp
 4000734:	b0001426 	beq	r22,zero,4000788 <___vfprintf_internal_r+0x280>
 4000738:	b009883a 	mov	r4,r22
 400073c:	a80b883a 	mov	r5,r21
 4000740:	da801015 	stw	r10,64(sp)
 4000744:	4000c6c0 	call	4000c6c <__udivsi3>
 4000748:	1549383a 	mul	r4,r2,r21
 400074c:	00c00244 	movi	r3,9
 4000750:	da801017 	ldw	r10,64(sp)
 4000754:	b12dc83a 	sub	r22,r22,r4
 4000758:	1d800216 	blt	r3,r22,4000764 <___vfprintf_internal_r+0x25c>
 400075c:	b5800c04 	addi	r22,r22,48
 4000760:	00000506 	br	4000778 <___vfprintf_internal_r+0x270>
 4000764:	d8c00e17 	ldw	r3,56(sp)
 4000768:	18000226 	beq	r3,zero,4000774 <___vfprintf_internal_r+0x26c>
 400076c:	b5800dc4 	addi	r22,r22,55
 4000770:	00000106 	br	4000778 <___vfprintf_internal_r+0x270>
 4000774:	b58015c4 	addi	r22,r22,87
 4000778:	a5800005 	stb	r22,0(r20)
 400077c:	a5000044 	addi	r20,r20,1
 4000780:	102d883a 	mov	r22,r2
 4000784:	003feb06 	br	4000734 <__ram_exceptions_end+0xfbfe04f0>
 4000788:	a6c7c83a 	sub	r3,r20,sp
 400078c:	d8c00a15 	stw	r3,40(sp)
 4000790:	90c5c83a 	sub	r2,r18,r3
 4000794:	00800a0e 	bge	zero,r2,40007c0 <___vfprintf_internal_r+0x2b8>
 4000798:	a085883a 	add	r2,r20,r2
 400079c:	01400c04 	movi	r5,48
 40007a0:	d8c00917 	ldw	r3,36(sp)
 40007a4:	a009883a 	mov	r4,r20
 40007a8:	a0c0032e 	bgeu	r20,r3,40007b8 <___vfprintf_internal_r+0x2b0>
 40007ac:	a5000044 	addi	r20,r20,1
 40007b0:	21400005 	stb	r5,0(r4)
 40007b4:	a0bffa1e 	bne	r20,r2,40007a0 <__ram_exceptions_end+0xfbfe055c>
 40007b8:	a6c7c83a 	sub	r3,r20,sp
 40007bc:	d8c00a15 	stw	r3,40(sp)
 40007c0:	d8c00a17 	ldw	r3,40(sp)
 40007c4:	50d3883a 	add	r9,r10,r3
 40007c8:	d8c00b17 	ldw	r3,44(sp)
 40007cc:	8a6dc83a 	sub	r22,r17,r9
 40007d0:	18001726 	beq	r3,zero,4000830 <___vfprintf_internal_r+0x328>
 40007d4:	50000a26 	beq	r10,zero,4000800 <___vfprintf_internal_r+0x2f8>
 40007d8:	00800b44 	movi	r2,45
 40007dc:	d8800805 	stb	r2,32(sp)
 40007e0:	e0800117 	ldw	r2,4(fp)
 40007e4:	01c00044 	movi	r7,1
 40007e8:	d9800804 	addi	r6,sp,32
 40007ec:	e00b883a 	mov	r5,fp
 40007f0:	9809883a 	mov	r4,r19
 40007f4:	103ee83a 	callr	r2
 40007f8:	10004d1e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 40007fc:	84000044 	addi	r16,r16,1
 4000800:	0580070e 	bge	zero,r22,4000820 <___vfprintf_internal_r+0x318>
 4000804:	b00f883a 	mov	r7,r22
 4000808:	01800c04 	movi	r6,48
 400080c:	e00b883a 	mov	r5,fp
 4000810:	9809883a 	mov	r4,r19
 4000814:	400049c0 	call	400049c <print_repeat>
 4000818:	1000451e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 400081c:	85a1883a 	add	r16,r16,r22
 4000820:	d8c00a17 	ldw	r3,40(sp)
 4000824:	a013883a 	mov	r9,r20
 4000828:	1d2dc83a 	sub	r22,r3,r20
 400082c:	00002206 	br	40008b8 <___vfprintf_internal_r+0x3b0>
 4000830:	0580090e 	bge	zero,r22,4000858 <___vfprintf_internal_r+0x350>
 4000834:	b00f883a 	mov	r7,r22
 4000838:	01800804 	movi	r6,32
 400083c:	e00b883a 	mov	r5,fp
 4000840:	9809883a 	mov	r4,r19
 4000844:	da801015 	stw	r10,64(sp)
 4000848:	400049c0 	call	400049c <print_repeat>
 400084c:	da801017 	ldw	r10,64(sp)
 4000850:	1000371e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 4000854:	85a1883a 	add	r16,r16,r22
 4000858:	503ff126 	beq	r10,zero,4000820 <__ram_exceptions_end+0xfbfe05dc>
 400085c:	00800b44 	movi	r2,45
 4000860:	d8800805 	stb	r2,32(sp)
 4000864:	e0800117 	ldw	r2,4(fp)
 4000868:	01c00044 	movi	r7,1
 400086c:	d9800804 	addi	r6,sp,32
 4000870:	e00b883a 	mov	r5,fp
 4000874:	9809883a 	mov	r4,r19
 4000878:	103ee83a 	callr	r2
 400087c:	10002c1e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 4000880:	84000044 	addi	r16,r16,1
 4000884:	003fe606 	br	4000820 <__ram_exceptions_end+0xfbfe05dc>
 4000888:	4a7fffc4 	addi	r9,r9,-1
 400088c:	48800003 	ldbu	r2,0(r9)
 4000890:	01c00044 	movi	r7,1
 4000894:	d9800804 	addi	r6,sp,32
 4000898:	d8800805 	stb	r2,32(sp)
 400089c:	e0800117 	ldw	r2,4(fp)
 40008a0:	e00b883a 	mov	r5,fp
 40008a4:	da401015 	stw	r9,64(sp)
 40008a8:	9809883a 	mov	r4,r19
 40008ac:	103ee83a 	callr	r2
 40008b0:	da401017 	ldw	r9,64(sp)
 40008b4:	10001e1e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 40008b8:	8245c83a 	sub	r2,r16,r9
 40008bc:	4d89883a 	add	r4,r9,r22
 40008c0:	a085883a 	add	r2,r20,r2
 40008c4:	013ff016 	blt	zero,r4,4000888 <__ram_exceptions_end+0xfbfe0644>
 40008c8:	1021883a 	mov	r16,r2
 40008cc:	dd800d17 	ldw	r22,52(sp)
 40008d0:	00004406 	br	40009e4 <___vfprintf_internal_r+0x4dc>
 40008d4:	00800044 	movi	r2,1
 40008d8:	1440080e 	bge	r2,r17,40008fc <___vfprintf_internal_r+0x3f4>
 40008dc:	8d3fffc4 	addi	r20,r17,-1
 40008e0:	a00f883a 	mov	r7,r20
 40008e4:	01800804 	movi	r6,32
 40008e8:	e00b883a 	mov	r5,fp
 40008ec:	9809883a 	mov	r4,r19
 40008f0:	400049c0 	call	400049c <print_repeat>
 40008f4:	10000e1e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 40008f8:	8521883a 	add	r16,r16,r20
 40008fc:	b0800017 	ldw	r2,0(r22)
 4000900:	01c00044 	movi	r7,1
 4000904:	d80d883a 	mov	r6,sp
 4000908:	d8800005 	stb	r2,0(sp)
 400090c:	e0800117 	ldw	r2,4(fp)
 4000910:	e00b883a 	mov	r5,fp
 4000914:	9809883a 	mov	r4,r19
 4000918:	b5000104 	addi	r20,r22,4
 400091c:	103ee83a 	callr	r2
 4000920:	1000031e 	bne	r2,zero,4000930 <___vfprintf_internal_r+0x428>
 4000924:	84000044 	addi	r16,r16,1
 4000928:	a02d883a 	mov	r22,r20
 400092c:	00002d06 	br	40009e4 <___vfprintf_internal_r+0x4dc>
 4000930:	00bfffc4 	movi	r2,-1
 4000934:	00003106 	br	40009fc <___vfprintf_internal_r+0x4f4>
 4000938:	b5000017 	ldw	r20,0(r22)
 400093c:	b0c00104 	addi	r3,r22,4
 4000940:	d8c00a15 	stw	r3,40(sp)
 4000944:	a009883a 	mov	r4,r20
 4000948:	4000b000 	call	4000b00 <strlen>
 400094c:	8893c83a 	sub	r9,r17,r2
 4000950:	102d883a 	mov	r22,r2
 4000954:	0240090e 	bge	zero,r9,400097c <___vfprintf_internal_r+0x474>
 4000958:	480f883a 	mov	r7,r9
 400095c:	01800804 	movi	r6,32
 4000960:	e00b883a 	mov	r5,fp
 4000964:	9809883a 	mov	r4,r19
 4000968:	da401015 	stw	r9,64(sp)
 400096c:	400049c0 	call	400049c <print_repeat>
 4000970:	da401017 	ldw	r9,64(sp)
 4000974:	103fee1e 	bne	r2,zero,4000930 <__ram_exceptions_end+0xfbfe06ec>
 4000978:	8261883a 	add	r16,r16,r9
 400097c:	e0800117 	ldw	r2,4(fp)
 4000980:	b00f883a 	mov	r7,r22
 4000984:	a00d883a 	mov	r6,r20
 4000988:	e00b883a 	mov	r5,fp
 400098c:	9809883a 	mov	r4,r19
 4000990:	103ee83a 	callr	r2
 4000994:	103fe61e 	bne	r2,zero,4000930 <__ram_exceptions_end+0xfbfe06ec>
 4000998:	85a1883a 	add	r16,r16,r22
 400099c:	dd800a17 	ldw	r22,40(sp)
 40009a0:	00001006 	br	40009e4 <___vfprintf_internal_r+0x4dc>
 40009a4:	05c00044 	movi	r23,1
 40009a8:	04bfffc4 	movi	r18,-1
 40009ac:	d8000e15 	stw	zero,56(sp)
 40009b0:	05400284 	movi	r21,10
 40009b4:	9023883a 	mov	r17,r18
 40009b8:	d8000c15 	stw	zero,48(sp)
 40009bc:	d8000b15 	stw	zero,44(sp)
 40009c0:	b829883a 	mov	r20,r23
 40009c4:	00000806 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 40009c8:	dd000b15 	stw	r20,44(sp)
 40009cc:	05000084 	movi	r20,2
 40009d0:	00000506 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 40009d4:	00c00044 	movi	r3,1
 40009d8:	d8c00c15 	stw	r3,48(sp)
 40009dc:	050000c4 	movi	r20,3
 40009e0:	00000106 	br	40009e8 <___vfprintf_internal_r+0x4e0>
 40009e4:	0029883a 	mov	r20,zero
 40009e8:	d8c00f17 	ldw	r3,60(sp)
 40009ec:	18c00044 	addi	r3,r3,1
 40009f0:	d8c00f15 	stw	r3,60(sp)
 40009f4:	003ede06 	br	4000570 <__ram_exceptions_end+0xfbfe032c>
 40009f8:	8005883a 	mov	r2,r16
 40009fc:	dfc01a17 	ldw	ra,104(sp)
 4000a00:	df001917 	ldw	fp,100(sp)
 4000a04:	ddc01817 	ldw	r23,96(sp)
 4000a08:	dd801717 	ldw	r22,92(sp)
 4000a0c:	dd401617 	ldw	r21,88(sp)
 4000a10:	dd001517 	ldw	r20,84(sp)
 4000a14:	dcc01417 	ldw	r19,80(sp)
 4000a18:	dc801317 	ldw	r18,76(sp)
 4000a1c:	dc401217 	ldw	r17,72(sp)
 4000a20:	dc001117 	ldw	r16,68(sp)
 4000a24:	dec01b04 	addi	sp,sp,108
 4000a28:	f800283a 	ret

04000a2c <__vfprintf_internal>:
 4000a2c:	00810034 	movhi	r2,1024
 4000a30:	108f4e04 	addi	r2,r2,15672
 4000a34:	300f883a 	mov	r7,r6
 4000a38:	280d883a 	mov	r6,r5
 4000a3c:	200b883a 	mov	r5,r4
 4000a40:	11000017 	ldw	r4,0(r2)
 4000a44:	40005081 	jmpi	4000508 <___vfprintf_internal_r>

04000a48 <__sfvwrite_small_dev>:
 4000a48:	2880000b 	ldhu	r2,0(r5)
 4000a4c:	1080020c 	andi	r2,r2,8
 4000a50:	10002126 	beq	r2,zero,4000ad8 <__sfvwrite_small_dev+0x90>
 4000a54:	2880008f 	ldh	r2,2(r5)
 4000a58:	defffa04 	addi	sp,sp,-24
 4000a5c:	dc000015 	stw	r16,0(sp)
 4000a60:	dfc00515 	stw	ra,20(sp)
 4000a64:	dd000415 	stw	r20,16(sp)
 4000a68:	dcc00315 	stw	r19,12(sp)
 4000a6c:	dc800215 	stw	r18,8(sp)
 4000a70:	dc400115 	stw	r17,4(sp)
 4000a74:	2821883a 	mov	r16,r5
 4000a78:	10001216 	blt	r2,zero,4000ac4 <__sfvwrite_small_dev+0x7c>
 4000a7c:	2027883a 	mov	r19,r4
 4000a80:	3025883a 	mov	r18,r6
 4000a84:	3823883a 	mov	r17,r7
 4000a88:	05010004 	movi	r20,1024
 4000a8c:	04400b0e 	bge	zero,r17,4000abc <__sfvwrite_small_dev+0x74>
 4000a90:	880f883a 	mov	r7,r17
 4000a94:	a440010e 	bge	r20,r17,4000a9c <__sfvwrite_small_dev+0x54>
 4000a98:	01c10004 	movi	r7,1024
 4000a9c:	8140008f 	ldh	r5,2(r16)
 4000aa0:	900d883a 	mov	r6,r18
 4000aa4:	9809883a 	mov	r4,r19
 4000aa8:	4000b1c0 	call	4000b1c <_write_r>
 4000aac:	0080050e 	bge	zero,r2,4000ac4 <__sfvwrite_small_dev+0x7c>
 4000ab0:	88a3c83a 	sub	r17,r17,r2
 4000ab4:	90a5883a 	add	r18,r18,r2
 4000ab8:	003ff406 	br	4000a8c <__ram_exceptions_end+0xfbfe0848>
 4000abc:	0005883a 	mov	r2,zero
 4000ac0:	00000706 	br	4000ae0 <__sfvwrite_small_dev+0x98>
 4000ac4:	8080000b 	ldhu	r2,0(r16)
 4000ac8:	10801014 	ori	r2,r2,64
 4000acc:	8080000d 	sth	r2,0(r16)
 4000ad0:	00bfffc4 	movi	r2,-1
 4000ad4:	00000206 	br	4000ae0 <__sfvwrite_small_dev+0x98>
 4000ad8:	00bfffc4 	movi	r2,-1
 4000adc:	f800283a 	ret
 4000ae0:	dfc00517 	ldw	ra,20(sp)
 4000ae4:	dd000417 	ldw	r20,16(sp)
 4000ae8:	dcc00317 	ldw	r19,12(sp)
 4000aec:	dc800217 	ldw	r18,8(sp)
 4000af0:	dc400117 	ldw	r17,4(sp)
 4000af4:	dc000017 	ldw	r16,0(sp)
 4000af8:	dec00604 	addi	sp,sp,24
 4000afc:	f800283a 	ret

04000b00 <strlen>:
 4000b00:	2005883a 	mov	r2,r4
 4000b04:	10c00007 	ldb	r3,0(r2)
 4000b08:	18000226 	beq	r3,zero,4000b14 <strlen+0x14>
 4000b0c:	10800044 	addi	r2,r2,1
 4000b10:	003ffc06 	br	4000b04 <__ram_exceptions_end+0xfbfe08c0>
 4000b14:	1105c83a 	sub	r2,r2,r4
 4000b18:	f800283a 	ret

04000b1c <_write_r>:
 4000b1c:	defffd04 	addi	sp,sp,-12
 4000b20:	dc000015 	stw	r16,0(sp)
 4000b24:	04010034 	movhi	r16,1024
 4000b28:	dc400115 	stw	r17,4(sp)
 4000b2c:	84103604 	addi	r16,r16,16600
 4000b30:	2023883a 	mov	r17,r4
 4000b34:	2809883a 	mov	r4,r5
 4000b38:	300b883a 	mov	r5,r6
 4000b3c:	380d883a 	mov	r6,r7
 4000b40:	dfc00215 	stw	ra,8(sp)
 4000b44:	80000015 	stw	zero,0(r16)
 4000b48:	4000efc0 	call	4000efc <write>
 4000b4c:	00ffffc4 	movi	r3,-1
 4000b50:	10c0031e 	bne	r2,r3,4000b60 <_write_r+0x44>
 4000b54:	80c00017 	ldw	r3,0(r16)
 4000b58:	18000126 	beq	r3,zero,4000b60 <_write_r+0x44>
 4000b5c:	88c00015 	stw	r3,0(r17)
 4000b60:	dfc00217 	ldw	ra,8(sp)
 4000b64:	dc400117 	ldw	r17,4(sp)
 4000b68:	dc000017 	ldw	r16,0(sp)
 4000b6c:	dec00304 	addi	sp,sp,12
 4000b70:	f800283a 	ret

04000b74 <__divsi3>:
 4000b74:	20001b16 	blt	r4,zero,4000be4 <__divsi3+0x70>
 4000b78:	000f883a 	mov	r7,zero
 4000b7c:	28001616 	blt	r5,zero,4000bd8 <__divsi3+0x64>
 4000b80:	200d883a 	mov	r6,r4
 4000b84:	29001a2e 	bgeu	r5,r4,4000bf0 <__divsi3+0x7c>
 4000b88:	00800804 	movi	r2,32
 4000b8c:	00c00044 	movi	r3,1
 4000b90:	00000106 	br	4000b98 <__divsi3+0x24>
 4000b94:	10000d26 	beq	r2,zero,4000bcc <__divsi3+0x58>
 4000b98:	294b883a 	add	r5,r5,r5
 4000b9c:	10bfffc4 	addi	r2,r2,-1
 4000ba0:	18c7883a 	add	r3,r3,r3
 4000ba4:	293ffb36 	bltu	r5,r4,4000b94 <__ram_exceptions_end+0xfbfe0950>
 4000ba8:	0005883a 	mov	r2,zero
 4000bac:	18000726 	beq	r3,zero,4000bcc <__divsi3+0x58>
 4000bb0:	0005883a 	mov	r2,zero
 4000bb4:	31400236 	bltu	r6,r5,4000bc0 <__divsi3+0x4c>
 4000bb8:	314dc83a 	sub	r6,r6,r5
 4000bbc:	10c4b03a 	or	r2,r2,r3
 4000bc0:	1806d07a 	srli	r3,r3,1
 4000bc4:	280ad07a 	srli	r5,r5,1
 4000bc8:	183ffa1e 	bne	r3,zero,4000bb4 <__ram_exceptions_end+0xfbfe0970>
 4000bcc:	38000126 	beq	r7,zero,4000bd4 <__divsi3+0x60>
 4000bd0:	0085c83a 	sub	r2,zero,r2
 4000bd4:	f800283a 	ret
 4000bd8:	014bc83a 	sub	r5,zero,r5
 4000bdc:	39c0005c 	xori	r7,r7,1
 4000be0:	003fe706 	br	4000b80 <__ram_exceptions_end+0xfbfe093c>
 4000be4:	0109c83a 	sub	r4,zero,r4
 4000be8:	01c00044 	movi	r7,1
 4000bec:	003fe306 	br	4000b7c <__ram_exceptions_end+0xfbfe0938>
 4000bf0:	00c00044 	movi	r3,1
 4000bf4:	003fee06 	br	4000bb0 <__ram_exceptions_end+0xfbfe096c>

04000bf8 <__modsi3>:
 4000bf8:	20001716 	blt	r4,zero,4000c58 <__modsi3+0x60>
 4000bfc:	000f883a 	mov	r7,zero
 4000c00:	2005883a 	mov	r2,r4
 4000c04:	28001216 	blt	r5,zero,4000c50 <__modsi3+0x58>
 4000c08:	2900162e 	bgeu	r5,r4,4000c64 <__modsi3+0x6c>
 4000c0c:	01800804 	movi	r6,32
 4000c10:	00c00044 	movi	r3,1
 4000c14:	00000106 	br	4000c1c <__modsi3+0x24>
 4000c18:	30000a26 	beq	r6,zero,4000c44 <__modsi3+0x4c>
 4000c1c:	294b883a 	add	r5,r5,r5
 4000c20:	31bfffc4 	addi	r6,r6,-1
 4000c24:	18c7883a 	add	r3,r3,r3
 4000c28:	293ffb36 	bltu	r5,r4,4000c18 <__ram_exceptions_end+0xfbfe09d4>
 4000c2c:	18000526 	beq	r3,zero,4000c44 <__modsi3+0x4c>
 4000c30:	1806d07a 	srli	r3,r3,1
 4000c34:	11400136 	bltu	r2,r5,4000c3c <__modsi3+0x44>
 4000c38:	1145c83a 	sub	r2,r2,r5
 4000c3c:	280ad07a 	srli	r5,r5,1
 4000c40:	183ffb1e 	bne	r3,zero,4000c30 <__ram_exceptions_end+0xfbfe09ec>
 4000c44:	38000126 	beq	r7,zero,4000c4c <__modsi3+0x54>
 4000c48:	0085c83a 	sub	r2,zero,r2
 4000c4c:	f800283a 	ret
 4000c50:	014bc83a 	sub	r5,zero,r5
 4000c54:	003fec06 	br	4000c08 <__ram_exceptions_end+0xfbfe09c4>
 4000c58:	0109c83a 	sub	r4,zero,r4
 4000c5c:	01c00044 	movi	r7,1
 4000c60:	003fe706 	br	4000c00 <__ram_exceptions_end+0xfbfe09bc>
 4000c64:	00c00044 	movi	r3,1
 4000c68:	003ff106 	br	4000c30 <__ram_exceptions_end+0xfbfe09ec>

04000c6c <__udivsi3>:
 4000c6c:	200d883a 	mov	r6,r4
 4000c70:	2900152e 	bgeu	r5,r4,4000cc8 <__udivsi3+0x5c>
 4000c74:	28001416 	blt	r5,zero,4000cc8 <__udivsi3+0x5c>
 4000c78:	00800804 	movi	r2,32
 4000c7c:	00c00044 	movi	r3,1
 4000c80:	00000206 	br	4000c8c <__udivsi3+0x20>
 4000c84:	10000e26 	beq	r2,zero,4000cc0 <__udivsi3+0x54>
 4000c88:	28000516 	blt	r5,zero,4000ca0 <__udivsi3+0x34>
 4000c8c:	294b883a 	add	r5,r5,r5
 4000c90:	10bfffc4 	addi	r2,r2,-1
 4000c94:	18c7883a 	add	r3,r3,r3
 4000c98:	293ffa36 	bltu	r5,r4,4000c84 <__ram_exceptions_end+0xfbfe0a40>
 4000c9c:	18000826 	beq	r3,zero,4000cc0 <__udivsi3+0x54>
 4000ca0:	0005883a 	mov	r2,zero
 4000ca4:	31400236 	bltu	r6,r5,4000cb0 <__udivsi3+0x44>
 4000ca8:	314dc83a 	sub	r6,r6,r5
 4000cac:	10c4b03a 	or	r2,r2,r3
 4000cb0:	1806d07a 	srli	r3,r3,1
 4000cb4:	280ad07a 	srli	r5,r5,1
 4000cb8:	183ffa1e 	bne	r3,zero,4000ca4 <__ram_exceptions_end+0xfbfe0a60>
 4000cbc:	f800283a 	ret
 4000cc0:	0005883a 	mov	r2,zero
 4000cc4:	f800283a 	ret
 4000cc8:	00c00044 	movi	r3,1
 4000ccc:	003ff406 	br	4000ca0 <__ram_exceptions_end+0xfbfe0a5c>

04000cd0 <__umodsi3>:
 4000cd0:	2005883a 	mov	r2,r4
 4000cd4:	2900122e 	bgeu	r5,r4,4000d20 <__umodsi3+0x50>
 4000cd8:	28001116 	blt	r5,zero,4000d20 <__umodsi3+0x50>
 4000cdc:	01800804 	movi	r6,32
 4000ce0:	00c00044 	movi	r3,1
 4000ce4:	00000206 	br	4000cf0 <__umodsi3+0x20>
 4000ce8:	30000c26 	beq	r6,zero,4000d1c <__umodsi3+0x4c>
 4000cec:	28000516 	blt	r5,zero,4000d04 <__umodsi3+0x34>
 4000cf0:	294b883a 	add	r5,r5,r5
 4000cf4:	31bfffc4 	addi	r6,r6,-1
 4000cf8:	18c7883a 	add	r3,r3,r3
 4000cfc:	293ffa36 	bltu	r5,r4,4000ce8 <__ram_exceptions_end+0xfbfe0aa4>
 4000d00:	18000626 	beq	r3,zero,4000d1c <__umodsi3+0x4c>
 4000d04:	1806d07a 	srli	r3,r3,1
 4000d08:	11400136 	bltu	r2,r5,4000d10 <__umodsi3+0x40>
 4000d0c:	1145c83a 	sub	r2,r2,r5
 4000d10:	280ad07a 	srli	r5,r5,1
 4000d14:	183ffb1e 	bne	r3,zero,4000d04 <__ram_exceptions_end+0xfbfe0ac0>
 4000d18:	f800283a 	ret
 4000d1c:	f800283a 	ret
 4000d20:	00c00044 	movi	r3,1
 4000d24:	003ff706 	br	4000d04 <__ram_exceptions_end+0xfbfe0ac0>

04000d28 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4000d28:	defffc04 	addi	sp,sp,-16
 4000d2c:	df000315 	stw	fp,12(sp)
 4000d30:	df000304 	addi	fp,sp,12
 4000d34:	e13ffd15 	stw	r4,-12(fp)
 4000d38:	e17ffe15 	stw	r5,-8(fp)
 4000d3c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4000d40:	e0fffe17 	ldw	r3,-8(fp)
 4000d44:	e0bffd17 	ldw	r2,-12(fp)
 4000d48:	18800c26 	beq	r3,r2,4000d7c <alt_load_section+0x54>
  {
    while( to != end )
 4000d4c:	00000806 	br	4000d70 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4000d50:	e0bffe17 	ldw	r2,-8(fp)
 4000d54:	10c00104 	addi	r3,r2,4
 4000d58:	e0fffe15 	stw	r3,-8(fp)
 4000d5c:	e0fffd17 	ldw	r3,-12(fp)
 4000d60:	19000104 	addi	r4,r3,4
 4000d64:	e13ffd15 	stw	r4,-12(fp)
 4000d68:	18c00017 	ldw	r3,0(r3)
 4000d6c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4000d70:	e0fffe17 	ldw	r3,-8(fp)
 4000d74:	e0bfff17 	ldw	r2,-4(fp)
 4000d78:	18bff51e 	bne	r3,r2,4000d50 <__ram_exceptions_end+0xfbfe0b0c>
    {
      *to++ = *from++;
    }
  }
}
 4000d7c:	0001883a 	nop
 4000d80:	e037883a 	mov	sp,fp
 4000d84:	df000017 	ldw	fp,0(sp)
 4000d88:	dec00104 	addi	sp,sp,4
 4000d8c:	f800283a 	ret

04000d90 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4000d90:	defffe04 	addi	sp,sp,-8
 4000d94:	dfc00115 	stw	ra,4(sp)
 4000d98:	df000015 	stw	fp,0(sp)
 4000d9c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4000da0:	01810034 	movhi	r6,1024
 4000da4:	318f5804 	addi	r6,r6,15712
 4000da8:	01410034 	movhi	r5,1024
 4000dac:	294e7a04 	addi	r5,r5,14824
 4000db0:	01010034 	movhi	r4,1024
 4000db4:	210f5804 	addi	r4,r4,15712
 4000db8:	4000d280 	call	4000d28 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4000dbc:	018200b4 	movhi	r6,2050
 4000dc0:	31809104 	addi	r6,r6,580
 4000dc4:	014200b4 	movhi	r5,2050
 4000dc8:	29400804 	addi	r5,r5,32
 4000dcc:	01010034 	movhi	r4,1024
 4000dd0:	21000004 	addi	r4,r4,0
 4000dd4:	4000d280 	call	4000d28 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4000dd8:	01810034 	movhi	r6,1024
 4000ddc:	318e7a04 	addi	r6,r6,14824
 4000de0:	01410034 	movhi	r5,1024
 4000de4:	294e5204 	addi	r5,r5,14664
 4000de8:	01010034 	movhi	r4,1024
 4000dec:	210e5204 	addi	r4,r4,14664
 4000df0:	4000d280 	call	4000d28 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4000df4:	40027b80 	call	40027b8 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4000df8:	4002a5c0 	call	4002a5c <alt_icache_flush_all>
}
 4000dfc:	0001883a 	nop
 4000e00:	e037883a 	mov	sp,fp
 4000e04:	dfc00117 	ldw	ra,4(sp)
 4000e08:	df000017 	ldw	fp,0(sp)
 4000e0c:	dec00204 	addi	sp,sp,8
 4000e10:	f800283a 	ret

04000e14 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4000e14:	defffd04 	addi	sp,sp,-12
 4000e18:	dfc00215 	stw	ra,8(sp)
 4000e1c:	df000115 	stw	fp,4(sp)
 4000e20:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4000e24:	0009883a 	mov	r4,zero
 4000e28:	40010280 	call	4001028 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4000e2c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4000e30:	40010600 	call	4001060 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4000e34:	01810034 	movhi	r6,1024
 4000e38:	318e5e04 	addi	r6,r6,14712
 4000e3c:	01410034 	movhi	r5,1024
 4000e40:	294e5e04 	addi	r5,r5,14712
 4000e44:	01010034 	movhi	r4,1024
 4000e48:	210e5e04 	addi	r4,r4,14712
 4000e4c:	4002df40 	call	4002df4 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4000e50:	400290c0 	call	400290c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4000e54:	01010034 	movhi	r4,1024
 4000e58:	210a5b04 	addi	r4,r4,10604
 4000e5c:	40035c80 	call	40035c8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4000e60:	d0a0ea17 	ldw	r2,-31832(gp)
 4000e64:	d0e0eb17 	ldw	r3,-31828(gp)
 4000e68:	d120ec17 	ldw	r4,-31824(gp)
 4000e6c:	200d883a 	mov	r6,r4
 4000e70:	180b883a 	mov	r5,r3
 4000e74:	1009883a 	mov	r4,r2
 4000e78:	40002700 	call	4000270 <main>
 4000e7c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4000e80:	01000044 	movi	r4,1
 4000e84:	40026e80 	call	40026e8 <close>
  exit (result);
 4000e88:	e13fff17 	ldw	r4,-4(fp)
 4000e8c:	40035dc0 	call	40035dc <exit>

04000e90 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4000e90:	defffd04 	addi	sp,sp,-12
 4000e94:	dfc00215 	stw	ra,8(sp)
 4000e98:	df000115 	stw	fp,4(sp)
 4000e9c:	df000104 	addi	fp,sp,4
 4000ea0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4000ea4:	e13fff17 	ldw	r4,-4(fp)
 4000ea8:	40025540 	call	4002554 <alt_busy_sleep>
}
 4000eac:	e037883a 	mov	sp,fp
 4000eb0:	dfc00117 	ldw	ra,4(sp)
 4000eb4:	df000017 	ldw	fp,0(sp)
 4000eb8:	dec00204 	addi	sp,sp,8
 4000ebc:	f800283a 	ret

04000ec0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4000ec0:	defffe04 	addi	sp,sp,-8
 4000ec4:	dfc00115 	stw	ra,4(sp)
 4000ec8:	df000015 	stw	fp,0(sp)
 4000ecc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4000ed0:	d0a00717 	ldw	r2,-32740(gp)
 4000ed4:	10000326 	beq	r2,zero,4000ee4 <alt_get_errno+0x24>
 4000ed8:	d0a00717 	ldw	r2,-32740(gp)
 4000edc:	103ee83a 	callr	r2
 4000ee0:	00000106 	br	4000ee8 <alt_get_errno+0x28>
 4000ee4:	d0a0e904 	addi	r2,gp,-31836
}
 4000ee8:	e037883a 	mov	sp,fp
 4000eec:	dfc00117 	ldw	ra,4(sp)
 4000ef0:	df000017 	ldw	fp,0(sp)
 4000ef4:	dec00204 	addi	sp,sp,8
 4000ef8:	f800283a 	ret

04000efc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 4000efc:	defff904 	addi	sp,sp,-28
 4000f00:	dfc00615 	stw	ra,24(sp)
 4000f04:	df000515 	stw	fp,20(sp)
 4000f08:	df000504 	addi	fp,sp,20
 4000f0c:	e13ffd15 	stw	r4,-12(fp)
 4000f10:	e17ffe15 	stw	r5,-8(fp)
 4000f14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 4000f18:	e0bffd17 	ldw	r2,-12(fp)
 4000f1c:	10000616 	blt	r2,zero,4000f38 <write+0x3c>
 4000f20:	e0bffd17 	ldw	r2,-12(fp)
 4000f24:	10c00324 	muli	r3,r2,12
 4000f28:	00810034 	movhi	r2,1024
 4000f2c:	108eed04 	addi	r2,r2,15284
 4000f30:	1885883a 	add	r2,r3,r2
 4000f34:	00000106 	br	4000f3c <write+0x40>
 4000f38:	0005883a 	mov	r2,zero
 4000f3c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4000f40:	e0bffb17 	ldw	r2,-20(fp)
 4000f44:	10002126 	beq	r2,zero,4000fcc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 4000f48:	e0bffb17 	ldw	r2,-20(fp)
 4000f4c:	10800217 	ldw	r2,8(r2)
 4000f50:	108000cc 	andi	r2,r2,3
 4000f54:	10001826 	beq	r2,zero,4000fb8 <write+0xbc>
 4000f58:	e0bffb17 	ldw	r2,-20(fp)
 4000f5c:	10800017 	ldw	r2,0(r2)
 4000f60:	10800617 	ldw	r2,24(r2)
 4000f64:	10001426 	beq	r2,zero,4000fb8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 4000f68:	e0bffb17 	ldw	r2,-20(fp)
 4000f6c:	10800017 	ldw	r2,0(r2)
 4000f70:	10800617 	ldw	r2,24(r2)
 4000f74:	e0ffff17 	ldw	r3,-4(fp)
 4000f78:	180d883a 	mov	r6,r3
 4000f7c:	e17ffe17 	ldw	r5,-8(fp)
 4000f80:	e13ffb17 	ldw	r4,-20(fp)
 4000f84:	103ee83a 	callr	r2
 4000f88:	e0bffc15 	stw	r2,-16(fp)
 4000f8c:	e0bffc17 	ldw	r2,-16(fp)
 4000f90:	1000070e 	bge	r2,zero,4000fb0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4000f94:	4000ec00 	call	4000ec0 <alt_get_errno>
 4000f98:	1007883a 	mov	r3,r2
 4000f9c:	e0bffc17 	ldw	r2,-16(fp)
 4000fa0:	0085c83a 	sub	r2,zero,r2
 4000fa4:	18800015 	stw	r2,0(r3)
        return -1;
 4000fa8:	00bfffc4 	movi	r2,-1
 4000fac:	00000c06 	br	4000fe0 <write+0xe4>
      }
      return rval;
 4000fb0:	e0bffc17 	ldw	r2,-16(fp)
 4000fb4:	00000a06 	br	4000fe0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 4000fb8:	4000ec00 	call	4000ec0 <alt_get_errno>
 4000fbc:	1007883a 	mov	r3,r2
 4000fc0:	00800344 	movi	r2,13
 4000fc4:	18800015 	stw	r2,0(r3)
 4000fc8:	00000406 	br	4000fdc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 4000fcc:	4000ec00 	call	4000ec0 <alt_get_errno>
 4000fd0:	1007883a 	mov	r3,r2
 4000fd4:	00801444 	movi	r2,81
 4000fd8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 4000fdc:	00bfffc4 	movi	r2,-1
}
 4000fe0:	e037883a 	mov	sp,fp
 4000fe4:	dfc00117 	ldw	ra,4(sp)
 4000fe8:	df000017 	ldw	fp,0(sp)
 4000fec:	dec00204 	addi	sp,sp,8
 4000ff0:	f800283a 	ret

04000ff4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4000ff4:	defffd04 	addi	sp,sp,-12
 4000ff8:	dfc00215 	stw	ra,8(sp)
 4000ffc:	df000115 	stw	fp,4(sp)
 4001000:	df000104 	addi	fp,sp,4
 4001004:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4001008:	d1600404 	addi	r5,gp,-32752
 400100c:	e13fff17 	ldw	r4,-4(fp)
 4001010:	40028680 	call	4002868 <alt_dev_llist_insert>
}
 4001014:	e037883a 	mov	sp,fp
 4001018:	dfc00117 	ldw	ra,4(sp)
 400101c:	df000017 	ldw	fp,0(sp)
 4001020:	dec00204 	addi	sp,sp,8
 4001024:	f800283a 	ret

04001028 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4001028:	defffd04 	addi	sp,sp,-12
 400102c:	dfc00215 	stw	ra,8(sp)
 4001030:	df000115 	stw	fp,4(sp)
 4001034:	df000104 	addi	fp,sp,4
 4001038:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 400103c:	40032cc0 	call	40032cc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4001040:	00800044 	movi	r2,1
 4001044:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4001048:	0001883a 	nop
 400104c:	e037883a 	mov	sp,fp
 4001050:	dfc00117 	ldw	ra,4(sp)
 4001054:	df000017 	ldw	fp,0(sp)
 4001058:	dec00204 	addi	sp,sp,8
 400105c:	f800283a 	ret

04001060 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4001060:	defffd04 	addi	sp,sp,-12
 4001064:	dfc00215 	stw	ra,8(sp)
 4001068:	df000115 	stw	fp,4(sp)
 400106c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4001070:	01c0fa04 	movi	r7,1000
 4001074:	01800044 	movi	r6,1
 4001078:	000b883a 	mov	r5,zero
 400107c:	01020134 	movhi	r4,2052
 4001080:	21040004 	addi	r4,r4,4096
 4001084:	40016240 	call	4001624 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 4001088:	01010034 	movhi	r4,1024
 400108c:	210eb204 	addi	r4,r4,15048
 4001090:	4000ff40 	call	4000ff4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4001094:	0001883a 	nop
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 4001098:	00810034 	movhi	r2,1024
 400109c:	108ebd04 	addi	r2,r2,15092
 40010a0:	10800a17 	ldw	r2,40(r2)
 40010a4:	10800017 	ldw	r2,0(r2)
 40010a8:	1007883a 	mov	r3,r2
 40010ac:	00810034 	movhi	r2,1024
 40010b0:	108ebd04 	addi	r2,r2,15092
 40010b4:	10c00b15 	stw	r3,44(r2)
 40010b8:	00810034 	movhi	r2,1024
 40010bc:	108ebd04 	addi	r2,r2,15092
 40010c0:	10800a17 	ldw	r2,40(r2)
 40010c4:	10800104 	addi	r2,r2,4
 40010c8:	10800017 	ldw	r2,0(r2)
 40010cc:	1007883a 	mov	r3,r2
 40010d0:	00810034 	movhi	r2,1024
 40010d4:	108ebd04 	addi	r2,r2,15092
 40010d8:	10c00c15 	stw	r3,48(r2)
 40010dc:	00810034 	movhi	r2,1024
 40010e0:	108ebd04 	addi	r2,r2,15092
 40010e4:	10800a17 	ldw	r2,40(r2)
 40010e8:	10800204 	addi	r2,r2,8
 40010ec:	10800017 	ldw	r2,0(r2)
 40010f0:	10ffffcc 	andi	r3,r2,65535
 40010f4:	00810034 	movhi	r2,1024
 40010f8:	108ebd04 	addi	r2,r2,15092
 40010fc:	10c00f15 	stw	r3,60(r2)
 4001100:	00810034 	movhi	r2,1024
 4001104:	108ebd04 	addi	r2,r2,15092
 4001108:	10800a17 	ldw	r2,40(r2)
 400110c:	10800204 	addi	r2,r2,8
 4001110:	10800017 	ldw	r2,0(r2)
 4001114:	1006d43a 	srli	r3,r2,16
 4001118:	00810034 	movhi	r2,1024
 400111c:	108ebd04 	addi	r2,r2,15092
 4001120:	10c01015 	stw	r3,64(r2)
 4001124:	00810034 	movhi	r2,1024
 4001128:	108ebd04 	addi	r2,r2,15092
 400112c:	10800a17 	ldw	r2,40(r2)
 4001130:	10800304 	addi	r2,r2,12
 4001134:	10800017 	ldw	r2,0(r2)
 4001138:	1005d07a 	srai	r2,r2,1
 400113c:	10c0004c 	andi	r3,r2,1
 4001140:	00810034 	movhi	r2,1024
 4001144:	108ebd04 	addi	r2,r2,15092
 4001148:	10c00d15 	stw	r3,52(r2)
 400114c:	00810034 	movhi	r2,1024
 4001150:	108ebd04 	addi	r2,r2,15092
 4001154:	10800a17 	ldw	r2,40(r2)
 4001158:	10800304 	addi	r2,r2,12
 400115c:	10800017 	ldw	r2,0(r2)
 4001160:	1005d13a 	srai	r2,r2,4
 4001164:	10c003cc 	andi	r3,r2,15
 4001168:	00810034 	movhi	r2,1024
 400116c:	108ebd04 	addi	r2,r2,15092
 4001170:	10c00e15 	stw	r3,56(r2)
 4001174:	00810034 	movhi	r2,1024
 4001178:	108ebd04 	addi	r2,r2,15092
 400117c:	10800a17 	ldw	r2,40(r2)
 4001180:	10800304 	addi	r2,r2,12
 4001184:	10800017 	ldw	r2,0(r2)
 4001188:	1005d43a 	srai	r2,r2,16
 400118c:	e0bfff05 	stb	r2,-4(fp)
 4001190:	00810034 	movhi	r2,1024
 4001194:	108ebd04 	addi	r2,r2,15092
 4001198:	10800a17 	ldw	r2,40(r2)
 400119c:	10800304 	addi	r2,r2,12
 40011a0:	10800017 	ldw	r2,0(r2)
 40011a4:	1004d63a 	srli	r2,r2,24
 40011a8:	e0bfff45 	stb	r2,-3(fp)
 40011ac:	00810034 	movhi	r2,1024
 40011b0:	108ebd04 	addi	r2,r2,15092
 40011b4:	10800e17 	ldw	r2,56(r2)
 40011b8:	10800058 	cmpnei	r2,r2,1
 40011bc:	1000041e 	bne	r2,zero,40011d0 <alt_sys_init+0x170>
 40011c0:	00810034 	movhi	r2,1024
 40011c4:	108ebd04 	addi	r2,r2,15092
 40011c8:	10001115 	stw	zero,68(r2)
 40011cc:	00000e06 	br	4001208 <alt_sys_init+0x1a8>
 40011d0:	00810034 	movhi	r2,1024
 40011d4:	108ebd04 	addi	r2,r2,15092
 40011d8:	10800e17 	ldw	r2,56(r2)
 40011dc:	10800098 	cmpnei	r2,r2,2
 40011e0:	1000051e 	bne	r2,zero,40011f8 <alt_sys_init+0x198>
 40011e4:	00810034 	movhi	r2,1024
 40011e8:	108ebd04 	addi	r2,r2,15092
 40011ec:	00c00044 	movi	r3,1
 40011f0:	10c01115 	stw	r3,68(r2)
 40011f4:	00000406 	br	4001208 <alt_sys_init+0x1a8>
 40011f8:	00810034 	movhi	r2,1024
 40011fc:	108ebd04 	addi	r2,r2,15092
 4001200:	00c00084 	movi	r3,2
 4001204:	10c01115 	stw	r3,68(r2)
 4001208:	e0bfff03 	ldbu	r2,-4(fp)
 400120c:	00c00804 	movi	r3,32
 4001210:	1885c83a 	sub	r2,r3,r2
 4001214:	00ffffc4 	movi	r3,-1
 4001218:	1886d83a 	srl	r3,r3,r2
 400121c:	00810034 	movhi	r2,1024
 4001220:	108ebd04 	addi	r2,r2,15092
 4001224:	10c01215 	stw	r3,72(r2)
 4001228:	e0ffff03 	ldbu	r3,-4(fp)
 400122c:	00810034 	movhi	r2,1024
 4001230:	108ebd04 	addi	r2,r2,15092
 4001234:	10801117 	ldw	r2,68(r2)
 4001238:	1887883a 	add	r3,r3,r2
 400123c:	00810034 	movhi	r2,1024
 4001240:	108ebd04 	addi	r2,r2,15092
 4001244:	10c01315 	stw	r3,76(r2)
 4001248:	e0bfff43 	ldbu	r2,-3(fp)
 400124c:	00c00804 	movi	r3,32
 4001250:	1885c83a 	sub	r2,r3,r2
 4001254:	00ffffc4 	movi	r3,-1
 4001258:	1886d83a 	srl	r3,r3,r2
 400125c:	00810034 	movhi	r2,1024
 4001260:	108ebd04 	addi	r2,r2,15092
 4001264:	10c01415 	stw	r3,80(r2)
 4001268:	01010034 	movhi	r4,1024
 400126c:	210ebd04 	addi	r4,r4,15092
 4001270:	4000ff40 	call	4000ff4 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 4001274:	00810034 	movhi	r2,1024
 4001278:	108ed204 	addi	r2,r2,15176
 400127c:	10800a17 	ldw	r2,40(r2)
 4001280:	10800017 	ldw	r2,0(r2)
 4001284:	10c003cc 	andi	r3,r2,15
 4001288:	00810034 	movhi	r2,1024
 400128c:	108ed204 	addi	r2,r2,15176
 4001290:	10c00b15 	stw	r3,44(r2)
 4001294:	00810034 	movhi	r2,1024
 4001298:	108ed204 	addi	r2,r2,15176
 400129c:	10800a17 	ldw	r2,40(r2)
 40012a0:	10800017 	ldw	r2,0(r2)
 40012a4:	1005d13a 	srai	r2,r2,4
 40012a8:	10c0004c 	andi	r3,r2,1
 40012ac:	00810034 	movhi	r2,1024
 40012b0:	108ed204 	addi	r2,r2,15176
 40012b4:	10c00c15 	stw	r3,48(r2)
 40012b8:	00810034 	movhi	r2,1024
 40012bc:	108ed204 	addi	r2,r2,15176
 40012c0:	10800a17 	ldw	r2,40(r2)
 40012c4:	10800017 	ldw	r2,0(r2)
 40012c8:	1005d17a 	srai	r2,r2,5
 40012cc:	10c0004c 	andi	r3,r2,1
 40012d0:	00810034 	movhi	r2,1024
 40012d4:	108ed204 	addi	r2,r2,15176
 40012d8:	10c00d15 	stw	r3,52(r2)
 40012dc:	00810034 	movhi	r2,1024
 40012e0:	108ed204 	addi	r2,r2,15176
 40012e4:	10800a17 	ldw	r2,40(r2)
 40012e8:	10800017 	ldw	r2,0(r2)
 40012ec:	1005d43a 	srai	r2,r2,16
 40012f0:	10c003cc 	andi	r3,r2,15
 40012f4:	00810034 	movhi	r2,1024
 40012f8:	108ed204 	addi	r2,r2,15176
 40012fc:	10c00e15 	stw	r3,56(r2)
 4001300:	00810034 	movhi	r2,1024
 4001304:	108ed204 	addi	r2,r2,15176
 4001308:	10800a17 	ldw	r2,40(r2)
 400130c:	10800017 	ldw	r2,0(r2)
 4001310:	1005d53a 	srai	r2,r2,20
 4001314:	10c0004c 	andi	r3,r2,1
 4001318:	00810034 	movhi	r2,1024
 400131c:	108ed204 	addi	r2,r2,15176
 4001320:	10c00f15 	stw	r3,60(r2)
 4001324:	00810034 	movhi	r2,1024
 4001328:	108ed204 	addi	r2,r2,15176
 400132c:	10800a17 	ldw	r2,40(r2)
 4001330:	10800017 	ldw	r2,0(r2)
 4001334:	1005d57a 	srai	r2,r2,21
 4001338:	10c0004c 	andi	r3,r2,1
 400133c:	00810034 	movhi	r2,1024
 4001340:	108ed204 	addi	r2,r2,15176
 4001344:	10c01015 	stw	r3,64(r2)
 4001348:	01010034 	movhi	r4,1024
 400134c:	210ed204 	addi	r4,r4,15176
 4001350:	4000ff40 	call	4000ff4 <alt_dev_reg>
}
 4001354:	0001883a 	nop
 4001358:	e037883a 	mov	sp,fp
 400135c:	dfc00117 	ldw	ra,4(sp)
 4001360:	df000017 	ldw	fp,0(sp)
 4001364:	dec00204 	addi	sp,sp,8
 4001368:	f800283a 	ret

0400136c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400136c:	defffa04 	addi	sp,sp,-24
 4001370:	dfc00515 	stw	ra,20(sp)
 4001374:	df000415 	stw	fp,16(sp)
 4001378:	df000404 	addi	fp,sp,16
 400137c:	e13ffd15 	stw	r4,-12(fp)
 4001380:	e17ffe15 	stw	r5,-8(fp)
 4001384:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4001388:	e0bffd17 	ldw	r2,-12(fp)
 400138c:	10800017 	ldw	r2,0(r2)
 4001390:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4001394:	e0bffc17 	ldw	r2,-16(fp)
 4001398:	10c00a04 	addi	r3,r2,40
 400139c:	e0bffd17 	ldw	r2,-12(fp)
 40013a0:	10800217 	ldw	r2,8(r2)
 40013a4:	100f883a 	mov	r7,r2
 40013a8:	e1bfff17 	ldw	r6,-4(fp)
 40013ac:	e17ffe17 	ldw	r5,-8(fp)
 40013b0:	1809883a 	mov	r4,r3
 40013b4:	400142c0 	call	400142c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 40013b8:	e037883a 	mov	sp,fp
 40013bc:	dfc00117 	ldw	ra,4(sp)
 40013c0:	df000017 	ldw	fp,0(sp)
 40013c4:	dec00204 	addi	sp,sp,8
 40013c8:	f800283a 	ret

040013cc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40013cc:	defffa04 	addi	sp,sp,-24
 40013d0:	dfc00515 	stw	ra,20(sp)
 40013d4:	df000415 	stw	fp,16(sp)
 40013d8:	df000404 	addi	fp,sp,16
 40013dc:	e13ffd15 	stw	r4,-12(fp)
 40013e0:	e17ffe15 	stw	r5,-8(fp)
 40013e4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40013e8:	e0bffd17 	ldw	r2,-12(fp)
 40013ec:	10800017 	ldw	r2,0(r2)
 40013f0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40013f4:	e0bffc17 	ldw	r2,-16(fp)
 40013f8:	10c00a04 	addi	r3,r2,40
 40013fc:	e0bffd17 	ldw	r2,-12(fp)
 4001400:	10800217 	ldw	r2,8(r2)
 4001404:	100f883a 	mov	r7,r2
 4001408:	e1bfff17 	ldw	r6,-4(fp)
 400140c:	e17ffe17 	ldw	r5,-8(fp)
 4001410:	1809883a 	mov	r4,r3
 4001414:	40015180 	call	4001518 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4001418:	e037883a 	mov	sp,fp
 400141c:	dfc00117 	ldw	ra,4(sp)
 4001420:	df000017 	ldw	fp,0(sp)
 4001424:	dec00204 	addi	sp,sp,8
 4001428:	f800283a 	ret

0400142c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 400142c:	defff704 	addi	sp,sp,-36
 4001430:	df000815 	stw	fp,32(sp)
 4001434:	df000804 	addi	fp,sp,32
 4001438:	e13ffc15 	stw	r4,-16(fp)
 400143c:	e17ffd15 	stw	r5,-12(fp)
 4001440:	e1bffe15 	stw	r6,-8(fp)
 4001444:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4001448:	e0bffc17 	ldw	r2,-16(fp)
 400144c:	10800017 	ldw	r2,0(r2)
 4001450:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 4001454:	e0bffd17 	ldw	r2,-12(fp)
 4001458:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 400145c:	e0bffe17 	ldw	r2,-8(fp)
 4001460:	e0fffd17 	ldw	r3,-12(fp)
 4001464:	1885883a 	add	r2,r3,r2
 4001468:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 400146c:	00001206 	br	40014b8 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4001470:	e0bff917 	ldw	r2,-28(fp)
 4001474:	10800037 	ldwio	r2,0(r2)
 4001478:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 400147c:	e0bffb17 	ldw	r2,-20(fp)
 4001480:	10a0000c 	andi	r2,r2,32768
 4001484:	10000626 	beq	r2,zero,40014a0 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4001488:	e0bff817 	ldw	r2,-32(fp)
 400148c:	10c00044 	addi	r3,r2,1
 4001490:	e0fff815 	stw	r3,-32(fp)
 4001494:	e0fffb17 	ldw	r3,-20(fp)
 4001498:	10c00005 	stb	r3,0(r2)
 400149c:	00000606 	br	40014b8 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 40014a0:	e0fff817 	ldw	r3,-32(fp)
 40014a4:	e0bffd17 	ldw	r2,-12(fp)
 40014a8:	1880071e 	bne	r3,r2,40014c8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 40014ac:	e0bfff17 	ldw	r2,-4(fp)
 40014b0:	1090000c 	andi	r2,r2,16384
 40014b4:	1000061e 	bne	r2,zero,40014d0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 40014b8:	e0fff817 	ldw	r3,-32(fp)
 40014bc:	e0bffa17 	ldw	r2,-24(fp)
 40014c0:	18bfeb36 	bltu	r3,r2,4001470 <__ram_exceptions_end+0xfbfe122c>
 40014c4:	00000306 	br	40014d4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 40014c8:	0001883a 	nop
 40014cc:	00000106 	br	40014d4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 40014d0:	0001883a 	nop
    
  }

  if (ptr != buffer)
 40014d4:	e0fff817 	ldw	r3,-32(fp)
 40014d8:	e0bffd17 	ldw	r2,-12(fp)
 40014dc:	18800426 	beq	r3,r2,40014f0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 40014e0:	e0fff817 	ldw	r3,-32(fp)
 40014e4:	e0bffd17 	ldw	r2,-12(fp)
 40014e8:	1885c83a 	sub	r2,r3,r2
 40014ec:	00000606 	br	4001508 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 40014f0:	e0bfff17 	ldw	r2,-4(fp)
 40014f4:	1090000c 	andi	r2,r2,16384
 40014f8:	10000226 	beq	r2,zero,4001504 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 40014fc:	00bffd44 	movi	r2,-11
 4001500:	00000106 	br	4001508 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 4001504:	00bffec4 	movi	r2,-5
}
 4001508:	e037883a 	mov	sp,fp
 400150c:	df000017 	ldw	fp,0(sp)
 4001510:	dec00104 	addi	sp,sp,4
 4001514:	f800283a 	ret

04001518 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4001518:	defff904 	addi	sp,sp,-28
 400151c:	df000615 	stw	fp,24(sp)
 4001520:	df000604 	addi	fp,sp,24
 4001524:	e13ffc15 	stw	r4,-16(fp)
 4001528:	e17ffd15 	stw	r5,-12(fp)
 400152c:	e1bffe15 	stw	r6,-8(fp)
 4001530:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4001534:	e0bffc17 	ldw	r2,-16(fp)
 4001538:	10800017 	ldw	r2,0(r2)
 400153c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 4001540:	e0bffe17 	ldw	r2,-8(fp)
 4001544:	e0fffd17 	ldw	r3,-12(fp)
 4001548:	1885883a 	add	r2,r3,r2
 400154c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 4001550:	00000e06 	br	400158c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4001554:	e0bffa17 	ldw	r2,-24(fp)
 4001558:	10800104 	addi	r2,r2,4
 400155c:	10800037 	ldwio	r2,0(r2)
 4001560:	10bfffec 	andhi	r2,r2,65535
 4001564:	10000926 	beq	r2,zero,400158c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4001568:	e0fffa17 	ldw	r3,-24(fp)
 400156c:	e0bffd17 	ldw	r2,-12(fp)
 4001570:	11000044 	addi	r4,r2,1
 4001574:	e13ffd15 	stw	r4,-12(fp)
 4001578:	10800003 	ldbu	r2,0(r2)
 400157c:	10803fcc 	andi	r2,r2,255
 4001580:	1080201c 	xori	r2,r2,128
 4001584:	10bfe004 	addi	r2,r2,-128
 4001588:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 400158c:	e0fffd17 	ldw	r3,-12(fp)
 4001590:	e0bffb17 	ldw	r2,-20(fp)
 4001594:	18bfef36 	bltu	r3,r2,4001554 <__ram_exceptions_end+0xfbfe1310>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4001598:	e0bffe17 	ldw	r2,-8(fp)
}
 400159c:	e037883a 	mov	sp,fp
 40015a0:	df000017 	ldw	fp,0(sp)
 40015a4:	dec00104 	addi	sp,sp,4
 40015a8:	f800283a 	ret

040015ac <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 40015ac:	defffa04 	addi	sp,sp,-24
 40015b0:	dfc00515 	stw	ra,20(sp)
 40015b4:	df000415 	stw	fp,16(sp)
 40015b8:	df000404 	addi	fp,sp,16
 40015bc:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40015c0:	0007883a 	mov	r3,zero
 40015c4:	e0bfff17 	ldw	r2,-4(fp)
 40015c8:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40015cc:	e0bfff17 	ldw	r2,-4(fp)
 40015d0:	10800104 	addi	r2,r2,4
 40015d4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40015d8:	0005303a 	rdctl	r2,status
 40015dc:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40015e0:	e0fffd17 	ldw	r3,-12(fp)
 40015e4:	00bfff84 	movi	r2,-2
 40015e8:	1884703a 	and	r2,r3,r2
 40015ec:	1001703a 	wrctl	status,r2
  
  return context;
 40015f0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40015f4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 40015f8:	40031c40 	call	40031c4 <alt_tick>
 40015fc:	e0bffc17 	ldw	r2,-16(fp)
 4001600:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4001604:	e0bffe17 	ldw	r2,-8(fp)
 4001608:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 400160c:	0001883a 	nop
 4001610:	e037883a 	mov	sp,fp
 4001614:	dfc00117 	ldw	ra,4(sp)
 4001618:	df000017 	ldw	fp,0(sp)
 400161c:	dec00204 	addi	sp,sp,8
 4001620:	f800283a 	ret

04001624 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4001624:	defff804 	addi	sp,sp,-32
 4001628:	dfc00715 	stw	ra,28(sp)
 400162c:	df000615 	stw	fp,24(sp)
 4001630:	df000604 	addi	fp,sp,24
 4001634:	e13ffc15 	stw	r4,-16(fp)
 4001638:	e17ffd15 	stw	r5,-12(fp)
 400163c:	e1bffe15 	stw	r6,-8(fp)
 4001640:	e1ffff15 	stw	r7,-4(fp)
 4001644:	e0bfff17 	ldw	r2,-4(fp)
 4001648:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 400164c:	d0a0ee17 	ldw	r2,-31816(gp)
 4001650:	1000021e 	bne	r2,zero,400165c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4001654:	e0bffb17 	ldw	r2,-20(fp)
 4001658:	d0a0ee15 	stw	r2,-31816(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 400165c:	e0bffc17 	ldw	r2,-16(fp)
 4001660:	10800104 	addi	r2,r2,4
 4001664:	00c001c4 	movi	r3,7
 4001668:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 400166c:	d8000015 	stw	zero,0(sp)
 4001670:	e1fffc17 	ldw	r7,-16(fp)
 4001674:	01810034 	movhi	r6,1024
 4001678:	31856b04 	addi	r6,r6,5548
 400167c:	e17ffe17 	ldw	r5,-8(fp)
 4001680:	e13ffd17 	ldw	r4,-12(fp)
 4001684:	4002a900 	call	4002a90 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 4001688:	0001883a 	nop
 400168c:	e037883a 	mov	sp,fp
 4001690:	dfc00117 	ldw	ra,4(sp)
 4001694:	df000017 	ldw	fp,0(sp)
 4001698:	dec00204 	addi	sp,sp,8
 400169c:	f800283a 	ret

040016a0 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 40016a0:	defffc04 	addi	sp,sp,-16
 40016a4:	dfc00315 	stw	ra,12(sp)
 40016a8:	df000215 	stw	fp,8(sp)
 40016ac:	df000204 	addi	fp,sp,8
 40016b0:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 40016b4:	d1600404 	addi	r5,gp,-32752
 40016b8:	e13fff17 	ldw	r4,-4(fp)
 40016bc:	40029cc0 	call	40029cc <alt_find_dev>
 40016c0:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 40016c4:	e0bffe17 	ldw	r2,-8(fp)
}
 40016c8:	e037883a 	mov	sp,fp
 40016cc:	dfc00117 	ldw	ra,4(sp)
 40016d0:	df000017 	ldw	fp,0(sp)
 40016d4:	dec00204 	addi	sp,sp,8
 40016d8:	f800283a 	ret

040016dc <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 40016dc:	defffa04 	addi	sp,sp,-24
 40016e0:	df000515 	stw	fp,20(sp)
 40016e4:	df000504 	addi	fp,sp,20
 40016e8:	e13ffc15 	stw	r4,-16(fp)
 40016ec:	e17ffd15 	stw	r5,-12(fp)
 40016f0:	e1bffe15 	stw	r6,-8(fp)
 40016f4:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 40016f8:	e0bffc17 	ldw	r2,-16(fp)
 40016fc:	10800f17 	ldw	r2,60(r2)
 4001700:	e0fffe17 	ldw	r3,-8(fp)
 4001704:	1880042e 	bgeu	r3,r2,4001718 <alt_up_pixel_buffer_dma_draw+0x3c>
 4001708:	e0bffc17 	ldw	r2,-16(fp)
 400170c:	10801017 	ldw	r2,64(r2)
 4001710:	e0ffff17 	ldw	r3,-4(fp)
 4001714:	18800236 	bltu	r3,r2,4001720 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 4001718:	00bfffc4 	movi	r2,-1
 400171c:	00005006 	br	4001860 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 4001720:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4001724:	e0bffc17 	ldw	r2,-16(fp)
 4001728:	10800d17 	ldw	r2,52(r2)
 400172c:	1000151e 	bne	r2,zero,4001784 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4001730:	e0bffc17 	ldw	r2,-16(fp)
 4001734:	10c01217 	ldw	r3,72(r2)
 4001738:	e0bffe17 	ldw	r2,-8(fp)
 400173c:	1886703a 	and	r3,r3,r2
 4001740:	e0bffc17 	ldw	r2,-16(fp)
 4001744:	10801117 	ldw	r2,68(r2)
 4001748:	1884983a 	sll	r2,r3,r2
 400174c:	e0fffb17 	ldw	r3,-20(fp)
 4001750:	1885883a 	add	r2,r3,r2
 4001754:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4001758:	e0bffc17 	ldw	r2,-16(fp)
 400175c:	10c01417 	ldw	r3,80(r2)
 4001760:	e0bfff17 	ldw	r2,-4(fp)
 4001764:	1886703a 	and	r3,r3,r2
 4001768:	e0bffc17 	ldw	r2,-16(fp)
 400176c:	10801317 	ldw	r2,76(r2)
 4001770:	1884983a 	sll	r2,r3,r2
 4001774:	e0fffb17 	ldw	r3,-20(fp)
 4001778:	1885883a 	add	r2,r3,r2
 400177c:	e0bffb15 	stw	r2,-20(fp)
 4001780:	00001706 	br	40017e0 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4001784:	e0bffc17 	ldw	r2,-16(fp)
 4001788:	10c01217 	ldw	r3,72(r2)
 400178c:	e0bffe17 	ldw	r2,-8(fp)
 4001790:	1886703a 	and	r3,r3,r2
 4001794:	e0bffc17 	ldw	r2,-16(fp)
 4001798:	10801117 	ldw	r2,68(r2)
 400179c:	1884983a 	sll	r2,r3,r2
 40017a0:	e0fffb17 	ldw	r3,-20(fp)
 40017a4:	1885883a 	add	r2,r3,r2
 40017a8:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 40017ac:	e0bffc17 	ldw	r2,-16(fp)
 40017b0:	10c01417 	ldw	r3,80(r2)
 40017b4:	e0bfff17 	ldw	r2,-4(fp)
 40017b8:	1886703a 	and	r3,r3,r2
 40017bc:	e0bffc17 	ldw	r2,-16(fp)
 40017c0:	10800f17 	ldw	r2,60(r2)
 40017c4:	1887383a 	mul	r3,r3,r2
 40017c8:	e0bffc17 	ldw	r2,-16(fp)
 40017cc:	10801117 	ldw	r2,68(r2)
 40017d0:	1884983a 	sll	r2,r3,r2
 40017d4:	e0fffb17 	ldw	r3,-20(fp)
 40017d8:	1885883a 	add	r2,r3,r2
 40017dc:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40017e0:	e0bffc17 	ldw	r2,-16(fp)
 40017e4:	10800e17 	ldw	r2,56(r2)
 40017e8:	10800058 	cmpnei	r2,r2,1
 40017ec:	1000081e 	bne	r2,zero,4001810 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 40017f0:	e0bffc17 	ldw	r2,-16(fp)
 40017f4:	10c00c17 	ldw	r3,48(r2)
 40017f8:	e0bffb17 	ldw	r2,-20(fp)
 40017fc:	1885883a 	add	r2,r3,r2
 4001800:	1007883a 	mov	r3,r2
 4001804:	e0bffd17 	ldw	r2,-12(fp)
 4001808:	18800025 	stbio	r2,0(r3)
 400180c:	00001306 	br	400185c <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4001810:	e0bffc17 	ldw	r2,-16(fp)
 4001814:	10800e17 	ldw	r2,56(r2)
 4001818:	10800098 	cmpnei	r2,r2,2
 400181c:	1000081e 	bne	r2,zero,4001840 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4001820:	e0bffc17 	ldw	r2,-16(fp)
 4001824:	10c00c17 	ldw	r3,48(r2)
 4001828:	e0bffb17 	ldw	r2,-20(fp)
 400182c:	1885883a 	add	r2,r3,r2
 4001830:	1007883a 	mov	r3,r2
 4001834:	e0bffd17 	ldw	r2,-12(fp)
 4001838:	1880002d 	sthio	r2,0(r3)
 400183c:	00000706 	br	400185c <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4001840:	e0bffc17 	ldw	r2,-16(fp)
 4001844:	10c00c17 	ldw	r3,48(r2)
 4001848:	e0bffb17 	ldw	r2,-20(fp)
 400184c:	1885883a 	add	r2,r3,r2
 4001850:	1007883a 	mov	r3,r2
 4001854:	e0bffd17 	ldw	r2,-12(fp)
 4001858:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 400185c:	0005883a 	mov	r2,zero
}
 4001860:	e037883a 	mov	sp,fp
 4001864:	df000017 	ldw	fp,0(sp)
 4001868:	dec00104 	addi	sp,sp,4
 400186c:	f800283a 	ret

04001870 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 4001870:	defffd04 	addi	sp,sp,-12
 4001874:	df000215 	stw	fp,8(sp)
 4001878:	df000204 	addi	fp,sp,8
 400187c:	e13ffe15 	stw	r4,-8(fp)
 4001880:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 4001884:	e0bffe17 	ldw	r2,-8(fp)
 4001888:	10800a17 	ldw	r2,40(r2)
 400188c:	10800104 	addi	r2,r2,4
 4001890:	1007883a 	mov	r3,r2
 4001894:	e0bfff17 	ldw	r2,-4(fp)
 4001898:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 400189c:	e0bffe17 	ldw	r2,-8(fp)
 40018a0:	10800a17 	ldw	r2,40(r2)
 40018a4:	10800104 	addi	r2,r2,4
 40018a8:	10800037 	ldwio	r2,0(r2)
 40018ac:	1007883a 	mov	r3,r2
 40018b0:	e0bffe17 	ldw	r2,-8(fp)
 40018b4:	10c00c15 	stw	r3,48(r2)
	return 0;
 40018b8:	0005883a 	mov	r2,zero
}
 40018bc:	e037883a 	mov	sp,fp
 40018c0:	df000017 	ldw	fp,0(sp)
 40018c4:	dec00104 	addi	sp,sp,4
 40018c8:	f800283a 	ret

040018cc <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 40018cc:	defffd04 	addi	sp,sp,-12
 40018d0:	df000215 	stw	fp,8(sp)
 40018d4:	dc000115 	stw	r16,4(sp)
 40018d8:	df000204 	addi	fp,sp,8
 40018dc:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 40018e0:	e0bffe17 	ldw	r2,-8(fp)
 40018e4:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 40018e8:	e0bffe17 	ldw	r2,-8(fp)
 40018ec:	10800a17 	ldw	r2,40(r2)
 40018f0:	1007883a 	mov	r3,r2
 40018f4:	00800044 	movi	r2,1
 40018f8:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 40018fc:	e0bffe17 	ldw	r2,-8(fp)
 4001900:	10c00b17 	ldw	r3,44(r2)
 4001904:	e0bffe17 	ldw	r2,-8(fp)
 4001908:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 400190c:	e0bffe17 	ldw	r2,-8(fp)
 4001910:	14000b15 	stw	r16,44(r2)
	return 0;
 4001914:	0005883a 	mov	r2,zero
}
 4001918:	e6ffff04 	addi	sp,fp,-4
 400191c:	df000117 	ldw	fp,4(sp)
 4001920:	dc000017 	ldw	r16,0(sp)
 4001924:	dec00204 	addi	sp,sp,8
 4001928:	f800283a 	ret

0400192c <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 400192c:	defffe04 	addi	sp,sp,-8
 4001930:	df000115 	stw	fp,4(sp)
 4001934:	df000104 	addi	fp,sp,4
 4001938:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 400193c:	e0bfff17 	ldw	r2,-4(fp)
 4001940:	10800a17 	ldw	r2,40(r2)
 4001944:	10800304 	addi	r2,r2,12
 4001948:	10800037 	ldwio	r2,0(r2)
 400194c:	1080004c 	andi	r2,r2,1
}
 4001950:	e037883a 	mov	sp,fp
 4001954:	df000017 	ldw	fp,0(sp)
 4001958:	dec00104 	addi	sp,sp,4
 400195c:	f800283a 	ret

04001960 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 4001960:	defff704 	addi	sp,sp,-36
 4001964:	df000815 	stw	fp,32(sp)
 4001968:	dd400715 	stw	r21,28(sp)
 400196c:	dd000615 	stw	r20,24(sp)
 4001970:	dcc00515 	stw	r19,20(sp)
 4001974:	dc800415 	stw	r18,16(sp)
 4001978:	dc400315 	stw	r17,12(sp)
 400197c:	dc000215 	stw	r16,8(sp)
 4001980:	df000804 	addi	fp,sp,32
 4001984:	e13ff815 	stw	r4,-32(fp)
 4001988:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 400198c:	e0bff917 	ldw	r2,-28(fp)
 4001990:	10800058 	cmpnei	r2,r2,1
 4001994:	1000031e 	bne	r2,zero,40019a4 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 4001998:	e0bff817 	ldw	r2,-32(fp)
 400199c:	14400c17 	ldw	r17,48(r2)
 40019a0:	00000206 	br	40019ac <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 40019a4:	e0bff817 	ldw	r2,-32(fp)
 40019a8:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 40019ac:	e0bff817 	ldw	r2,-32(fp)
 40019b0:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40019b4:	e0bff817 	ldw	r2,-32(fp)
 40019b8:	10800e17 	ldw	r2,56(r2)
 40019bc:	10800098 	cmpnei	r2,r2,2
 40019c0:	1000031e 	bne	r2,zero,40019d0 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 40019c4:	8405883a 	add	r2,r16,r16
 40019c8:	1021883a 	mov	r16,r2
 40019cc:	00000306 	br	40019dc <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 40019d0:	8405883a 	add	r2,r16,r16
 40019d4:	1085883a 	add	r2,r2,r2
 40019d8:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 40019dc:	e0bff817 	ldw	r2,-32(fp)
 40019e0:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40019e4:	e0bff817 	ldw	r2,-32(fp)
 40019e8:	10800d17 	ldw	r2,52(r2)
 40019ec:	1000111e 	bne	r2,zero,4001a34 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40019f0:	e0bff817 	ldw	r2,-32(fp)
 40019f4:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 40019f8:	0029883a 	mov	r20,zero
 40019fc:	00000b06 	br	4001a2c <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 4001a00:	0027883a 	mov	r19,zero
 4001a04:	00000406 	br	4001a18 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 4001a08:	9c45883a 	add	r2,r19,r17
 4001a0c:	0007883a 	mov	r3,zero
 4001a10:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 4001a14:	9cc00104 	addi	r19,r19,4
 4001a18:	9c3ffb36 	bltu	r19,r16,4001a08 <__ram_exceptions_end+0xfbfe17c4>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 4001a1c:	00800044 	movi	r2,1
 4001a20:	1544983a 	sll	r2,r2,r21
 4001a24:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4001a28:	a5000044 	addi	r20,r20,1
 4001a2c:	a4bff436 	bltu	r20,r18,4001a00 <__ram_exceptions_end+0xfbfe17bc>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4001a30:	00000a06 	br	4001a5c <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 4001a34:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 4001a38:	0021883a 	mov	r16,zero
 4001a3c:	00000506 	br	4001a54 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 4001a40:	8005883a 	mov	r2,r16
 4001a44:	1445883a 	add	r2,r2,r17
 4001a48:	0007883a 	mov	r3,zero
 4001a4c:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 4001a50:	84000104 	addi	r16,r16,4
 4001a54:	8005883a 	mov	r2,r16
 4001a58:	14bff936 	bltu	r2,r18,4001a40 <__ram_exceptions_end+0xfbfe17fc>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4001a5c:	0001883a 	nop
 4001a60:	e6fffa04 	addi	sp,fp,-24
 4001a64:	df000617 	ldw	fp,24(sp)
 4001a68:	dd400517 	ldw	r21,20(sp)
 4001a6c:	dd000417 	ldw	r20,16(sp)
 4001a70:	dcc00317 	ldw	r19,12(sp)
 4001a74:	dc800217 	ldw	r18,8(sp)
 4001a78:	dc400117 	ldw	r17,4(sp)
 4001a7c:	dc000017 	ldw	r16,0(sp)
 4001a80:	dec00704 	addi	sp,sp,28
 4001a84:	f800283a 	ret

04001a88 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 4001a88:	defff304 	addi	sp,sp,-52
 4001a8c:	df000c15 	stw	fp,48(sp)
 4001a90:	ddc00b15 	stw	r23,44(sp)
 4001a94:	dd800a15 	stw	r22,40(sp)
 4001a98:	dd400915 	stw	r21,36(sp)
 4001a9c:	dd000815 	stw	r20,32(sp)
 4001aa0:	dcc00715 	stw	r19,28(sp)
 4001aa4:	dc800615 	stw	r18,24(sp)
 4001aa8:	dc400515 	stw	r17,20(sp)
 4001aac:	dc000415 	stw	r16,16(sp)
 4001ab0:	df000c04 	addi	fp,sp,48
 4001ab4:	e13ff415 	stw	r4,-48(fp)
 4001ab8:	e17ff515 	stw	r5,-44(fp)
 4001abc:	e1bff615 	stw	r6,-40(fp)
 4001ac0:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4001ac4:	e0bff417 	ldw	r2,-48(fp)
 4001ac8:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4001acc:	e0bff417 	ldw	r2,-48(fp)
 4001ad0:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4001ad4:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 4001ad8:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 4001adc:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 4001ae0:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 4001ae4:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4001ae8:	a580032e 	bgeu	r20,r22,4001af8 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 4001aec:	b02b883a 	mov	r21,r22
		l_x = r_x;
 4001af0:	a02d883a 	mov	r22,r20
		r_x = temp;
 4001af4:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4001af8:	9c40032e 	bgeu	r19,r17,4001b08 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 4001afc:	882b883a 	mov	r21,r17
		t_y = b_y;
 4001b00:	9823883a 	mov	r17,r19
		b_y = temp;
 4001b04:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4001b08:	b480892e 	bgeu	r22,r18,4001d30 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 4001b0c:	8c00882e 	bgeu	r17,r16,4001d30 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4001b10:	a4800136 	bltu	r20,r18,4001b18 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 4001b14:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4001b18:	9c000136 	bltu	r19,r16,4001b20 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 4001b1c:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4001b20:	e0800317 	ldw	r2,12(fp)
 4001b24:	10800058 	cmpnei	r2,r2,1
 4001b28:	1000031e 	bne	r2,zero,4001b38 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 4001b2c:	e0bff417 	ldw	r2,-48(fp)
 4001b30:	14000c17 	ldw	r16,48(r2)
 4001b34:	00000206 	br	4001b40 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 4001b38:	e0bff417 	ldw	r2,-48(fp)
 4001b3c:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4001b40:	e0bff417 	ldw	r2,-48(fp)
 4001b44:	10800d17 	ldw	r2,52(r2)
 4001b48:	10003c1e 	bne	r2,zero,4001c3c <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4001b4c:	e0bff417 	ldw	r2,-48(fp)
 4001b50:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4001b54:	8d44983a 	sll	r2,r17,r21
 4001b58:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4001b5c:	e0bff417 	ldw	r2,-48(fp)
 4001b60:	10800e17 	ldw	r2,56(r2)
 4001b64:	10800058 	cmpnei	r2,r2,1
 4001b68:	10000f1e 	bne	r2,zero,4001ba8 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 4001b6c:	8825883a 	mov	r18,r17
 4001b70:	00000b06 	br	4001ba0 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 4001b74:	b023883a 	mov	r17,r22
 4001b78:	00000406 	br	4001b8c <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4001b7c:	8c05883a 	add	r2,r17,r16
 4001b80:	b807883a 	mov	r3,r23
 4001b84:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001b88:	8c400044 	addi	r17,r17,1
 4001b8c:	a47ffb2e 	bgeu	r20,r17,4001b7c <__ram_exceptions_end+0xfbfe1938>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 4001b90:	00800044 	movi	r2,1
 4001b94:	1544983a 	sll	r2,r2,r21
 4001b98:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4001b9c:	94800044 	addi	r18,r18,1
 4001ba0:	9cbff42e 	bgeu	r19,r18,4001b74 <__ram_exceptions_end+0xfbfe1930>
 4001ba4:	00006306 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4001ba8:	e0bff417 	ldw	r2,-48(fp)
 4001bac:	10800e17 	ldw	r2,56(r2)
 4001bb0:	10800098 	cmpnei	r2,r2,2
 4001bb4:	1000101e 	bne	r2,zero,4001bf8 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 4001bb8:	8825883a 	mov	r18,r17
 4001bbc:	00000c06 	br	4001bf0 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 4001bc0:	b023883a 	mov	r17,r22
 4001bc4:	00000506 	br	4001bdc <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4001bc8:	8c45883a 	add	r2,r17,r17
 4001bcc:	1405883a 	add	r2,r2,r16
 4001bd0:	b807883a 	mov	r3,r23
 4001bd4:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001bd8:	8c400044 	addi	r17,r17,1
 4001bdc:	a47ffa2e 	bgeu	r20,r17,4001bc8 <__ram_exceptions_end+0xfbfe1984>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 4001be0:	00800044 	movi	r2,1
 4001be4:	1544983a 	sll	r2,r2,r21
 4001be8:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4001bec:	94800044 	addi	r18,r18,1
 4001bf0:	9cbff32e 	bgeu	r19,r18,4001bc0 <__ram_exceptions_end+0xfbfe197c>
 4001bf4:	00004f06 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4001bf8:	8825883a 	mov	r18,r17
 4001bfc:	00000d06 	br	4001c34 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 4001c00:	b023883a 	mov	r17,r22
 4001c04:	00000606 	br	4001c20 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4001c08:	8c45883a 	add	r2,r17,r17
 4001c0c:	1085883a 	add	r2,r2,r2
 4001c10:	1405883a 	add	r2,r2,r16
 4001c14:	b807883a 	mov	r3,r23
 4001c18:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001c1c:	8c400044 	addi	r17,r17,1
 4001c20:	a47ff92e 	bgeu	r20,r17,4001c08 <__ram_exceptions_end+0xfbfe19c4>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 4001c24:	00800044 	movi	r2,1
 4001c28:	1544983a 	sll	r2,r2,r21
 4001c2c:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4001c30:	94800044 	addi	r18,r18,1
 4001c34:	9cbff22e 	bgeu	r19,r18,4001c00 <__ram_exceptions_end+0xfbfe19bc>
 4001c38:	00003e06 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4001c3c:	e0bff417 	ldw	r2,-48(fp)
 4001c40:	10800e17 	ldw	r2,56(r2)
 4001c44:	10800058 	cmpnei	r2,r2,1
 4001c48:	10000f1e 	bne	r2,zero,4001c88 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 4001c4c:	8c85383a 	mul	r2,r17,r18
 4001c50:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4001c54:	882b883a 	mov	r21,r17
 4001c58:	00000906 	br	4001c80 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 4001c5c:	b023883a 	mov	r17,r22
 4001c60:	00000406 	br	4001c74 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4001c64:	8c05883a 	add	r2,r17,r16
 4001c68:	b807883a 	mov	r3,r23
 4001c6c:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001c70:	8c400044 	addi	r17,r17,1
 4001c74:	a47ffb2e 	bgeu	r20,r17,4001c64 <__ram_exceptions_end+0xfbfe1a20>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4001c78:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4001c7c:	ad400044 	addi	r21,r21,1
 4001c80:	9d7ff62e 	bgeu	r19,r21,4001c5c <__ram_exceptions_end+0xfbfe1a18>
 4001c84:	00002b06 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4001c88:	e0bff417 	ldw	r2,-48(fp)
 4001c8c:	10800e17 	ldw	r2,56(r2)
 4001c90:	10800098 	cmpnei	r2,r2,2
 4001c94:	1000121e 	bne	r2,zero,4001ce0 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 4001c98:	9485883a 	add	r2,r18,r18
 4001c9c:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4001ca0:	8c85383a 	mul	r2,r17,r18
 4001ca4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4001ca8:	882b883a 	mov	r21,r17
 4001cac:	00000a06 	br	4001cd8 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 4001cb0:	b023883a 	mov	r17,r22
 4001cb4:	00000506 	br	4001ccc <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4001cb8:	8c45883a 	add	r2,r17,r17
 4001cbc:	1405883a 	add	r2,r2,r16
 4001cc0:	b807883a 	mov	r3,r23
 4001cc4:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001cc8:	8c400044 	addi	r17,r17,1
 4001ccc:	a47ffa2e 	bgeu	r20,r17,4001cb8 <__ram_exceptions_end+0xfbfe1a74>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 4001cd0:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4001cd4:	ad400044 	addi	r21,r21,1
 4001cd8:	9d7ff52e 	bgeu	r19,r21,4001cb0 <__ram_exceptions_end+0xfbfe1a6c>
 4001cdc:	00001506 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4001ce0:	9485883a 	add	r2,r18,r18
 4001ce4:	1085883a 	add	r2,r2,r2
 4001ce8:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4001cec:	8c85383a 	mul	r2,r17,r18
 4001cf0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4001cf4:	882b883a 	mov	r21,r17
 4001cf8:	00000b06 	br	4001d28 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 4001cfc:	b023883a 	mov	r17,r22
 4001d00:	00000606 	br	4001d1c <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4001d04:	8c45883a 	add	r2,r17,r17
 4001d08:	1085883a 	add	r2,r2,r2
 4001d0c:	1405883a 	add	r2,r2,r16
 4001d10:	b807883a 	mov	r3,r23
 4001d14:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4001d18:	8c400044 	addi	r17,r17,1
 4001d1c:	a47ff92e 	bgeu	r20,r17,4001d04 <__ram_exceptions_end+0xfbfe1ac0>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 4001d20:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4001d24:	ad400044 	addi	r21,r21,1
 4001d28:	9d7ff42e 	bgeu	r19,r21,4001cfc <__ram_exceptions_end+0xfbfe1ab8>
 4001d2c:	00000106 	br	4001d34 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4001d30:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 4001d34:	e6fff804 	addi	sp,fp,-32
 4001d38:	df000817 	ldw	fp,32(sp)
 4001d3c:	ddc00717 	ldw	r23,28(sp)
 4001d40:	dd800617 	ldw	r22,24(sp)
 4001d44:	dd400517 	ldw	r21,20(sp)
 4001d48:	dd000417 	ldw	r20,16(sp)
 4001d4c:	dcc00317 	ldw	r19,12(sp)
 4001d50:	dc800217 	ldw	r18,8(sp)
 4001d54:	dc400117 	ldw	r17,4(sp)
 4001d58:	dc000017 	ldw	r16,0(sp)
 4001d5c:	dec00904 	addi	sp,sp,36
 4001d60:	f800283a 	ret

04001d64 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 4001d64:	defff404 	addi	sp,sp,-48
 4001d68:	df000b15 	stw	fp,44(sp)
 4001d6c:	dd800a15 	stw	r22,40(sp)
 4001d70:	dd400915 	stw	r21,36(sp)
 4001d74:	dd000815 	stw	r20,32(sp)
 4001d78:	dcc00715 	stw	r19,28(sp)
 4001d7c:	dc800615 	stw	r18,24(sp)
 4001d80:	dc400515 	stw	r17,20(sp)
 4001d84:	dc000415 	stw	r16,16(sp)
 4001d88:	df000b04 	addi	fp,sp,44
 4001d8c:	e13ff515 	stw	r4,-44(fp)
 4001d90:	e17ff615 	stw	r5,-40(fp)
 4001d94:	e1bff715 	stw	r6,-36(fp)
 4001d98:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4001d9c:	e0bff517 	ldw	r2,-44(fp)
 4001da0:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4001da4:	e0bff517 	ldw	r2,-44(fp)
 4001da8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4001dac:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 4001db0:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 4001db4:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 4001db8:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4001dbc:	9c40032e 	bgeu	r19,r17,4001dcc <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 4001dc0:	882d883a 	mov	r22,r17
		l_x = r_x;
 4001dc4:	9823883a 	mov	r17,r19
		r_x = temp;
 4001dc8:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4001dcc:	8c805d2e 	bgeu	r17,r18,4001f44 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 4001dd0:	a4005c2e 	bgeu	r20,r16,4001f44 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4001dd4:	9c800136 	bltu	r19,r18,4001ddc <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 4001dd8:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4001ddc:	e0800217 	ldw	r2,8(fp)
 4001de0:	10800058 	cmpnei	r2,r2,1
 4001de4:	1000031e 	bne	r2,zero,4001df4 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4001de8:	e0bff517 	ldw	r2,-44(fp)
 4001dec:	14000c17 	ldw	r16,48(r2)
 4001df0:	00000206 	br	4001dfc <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4001df4:	e0bff517 	ldw	r2,-44(fp)
 4001df8:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4001dfc:	e0bff517 	ldw	r2,-44(fp)
 4001e00:	10800d17 	ldw	r2,52(r2)
 4001e04:	1000231e 	bne	r2,zero,4001e94 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4001e08:	e0bff517 	ldw	r2,-44(fp)
 4001e0c:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 4001e10:	a484983a 	sll	r2,r20,r18
 4001e14:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4001e18:	e0bff517 	ldw	r2,-44(fp)
 4001e1c:	10800e17 	ldw	r2,56(r2)
 4001e20:	10800058 	cmpnei	r2,r2,1
 4001e24:	1000071e 	bne	r2,zero,4001e44 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 4001e28:	00000406 	br	4001e3c <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4001e2c:	8c05883a 	add	r2,r17,r16
 4001e30:	a807883a 	mov	r3,r21
 4001e34:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4001e38:	8c400044 	addi	r17,r17,1
 4001e3c:	9c7ffb2e 	bgeu	r19,r17,4001e2c <__ram_exceptions_end+0xfbfe1be8>
 4001e40:	00004106 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4001e44:	e0bff517 	ldw	r2,-44(fp)
 4001e48:	10800e17 	ldw	r2,56(r2)
 4001e4c:	10800098 	cmpnei	r2,r2,2
 4001e50:	10000e1e 	bne	r2,zero,4001e8c <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 4001e54:	00000506 	br	4001e6c <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4001e58:	8c45883a 	add	r2,r17,r17
 4001e5c:	1405883a 	add	r2,r2,r16
 4001e60:	a807883a 	mov	r3,r21
 4001e64:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 4001e68:	8c400044 	addi	r17,r17,1
 4001e6c:	9c7ffa2e 	bgeu	r19,r17,4001e58 <__ram_exceptions_end+0xfbfe1c14>
 4001e70:	00003506 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4001e74:	8c45883a 	add	r2,r17,r17
 4001e78:	1085883a 	add	r2,r2,r2
 4001e7c:	1405883a 	add	r2,r2,r16
 4001e80:	a807883a 	mov	r3,r21
 4001e84:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4001e88:	8c400044 	addi	r17,r17,1
 4001e8c:	9c7ff92e 	bgeu	r19,r17,4001e74 <__ram_exceptions_end+0xfbfe1c30>
 4001e90:	00002d06 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4001e94:	e0bff517 	ldw	r2,-44(fp)
 4001e98:	10800e17 	ldw	r2,56(r2)
 4001e9c:	10800058 	cmpnei	r2,r2,1
 4001ea0:	1000091e 	bne	r2,zero,4001ec8 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 4001ea4:	a485383a 	mul	r2,r20,r18
 4001ea8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4001eac:	00000406 	br	4001ec0 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 4001eb0:	8c05883a 	add	r2,r17,r16
 4001eb4:	a807883a 	mov	r3,r21
 4001eb8:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4001ebc:	8c400044 	addi	r17,r17,1
 4001ec0:	9c7ffb2e 	bgeu	r19,r17,4001eb0 <__ram_exceptions_end+0xfbfe1c6c>
 4001ec4:	00002006 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4001ec8:	e0bff517 	ldw	r2,-44(fp)
 4001ecc:	10800e17 	ldw	r2,56(r2)
 4001ed0:	10800098 	cmpnei	r2,r2,2
 4001ed4:	10000c1e 	bne	r2,zero,4001f08 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 4001ed8:	9485883a 	add	r2,r18,r18
 4001edc:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 4001ee0:	a485383a 	mul	r2,r20,r18
 4001ee4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4001ee8:	00000506 	br	4001f00 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4001eec:	8c45883a 	add	r2,r17,r17
 4001ef0:	1405883a 	add	r2,r2,r16
 4001ef4:	a807883a 	mov	r3,r21
 4001ef8:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4001efc:	8c400044 	addi	r17,r17,1
 4001f00:	9c7ffa2e 	bgeu	r19,r17,4001eec <__ram_exceptions_end+0xfbfe1ca8>
 4001f04:	00001006 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4001f08:	9485883a 	add	r2,r18,r18
 4001f0c:	1085883a 	add	r2,r2,r2
 4001f10:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 4001f14:	a485383a 	mul	r2,r20,r18
 4001f18:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4001f1c:	00000606 	br	4001f38 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4001f20:	8c45883a 	add	r2,r17,r17
 4001f24:	1085883a 	add	r2,r2,r2
 4001f28:	1405883a 	add	r2,r2,r16
 4001f2c:	a807883a 	mov	r3,r21
 4001f30:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4001f34:	8c400044 	addi	r17,r17,1
 4001f38:	9c7ff92e 	bgeu	r19,r17,4001f20 <__ram_exceptions_end+0xfbfe1cdc>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 4001f3c:	84a1883a 	add	r16,r16,r18
 4001f40:	00000106 	br	4001f48 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4001f44:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 4001f48:	e6fff904 	addi	sp,fp,-28
 4001f4c:	df000717 	ldw	fp,28(sp)
 4001f50:	dd800617 	ldw	r22,24(sp)
 4001f54:	dd400517 	ldw	r21,20(sp)
 4001f58:	dd000417 	ldw	r20,16(sp)
 4001f5c:	dcc00317 	ldw	r19,12(sp)
 4001f60:	dc800217 	ldw	r18,8(sp)
 4001f64:	dc400117 	ldw	r17,4(sp)
 4001f68:	dc000017 	ldw	r16,0(sp)
 4001f6c:	dec00804 	addi	sp,sp,32
 4001f70:	f800283a 	ret

04001f74 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4001f74:	defff404 	addi	sp,sp,-48
 4001f78:	df000b15 	stw	fp,44(sp)
 4001f7c:	dd800a15 	stw	r22,40(sp)
 4001f80:	dd400915 	stw	r21,36(sp)
 4001f84:	dd000815 	stw	r20,32(sp)
 4001f88:	dcc00715 	stw	r19,28(sp)
 4001f8c:	dc800615 	stw	r18,24(sp)
 4001f90:	dc400515 	stw	r17,20(sp)
 4001f94:	dc000415 	stw	r16,16(sp)
 4001f98:	df000b04 	addi	fp,sp,44
 4001f9c:	e13ff515 	stw	r4,-44(fp)
 4001fa0:	e17ff615 	stw	r5,-40(fp)
 4001fa4:	e1bff715 	stw	r6,-36(fp)
 4001fa8:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4001fac:	e0bff517 	ldw	r2,-44(fp)
 4001fb0:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4001fb4:	e0bff517 	ldw	r2,-44(fp)
 4001fb8:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 4001fbc:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 4001fc0:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 4001fc4:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 4001fc8:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 4001fcc:	9d00032e 	bgeu	r19,r20,4001fdc <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 4001fd0:	a02b883a 	mov	r21,r20
		t_y = b_y;
 4001fd4:	9829883a 	mov	r20,r19
		b_y = temp;
 4001fd8:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4001fdc:	94406c2e 	bgeu	r18,r17,4002190 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 4001fe0:	a4006b2e 	bgeu	r20,r16,4002190 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4001fe4:	9c000136 	bltu	r19,r16,4001fec <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 4001fe8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4001fec:	e0800217 	ldw	r2,8(fp)
 4001ff0:	10800058 	cmpnei	r2,r2,1
 4001ff4:	1000031e 	bne	r2,zero,4002004 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4001ff8:	e0bff517 	ldw	r2,-44(fp)
 4001ffc:	14000c17 	ldw	r16,48(r2)
 4002000:	00000206 	br	400200c <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4002004:	e0bff517 	ldw	r2,-44(fp)
 4002008:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 400200c:	e0bff517 	ldw	r2,-44(fp)
 4002010:	10800d17 	ldw	r2,52(r2)
 4002014:	1000301e 	bne	r2,zero,40020d8 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4002018:	e0bff517 	ldw	r2,-44(fp)
 400201c:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 4002020:	a544983a 	sll	r2,r20,r21
 4002024:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4002028:	e0bff517 	ldw	r2,-44(fp)
 400202c:	10800e17 	ldw	r2,56(r2)
 4002030:	10800058 	cmpnei	r2,r2,1
 4002034:	10000b1e 	bne	r2,zero,4002064 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 4002038:	a023883a 	mov	r17,r20
 400203c:	00000706 	br	400205c <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4002040:	9405883a 	add	r2,r18,r16
 4002044:	b007883a 	mov	r3,r22
 4002048:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 400204c:	00800044 	movi	r2,1
 4002050:	1544983a 	sll	r2,r2,r21
 4002054:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4002058:	8c400044 	addi	r17,r17,1
 400205c:	9c7ff82e 	bgeu	r19,r17,4002040 <__ram_exceptions_end+0xfbfe1dfc>
 4002060:	00004c06 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4002064:	e0bff517 	ldw	r2,-44(fp)
 4002068:	10800e17 	ldw	r2,56(r2)
 400206c:	10800098 	cmpnei	r2,r2,2
 4002070:	10000c1e 	bne	r2,zero,40020a4 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 4002074:	a023883a 	mov	r17,r20
 4002078:	00000806 	br	400209c <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 400207c:	9485883a 	add	r2,r18,r18
 4002080:	1405883a 	add	r2,r2,r16
 4002084:	b007883a 	mov	r3,r22
 4002088:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 400208c:	00800044 	movi	r2,1
 4002090:	1544983a 	sll	r2,r2,r21
 4002094:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4002098:	8c400044 	addi	r17,r17,1
 400209c:	9c7ff72e 	bgeu	r19,r17,400207c <__ram_exceptions_end+0xfbfe1e38>
 40020a0:	00003c06 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40020a4:	a023883a 	mov	r17,r20
 40020a8:	00000906 	br	40020d0 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 40020ac:	9485883a 	add	r2,r18,r18
 40020b0:	1085883a 	add	r2,r2,r2
 40020b4:	1405883a 	add	r2,r2,r16
 40020b8:	b007883a 	mov	r3,r22
 40020bc:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 40020c0:	00800044 	movi	r2,1
 40020c4:	1544983a 	sll	r2,r2,r21
 40020c8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40020cc:	8c400044 	addi	r17,r17,1
 40020d0:	9c7ff62e 	bgeu	r19,r17,40020ac <__ram_exceptions_end+0xfbfe1e68>
 40020d4:	00002f06 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40020d8:	e0bff517 	ldw	r2,-44(fp)
 40020dc:	10800e17 	ldw	r2,56(r2)
 40020e0:	10800058 	cmpnei	r2,r2,1
 40020e4:	10000a1e 	bne	r2,zero,4002110 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 40020e8:	a445383a 	mul	r2,r20,r17
 40020ec:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40020f0:	00000506 	br	4002108 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 40020f4:	9405883a 	add	r2,r18,r16
 40020f8:	b007883a 	mov	r3,r22
 40020fc:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 4002100:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4002104:	a5000044 	addi	r20,r20,1
 4002108:	9d3ffa2e 	bgeu	r19,r20,40020f4 <__ram_exceptions_end+0xfbfe1eb0>
 400210c:	00002106 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4002110:	e0bff517 	ldw	r2,-44(fp)
 4002114:	10800e17 	ldw	r2,56(r2)
 4002118:	10800098 	cmpnei	r2,r2,2
 400211c:	10000d1e 	bne	r2,zero,4002154 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 4002120:	8c45883a 	add	r2,r17,r17
 4002124:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4002128:	a445383a 	mul	r2,r20,r17
 400212c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4002130:	00000606 	br	400214c <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4002134:	9485883a 	add	r2,r18,r18
 4002138:	1405883a 	add	r2,r2,r16
 400213c:	b007883a 	mov	r3,r22
 4002140:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 4002144:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4002148:	a5000044 	addi	r20,r20,1
 400214c:	9d3ff92e 	bgeu	r19,r20,4002134 <__ram_exceptions_end+0xfbfe1ef0>
 4002150:	00001006 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4002154:	8c45883a 	add	r2,r17,r17
 4002158:	1085883a 	add	r2,r2,r2
 400215c:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 4002160:	a445383a 	mul	r2,r20,r17
 4002164:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4002168:	00000706 	br	4002188 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 400216c:	9485883a 	add	r2,r18,r18
 4002170:	1085883a 	add	r2,r2,r2
 4002174:	1405883a 	add	r2,r2,r16
 4002178:	b007883a 	mov	r3,r22
 400217c:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 4002180:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4002184:	a5000044 	addi	r20,r20,1
 4002188:	9d3ff82e 	bgeu	r19,r20,400216c <__ram_exceptions_end+0xfbfe1f28>
 400218c:	00000106 	br	4002194 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 4002190:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4002194:	e6fff904 	addi	sp,fp,-28
 4002198:	df000717 	ldw	fp,28(sp)
 400219c:	dd800617 	ldw	r22,24(sp)
 40021a0:	dd400517 	ldw	r21,20(sp)
 40021a4:	dd000417 	ldw	r20,16(sp)
 40021a8:	dcc00317 	ldw	r19,12(sp)
 40021ac:	dc800217 	ldw	r18,8(sp)
 40021b0:	dc400117 	ldw	r17,4(sp)
 40021b4:	dc000017 	ldw	r16,0(sp)
 40021b8:	dec00804 	addi	sp,sp,32
 40021bc:	f800283a 	ret

040021c0 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 40021c0:	defff804 	addi	sp,sp,-32
 40021c4:	dfc00715 	stw	ra,28(sp)
 40021c8:	df000615 	stw	fp,24(sp)
 40021cc:	df000604 	addi	fp,sp,24
 40021d0:	e13ffc15 	stw	r4,-16(fp)
 40021d4:	e17ffd15 	stw	r5,-12(fp)
 40021d8:	e1bffe15 	stw	r6,-8(fp)
 40021dc:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 40021e0:	e0800417 	ldw	r2,16(fp)
 40021e4:	d8800115 	stw	r2,4(sp)
 40021e8:	e0800317 	ldw	r2,12(fp)
 40021ec:	d8800015 	stw	r2,0(sp)
 40021f0:	e1fffe17 	ldw	r7,-8(fp)
 40021f4:	e1bfff17 	ldw	r6,-4(fp)
 40021f8:	e17ffd17 	ldw	r5,-12(fp)
 40021fc:	e13ffc17 	ldw	r4,-16(fp)
 4002200:	4001d640 	call	4001d64 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4002204:	e0800417 	ldw	r2,16(fp)
 4002208:	d8800115 	stw	r2,4(sp)
 400220c:	e0800317 	ldw	r2,12(fp)
 4002210:	d8800015 	stw	r2,0(sp)
 4002214:	e1c00217 	ldw	r7,8(fp)
 4002218:	e1bfff17 	ldw	r6,-4(fp)
 400221c:	e17ffd17 	ldw	r5,-12(fp)
 4002220:	e13ffc17 	ldw	r4,-16(fp)
 4002224:	4001d640 	call	4001d64 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 4002228:	e0800417 	ldw	r2,16(fp)
 400222c:	d8800115 	stw	r2,4(sp)
 4002230:	e0800317 	ldw	r2,12(fp)
 4002234:	d8800015 	stw	r2,0(sp)
 4002238:	e1c00217 	ldw	r7,8(fp)
 400223c:	e1bffe17 	ldw	r6,-8(fp)
 4002240:	e17ffd17 	ldw	r5,-12(fp)
 4002244:	e13ffc17 	ldw	r4,-16(fp)
 4002248:	4001f740 	call	4001f74 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 400224c:	e0800417 	ldw	r2,16(fp)
 4002250:	d8800115 	stw	r2,4(sp)
 4002254:	e0800317 	ldw	r2,12(fp)
 4002258:	d8800015 	stw	r2,0(sp)
 400225c:	e1c00217 	ldw	r7,8(fp)
 4002260:	e1bffe17 	ldw	r6,-8(fp)
 4002264:	e17fff17 	ldw	r5,-4(fp)
 4002268:	e13ffc17 	ldw	r4,-16(fp)
 400226c:	4001f740 	call	4001f74 <alt_up_pixel_buffer_dma_draw_vline>
}
 4002270:	0001883a 	nop
 4002274:	e037883a 	mov	sp,fp
 4002278:	dfc00117 	ldw	ra,4(sp)
 400227c:	df000017 	ldw	fp,0(sp)
 4002280:	dec00204 	addi	sp,sp,8
 4002284:	f800283a 	ret

04002288 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4002288:	deffff04 	addi	sp,sp,-4
 400228c:	df000015 	stw	fp,0(sp)
 4002290:	d839883a 	mov	fp,sp
 4002294:	2005883a 	mov	r2,r4
 4002298:	3007883a 	mov	r3,r6
 400229c:	3809883a 	mov	r4,r7
 40022a0:	e1800117 	ldw	r6,4(fp)
 40022a4:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 40022a8:	3800051e 	bne	r7,zero,40022c0 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 40022ac:	2909383a 	mul	r4,r5,r4
 40022b0:	20c7883a 	add	r3,r4,r3
 40022b4:	1885883a 	add	r2,r3,r2
 40022b8:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 40022bc:	00000e06 	br	40022f8 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 40022c0:	39c00058 	cmpnei	r7,r7,1
 40022c4:	3800061e 	bne	r7,zero,40022e0 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 40022c8:	2909383a 	mul	r4,r5,r4
 40022cc:	20c7883a 	add	r3,r4,r3
 40022d0:	18c7883a 	add	r3,r3,r3
 40022d4:	1885883a 	add	r2,r3,r2
 40022d8:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 40022dc:	00000606 	br	40022f8 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 40022e0:	2909383a 	mul	r4,r5,r4
 40022e4:	20c7883a 	add	r3,r4,r3
 40022e8:	18c7883a 	add	r3,r3,r3
 40022ec:	18c7883a 	add	r3,r3,r3
 40022f0:	1885883a 	add	r2,r3,r2
 40022f4:	11800035 	stwio	r6,0(r2)
}
 40022f8:	0001883a 	nop
 40022fc:	e037883a 	mov	sp,fp
 4002300:	df000017 	ldw	fp,0(sp)
 4002304:	dec00104 	addi	sp,sp,4
 4002308:	f800283a 	ret

0400230c <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 400230c:	deffeb04 	addi	sp,sp,-84
 4002310:	dfc01415 	stw	ra,80(sp)
 4002314:	df001315 	stw	fp,76(sp)
 4002318:	ddc01215 	stw	r23,72(sp)
 400231c:	dd801115 	stw	r22,68(sp)
 4002320:	dd401015 	stw	r21,64(sp)
 4002324:	dd000f15 	stw	r20,60(sp)
 4002328:	dcc00e15 	stw	r19,56(sp)
 400232c:	dc800d15 	stw	r18,52(sp)
 4002330:	dc400c15 	stw	r17,48(sp)
 4002334:	dc000b15 	stw	r16,44(sp)
 4002338:	df001304 	addi	fp,sp,76
 400233c:	e13fef15 	stw	r4,-68(fp)
 4002340:	e17ff015 	stw	r5,-64(fp)
 4002344:	e1bff115 	stw	r6,-60(fp)
 4002348:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 400234c:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 4002350:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 4002354:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 4002358:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 400235c:	a4c5c83a 	sub	r2,r20,r19
 4002360:	1000010e 	bge	r2,zero,4002368 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 4002364:	0085c83a 	sub	r2,zero,r2
 4002368:	1007883a 	mov	r3,r2
 400236c:	9445c83a 	sub	r2,r18,r17
 4002370:	1000010e 	bge	r2,zero,4002378 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4002374:	0085c83a 	sub	r2,zero,r2
 4002378:	10c4803a 	cmplt	r2,r2,r3
 400237c:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 4002380:	e0bfef17 	ldw	r2,-68(fp)
 4002384:	10800e17 	ldw	r2,56(r2)
 4002388:	10800060 	cmpeqi	r2,r2,1
 400238c:	1000081e 	bne	r2,zero,40023b0 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 4002390:	e0bfef17 	ldw	r2,-68(fp)
 4002394:	10800e17 	ldw	r2,56(r2)
 4002398:	10800098 	cmpnei	r2,r2,2
 400239c:	1000021e 	bne	r2,zero,40023a8 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 40023a0:	00800044 	movi	r2,1
 40023a4:	00000306 	br	40023b4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 40023a8:	00800084 	movi	r2,2
 40023ac:	00000106 	br	40023b4 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 40023b0:	0005883a 	mov	r2,zero
 40023b4:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 40023b8:	e0800317 	ldw	r2,12(fp)
 40023bc:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 40023c0:	e0bfef17 	ldw	r2,-68(fp)
 40023c4:	10800d17 	ldw	r2,52(r2)
 40023c8:	1000071e 	bne	r2,zero,40023e8 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 40023cc:	e0bfef17 	ldw	r2,-68(fp)
 40023d0:	10801317 	ldw	r2,76(r2)
 40023d4:	e0fff417 	ldw	r3,-48(fp)
 40023d8:	10c5c83a 	sub	r2,r2,r3
 40023dc:	00c00044 	movi	r3,1
 40023e0:	1884983a 	sll	r2,r3,r2
 40023e4:	00000206 	br	40023f0 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 40023e8:	e0bfef17 	ldw	r2,-68(fp)
 40023ec:	10800f17 	ldw	r2,60(r2)
 40023f0:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 40023f4:	e0800417 	ldw	r2,16(fp)
 40023f8:	10800058 	cmpnei	r2,r2,1
 40023fc:	1000031e 	bne	r2,zero,400240c <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 4002400:	e0bfef17 	ldw	r2,-68(fp)
 4002404:	15c00c17 	ldw	r23,48(r2)
 4002408:	00000206 	br	4002414 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 400240c:	e0bfef17 	ldw	r2,-68(fp)
 4002410:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 4002414:	e0bff307 	ldb	r2,-52(fp)
 4002418:	0080060e 	bge	zero,r2,4002434 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 400241c:	8821883a 	mov	r16,r17
		x_0 = y_0;
 4002420:	9823883a 	mov	r17,r19
		y_0 = error;
 4002424:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 4002428:	9021883a 	mov	r16,r18
		x_1 = y_1;
 400242c:	a025883a 	mov	r18,r20
		y_1 = error;
 4002430:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 4002434:	9440060e 	bge	r18,r17,4002450 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 4002438:	8821883a 	mov	r16,r17
		x_0 = x_1;
 400243c:	9023883a 	mov	r17,r18
		x_1 = error;
 4002440:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 4002444:	9821883a 	mov	r16,r19
		y_0 = y_1;
 4002448:	a027883a 	mov	r19,r20
		y_1 = error;
 400244c:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 4002450:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 4002454:	a4c5c83a 	sub	r2,r20,r19
 4002458:	1000010e 	bge	r2,zero,4002460 <alt_up_pixel_buffer_dma_draw_line+0x154>
 400245c:	0085c83a 	sub	r2,zero,r2
 4002460:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 4002464:	a804d7fa 	srli	r2,r21,31
 4002468:	1545883a 	add	r2,r2,r21
 400246c:	1005d07a 	srai	r2,r2,1
 4002470:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4002474:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4002478:	9d00020e 	bge	r19,r20,4002484 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 400247c:	04c00044 	movi	r19,1
 4002480:	00000106 	br	4002488 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4002484:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4002488:	e0bff307 	ldb	r2,-52(fp)
 400248c:	10800058 	cmpnei	r2,r2,1
 4002490:	1000211e 	bne	r2,zero,4002518 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 4002494:	00000f06 	br	40024d4 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4002498:	e0bff417 	ldw	r2,-48(fp)
 400249c:	d8800115 	stw	r2,4(sp)
 40024a0:	e0bff517 	ldw	r2,-44(fp)
 40024a4:	d8800015 	stw	r2,0(sp)
 40024a8:	880f883a 	mov	r7,r17
 40024ac:	b00d883a 	mov	r6,r22
 40024b0:	e17ff617 	ldw	r5,-40(fp)
 40024b4:	b809883a 	mov	r4,r23
 40024b8:	40022880 	call	4002288 <helper_plot_pixel>
			error = error + deltay;
 40024bc:	e0bff717 	ldw	r2,-36(fp)
 40024c0:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 40024c4:	0400020e 	bge	zero,r16,40024d0 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 40024c8:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 40024cc:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 40024d0:	8c400044 	addi	r17,r17,1
 40024d4:	947ff00e 	bge	r18,r17,4002498 <__ram_exceptions_end+0xfbfe2254>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 40024d8:	00001006 	br	400251c <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 40024dc:	e0bff417 	ldw	r2,-48(fp)
 40024e0:	d8800115 	stw	r2,4(sp)
 40024e4:	e0bff517 	ldw	r2,-44(fp)
 40024e8:	d8800015 	stw	r2,0(sp)
 40024ec:	b00f883a 	mov	r7,r22
 40024f0:	880d883a 	mov	r6,r17
 40024f4:	e17ff617 	ldw	r5,-40(fp)
 40024f8:	b809883a 	mov	r4,r23
 40024fc:	40022880 	call	4002288 <helper_plot_pixel>
			error = error + deltay;
 4002500:	e0bff717 	ldw	r2,-36(fp)
 4002504:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4002508:	0400020e 	bge	zero,r16,4002514 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 400250c:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4002510:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4002514:	8c400044 	addi	r17,r17,1
 4002518:	947ff00e 	bge	r18,r17,40024dc <__ram_exceptions_end+0xfbfe2298>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 400251c:	0001883a 	nop
 4002520:	e6fff804 	addi	sp,fp,-32
 4002524:	dfc00917 	ldw	ra,36(sp)
 4002528:	df000817 	ldw	fp,32(sp)
 400252c:	ddc00717 	ldw	r23,28(sp)
 4002530:	dd800617 	ldw	r22,24(sp)
 4002534:	dd400517 	ldw	r21,20(sp)
 4002538:	dd000417 	ldw	r20,16(sp)
 400253c:	dcc00317 	ldw	r19,12(sp)
 4002540:	dc800217 	ldw	r18,8(sp)
 4002544:	dc400117 	ldw	r17,4(sp)
 4002548:	dc000017 	ldw	r16,0(sp)
 400254c:	dec00a04 	addi	sp,sp,40
 4002550:	f800283a 	ret

04002554 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4002554:	defffa04 	addi	sp,sp,-24
 4002558:	dfc00515 	stw	ra,20(sp)
 400255c:	df000415 	stw	fp,16(sp)
 4002560:	df000404 	addi	fp,sp,16
 4002564:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4002568:	008000c4 	movi	r2,3
 400256c:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4002570:	e0fffd17 	ldw	r3,-12(fp)
 4002574:	008003f4 	movhi	r2,15
 4002578:	10909004 	addi	r2,r2,16960
 400257c:	1885383a 	mul	r2,r3,r2
 4002580:	100b883a 	mov	r5,r2
 4002584:	01017db4 	movhi	r4,1526
 4002588:	21384004 	addi	r4,r4,-7936
 400258c:	4000c6c0 	call	4000c6c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4002590:	100b883a 	mov	r5,r2
 4002594:	01200034 	movhi	r4,32768
 4002598:	213fffc4 	addi	r4,r4,-1
 400259c:	4000c6c0 	call	4000c6c <__udivsi3>
 40025a0:	100b883a 	mov	r5,r2
 40025a4:	e13fff17 	ldw	r4,-4(fp)
 40025a8:	4000c6c0 	call	4000c6c <__udivsi3>
 40025ac:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40025b0:	e0bffe17 	ldw	r2,-8(fp)
 40025b4:	10002a26 	beq	r2,zero,4002660 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40025b8:	e03ffc15 	stw	zero,-16(fp)
 40025bc:	00001706 	br	400261c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40025c0:	00a00034 	movhi	r2,32768
 40025c4:	10bfffc4 	addi	r2,r2,-1
 40025c8:	10bfffc4 	addi	r2,r2,-1
 40025cc:	103ffe1e 	bne	r2,zero,40025c8 <__ram_exceptions_end+0xfbfe2384>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40025d0:	e0fffd17 	ldw	r3,-12(fp)
 40025d4:	008003f4 	movhi	r2,15
 40025d8:	10909004 	addi	r2,r2,16960
 40025dc:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40025e0:	100b883a 	mov	r5,r2
 40025e4:	01017db4 	movhi	r4,1526
 40025e8:	21384004 	addi	r4,r4,-7936
 40025ec:	4000c6c0 	call	4000c6c <__udivsi3>
 40025f0:	100b883a 	mov	r5,r2
 40025f4:	01200034 	movhi	r4,32768
 40025f8:	213fffc4 	addi	r4,r4,-1
 40025fc:	4000c6c0 	call	4000c6c <__udivsi3>
 4002600:	1007883a 	mov	r3,r2
 4002604:	e0bfff17 	ldw	r2,-4(fp)
 4002608:	10c5c83a 	sub	r2,r2,r3
 400260c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4002610:	e0bffc17 	ldw	r2,-16(fp)
 4002614:	10800044 	addi	r2,r2,1
 4002618:	e0bffc15 	stw	r2,-16(fp)
 400261c:	e0fffc17 	ldw	r3,-16(fp)
 4002620:	e0bffe17 	ldw	r2,-8(fp)
 4002624:	18bfe616 	blt	r3,r2,40025c0 <__ram_exceptions_end+0xfbfe237c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4002628:	e0fffd17 	ldw	r3,-12(fp)
 400262c:	008003f4 	movhi	r2,15
 4002630:	10909004 	addi	r2,r2,16960
 4002634:	1885383a 	mul	r2,r3,r2
 4002638:	100b883a 	mov	r5,r2
 400263c:	01017db4 	movhi	r4,1526
 4002640:	21384004 	addi	r4,r4,-7936
 4002644:	4000c6c0 	call	4000c6c <__udivsi3>
 4002648:	1007883a 	mov	r3,r2
 400264c:	e0bfff17 	ldw	r2,-4(fp)
 4002650:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4002654:	10bfffc4 	addi	r2,r2,-1
 4002658:	103ffe1e 	bne	r2,zero,4002654 <__ram_exceptions_end+0xfbfe2410>
 400265c:	00000d06 	br	4002694 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4002660:	e0fffd17 	ldw	r3,-12(fp)
 4002664:	008003f4 	movhi	r2,15
 4002668:	10909004 	addi	r2,r2,16960
 400266c:	1885383a 	mul	r2,r3,r2
 4002670:	100b883a 	mov	r5,r2
 4002674:	01017db4 	movhi	r4,1526
 4002678:	21384004 	addi	r4,r4,-7936
 400267c:	4000c6c0 	call	4000c6c <__udivsi3>
 4002680:	1007883a 	mov	r3,r2
 4002684:	e0bfff17 	ldw	r2,-4(fp)
 4002688:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400268c:	10bfffc4 	addi	r2,r2,-1
 4002690:	00bffe16 	blt	zero,r2,400268c <__ram_exceptions_end+0xfbfe2448>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4002694:	0005883a 	mov	r2,zero
}
 4002698:	e037883a 	mov	sp,fp
 400269c:	dfc00117 	ldw	ra,4(sp)
 40026a0:	df000017 	ldw	fp,0(sp)
 40026a4:	dec00204 	addi	sp,sp,8
 40026a8:	f800283a 	ret

040026ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40026ac:	defffe04 	addi	sp,sp,-8
 40026b0:	dfc00115 	stw	ra,4(sp)
 40026b4:	df000015 	stw	fp,0(sp)
 40026b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40026bc:	d0a00717 	ldw	r2,-32740(gp)
 40026c0:	10000326 	beq	r2,zero,40026d0 <alt_get_errno+0x24>
 40026c4:	d0a00717 	ldw	r2,-32740(gp)
 40026c8:	103ee83a 	callr	r2
 40026cc:	00000106 	br	40026d4 <alt_get_errno+0x28>
 40026d0:	d0a0e904 	addi	r2,gp,-31836
}
 40026d4:	e037883a 	mov	sp,fp
 40026d8:	dfc00117 	ldw	ra,4(sp)
 40026dc:	df000017 	ldw	fp,0(sp)
 40026e0:	dec00204 	addi	sp,sp,8
 40026e4:	f800283a 	ret

040026e8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40026e8:	defffb04 	addi	sp,sp,-20
 40026ec:	dfc00415 	stw	ra,16(sp)
 40026f0:	df000315 	stw	fp,12(sp)
 40026f4:	df000304 	addi	fp,sp,12
 40026f8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 40026fc:	e0bfff17 	ldw	r2,-4(fp)
 4002700:	10000616 	blt	r2,zero,400271c <close+0x34>
 4002704:	e0bfff17 	ldw	r2,-4(fp)
 4002708:	10c00324 	muli	r3,r2,12
 400270c:	00810034 	movhi	r2,1024
 4002710:	108eed04 	addi	r2,r2,15284
 4002714:	1885883a 	add	r2,r3,r2
 4002718:	00000106 	br	4002720 <close+0x38>
 400271c:	0005883a 	mov	r2,zero
 4002720:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4002724:	e0bffd17 	ldw	r2,-12(fp)
 4002728:	10001926 	beq	r2,zero,4002790 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400272c:	e0bffd17 	ldw	r2,-12(fp)
 4002730:	10800017 	ldw	r2,0(r2)
 4002734:	10800417 	ldw	r2,16(r2)
 4002738:	10000626 	beq	r2,zero,4002754 <close+0x6c>
 400273c:	e0bffd17 	ldw	r2,-12(fp)
 4002740:	10800017 	ldw	r2,0(r2)
 4002744:	10800417 	ldw	r2,16(r2)
 4002748:	e13ffd17 	ldw	r4,-12(fp)
 400274c:	103ee83a 	callr	r2
 4002750:	00000106 	br	4002758 <close+0x70>
 4002754:	0005883a 	mov	r2,zero
 4002758:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400275c:	e13fff17 	ldw	r4,-4(fp)
 4002760:	40030c40 	call	40030c4 <alt_release_fd>
    if (rval < 0)
 4002764:	e0bffe17 	ldw	r2,-8(fp)
 4002768:	1000070e 	bge	r2,zero,4002788 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 400276c:	40026ac0 	call	40026ac <alt_get_errno>
 4002770:	1007883a 	mov	r3,r2
 4002774:	e0bffe17 	ldw	r2,-8(fp)
 4002778:	0085c83a 	sub	r2,zero,r2
 400277c:	18800015 	stw	r2,0(r3)
      return -1;
 4002780:	00bfffc4 	movi	r2,-1
 4002784:	00000706 	br	40027a4 <close+0xbc>
    }
    return 0;
 4002788:	0005883a 	mov	r2,zero
 400278c:	00000506 	br	40027a4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4002790:	40026ac0 	call	40026ac <alt_get_errno>
 4002794:	1007883a 	mov	r3,r2
 4002798:	00801444 	movi	r2,81
 400279c:	18800015 	stw	r2,0(r3)
    return -1;
 40027a0:	00bfffc4 	movi	r2,-1
  }
}
 40027a4:	e037883a 	mov	sp,fp
 40027a8:	dfc00117 	ldw	ra,4(sp)
 40027ac:	df000017 	ldw	fp,0(sp)
 40027b0:	dec00204 	addi	sp,sp,8
 40027b4:	f800283a 	ret

040027b8 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 40027b8:	defffe04 	addi	sp,sp,-8
 40027bc:	df000115 	stw	fp,4(sp)
 40027c0:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40027c4:	e03fff15 	stw	zero,-4(fp)
 40027c8:	00000506 	br	40027e0 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 40027cc:	e0bfff17 	ldw	r2,-4(fp)
 40027d0:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 40027d4:	e0bfff17 	ldw	r2,-4(fp)
 40027d8:	10800804 	addi	r2,r2,32
 40027dc:	e0bfff15 	stw	r2,-4(fp)
 40027e0:	e0bfff17 	ldw	r2,-4(fp)
 40027e4:	10820030 	cmpltui	r2,r2,2048
 40027e8:	103ff81e 	bne	r2,zero,40027cc <__ram_exceptions_end+0xfbfe2588>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 40027ec:	0001883a 	nop
 40027f0:	e037883a 	mov	sp,fp
 40027f4:	df000017 	ldw	fp,0(sp)
 40027f8:	dec00104 	addi	sp,sp,4
 40027fc:	f800283a 	ret

04002800 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4002800:	defffc04 	addi	sp,sp,-16
 4002804:	df000315 	stw	fp,12(sp)
 4002808:	df000304 	addi	fp,sp,12
 400280c:	e13ffd15 	stw	r4,-12(fp)
 4002810:	e17ffe15 	stw	r5,-8(fp)
 4002814:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4002818:	e0bfff17 	ldw	r2,-4(fp)
}
 400281c:	e037883a 	mov	sp,fp
 4002820:	df000017 	ldw	fp,0(sp)
 4002824:	dec00104 	addi	sp,sp,4
 4002828:	f800283a 	ret

0400282c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400282c:	defffe04 	addi	sp,sp,-8
 4002830:	dfc00115 	stw	ra,4(sp)
 4002834:	df000015 	stw	fp,0(sp)
 4002838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400283c:	d0a00717 	ldw	r2,-32740(gp)
 4002840:	10000326 	beq	r2,zero,4002850 <alt_get_errno+0x24>
 4002844:	d0a00717 	ldw	r2,-32740(gp)
 4002848:	103ee83a 	callr	r2
 400284c:	00000106 	br	4002854 <alt_get_errno+0x28>
 4002850:	d0a0e904 	addi	r2,gp,-31836
}
 4002854:	e037883a 	mov	sp,fp
 4002858:	dfc00117 	ldw	ra,4(sp)
 400285c:	df000017 	ldw	fp,0(sp)
 4002860:	dec00204 	addi	sp,sp,8
 4002864:	f800283a 	ret

04002868 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4002868:	defffa04 	addi	sp,sp,-24
 400286c:	dfc00515 	stw	ra,20(sp)
 4002870:	df000415 	stw	fp,16(sp)
 4002874:	df000404 	addi	fp,sp,16
 4002878:	e13ffe15 	stw	r4,-8(fp)
 400287c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4002880:	e0bffe17 	ldw	r2,-8(fp)
 4002884:	10000326 	beq	r2,zero,4002894 <alt_dev_llist_insert+0x2c>
 4002888:	e0bffe17 	ldw	r2,-8(fp)
 400288c:	10800217 	ldw	r2,8(r2)
 4002890:	1000061e 	bne	r2,zero,40028ac <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4002894:	400282c0 	call	400282c <alt_get_errno>
 4002898:	1007883a 	mov	r3,r2
 400289c:	00800584 	movi	r2,22
 40028a0:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 40028a4:	00bffa84 	movi	r2,-22
 40028a8:	00001306 	br	40028f8 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 40028ac:	e0bffe17 	ldw	r2,-8(fp)
 40028b0:	e0ffff17 	ldw	r3,-4(fp)
 40028b4:	e0fffc15 	stw	r3,-16(fp)
 40028b8:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40028bc:	e0bffd17 	ldw	r2,-12(fp)
 40028c0:	e0fffc17 	ldw	r3,-16(fp)
 40028c4:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40028c8:	e0bffc17 	ldw	r2,-16(fp)
 40028cc:	10c00017 	ldw	r3,0(r2)
 40028d0:	e0bffd17 	ldw	r2,-12(fp)
 40028d4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40028d8:	e0bffc17 	ldw	r2,-16(fp)
 40028dc:	10800017 	ldw	r2,0(r2)
 40028e0:	e0fffd17 	ldw	r3,-12(fp)
 40028e4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40028e8:	e0bffc17 	ldw	r2,-16(fp)
 40028ec:	e0fffd17 	ldw	r3,-12(fp)
 40028f0:	10c00015 	stw	r3,0(r2)

  return 0;  
 40028f4:	0005883a 	mov	r2,zero
}
 40028f8:	e037883a 	mov	sp,fp
 40028fc:	dfc00117 	ldw	ra,4(sp)
 4002900:	df000017 	ldw	fp,0(sp)
 4002904:	dec00204 	addi	sp,sp,8
 4002908:	f800283a 	ret

0400290c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400290c:	defffd04 	addi	sp,sp,-12
 4002910:	dfc00215 	stw	ra,8(sp)
 4002914:	df000115 	stw	fp,4(sp)
 4002918:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400291c:	00810034 	movhi	r2,1024
 4002920:	108e5104 	addi	r2,r2,14660
 4002924:	e0bfff15 	stw	r2,-4(fp)
 4002928:	00000606 	br	4002944 <_do_ctors+0x38>
        (*ctor) (); 
 400292c:	e0bfff17 	ldw	r2,-4(fp)
 4002930:	10800017 	ldw	r2,0(r2)
 4002934:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4002938:	e0bfff17 	ldw	r2,-4(fp)
 400293c:	10bfff04 	addi	r2,r2,-4
 4002940:	e0bfff15 	stw	r2,-4(fp)
 4002944:	e0ffff17 	ldw	r3,-4(fp)
 4002948:	00810034 	movhi	r2,1024
 400294c:	108e5204 	addi	r2,r2,14664
 4002950:	18bff62e 	bgeu	r3,r2,400292c <__ram_exceptions_end+0xfbfe26e8>
        (*ctor) (); 
}
 4002954:	0001883a 	nop
 4002958:	e037883a 	mov	sp,fp
 400295c:	dfc00117 	ldw	ra,4(sp)
 4002960:	df000017 	ldw	fp,0(sp)
 4002964:	dec00204 	addi	sp,sp,8
 4002968:	f800283a 	ret

0400296c <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400296c:	defffd04 	addi	sp,sp,-12
 4002970:	dfc00215 	stw	ra,8(sp)
 4002974:	df000115 	stw	fp,4(sp)
 4002978:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400297c:	00810034 	movhi	r2,1024
 4002980:	108e5104 	addi	r2,r2,14660
 4002984:	e0bfff15 	stw	r2,-4(fp)
 4002988:	00000606 	br	40029a4 <_do_dtors+0x38>
        (*dtor) (); 
 400298c:	e0bfff17 	ldw	r2,-4(fp)
 4002990:	10800017 	ldw	r2,0(r2)
 4002994:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4002998:	e0bfff17 	ldw	r2,-4(fp)
 400299c:	10bfff04 	addi	r2,r2,-4
 40029a0:	e0bfff15 	stw	r2,-4(fp)
 40029a4:	e0ffff17 	ldw	r3,-4(fp)
 40029a8:	00810034 	movhi	r2,1024
 40029ac:	108e5204 	addi	r2,r2,14664
 40029b0:	18bff62e 	bgeu	r3,r2,400298c <__ram_exceptions_end+0xfbfe2748>
        (*dtor) (); 
}
 40029b4:	0001883a 	nop
 40029b8:	e037883a 	mov	sp,fp
 40029bc:	dfc00117 	ldw	ra,4(sp)
 40029c0:	df000017 	ldw	fp,0(sp)
 40029c4:	dec00204 	addi	sp,sp,8
 40029c8:	f800283a 	ret

040029cc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40029cc:	defffa04 	addi	sp,sp,-24
 40029d0:	dfc00515 	stw	ra,20(sp)
 40029d4:	df000415 	stw	fp,16(sp)
 40029d8:	df000404 	addi	fp,sp,16
 40029dc:	e13ffe15 	stw	r4,-8(fp)
 40029e0:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40029e4:	e0bfff17 	ldw	r2,-4(fp)
 40029e8:	10800017 	ldw	r2,0(r2)
 40029ec:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40029f0:	e13ffe17 	ldw	r4,-8(fp)
 40029f4:	4000b000 	call	4000b00 <strlen>
 40029f8:	10800044 	addi	r2,r2,1
 40029fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002a00:	00000d06 	br	4002a38 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4002a04:	e0bffc17 	ldw	r2,-16(fp)
 4002a08:	10800217 	ldw	r2,8(r2)
 4002a0c:	e0fffd17 	ldw	r3,-12(fp)
 4002a10:	180d883a 	mov	r6,r3
 4002a14:	e17ffe17 	ldw	r5,-8(fp)
 4002a18:	1009883a 	mov	r4,r2
 4002a1c:	40035fc0 	call	40035fc <memcmp>
 4002a20:	1000021e 	bne	r2,zero,4002a2c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4002a24:	e0bffc17 	ldw	r2,-16(fp)
 4002a28:	00000706 	br	4002a48 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4002a2c:	e0bffc17 	ldw	r2,-16(fp)
 4002a30:	10800017 	ldw	r2,0(r2)
 4002a34:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4002a38:	e0fffc17 	ldw	r3,-16(fp)
 4002a3c:	e0bfff17 	ldw	r2,-4(fp)
 4002a40:	18bff01e 	bne	r3,r2,4002a04 <__ram_exceptions_end+0xfbfe27c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4002a44:	0005883a 	mov	r2,zero
}
 4002a48:	e037883a 	mov	sp,fp
 4002a4c:	dfc00117 	ldw	ra,4(sp)
 4002a50:	df000017 	ldw	fp,0(sp)
 4002a54:	dec00204 	addi	sp,sp,8
 4002a58:	f800283a 	ret

04002a5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4002a5c:	defffe04 	addi	sp,sp,-8
 4002a60:	dfc00115 	stw	ra,4(sp)
 4002a64:	df000015 	stw	fp,0(sp)
 4002a68:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4002a6c:	01440004 	movi	r5,4096
 4002a70:	0009883a 	mov	r4,zero
 4002a74:	400349c0 	call	400349c <alt_icache_flush>
#endif
}
 4002a78:	0001883a 	nop
 4002a7c:	e037883a 	mov	sp,fp
 4002a80:	dfc00117 	ldw	ra,4(sp)
 4002a84:	df000017 	ldw	fp,0(sp)
 4002a88:	dec00204 	addi	sp,sp,8
 4002a8c:	f800283a 	ret

04002a90 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4002a90:	defff904 	addi	sp,sp,-28
 4002a94:	dfc00615 	stw	ra,24(sp)
 4002a98:	df000515 	stw	fp,20(sp)
 4002a9c:	df000504 	addi	fp,sp,20
 4002aa0:	e13ffc15 	stw	r4,-16(fp)
 4002aa4:	e17ffd15 	stw	r5,-12(fp)
 4002aa8:	e1bffe15 	stw	r6,-8(fp)
 4002aac:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4002ab0:	e0800217 	ldw	r2,8(fp)
 4002ab4:	d8800015 	stw	r2,0(sp)
 4002ab8:	e1ffff17 	ldw	r7,-4(fp)
 4002abc:	e1bffe17 	ldw	r6,-8(fp)
 4002ac0:	e17ffd17 	ldw	r5,-12(fp)
 4002ac4:	e13ffc17 	ldw	r4,-16(fp)
 4002ac8:	4002c400 	call	4002c40 <alt_iic_isr_register>
}  
 4002acc:	e037883a 	mov	sp,fp
 4002ad0:	dfc00117 	ldw	ra,4(sp)
 4002ad4:	df000017 	ldw	fp,0(sp)
 4002ad8:	dec00204 	addi	sp,sp,8
 4002adc:	f800283a 	ret

04002ae0 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4002ae0:	defff904 	addi	sp,sp,-28
 4002ae4:	df000615 	stw	fp,24(sp)
 4002ae8:	df000604 	addi	fp,sp,24
 4002aec:	e13ffe15 	stw	r4,-8(fp)
 4002af0:	e17fff15 	stw	r5,-4(fp)
 4002af4:	e0bfff17 	ldw	r2,-4(fp)
 4002af8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002afc:	0005303a 	rdctl	r2,status
 4002b00:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002b04:	e0fffb17 	ldw	r3,-20(fp)
 4002b08:	00bfff84 	movi	r2,-2
 4002b0c:	1884703a 	and	r2,r3,r2
 4002b10:	1001703a 	wrctl	status,r2
  
  return context;
 4002b14:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4002b18:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4002b1c:	00c00044 	movi	r3,1
 4002b20:	e0bffa17 	ldw	r2,-24(fp)
 4002b24:	1884983a 	sll	r2,r3,r2
 4002b28:	1007883a 	mov	r3,r2
 4002b2c:	d0a0ed17 	ldw	r2,-31820(gp)
 4002b30:	1884b03a 	or	r2,r3,r2
 4002b34:	d0a0ed15 	stw	r2,-31820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002b38:	d0a0ed17 	ldw	r2,-31820(gp)
 4002b3c:	100170fa 	wrctl	ienable,r2
 4002b40:	e0bffc17 	ldw	r2,-16(fp)
 4002b44:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002b48:	e0bffd17 	ldw	r2,-12(fp)
 4002b4c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4002b50:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4002b54:	0001883a 	nop
}
 4002b58:	e037883a 	mov	sp,fp
 4002b5c:	df000017 	ldw	fp,0(sp)
 4002b60:	dec00104 	addi	sp,sp,4
 4002b64:	f800283a 	ret

04002b68 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4002b68:	defff904 	addi	sp,sp,-28
 4002b6c:	df000615 	stw	fp,24(sp)
 4002b70:	df000604 	addi	fp,sp,24
 4002b74:	e13ffe15 	stw	r4,-8(fp)
 4002b78:	e17fff15 	stw	r5,-4(fp)
 4002b7c:	e0bfff17 	ldw	r2,-4(fp)
 4002b80:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002b84:	0005303a 	rdctl	r2,status
 4002b88:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002b8c:	e0fffb17 	ldw	r3,-20(fp)
 4002b90:	00bfff84 	movi	r2,-2
 4002b94:	1884703a 	and	r2,r3,r2
 4002b98:	1001703a 	wrctl	status,r2
  
  return context;
 4002b9c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4002ba0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4002ba4:	00c00044 	movi	r3,1
 4002ba8:	e0bffa17 	ldw	r2,-24(fp)
 4002bac:	1884983a 	sll	r2,r3,r2
 4002bb0:	0084303a 	nor	r2,zero,r2
 4002bb4:	1007883a 	mov	r3,r2
 4002bb8:	d0a0ed17 	ldw	r2,-31820(gp)
 4002bbc:	1884703a 	and	r2,r3,r2
 4002bc0:	d0a0ed15 	stw	r2,-31820(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4002bc4:	d0a0ed17 	ldw	r2,-31820(gp)
 4002bc8:	100170fa 	wrctl	ienable,r2
 4002bcc:	e0bffc17 	ldw	r2,-16(fp)
 4002bd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002bd4:	e0bffd17 	ldw	r2,-12(fp)
 4002bd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4002bdc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4002be0:	0001883a 	nop
}
 4002be4:	e037883a 	mov	sp,fp
 4002be8:	df000017 	ldw	fp,0(sp)
 4002bec:	dec00104 	addi	sp,sp,4
 4002bf0:	f800283a 	ret

04002bf4 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4002bf4:	defffc04 	addi	sp,sp,-16
 4002bf8:	df000315 	stw	fp,12(sp)
 4002bfc:	df000304 	addi	fp,sp,12
 4002c00:	e13ffe15 	stw	r4,-8(fp)
 4002c04:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4002c08:	000530fa 	rdctl	r2,ienable
 4002c0c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4002c10:	00c00044 	movi	r3,1
 4002c14:	e0bfff17 	ldw	r2,-4(fp)
 4002c18:	1884983a 	sll	r2,r3,r2
 4002c1c:	1007883a 	mov	r3,r2
 4002c20:	e0bffd17 	ldw	r2,-12(fp)
 4002c24:	1884703a 	and	r2,r3,r2
 4002c28:	1004c03a 	cmpne	r2,r2,zero
 4002c2c:	10803fcc 	andi	r2,r2,255
}
 4002c30:	e037883a 	mov	sp,fp
 4002c34:	df000017 	ldw	fp,0(sp)
 4002c38:	dec00104 	addi	sp,sp,4
 4002c3c:	f800283a 	ret

04002c40 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4002c40:	defff504 	addi	sp,sp,-44
 4002c44:	dfc00a15 	stw	ra,40(sp)
 4002c48:	df000915 	stw	fp,36(sp)
 4002c4c:	df000904 	addi	fp,sp,36
 4002c50:	e13ffc15 	stw	r4,-16(fp)
 4002c54:	e17ffd15 	stw	r5,-12(fp)
 4002c58:	e1bffe15 	stw	r6,-8(fp)
 4002c5c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4002c60:	00bffa84 	movi	r2,-22
 4002c64:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4002c68:	e0bffd17 	ldw	r2,-12(fp)
 4002c6c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4002c70:	e0bff817 	ldw	r2,-32(fp)
 4002c74:	10800808 	cmpgei	r2,r2,32
 4002c78:	1000271e 	bne	r2,zero,4002d18 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4002c7c:	0005303a 	rdctl	r2,status
 4002c80:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4002c84:	e0fffb17 	ldw	r3,-20(fp)
 4002c88:	00bfff84 	movi	r2,-2
 4002c8c:	1884703a 	and	r2,r3,r2
 4002c90:	1001703a 	wrctl	status,r2
  
  return context;
 4002c94:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4002c98:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4002c9c:	00810034 	movhi	r2,1024
 4002ca0:	10903e04 	addi	r2,r2,16632
 4002ca4:	e0fff817 	ldw	r3,-32(fp)
 4002ca8:	180690fa 	slli	r3,r3,3
 4002cac:	10c5883a 	add	r2,r2,r3
 4002cb0:	e0fffe17 	ldw	r3,-8(fp)
 4002cb4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4002cb8:	00810034 	movhi	r2,1024
 4002cbc:	10903e04 	addi	r2,r2,16632
 4002cc0:	e0fff817 	ldw	r3,-32(fp)
 4002cc4:	180690fa 	slli	r3,r3,3
 4002cc8:	10c5883a 	add	r2,r2,r3
 4002ccc:	10800104 	addi	r2,r2,4
 4002cd0:	e0ffff17 	ldw	r3,-4(fp)
 4002cd4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4002cd8:	e0bffe17 	ldw	r2,-8(fp)
 4002cdc:	10000526 	beq	r2,zero,4002cf4 <alt_iic_isr_register+0xb4>
 4002ce0:	e0bff817 	ldw	r2,-32(fp)
 4002ce4:	100b883a 	mov	r5,r2
 4002ce8:	e13ffc17 	ldw	r4,-16(fp)
 4002cec:	4002ae00 	call	4002ae0 <alt_ic_irq_enable>
 4002cf0:	00000406 	br	4002d04 <alt_iic_isr_register+0xc4>
 4002cf4:	e0bff817 	ldw	r2,-32(fp)
 4002cf8:	100b883a 	mov	r5,r2
 4002cfc:	e13ffc17 	ldw	r4,-16(fp)
 4002d00:	4002b680 	call	4002b68 <alt_ic_irq_disable>
 4002d04:	e0bff715 	stw	r2,-36(fp)
 4002d08:	e0bffa17 	ldw	r2,-24(fp)
 4002d0c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4002d10:	e0bff917 	ldw	r2,-28(fp)
 4002d14:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4002d18:	e0bff717 	ldw	r2,-36(fp)
}
 4002d1c:	e037883a 	mov	sp,fp
 4002d20:	dfc00117 	ldw	ra,4(sp)
 4002d24:	df000017 	ldw	fp,0(sp)
 4002d28:	dec00204 	addi	sp,sp,8
 4002d2c:	f800283a 	ret

04002d30 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4002d30:	defff904 	addi	sp,sp,-28
 4002d34:	dfc00615 	stw	ra,24(sp)
 4002d38:	df000515 	stw	fp,20(sp)
 4002d3c:	df000504 	addi	fp,sp,20
 4002d40:	e13ffc15 	stw	r4,-16(fp)
 4002d44:	e17ffd15 	stw	r5,-12(fp)
 4002d48:	e1bffe15 	stw	r6,-8(fp)
 4002d4c:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 4002d50:	e1bfff17 	ldw	r6,-4(fp)
 4002d54:	e17ffe17 	ldw	r5,-8(fp)
 4002d58:	e13ffd17 	ldw	r4,-12(fp)
 4002d5c:	4002f700 	call	4002f70 <open>
 4002d60:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4002d64:	e0bffb17 	ldw	r2,-20(fp)
 4002d68:	10001c16 	blt	r2,zero,4002ddc <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4002d6c:	00810034 	movhi	r2,1024
 4002d70:	108eed04 	addi	r2,r2,15284
 4002d74:	e0fffb17 	ldw	r3,-20(fp)
 4002d78:	18c00324 	muli	r3,r3,12
 4002d7c:	10c5883a 	add	r2,r2,r3
 4002d80:	10c00017 	ldw	r3,0(r2)
 4002d84:	e0bffc17 	ldw	r2,-16(fp)
 4002d88:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4002d8c:	00810034 	movhi	r2,1024
 4002d90:	108eed04 	addi	r2,r2,15284
 4002d94:	e0fffb17 	ldw	r3,-20(fp)
 4002d98:	18c00324 	muli	r3,r3,12
 4002d9c:	10c5883a 	add	r2,r2,r3
 4002da0:	10800104 	addi	r2,r2,4
 4002da4:	10c00017 	ldw	r3,0(r2)
 4002da8:	e0bffc17 	ldw	r2,-16(fp)
 4002dac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 4002db0:	00810034 	movhi	r2,1024
 4002db4:	108eed04 	addi	r2,r2,15284
 4002db8:	e0fffb17 	ldw	r3,-20(fp)
 4002dbc:	18c00324 	muli	r3,r3,12
 4002dc0:	10c5883a 	add	r2,r2,r3
 4002dc4:	10800204 	addi	r2,r2,8
 4002dc8:	10c00017 	ldw	r3,0(r2)
 4002dcc:	e0bffc17 	ldw	r2,-16(fp)
 4002dd0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4002dd4:	e13ffb17 	ldw	r4,-20(fp)
 4002dd8:	40030c40 	call	40030c4 <alt_release_fd>
  }
} 
 4002ddc:	0001883a 	nop
 4002de0:	e037883a 	mov	sp,fp
 4002de4:	dfc00117 	ldw	ra,4(sp)
 4002de8:	df000017 	ldw	fp,0(sp)
 4002dec:	dec00204 	addi	sp,sp,8
 4002df0:	f800283a 	ret

04002df4 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4002df4:	defffb04 	addi	sp,sp,-20
 4002df8:	dfc00415 	stw	ra,16(sp)
 4002dfc:	df000315 	stw	fp,12(sp)
 4002e00:	df000304 	addi	fp,sp,12
 4002e04:	e13ffd15 	stw	r4,-12(fp)
 4002e08:	e17ffe15 	stw	r5,-8(fp)
 4002e0c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4002e10:	01c07fc4 	movi	r7,511
 4002e14:	01800044 	movi	r6,1
 4002e18:	e17ffd17 	ldw	r5,-12(fp)
 4002e1c:	01010034 	movhi	r4,1024
 4002e20:	210ef004 	addi	r4,r4,15296
 4002e24:	4002d300 	call	4002d30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4002e28:	01c07fc4 	movi	r7,511
 4002e2c:	000d883a 	mov	r6,zero
 4002e30:	e17ffe17 	ldw	r5,-8(fp)
 4002e34:	01010034 	movhi	r4,1024
 4002e38:	210eed04 	addi	r4,r4,15284
 4002e3c:	4002d300 	call	4002d30 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4002e40:	01c07fc4 	movi	r7,511
 4002e44:	01800044 	movi	r6,1
 4002e48:	e17fff17 	ldw	r5,-4(fp)
 4002e4c:	01010034 	movhi	r4,1024
 4002e50:	210ef304 	addi	r4,r4,15308
 4002e54:	4002d300 	call	4002d30 <alt_open_fd>
}  
 4002e58:	0001883a 	nop
 4002e5c:	e037883a 	mov	sp,fp
 4002e60:	dfc00117 	ldw	ra,4(sp)
 4002e64:	df000017 	ldw	fp,0(sp)
 4002e68:	dec00204 	addi	sp,sp,8
 4002e6c:	f800283a 	ret

04002e70 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4002e70:	defffe04 	addi	sp,sp,-8
 4002e74:	dfc00115 	stw	ra,4(sp)
 4002e78:	df000015 	stw	fp,0(sp)
 4002e7c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4002e80:	d0a00717 	ldw	r2,-32740(gp)
 4002e84:	10000326 	beq	r2,zero,4002e94 <alt_get_errno+0x24>
 4002e88:	d0a00717 	ldw	r2,-32740(gp)
 4002e8c:	103ee83a 	callr	r2
 4002e90:	00000106 	br	4002e98 <alt_get_errno+0x28>
 4002e94:	d0a0e904 	addi	r2,gp,-31836
}
 4002e98:	e037883a 	mov	sp,fp
 4002e9c:	dfc00117 	ldw	ra,4(sp)
 4002ea0:	df000017 	ldw	fp,0(sp)
 4002ea4:	dec00204 	addi	sp,sp,8
 4002ea8:	f800283a 	ret

04002eac <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4002eac:	defffd04 	addi	sp,sp,-12
 4002eb0:	df000215 	stw	fp,8(sp)
 4002eb4:	df000204 	addi	fp,sp,8
 4002eb8:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 4002ebc:	e0bfff17 	ldw	r2,-4(fp)
 4002ec0:	10800217 	ldw	r2,8(r2)
 4002ec4:	10d00034 	orhi	r3,r2,16384
 4002ec8:	e0bfff17 	ldw	r2,-4(fp)
 4002ecc:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002ed0:	e03ffe15 	stw	zero,-8(fp)
 4002ed4:	00001d06 	br	4002f4c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002ed8:	00810034 	movhi	r2,1024
 4002edc:	108eed04 	addi	r2,r2,15284
 4002ee0:	e0fffe17 	ldw	r3,-8(fp)
 4002ee4:	18c00324 	muli	r3,r3,12
 4002ee8:	10c5883a 	add	r2,r2,r3
 4002eec:	10c00017 	ldw	r3,0(r2)
 4002ef0:	e0bfff17 	ldw	r2,-4(fp)
 4002ef4:	10800017 	ldw	r2,0(r2)
 4002ef8:	1880111e 	bne	r3,r2,4002f40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002efc:	00810034 	movhi	r2,1024
 4002f00:	108eed04 	addi	r2,r2,15284
 4002f04:	e0fffe17 	ldw	r3,-8(fp)
 4002f08:	18c00324 	muli	r3,r3,12
 4002f0c:	10c5883a 	add	r2,r2,r3
 4002f10:	10800204 	addi	r2,r2,8
 4002f14:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4002f18:	1000090e 	bge	r2,zero,4002f40 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4002f1c:	e0bffe17 	ldw	r2,-8(fp)
 4002f20:	10c00324 	muli	r3,r2,12
 4002f24:	00810034 	movhi	r2,1024
 4002f28:	108eed04 	addi	r2,r2,15284
 4002f2c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4002f30:	e0bfff17 	ldw	r2,-4(fp)
 4002f34:	18800226 	beq	r3,r2,4002f40 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4002f38:	00bffcc4 	movi	r2,-13
 4002f3c:	00000806 	br	4002f60 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4002f40:	e0bffe17 	ldw	r2,-8(fp)
 4002f44:	10800044 	addi	r2,r2,1
 4002f48:	e0bffe15 	stw	r2,-8(fp)
 4002f4c:	d0a00617 	ldw	r2,-32744(gp)
 4002f50:	1007883a 	mov	r3,r2
 4002f54:	e0bffe17 	ldw	r2,-8(fp)
 4002f58:	18bfdf2e 	bgeu	r3,r2,4002ed8 <__ram_exceptions_end+0xfbfe2c94>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4002f5c:	0005883a 	mov	r2,zero
}
 4002f60:	e037883a 	mov	sp,fp
 4002f64:	df000017 	ldw	fp,0(sp)
 4002f68:	dec00104 	addi	sp,sp,4
 4002f6c:	f800283a 	ret

04002f70 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 4002f70:	defff604 	addi	sp,sp,-40
 4002f74:	dfc00915 	stw	ra,36(sp)
 4002f78:	df000815 	stw	fp,32(sp)
 4002f7c:	df000804 	addi	fp,sp,32
 4002f80:	e13ffd15 	stw	r4,-12(fp)
 4002f84:	e17ffe15 	stw	r5,-8(fp)
 4002f88:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4002f8c:	00bfffc4 	movi	r2,-1
 4002f90:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4002f94:	00bffb44 	movi	r2,-19
 4002f98:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4002f9c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4002fa0:	d1600404 	addi	r5,gp,-32752
 4002fa4:	e13ffd17 	ldw	r4,-12(fp)
 4002fa8:	40029cc0 	call	40029cc <alt_find_dev>
 4002fac:	e0bff815 	stw	r2,-32(fp)
 4002fb0:	e0bff817 	ldw	r2,-32(fp)
 4002fb4:	1000051e 	bne	r2,zero,4002fcc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4002fb8:	e13ffd17 	ldw	r4,-12(fp)
 4002fbc:	40032f00 	call	40032f0 <alt_find_file>
 4002fc0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4002fc4:	00800044 	movi	r2,1
 4002fc8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4002fcc:	e0bff817 	ldw	r2,-32(fp)
 4002fd0:	10002926 	beq	r2,zero,4003078 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4002fd4:	e13ff817 	ldw	r4,-32(fp)
 4002fd8:	40033f80 	call	40033f8 <alt_get_fd>
 4002fdc:	e0bff915 	stw	r2,-28(fp)
 4002fe0:	e0bff917 	ldw	r2,-28(fp)
 4002fe4:	1000030e 	bge	r2,zero,4002ff4 <open+0x84>
    {
      status = index;
 4002fe8:	e0bff917 	ldw	r2,-28(fp)
 4002fec:	e0bffa15 	stw	r2,-24(fp)
 4002ff0:	00002306 	br	4003080 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 4002ff4:	e0bff917 	ldw	r2,-28(fp)
 4002ff8:	10c00324 	muli	r3,r2,12
 4002ffc:	00810034 	movhi	r2,1024
 4003000:	108eed04 	addi	r2,r2,15284
 4003004:	1885883a 	add	r2,r3,r2
 4003008:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400300c:	e0fffe17 	ldw	r3,-8(fp)
 4003010:	00900034 	movhi	r2,16384
 4003014:	10bfffc4 	addi	r2,r2,-1
 4003018:	1886703a 	and	r3,r3,r2
 400301c:	e0bffc17 	ldw	r2,-16(fp)
 4003020:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4003024:	e0bffb17 	ldw	r2,-20(fp)
 4003028:	1000051e 	bne	r2,zero,4003040 <open+0xd0>
 400302c:	e13ffc17 	ldw	r4,-16(fp)
 4003030:	4002eac0 	call	4002eac <alt_file_locked>
 4003034:	e0bffa15 	stw	r2,-24(fp)
 4003038:	e0bffa17 	ldw	r2,-24(fp)
 400303c:	10001016 	blt	r2,zero,4003080 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4003040:	e0bff817 	ldw	r2,-32(fp)
 4003044:	10800317 	ldw	r2,12(r2)
 4003048:	10000826 	beq	r2,zero,400306c <open+0xfc>
 400304c:	e0bff817 	ldw	r2,-32(fp)
 4003050:	10800317 	ldw	r2,12(r2)
 4003054:	e1ffff17 	ldw	r7,-4(fp)
 4003058:	e1bffe17 	ldw	r6,-8(fp)
 400305c:	e17ffd17 	ldw	r5,-12(fp)
 4003060:	e13ffc17 	ldw	r4,-16(fp)
 4003064:	103ee83a 	callr	r2
 4003068:	00000106 	br	4003070 <open+0x100>
 400306c:	0005883a 	mov	r2,zero
 4003070:	e0bffa15 	stw	r2,-24(fp)
 4003074:	00000206 	br	4003080 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4003078:	00bffb44 	movi	r2,-19
 400307c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 4003080:	e0bffa17 	ldw	r2,-24(fp)
 4003084:	1000090e 	bge	r2,zero,40030ac <open+0x13c>
  {
    alt_release_fd (index);  
 4003088:	e13ff917 	ldw	r4,-28(fp)
 400308c:	40030c40 	call	40030c4 <alt_release_fd>
    ALT_ERRNO = -status;
 4003090:	4002e700 	call	4002e70 <alt_get_errno>
 4003094:	1007883a 	mov	r3,r2
 4003098:	e0bffa17 	ldw	r2,-24(fp)
 400309c:	0085c83a 	sub	r2,zero,r2
 40030a0:	18800015 	stw	r2,0(r3)
    return -1;
 40030a4:	00bfffc4 	movi	r2,-1
 40030a8:	00000106 	br	40030b0 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 40030ac:	e0bff917 	ldw	r2,-28(fp)
}
 40030b0:	e037883a 	mov	sp,fp
 40030b4:	dfc00117 	ldw	ra,4(sp)
 40030b8:	df000017 	ldw	fp,0(sp)
 40030bc:	dec00204 	addi	sp,sp,8
 40030c0:	f800283a 	ret

040030c4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40030c4:	defffe04 	addi	sp,sp,-8
 40030c8:	df000115 	stw	fp,4(sp)
 40030cc:	df000104 	addi	fp,sp,4
 40030d0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40030d4:	e0bfff17 	ldw	r2,-4(fp)
 40030d8:	108000d0 	cmplti	r2,r2,3
 40030dc:	10000d1e 	bne	r2,zero,4003114 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40030e0:	00810034 	movhi	r2,1024
 40030e4:	108eed04 	addi	r2,r2,15284
 40030e8:	e0ffff17 	ldw	r3,-4(fp)
 40030ec:	18c00324 	muli	r3,r3,12
 40030f0:	10c5883a 	add	r2,r2,r3
 40030f4:	10800204 	addi	r2,r2,8
 40030f8:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40030fc:	00810034 	movhi	r2,1024
 4003100:	108eed04 	addi	r2,r2,15284
 4003104:	e0ffff17 	ldw	r3,-4(fp)
 4003108:	18c00324 	muli	r3,r3,12
 400310c:	10c5883a 	add	r2,r2,r3
 4003110:	10000015 	stw	zero,0(r2)
  }
}
 4003114:	0001883a 	nop
 4003118:	e037883a 	mov	sp,fp
 400311c:	df000017 	ldw	fp,0(sp)
 4003120:	dec00104 	addi	sp,sp,4
 4003124:	f800283a 	ret

04003128 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4003128:	defffa04 	addi	sp,sp,-24
 400312c:	df000515 	stw	fp,20(sp)
 4003130:	df000504 	addi	fp,sp,20
 4003134:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4003138:	0005303a 	rdctl	r2,status
 400313c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4003140:	e0fffc17 	ldw	r3,-16(fp)
 4003144:	00bfff84 	movi	r2,-2
 4003148:	1884703a 	and	r2,r3,r2
 400314c:	1001703a 	wrctl	status,r2
  
  return context;
 4003150:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4003154:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4003158:	e0bfff17 	ldw	r2,-4(fp)
 400315c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4003160:	e0bffd17 	ldw	r2,-12(fp)
 4003164:	10800017 	ldw	r2,0(r2)
 4003168:	e0fffd17 	ldw	r3,-12(fp)
 400316c:	18c00117 	ldw	r3,4(r3)
 4003170:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4003174:	e0bffd17 	ldw	r2,-12(fp)
 4003178:	10800117 	ldw	r2,4(r2)
 400317c:	e0fffd17 	ldw	r3,-12(fp)
 4003180:	18c00017 	ldw	r3,0(r3)
 4003184:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4003188:	e0bffd17 	ldw	r2,-12(fp)
 400318c:	e0fffd17 	ldw	r3,-12(fp)
 4003190:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4003194:	e0bffd17 	ldw	r2,-12(fp)
 4003198:	e0fffd17 	ldw	r3,-12(fp)
 400319c:	10c00015 	stw	r3,0(r2)
 40031a0:	e0bffb17 	ldw	r2,-20(fp)
 40031a4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40031a8:	e0bffe17 	ldw	r2,-8(fp)
 40031ac:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40031b0:	0001883a 	nop
 40031b4:	e037883a 	mov	sp,fp
 40031b8:	df000017 	ldw	fp,0(sp)
 40031bc:	dec00104 	addi	sp,sp,4
 40031c0:	f800283a 	ret

040031c4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40031c4:	defffb04 	addi	sp,sp,-20
 40031c8:	dfc00415 	stw	ra,16(sp)
 40031cc:	df000315 	stw	fp,12(sp)
 40031d0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40031d4:	d0a00917 	ldw	r2,-32732(gp)
 40031d8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40031dc:	d0a0ef17 	ldw	r2,-31812(gp)
 40031e0:	10800044 	addi	r2,r2,1
 40031e4:	d0a0ef15 	stw	r2,-31812(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40031e8:	00002e06 	br	40032a4 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40031ec:	e0bffd17 	ldw	r2,-12(fp)
 40031f0:	10800017 	ldw	r2,0(r2)
 40031f4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40031f8:	e0bffd17 	ldw	r2,-12(fp)
 40031fc:	10800403 	ldbu	r2,16(r2)
 4003200:	10803fcc 	andi	r2,r2,255
 4003204:	10000426 	beq	r2,zero,4003218 <alt_tick+0x54>
 4003208:	d0a0ef17 	ldw	r2,-31812(gp)
 400320c:	1000021e 	bne	r2,zero,4003218 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4003210:	e0bffd17 	ldw	r2,-12(fp)
 4003214:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4003218:	e0bffd17 	ldw	r2,-12(fp)
 400321c:	10800217 	ldw	r2,8(r2)
 4003220:	d0e0ef17 	ldw	r3,-31812(gp)
 4003224:	18801d36 	bltu	r3,r2,400329c <alt_tick+0xd8>
 4003228:	e0bffd17 	ldw	r2,-12(fp)
 400322c:	10800403 	ldbu	r2,16(r2)
 4003230:	10803fcc 	andi	r2,r2,255
 4003234:	1000191e 	bne	r2,zero,400329c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4003238:	e0bffd17 	ldw	r2,-12(fp)
 400323c:	10800317 	ldw	r2,12(r2)
 4003240:	e0fffd17 	ldw	r3,-12(fp)
 4003244:	18c00517 	ldw	r3,20(r3)
 4003248:	1809883a 	mov	r4,r3
 400324c:	103ee83a 	callr	r2
 4003250:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4003254:	e0bfff17 	ldw	r2,-4(fp)
 4003258:	1000031e 	bne	r2,zero,4003268 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400325c:	e13ffd17 	ldw	r4,-12(fp)
 4003260:	40031280 	call	4003128 <alt_alarm_stop>
 4003264:	00000d06 	br	400329c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4003268:	e0bffd17 	ldw	r2,-12(fp)
 400326c:	10c00217 	ldw	r3,8(r2)
 4003270:	e0bfff17 	ldw	r2,-4(fp)
 4003274:	1887883a 	add	r3,r3,r2
 4003278:	e0bffd17 	ldw	r2,-12(fp)
 400327c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	10c00217 	ldw	r3,8(r2)
 4003288:	d0a0ef17 	ldw	r2,-31812(gp)
 400328c:	1880032e 	bgeu	r3,r2,400329c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4003290:	e0bffd17 	ldw	r2,-12(fp)
 4003294:	00c00044 	movi	r3,1
 4003298:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400329c:	e0bffe17 	ldw	r2,-8(fp)
 40032a0:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40032a4:	e0fffd17 	ldw	r3,-12(fp)
 40032a8:	d0a00904 	addi	r2,gp,-32732
 40032ac:	18bfcf1e 	bne	r3,r2,40031ec <__ram_exceptions_end+0xfbfe2fa8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40032b0:	0001883a 	nop
}
 40032b4:	0001883a 	nop
 40032b8:	e037883a 	mov	sp,fp
 40032bc:	dfc00117 	ldw	ra,4(sp)
 40032c0:	df000017 	ldw	fp,0(sp)
 40032c4:	dec00204 	addi	sp,sp,8
 40032c8:	f800283a 	ret

040032cc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40032cc:	deffff04 	addi	sp,sp,-4
 40032d0:	df000015 	stw	fp,0(sp)
 40032d4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40032d8:	000170fa 	wrctl	ienable,zero
}
 40032dc:	0001883a 	nop
 40032e0:	e037883a 	mov	sp,fp
 40032e4:	df000017 	ldw	fp,0(sp)
 40032e8:	dec00104 	addi	sp,sp,4
 40032ec:	f800283a 	ret

040032f0 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40032f0:	defffb04 	addi	sp,sp,-20
 40032f4:	dfc00415 	stw	ra,16(sp)
 40032f8:	df000315 	stw	fp,12(sp)
 40032fc:	df000304 	addi	fp,sp,12
 4003300:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4003304:	d0a00217 	ldw	r2,-32760(gp)
 4003308:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400330c:	00003106 	br	40033d4 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4003310:	e0bffd17 	ldw	r2,-12(fp)
 4003314:	10800217 	ldw	r2,8(r2)
 4003318:	1009883a 	mov	r4,r2
 400331c:	4000b000 	call	4000b00 <strlen>
 4003320:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4003324:	e0bffd17 	ldw	r2,-12(fp)
 4003328:	10c00217 	ldw	r3,8(r2)
 400332c:	e0bffe17 	ldw	r2,-8(fp)
 4003330:	10bfffc4 	addi	r2,r2,-1
 4003334:	1885883a 	add	r2,r3,r2
 4003338:	10800003 	ldbu	r2,0(r2)
 400333c:	10803fcc 	andi	r2,r2,255
 4003340:	1080201c 	xori	r2,r2,128
 4003344:	10bfe004 	addi	r2,r2,-128
 4003348:	10800bd8 	cmpnei	r2,r2,47
 400334c:	1000031e 	bne	r2,zero,400335c <alt_find_file+0x6c>
    {
      len -= 1;
 4003350:	e0bffe17 	ldw	r2,-8(fp)
 4003354:	10bfffc4 	addi	r2,r2,-1
 4003358:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400335c:	e0bffe17 	ldw	r2,-8(fp)
 4003360:	e0ffff17 	ldw	r3,-4(fp)
 4003364:	1885883a 	add	r2,r3,r2
 4003368:	10800003 	ldbu	r2,0(r2)
 400336c:	10803fcc 	andi	r2,r2,255
 4003370:	1080201c 	xori	r2,r2,128
 4003374:	10bfe004 	addi	r2,r2,-128
 4003378:	10800be0 	cmpeqi	r2,r2,47
 400337c:	1000081e 	bne	r2,zero,40033a0 <alt_find_file+0xb0>
 4003380:	e0bffe17 	ldw	r2,-8(fp)
 4003384:	e0ffff17 	ldw	r3,-4(fp)
 4003388:	1885883a 	add	r2,r3,r2
 400338c:	10800003 	ldbu	r2,0(r2)
 4003390:	10803fcc 	andi	r2,r2,255
 4003394:	1080201c 	xori	r2,r2,128
 4003398:	10bfe004 	addi	r2,r2,-128
 400339c:	10000a1e 	bne	r2,zero,40033c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40033a0:	e0bffd17 	ldw	r2,-12(fp)
 40033a4:	10800217 	ldw	r2,8(r2)
 40033a8:	e0fffe17 	ldw	r3,-8(fp)
 40033ac:	180d883a 	mov	r6,r3
 40033b0:	e17fff17 	ldw	r5,-4(fp)
 40033b4:	1009883a 	mov	r4,r2
 40033b8:	40035fc0 	call	40035fc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40033bc:	1000021e 	bne	r2,zero,40033c8 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40033c0:	e0bffd17 	ldw	r2,-12(fp)
 40033c4:	00000706 	br	40033e4 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40033c8:	e0bffd17 	ldw	r2,-12(fp)
 40033cc:	10800017 	ldw	r2,0(r2)
 40033d0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40033d4:	e0fffd17 	ldw	r3,-12(fp)
 40033d8:	d0a00204 	addi	r2,gp,-32760
 40033dc:	18bfcc1e 	bne	r3,r2,4003310 <__ram_exceptions_end+0xfbfe30cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40033e0:	0005883a 	mov	r2,zero
}
 40033e4:	e037883a 	mov	sp,fp
 40033e8:	dfc00117 	ldw	ra,4(sp)
 40033ec:	df000017 	ldw	fp,0(sp)
 40033f0:	dec00204 	addi	sp,sp,8
 40033f4:	f800283a 	ret

040033f8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40033f8:	defffc04 	addi	sp,sp,-16
 40033fc:	df000315 	stw	fp,12(sp)
 4003400:	df000304 	addi	fp,sp,12
 4003404:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 4003408:	00bffa04 	movi	r2,-24
 400340c:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4003410:	e03ffd15 	stw	zero,-12(fp)
 4003414:	00001906 	br	400347c <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4003418:	00810034 	movhi	r2,1024
 400341c:	108eed04 	addi	r2,r2,15284
 4003420:	e0fffd17 	ldw	r3,-12(fp)
 4003424:	18c00324 	muli	r3,r3,12
 4003428:	10c5883a 	add	r2,r2,r3
 400342c:	10800017 	ldw	r2,0(r2)
 4003430:	10000f1e 	bne	r2,zero,4003470 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4003434:	00810034 	movhi	r2,1024
 4003438:	108eed04 	addi	r2,r2,15284
 400343c:	e0fffd17 	ldw	r3,-12(fp)
 4003440:	18c00324 	muli	r3,r3,12
 4003444:	10c5883a 	add	r2,r2,r3
 4003448:	e0ffff17 	ldw	r3,-4(fp)
 400344c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4003450:	d0e00617 	ldw	r3,-32744(gp)
 4003454:	e0bffd17 	ldw	r2,-12(fp)
 4003458:	1880020e 	bge	r3,r2,4003464 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 400345c:	e0bffd17 	ldw	r2,-12(fp)
 4003460:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
 4003464:	e0bffd17 	ldw	r2,-12(fp)
 4003468:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 400346c:	00000606 	br	4003488 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4003470:	e0bffd17 	ldw	r2,-12(fp)
 4003474:	10800044 	addi	r2,r2,1
 4003478:	e0bffd15 	stw	r2,-12(fp)
 400347c:	e0bffd17 	ldw	r2,-12(fp)
 4003480:	10800810 	cmplti	r2,r2,32
 4003484:	103fe41e 	bne	r2,zero,4003418 <__ram_exceptions_end+0xfbfe31d4>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4003488:	e0bffe17 	ldw	r2,-8(fp)
}
 400348c:	e037883a 	mov	sp,fp
 4003490:	df000017 	ldw	fp,0(sp)
 4003494:	dec00104 	addi	sp,sp,4
 4003498:	f800283a 	ret

0400349c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 400349c:	defffb04 	addi	sp,sp,-20
 40034a0:	df000415 	stw	fp,16(sp)
 40034a4:	df000404 	addi	fp,sp,16
 40034a8:	e13ffe15 	stw	r4,-8(fp)
 40034ac:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 40034b0:	e0bfff17 	ldw	r2,-4(fp)
 40034b4:	10840070 	cmpltui	r2,r2,4097
 40034b8:	1000021e 	bne	r2,zero,40034c4 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40034bc:	00840004 	movi	r2,4096
 40034c0:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40034c4:	e0fffe17 	ldw	r3,-8(fp)
 40034c8:	e0bfff17 	ldw	r2,-4(fp)
 40034cc:	1885883a 	add	r2,r3,r2
 40034d0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40034d4:	e0bffe17 	ldw	r2,-8(fp)
 40034d8:	e0bffc15 	stw	r2,-16(fp)
 40034dc:	00000506 	br	40034f4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40034e0:	e0bffc17 	ldw	r2,-16(fp)
 40034e4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40034e8:	e0bffc17 	ldw	r2,-16(fp)
 40034ec:	10800804 	addi	r2,r2,32
 40034f0:	e0bffc15 	stw	r2,-16(fp)
 40034f4:	e0fffc17 	ldw	r3,-16(fp)
 40034f8:	e0bffd17 	ldw	r2,-12(fp)
 40034fc:	18bff836 	bltu	r3,r2,40034e0 <__ram_exceptions_end+0xfbfe329c>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 4003500:	e0bffe17 	ldw	r2,-8(fp)
 4003504:	108007cc 	andi	r2,r2,31
 4003508:	10000226 	beq	r2,zero,4003514 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 400350c:	e0bffc17 	ldw	r2,-16(fp)
 4003510:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4003514:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4003518:	0001883a 	nop
 400351c:	e037883a 	mov	sp,fp
 4003520:	df000017 	ldw	fp,0(sp)
 4003524:	dec00104 	addi	sp,sp,4
 4003528:	f800283a 	ret

0400352c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400352c:	defffe04 	addi	sp,sp,-8
 4003530:	df000115 	stw	fp,4(sp)
 4003534:	df000104 	addi	fp,sp,4
 4003538:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400353c:	e0bfff17 	ldw	r2,-4(fp)
 4003540:	10bffe84 	addi	r2,r2,-6
 4003544:	10c00428 	cmpgeui	r3,r2,16
 4003548:	18001a1e 	bne	r3,zero,40035b4 <alt_exception_cause_generated_bad_addr+0x88>
 400354c:	100690ba 	slli	r3,r2,2
 4003550:	00810034 	movhi	r2,1024
 4003554:	108d5904 	addi	r2,r2,13668
 4003558:	1885883a 	add	r2,r3,r2
 400355c:	10800017 	ldw	r2,0(r2)
 4003560:	1000683a 	jmp	r2
 4003564:	040035a4 	muli	r16,zero,214
 4003568:	040035a4 	muli	r16,zero,214
 400356c:	040035b4 	movhi	r16,214
 4003570:	040035b4 	movhi	r16,214
 4003574:	040035b4 	movhi	r16,214
 4003578:	040035a4 	muli	r16,zero,214
 400357c:	040035ac 	andhi	r16,zero,214
 4003580:	040035b4 	movhi	r16,214
 4003584:	040035a4 	muli	r16,zero,214
 4003588:	040035a4 	muli	r16,zero,214
 400358c:	040035b4 	movhi	r16,214
 4003590:	040035a4 	muli	r16,zero,214
 4003594:	040035ac 	andhi	r16,zero,214
 4003598:	040035b4 	movhi	r16,214
 400359c:	040035b4 	movhi	r16,214
 40035a0:	040035a4 	muli	r16,zero,214
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 40035a4:	00800044 	movi	r2,1
 40035a8:	00000306 	br	40035b8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 40035ac:	0005883a 	mov	r2,zero
 40035b0:	00000106 	br	40035b8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40035b4:	0005883a 	mov	r2,zero
  }
}
 40035b8:	e037883a 	mov	sp,fp
 40035bc:	df000017 	ldw	fp,0(sp)
 40035c0:	dec00104 	addi	sp,sp,4
 40035c4:	f800283a 	ret

040035c8 <atexit>:
 40035c8:	200b883a 	mov	r5,r4
 40035cc:	000f883a 	mov	r7,zero
 40035d0:	000d883a 	mov	r6,zero
 40035d4:	0009883a 	mov	r4,zero
 40035d8:	400362c1 	jmpi	400362c <__register_exitproc>

040035dc <exit>:
 40035dc:	defffe04 	addi	sp,sp,-8
 40035e0:	000b883a 	mov	r5,zero
 40035e4:	dc000015 	stw	r16,0(sp)
 40035e8:	dfc00115 	stw	ra,4(sp)
 40035ec:	2021883a 	mov	r16,r4
 40035f0:	40037840 	call	4003784 <__call_exitprocs>
 40035f4:	8009883a 	mov	r4,r16
 40035f8:	40039140 	call	4003914 <_exit>

040035fc <memcmp>:
 40035fc:	218d883a 	add	r6,r4,r6
 4003600:	21800826 	beq	r4,r6,4003624 <memcmp+0x28>
 4003604:	20800003 	ldbu	r2,0(r4)
 4003608:	28c00003 	ldbu	r3,0(r5)
 400360c:	10c00226 	beq	r2,r3,4003618 <memcmp+0x1c>
 4003610:	10c5c83a 	sub	r2,r2,r3
 4003614:	f800283a 	ret
 4003618:	21000044 	addi	r4,r4,1
 400361c:	29400044 	addi	r5,r5,1
 4003620:	003ff706 	br	4003600 <__ram_exceptions_end+0xfbfe33bc>
 4003624:	0005883a 	mov	r2,zero
 4003628:	f800283a 	ret

0400362c <__register_exitproc>:
 400362c:	00810034 	movhi	r2,1024
 4003630:	108f4d04 	addi	r2,r2,15668
 4003634:	10c00017 	ldw	r3,0(r2)
 4003638:	defff904 	addi	sp,sp,-28
 400363c:	dc000015 	stw	r16,0(sp)
 4003640:	1c000c17 	ldw	r16,48(r3)
 4003644:	dd400515 	stw	r21,20(sp)
 4003648:	dd000415 	stw	r20,16(sp)
 400364c:	dcc00315 	stw	r19,12(sp)
 4003650:	dc800215 	stw	r18,8(sp)
 4003654:	dc400115 	stw	r17,4(sp)
 4003658:	dfc00615 	stw	ra,24(sp)
 400365c:	202b883a 	mov	r21,r4
 4003660:	2823883a 	mov	r17,r5
 4003664:	3027883a 	mov	r19,r6
 4003668:	3825883a 	mov	r18,r7
 400366c:	1029883a 	mov	r20,r2
 4003670:	8000021e 	bne	r16,zero,400367c <__register_exitproc+0x50>
 4003674:	1c000d04 	addi	r16,r3,52
 4003678:	1c000c15 	stw	r16,48(r3)
 400367c:	80800117 	ldw	r2,4(r16)
 4003680:	00c007c4 	movi	r3,31
 4003684:	1880110e 	bge	r3,r2,40036cc <__register_exitproc+0xa0>
 4003688:	00800034 	movhi	r2,0
 400368c:	10800004 	addi	r2,r2,0
 4003690:	1000021e 	bne	r2,zero,400369c <__register_exitproc+0x70>
 4003694:	00bfffc4 	movi	r2,-1
 4003698:	00003106 	br	4003760 <__register_exitproc+0x134>
 400369c:	01002304 	movi	r4,140
 40036a0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 40036a4:	1021883a 	mov	r16,r2
 40036a8:	103ffa26 	beq	r2,zero,4003694 <__ram_exceptions_end+0xfbfe3450>
 40036ac:	10000115 	stw	zero,4(r2)
 40036b0:	a0800017 	ldw	r2,0(r20)
 40036b4:	10c00c17 	ldw	r3,48(r2)
 40036b8:	80c00015 	stw	r3,0(r16)
 40036bc:	14000c15 	stw	r16,48(r2)
 40036c0:	80002215 	stw	zero,136(r16)
 40036c4:	a8001d26 	beq	r21,zero,400373c <__register_exitproc+0x110>
 40036c8:	00000606 	br	40036e4 <__register_exitproc+0xb8>
 40036cc:	a8001b26 	beq	r21,zero,400373c <__register_exitproc+0x110>
 40036d0:	80802217 	ldw	r2,136(r16)
 40036d4:	1000091e 	bne	r2,zero,40036fc <__register_exitproc+0xd0>
 40036d8:	00800034 	movhi	r2,0
 40036dc:	10800004 	addi	r2,r2,0
 40036e0:	103fec26 	beq	r2,zero,4003694 <__ram_exceptions_end+0xfbfe3450>
 40036e4:	01004204 	movi	r4,264
 40036e8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 40036ec:	103fe926 	beq	r2,zero,4003694 <__ram_exceptions_end+0xfbfe3450>
 40036f0:	10004015 	stw	zero,256(r2)
 40036f4:	10004115 	stw	zero,260(r2)
 40036f8:	80802215 	stw	r2,136(r16)
 40036fc:	81400117 	ldw	r5,4(r16)
 4003700:	01000044 	movi	r4,1
 4003704:	2947883a 	add	r3,r5,r5
 4003708:	18c7883a 	add	r3,r3,r3
 400370c:	10c7883a 	add	r3,r2,r3
 4003710:	1cc00015 	stw	r19,0(r3)
 4003714:	2148983a 	sll	r4,r4,r5
 4003718:	11404017 	ldw	r5,256(r2)
 400371c:	290ab03a 	or	r5,r5,r4
 4003720:	11404015 	stw	r5,256(r2)
 4003724:	1c802015 	stw	r18,128(r3)
 4003728:	00c00084 	movi	r3,2
 400372c:	a8c0031e 	bne	r21,r3,400373c <__register_exitproc+0x110>
 4003730:	10c04117 	ldw	r3,260(r2)
 4003734:	1908b03a 	or	r4,r3,r4
 4003738:	11004115 	stw	r4,260(r2)
 400373c:	80800117 	ldw	r2,4(r16)
 4003740:	10c00044 	addi	r3,r2,1
 4003744:	10800084 	addi	r2,r2,2
 4003748:	1085883a 	add	r2,r2,r2
 400374c:	1085883a 	add	r2,r2,r2
 4003750:	80c00115 	stw	r3,4(r16)
 4003754:	80a1883a 	add	r16,r16,r2
 4003758:	84400015 	stw	r17,0(r16)
 400375c:	0005883a 	mov	r2,zero
 4003760:	dfc00617 	ldw	ra,24(sp)
 4003764:	dd400517 	ldw	r21,20(sp)
 4003768:	dd000417 	ldw	r20,16(sp)
 400376c:	dcc00317 	ldw	r19,12(sp)
 4003770:	dc800217 	ldw	r18,8(sp)
 4003774:	dc400117 	ldw	r17,4(sp)
 4003778:	dc000017 	ldw	r16,0(sp)
 400377c:	dec00704 	addi	sp,sp,28
 4003780:	f800283a 	ret

04003784 <__call_exitprocs>:
 4003784:	defff504 	addi	sp,sp,-44
 4003788:	dd000515 	stw	r20,20(sp)
 400378c:	05010034 	movhi	r20,1024
 4003790:	dc800315 	stw	r18,12(sp)
 4003794:	dfc00a15 	stw	ra,40(sp)
 4003798:	df000915 	stw	fp,36(sp)
 400379c:	ddc00815 	stw	r23,32(sp)
 40037a0:	dd800715 	stw	r22,28(sp)
 40037a4:	dd400615 	stw	r21,24(sp)
 40037a8:	dcc00415 	stw	r19,16(sp)
 40037ac:	dc400215 	stw	r17,8(sp)
 40037b0:	dc000115 	stw	r16,4(sp)
 40037b4:	d9000015 	stw	r4,0(sp)
 40037b8:	2825883a 	mov	r18,r5
 40037bc:	a50f4d04 	addi	r20,r20,15668
 40037c0:	a4400017 	ldw	r17,0(r20)
 40037c4:	8cc00c17 	ldw	r19,48(r17)
 40037c8:	8c400c04 	addi	r17,r17,48
 40037cc:	98004526 	beq	r19,zero,40038e4 <__call_exitprocs+0x160>
 40037d0:	9c000117 	ldw	r16,4(r19)
 40037d4:	00900034 	movhi	r2,16384
 40037d8:	10bfffc4 	addi	r2,r2,-1
 40037dc:	9d402217 	ldw	r21,136(r19)
 40037e0:	85bfffc4 	addi	r22,r16,-1
 40037e4:	80a1883a 	add	r16,r16,r2
 40037e8:	8421883a 	add	r16,r16,r16
 40037ec:	8421883a 	add	r16,r16,r16
 40037f0:	ac2f883a 	add	r23,r21,r16
 40037f4:	84000204 	addi	r16,r16,8
 40037f8:	9c21883a 	add	r16,r19,r16
 40037fc:	b0002716 	blt	r22,zero,400389c <__call_exitprocs+0x118>
 4003800:	90000726 	beq	r18,zero,4003820 <__call_exitprocs+0x9c>
 4003804:	a800041e 	bne	r21,zero,4003818 <__call_exitprocs+0x94>
 4003808:	b5bfffc4 	addi	r22,r22,-1
 400380c:	bdffff04 	addi	r23,r23,-4
 4003810:	843fff04 	addi	r16,r16,-4
 4003814:	003ff906 	br	40037fc <__ram_exceptions_end+0xfbfe35b8>
 4003818:	b9002017 	ldw	r4,128(r23)
 400381c:	913ffa1e 	bne	r18,r4,4003808 <__ram_exceptions_end+0xfbfe35c4>
 4003820:	99000117 	ldw	r4,4(r19)
 4003824:	82000017 	ldw	r8,0(r16)
 4003828:	213fffc4 	addi	r4,r4,-1
 400382c:	b100021e 	bne	r22,r4,4003838 <__call_exitprocs+0xb4>
 4003830:	9d800115 	stw	r22,4(r19)
 4003834:	00000106 	br	400383c <__call_exitprocs+0xb8>
 4003838:	80000015 	stw	zero,0(r16)
 400383c:	403ff226 	beq	r8,zero,4003808 <__ram_exceptions_end+0xfbfe35c4>
 4003840:	9f000117 	ldw	fp,4(r19)
 4003844:	a8000526 	beq	r21,zero,400385c <__call_exitprocs+0xd8>
 4003848:	00800044 	movi	r2,1
 400384c:	1592983a 	sll	r9,r2,r22
 4003850:	a9404017 	ldw	r5,256(r21)
 4003854:	494a703a 	and	r5,r9,r5
 4003858:	2800021e 	bne	r5,zero,4003864 <__call_exitprocs+0xe0>
 400385c:	403ee83a 	callr	r8
 4003860:	00000906 	br	4003888 <__call_exitprocs+0x104>
 4003864:	a9004117 	ldw	r4,260(r21)
 4003868:	4908703a 	and	r4,r9,r4
 400386c:	2000041e 	bne	r4,zero,4003880 <__call_exitprocs+0xfc>
 4003870:	b9400017 	ldw	r5,0(r23)
 4003874:	d9000017 	ldw	r4,0(sp)
 4003878:	403ee83a 	callr	r8
 400387c:	00000206 	br	4003888 <__call_exitprocs+0x104>
 4003880:	b9000017 	ldw	r4,0(r23)
 4003884:	403ee83a 	callr	r8
 4003888:	99000117 	ldw	r4,4(r19)
 400388c:	e13fcc1e 	bne	fp,r4,40037c0 <__ram_exceptions_end+0xfbfe357c>
 4003890:	89000017 	ldw	r4,0(r17)
 4003894:	993fdc26 	beq	r19,r4,4003808 <__ram_exceptions_end+0xfbfe35c4>
 4003898:	003fc906 	br	40037c0 <__ram_exceptions_end+0xfbfe357c>
 400389c:	00800034 	movhi	r2,0
 40038a0:	10800004 	addi	r2,r2,0
 40038a4:	10000f26 	beq	r2,zero,40038e4 <__call_exitprocs+0x160>
 40038a8:	99400117 	ldw	r5,4(r19)
 40038ac:	99000017 	ldw	r4,0(r19)
 40038b0:	2800091e 	bne	r5,zero,40038d8 <__call_exitprocs+0x154>
 40038b4:	20000826 	beq	r4,zero,40038d8 <__call_exitprocs+0x154>
 40038b8:	89000015 	stw	r4,0(r17)
 40038bc:	a8000226 	beq	r21,zero,40038c8 <__call_exitprocs+0x144>
 40038c0:	a809883a 	mov	r4,r21
 40038c4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 40038c8:	9809883a 	mov	r4,r19
 40038cc:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 40038d0:	8cc00017 	ldw	r19,0(r17)
 40038d4:	003fbd06 	br	40037cc <__ram_exceptions_end+0xfbfe3588>
 40038d8:	9823883a 	mov	r17,r19
 40038dc:	2027883a 	mov	r19,r4
 40038e0:	003fba06 	br	40037cc <__ram_exceptions_end+0xfbfe3588>
 40038e4:	dfc00a17 	ldw	ra,40(sp)
 40038e8:	df000917 	ldw	fp,36(sp)
 40038ec:	ddc00817 	ldw	r23,32(sp)
 40038f0:	dd800717 	ldw	r22,28(sp)
 40038f4:	dd400617 	ldw	r21,24(sp)
 40038f8:	dd000517 	ldw	r20,20(sp)
 40038fc:	dcc00417 	ldw	r19,16(sp)
 4003900:	dc800317 	ldw	r18,12(sp)
 4003904:	dc400217 	ldw	r17,8(sp)
 4003908:	dc000117 	ldw	r16,4(sp)
 400390c:	dec00b04 	addi	sp,sp,44
 4003910:	f800283a 	ret

04003914 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4003914:	defffd04 	addi	sp,sp,-12
 4003918:	df000215 	stw	fp,8(sp)
 400391c:	df000204 	addi	fp,sp,8
 4003920:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4003924:	0001883a 	nop
 4003928:	e0bfff17 	ldw	r2,-4(fp)
 400392c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4003930:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4003934:	10000226 	beq	r2,zero,4003940 <_exit+0x2c>
    ALT_SIM_FAIL();
 4003938:	002af070 	cmpltui	zero,zero,43969
 400393c:	00000106 	br	4003944 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4003940:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4003944:	003fff06 	br	4003944 <__ram_exceptions_end+0xfbfe3700>
