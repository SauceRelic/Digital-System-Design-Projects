
test.elf:     file format elf32-littlenios2
test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000228

Program Header:
    LOAD off    0x00001020 vaddr 0x08040020 paddr 0x04000000 align 2**12
         filesz 0x00000228 memsz 0x00000228 flags r-x
    LOAD off    0x00002228 vaddr 0x04000228 paddr 0x04000228 align 2**12
         filesz 0x00009dbc memsz 0x00009dbc flags r-x
    LOAD off    0x0000bfe4 vaddr 0x04009fe4 paddr 0x0400a398 align 2**12
         filesz 0x000003b4 memsz 0x000003b4 flags rw-
    LOAD off    0x0000c74c vaddr 0x0400a74c paddr 0x0400a74c align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-
    LOAD off    0x0000d000 vaddr 0x08040000 paddr 0x08040000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08040000  08040000  0000d000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  08040020  04000000  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009a0c  04000228  04000228  00002228  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  04009c34  04009c34  0000bc34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003b4  04009fe4  0400a398  0000bfe4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  0400a74c  0400a74c  0000c74c  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0400a87c  0400a87c  0000d020  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  08040248  08040248  0000d020  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000d020  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a48  00000000  00000000  0000d048  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d630  00000000  00000000  0000da90  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004ef5  00000000  00000000  0001b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006669  00000000  00000000  0001ffb5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001624  00000000  00000000  00026620  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000305b  00000000  00000000  00027c44  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a5d1  00000000  00000000  0002ac9f  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00035270  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001150  00000000  00000000  000352d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00038c2e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00038c31  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00038c3d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00038c3e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00038c3f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00038c43  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00038c47  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00038c4b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00038c56  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00038c61  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  00038c6c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000048  00000000  00000000  00038c78  2**0
                  CONTENTS, READONLY
 30 .jdi          00005be8  00000000  00000000  00038cc0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083f96  00000000  00000000  0003e8a8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08040000 l    d  .entry	00000000 .entry
08040020 l    d  .exceptions	00000000 .exceptions
04000228 l    d  .text	00000000 .text
04009c34 l    d  .rodata	00000000 .rodata
04009fe4 l    d  .rwdata	00000000 .rwdata
0400a74c l    d  .bss	00000000 .bss
0400a87c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
08040248 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../test_bsp//obj/HAL/src/crt0.o
04000270 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 accel_sketch.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
04009d00 l     O .rodata	00000108 two_over_pi
04009c80 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
04009e48 l     O .rodata	00000010 init_jk
04009e08 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
040066a4 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
04009fe4 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
04006efc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
04007094 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
040071c8 l     F .text	00000034 alt_dev_reg
0400a0c4 l     O .rwdata	0000002c jtag_uart_0
0400a0f0 l     O .rwdata	0000002c accelerometer_spi_0
0400a11c l     O .rwdata	00000054 video_pixel_buffer_dma_0
0400a170 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0400778c l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04008c38 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04008d8c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04008db8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400901c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0400915c l     F .text	0000003c alt_get_errno
04009198 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400a778 g     O .bss	00000004 alt_instruction_exception_handler
04006fe8 g     F .text	0000007c alt_main
04008500 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0400a77c g     O .bss	00000100 alt_irq
04002e44 g     F .text	00000014 fabs
0400a398 g       *ABS*	00000000 __flash_rwdata_start
040051d4 g     F .text	00000088 .hidden __eqdf2
0400a758 g     O .bss	00000004 timeoutFlag
04006658 g     F .text	0000004c printf
04000f64 g     F .text	00000100 round
04003878 g     F .text	00000440 .hidden __divsf3
0400a35c g     O .rwdata	00000004 x
04004794 g     F .text	00000070 .hidden __fixsfsi
04007c68 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
0400525c g     F .text	000000dc .hidden __gtdf2
040095b8 g     F .text	00000024 altera_nios2_gen2_irq_init
04007c2c g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08040000 g     F .entry	0000001c __reset
040079c8 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
04000590 g     F .text	00000630 colorCalc
04000000 g       *ABS*	00000000 __flash_exceptions_start
0400a75c g     O .bss	00000004 errno
04002e58 g     F .text	000001ec floor
0400a768 g     O .bss	00000004 alt_argv
0401235c g       *ABS*	00000000 _gp
04007064 g     F .text	00000030 usleep
040042b0 g     F .text	000004e4 .hidden __subsf3
04007dfc g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0400a1dc g     O .rwdata	00000180 alt_fd_list
040011d8 g     F .text	0000076c __ieee754_rem_pio2
04008f58 g     F .text	00000090 alt_find_dev
040063cc g     F .text	000000dc .hidden __floatsidf
040090e0 g     F .text	0000007c alt_io_redirect
04009c34 g       *ABS*	00000000 __DTOR_END__
04009818 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04000d2c g     F .text	000000fc mapi
04007eb8 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
0400760c g     F .text	000000ec altera_avalon_jtag_uart_read
0400661c g     F .text	0000003c _printf_r
08040000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
040032f4 g     F .text	00000064 .hidden __udivsi3
04001154 g     F .text	00000084 roundf
040082f0 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
04001944 g     F .text	000004a4 __kernel_cos
04003dec g     F .text	000000c8 .hidden __lesf2
04009788 g     F .text	00000090 alt_icache_flush
04008814 g     F .text	00000084 helper_plot_pixel
0400a388 g     O .rwdata	00000004 alt_max_fd
04006d7c g     F .text	00000180 alt_irq_register
0400a364 g     O .rwdata	00000004 xFloat
04002b78 g     F .text	000002cc __kernel_sin
040064a8 g     F .text	00000110 .hidden __extendsfdf2
04004928 g     F .text	000008ac .hidden __adddf3
04003cb8 g     F .text	00000078 .hidden __nesf2
04007eec g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0400a36c g     O .rwdata	00000004 _global_impure_ptr
0400a87c g       *ABS*	00000000 __bss_end
04008014 g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
040094b0 g     F .text	00000108 alt_tick
04009414 g     F .text	0000009c alt_alarm_stop
0400a760 g     O .bss	00000004 alt_irq_active
080400fc g     F .exceptions	000000d8 alt_irq_handler
0400a1b4 g     O .rwdata	00000028 alt_dev_null
04001de8 g     F .text	00000d90 __kernel_rem_pio2
04008d44 g     F .text	00000048 alt_dcache_flush_all
0400874c g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
0400634c g     F .text	00000080 .hidden __fixdfsi
0400a398 g       *ABS*	00000000 __ram_rwdata_end
0400a380 g     O .rwdata	00000008 alt_dev_list
040070d0 g     F .text	000000f8 write
04008898 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
04003d30 g     F .text	000000bc .hidden __gtsf2
04009fe4 g       *ABS*	00000000 __ram_rodata_end
04003358 g     F .text	00000058 .hidden __umodsi3
0400a74c g     O .bss	00000004 colorToDraw
0400a87c g       *ABS*	00000000 end
080401d4 g     F .exceptions	00000074 alt_instruction_exception_entry
04009c34 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04007808 g     F .text	00000074 alt_avalon_timer_sc_init
040065b8 g     F .text	00000064 .hidden __clzsi2
040076f8 g     F .text	00000094 altera_avalon_jtag_uart_write
04006710 g     F .text	00000524 ___vfprintf_internal_r
04009a70 g     F .text	00000190 __call_exitprocs
04000228 g     F .text	0000004c _start
0400a770 g     O .bss	00000004 _alt_tick_rate
04001064 g     F .text	000000f0 sin
0400a774 g     O .bss	00000004 _alt_nticks
04007234 g     F .text	00000318 alt_sys_init
040078b8 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
04004804 g     F .text	00000124 .hidden __floatsisf
04009918 g     F .text	00000158 __register_exitproc
04009fe4 g       *ABS*	00000000 __ram_rwdata_start
04009c34 g       *ABS*	00000000 __ram_rodata_start
04003cb8 g     F .text	00000078 .hidden __eqsf2
0400754c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040096e4 g     F .text	000000a4 alt_get_fd
04008ae0 g     F .text	00000158 alt_busy_sleep
04007a94 g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
040098e8 g     F .text	00000030 memcmp
04000bc0 g     F .text	0000016c cursorMove
0400a87c g       *ABS*	00000000 __alt_stack_base
04005338 g     F .text	00000718 .hidden __muldf3
0400a754 g     O .bss	00000004 tRainbow
040095dc g     F .text	00000108 alt_find_file
04008df4 g     F .text	000000a4 alt_dev_llist_insert
04006c50 g     F .text	000000b8 __sfvwrite_small_dev
0400a74c g       *ABS*	00000000 __bss_start
04000274 g     F .text	0000031c main
0400a76c g     O .bss	00000004 alt_envp
04007e58 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
040075ac g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04003dec g     F .text	000000c8 .hidden __ltsf2
0400a360 g     O .rwdata	00000004 y
0400a38c g     O .rwdata	00000004 alt_errno
0400a368 g     O .rwdata	00000004 yFloat
040031fc g     F .text	00000084 .hidden __divsi3
04009c34 g       *ABS*	00000000 __CTOR_END__
04003eb4 g     F .text	000003fc .hidden __mulsf3
04009c34 g       *ABS*	00000000 __flash_rodata_start
04009c34 g       *ABS*	00000000 __DTOR_LIST__
040031e0 g     F .text	0000001c copysign
040051d4 g     F .text	00000088 .hidden __nedf2
040071fc g     F .text	00000038 alt_irq_init
040093b0 g     F .text	00000064 alt_release_fd
04000f1c g     F .text	00000048 timer_0_isr
04009e58 g     O .rodata	00000100 .hidden __clz_tab
040098b4 g     F .text	00000014 atexit
04003d30 g     F .text	000000bc .hidden __gesf2
04006d24 g     F .text	00000058 _write_r
0400a370 g     O .rwdata	00000004 _impure_ptr
0400a764 g     O .bss	00000004 alt_argc
04003044 g     F .text	0000019c scalbn
04008ef8 g     F .text	00000060 _do_dtors
08040020 g       .exceptions	00000000 alt_irq_entry
0400a378 g     O .rwdata	00000008 alt_fs_list
08040020 g       *ABS*	00000000 __ram_exceptions_start
0400787c g     F .text	0000003c alt_up_accelerometer_spi_open_dev
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0400a398 g       *ABS*	00000000 _edata
0400a87c g       *ABS*	00000000 _end
08040248 g       *ABS*	00000000 __ram_exceptions_end
040098c8 g     F .text	00000020 exit
04003280 g     F .text	00000074 .hidden __modsi3
04007b60 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
08000000 g       *ABS*	00000000 __alt_data_end
08040020 g     F .exceptions	00000000 alt_exception
04009c00 g     F .text	00000034 _exit
040078fc g     F .text	00000068 alt_up_accelerometer_spi_read
04007964 g     F .text	00000064 alt_up_accelerometer_spi_write
04006d08 g     F .text	0000001c strlen
0400925c g     F .text	00000154 open
0400525c g     F .text	000000dc .hidden __gedf2
04008fe8 g     F .text	00000034 alt_icache_flush_all
04000e28 g     F .text	000000f4 mapf
0400a374 g     O .rwdata	00000004 alt_priority_mask
04006c34 g     F .text	0000001c __vfprintf_internal
04005a50 g     F .text	000008fc .hidden __subdf3
0400a390 g     O .rwdata	00000008 alt_alarm_list
04008e98 g     F .text	00000060 _do_ctors
04008c74 g     F .text	000000d0 close
040033b0 g     F .text	000004c8 .hidden __addsf3
0400a750 g     O .bss	00000004 rainbowFlag
04006f64 g     F .text	00000084 alt_load



Disassembly of section .entry:

08040000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8040000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8040004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8040008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 804000c:	00bffd16 	blt	zero,r2,8040004 <__ram_exceptions_end+0xfffffdbc>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8040010:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 8040014:	08408a14 	ori	at,at,552
    jmp r1
 8040018:	0800683a 	jmp	at
 804001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

08040020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8040020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8040024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8040028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 804002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8040030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8040034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8040038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 804003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8040040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8040044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8040048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 804004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8040050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8040054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8040058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 804005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8040060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8040064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8040068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 804006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8040070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8040074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8040078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 804007c:	10000326 	beq	r2,zero,804008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8040080:	20000226 	beq	r4,zero,804008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8040084:	80400fc0 	call	80400fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8040088:	00000706 	br	80400a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 804008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8040090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8040094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8040098:	80401d40 	call	80401d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 804009c:	1000021e 	bne	r2,zero,80400a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80400a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80400a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80400a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80400ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80400b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80400b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80400b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80400bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80400c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80400c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80400c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80400cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80400d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80400d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80400d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80400dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80400e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80400e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80400e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80400ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80400f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80400f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80400f8:	ef80083a 	eret

080400fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80400fc:	defff904 	addi	sp,sp,-28
 8040100:	dfc00615 	stw	ra,24(sp)
 8040104:	df000515 	stw	fp,20(sp)
 8040108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 804010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040110:	0005313a 	rdctl	r2,ipending
 8040114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8040118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 804011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8040120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8040124:	00800044 	movi	r2,1
 8040128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 804012c:	e0fffb17 	ldw	r3,-20(fp)
 8040130:	e0bffc17 	ldw	r2,-16(fp)
 8040134:	1884703a 	and	r2,r3,r2
 8040138:	10001526 	beq	r2,zero,8040190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 804013c:	00810074 	movhi	r2,1025
 8040140:	10a9df04 	addi	r2,r2,-22660
 8040144:	e0fffd17 	ldw	r3,-12(fp)
 8040148:	180690fa 	slli	r3,r3,3
 804014c:	10c5883a 	add	r2,r2,r3
 8040150:	10c00017 	ldw	r3,0(r2)
 8040154:	00810074 	movhi	r2,1025
 8040158:	10a9df04 	addi	r2,r2,-22660
 804015c:	e13ffd17 	ldw	r4,-12(fp)
 8040160:	200890fa 	slli	r4,r4,3
 8040164:	1105883a 	add	r2,r2,r4
 8040168:	10800104 	addi	r2,r2,4
 804016c:	10800017 	ldw	r2,0(r2)
 8040170:	e17ffd17 	ldw	r5,-12(fp)
 8040174:	1009883a 	mov	r4,r2
 8040178:	183ee83a 	callr	r3
#endif
        break;
 804017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8040180:	0005313a 	rdctl	r2,ipending
 8040184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8040188:	e0bfff17 	ldw	r2,-4(fp)
 804018c:	00000706 	br	80401ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8040190:	e0bffc17 	ldw	r2,-16(fp)
 8040194:	1085883a 	add	r2,r2,r2
 8040198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 804019c:	e0bffd17 	ldw	r2,-12(fp)
 80401a0:	10800044 	addi	r2,r2,1
 80401a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80401a8:	003fe006 	br	804012c <__ram_exceptions_end+0xfffffee4>

    active = alt_irq_pending ();
 80401ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80401b0:	e0bffb17 	ldw	r2,-20(fp)
 80401b4:	103fda1e 	bne	r2,zero,8040120 <__ram_exceptions_end+0xfffffed8>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80401b8:	0001883a 	nop
}
 80401bc:	0001883a 	nop
 80401c0:	e037883a 	mov	sp,fp
 80401c4:	dfc00117 	ldw	ra,4(sp)
 80401c8:	df000017 	ldw	fp,0(sp)
 80401cc:	dec00204 	addi	sp,sp,8
 80401d0:	f800283a 	ret

080401d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80401d4:	defffb04 	addi	sp,sp,-20
 80401d8:	dfc00415 	stw	ra,16(sp)
 80401dc:	df000315 	stw	fp,12(sp)
 80401e0:	df000304 	addi	fp,sp,12
 80401e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80401e8:	000531fa 	rdctl	r2,exception
 80401ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80401f0:	e0bffd17 	ldw	r2,-12(fp)
 80401f4:	10801f0c 	andi	r2,r2,124
 80401f8:	1004d0ba 	srli	r2,r2,2
 80401fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 8040200:	0005333a 	rdctl	r2,badaddr
 8040204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8040208:	d0a10717 	ldw	r2,-31716(gp)
 804020c:	10000726 	beq	r2,zero,804022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8040210:	d0a10717 	ldw	r2,-31716(gp)
 8040214:	e0fffd17 	ldw	r3,-12(fp)
 8040218:	e1bffe17 	ldw	r6,-8(fp)
 804021c:	e17fff17 	ldw	r5,-4(fp)
 8040220:	1809883a 	mov	r4,r3
 8040224:	103ee83a 	callr	r2
 8040228:	00000206 	br	8040234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 804022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8040230:	0005883a 	mov	r2,zero
}
 8040234:	e037883a 	mov	sp,fp
 8040238:	dfc00117 	ldw	ra,4(sp)
 804023c:	df000017 	ldw	fp,0(sp)
 8040240:	dec00204 	addi	sp,sp,8
 8040244:	f800283a 	ret

Disassembly of section .text:

04000228 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 4000228:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 400022c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 4000230:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 4000234:	00bffd16 	blt	zero,r2,400022c <__ram_exceptions_end+0xfbfbffe4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000238:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 400023c:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000240:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 4000244:	d688d714 	ori	gp,gp,9052
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000248:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 400024c:	10a9d314 	ori	r2,r2,42828

    movhi r3, %hi(__bss_end)
 4000250:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 4000254:	18ea1f14 	ori	r3,r3,43132

    beq r2, r3, 1f
 4000258:	10c00326 	beq	r2,r3,4000268 <_start+0x40>

0:
    stw zero, (r2)
 400025c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000260:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 4000264:	10fffd36 	bltu	r2,r3,400025c <__ram_exceptions_end+0xfbfc0014>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000268:	4006f640 	call	4006f64 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 400026c:	4006fe80 	call	4006fe8 <alt_main>

04000270 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000270:	003fff06 	br	4000270 <__ram_exceptions_end+0xfbfc0028>

04000274 <main>:
int tRainbow = 0;

// timer flag to sync frames
volatile int timeoutFlag = 0;

int main(){
 4000274:	defff704 	addi	sp,sp,-36
 4000278:	dfc00815 	stw	ra,32(sp)
 400027c:	df000715 	stw	fp,28(sp)
 4000280:	dc000615 	stw	r16,24(sp)
 4000284:	df000704 	addi	fp,sp,28
	printf("entered main");
 4000288:	01010074 	movhi	r4,1025
 400028c:	21270d04 	addi	r4,r4,-25548
 4000290:	40066580 	call	4006658 <printf>

	// create pointer to pixel buffer
	alt_up_pixel_buffer_dma_dev* pixel_buffer;
	pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 4000294:	01010074 	movhi	r4,1025
 4000298:	21271104 	addi	r4,r4,-25532
 400029c:	4007c2c0 	call	4007c2c <alt_up_pixel_buffer_dma_open_dev>
 40002a0:	e0bffc15 	stw	r2,-16(fp)

	// create pointer to accelerometer
	alt_up_accelerometer_spi_dev* accel;
	accel = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
 40002a4:	01010074 	movhi	r4,1025
 40002a8:	21271904 	addi	r4,r4,-25500
 40002ac:	400787c0 	call	400787c <alt_up_accelerometer_spi_open_dev>
 40002b0:	e0bffd15 	stw	r2,-12(fp)

	// initialize timer settings
	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
 40002b4:	00c001c4 	movi	r3,7
 40002b8:	00820234 	movhi	r2,2056
 40002bc:	10840104 	addi	r2,r2,4100
 40002c0:	10c00035 	stwio	r3,0(r2)
	//IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, (1 << ALTERA_AVALON_TIMER_CONTROL_ITO_OFST) & ~ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);
	// start timer
	//IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, (1 << ALTERA_AVALON_TIMER_CONTROL_START_OFST) & ~ALTERA_AVALON_TIMER_CONTROL_START_MSK);

	// initialize timer IRQ
	void* timeoutFlag_ptr = (void*) &timeoutFlag;
 40002c4:	d0a0ff04 	addi	r2,gp,-31748
 40002c8:	e0bffe15 	stw	r2,-8(fp)
	alt_irq_register(
 40002cc:	01810034 	movhi	r6,1024
 40002d0:	3183c704 	addi	r6,r6,3868
 40002d4:	e17ffe17 	ldw	r5,-8(fp)
 40002d8:	01000044 	movi	r4,1
 40002dc:	4006d7c0 	call	4006d7c <alt_irq_register>
	//	0x00
	);

	// initial screen clear
//	alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,0);
	usleep(200000);
 40002e0:	010000f4 	movhi	r4,3
 40002e4:	21035004 	addi	r4,r4,3392
 40002e8:	40070640 	call	4007064 <usleep>

	while(1){
	if(timeoutFlag == 1){
 40002ec:	d0a0ff17 	ldw	r2,-31748(gp)
 40002f0:	10800058 	cmpnei	r2,r2,1
 40002f4:	103ffd1e 	bne	r2,zero,40002ec <__ram_exceptions_end+0xfbfc00a4>
		// calculate color to draw
		colorToDraw = colorCalc();
 40002f8:	40005900 	call	4000590 <colorCalc>
 40002fc:	d0a0fc15 	stw	r2,-31760(gp)

		// KEY1 allows quick erasing without changing SW
		if(IORD(PIO_PUSH_BASE,0) == 0b01){
 4000300:	00820234 	movhi	r2,2056
 4000304:	10841004 	addi	r2,r2,4160
 4000308:	10800037 	ldwio	r2,0(r2)
 400030c:	10800058 	cmpnei	r2,r2,1
 4000310:	1000411e 	bne	r2,zero,4000418 <main+0x1a4>
			// calculate next cursor position
			cursorMove(accel);
 4000314:	e13ffd17 	ldw	r4,-12(fp)
 4000318:	4000bc00 	call	4000bc0 <cursorMove>

			// move on-screen cursor if position has changed
			if((roundf(xFloat) != x) || (roundf(yFloat) != y)){
 400031c:	d0a00217 	ldw	r2,-32760(gp)
 4000320:	1009883a 	mov	r4,r2
 4000324:	40011540 	call	4001154 <roundf>
 4000328:	1021883a 	mov	r16,r2
 400032c:	d0a00017 	ldw	r2,-32768(gp)
 4000330:	1009883a 	mov	r4,r2
 4000334:	40048040 	call	4004804 <__floatsisf>
 4000338:	1007883a 	mov	r3,r2
 400033c:	180b883a 	mov	r5,r3
 4000340:	8009883a 	mov	r4,r16
 4000344:	4003cb80 	call	4003cb8 <__eqsf2>
 4000348:	10000c1e 	bne	r2,zero,400037c <main+0x108>
 400034c:	d0a00317 	ldw	r2,-32756(gp)
 4000350:	1009883a 	mov	r4,r2
 4000354:	40011540 	call	4001154 <roundf>
 4000358:	1021883a 	mov	r16,r2
 400035c:	d0a00117 	ldw	r2,-32764(gp)
 4000360:	1009883a 	mov	r4,r2
 4000364:	40048040 	call	4004804 <__floatsisf>
 4000368:	1007883a 	mov	r3,r2
 400036c:	180b883a 	mov	r5,r3
 4000370:	8009883a 	mov	r4,r16
 4000374:	4003cb80 	call	4003cb8 <__eqsf2>
 4000378:	10002726 	beq	r2,zero,4000418 <main+0x1a4>
				// fill previous position with black; erase
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0x0000,0);
 400037c:	d0e00017 	ldw	r3,-32768(gp)
 4000380:	d1200117 	ldw	r4,-32764(gp)
 4000384:	d1600017 	ldw	r5,-32768(gp)
 4000388:	d0a00117 	ldw	r2,-32764(gp)
 400038c:	d8000215 	stw	zero,8(sp)
 4000390:	d8000115 	stw	zero,4(sp)
 4000394:	d8800015 	stw	r2,0(sp)
 4000398:	280f883a 	mov	r7,r5
 400039c:	200d883a 	mov	r6,r4
 40003a0:	180b883a 	mov	r5,r3
 40003a4:	e13ffc17 	ldw	r4,-16(fp)
 40003a8:	40080140 	call	4008014 <alt_up_pixel_buffer_dma_draw_box>

				// adjust grid coords to follow floating coords
				x = roundf(xFloat);
 40003ac:	d0a00217 	ldw	r2,-32760(gp)
 40003b0:	1009883a 	mov	r4,r2
 40003b4:	40011540 	call	4001154 <roundf>
 40003b8:	1007883a 	mov	r3,r2
 40003bc:	1809883a 	mov	r4,r3
 40003c0:	40047940 	call	4004794 <__fixsfsi>
 40003c4:	d0a00015 	stw	r2,-32768(gp)
				y = roundf(yFloat);
 40003c8:	d0a00317 	ldw	r2,-32756(gp)
 40003cc:	1009883a 	mov	r4,r2
 40003d0:	40011540 	call	4001154 <roundf>
 40003d4:	1007883a 	mov	r3,r2
 40003d8:	1809883a 	mov	r4,r3
 40003dc:	40047940 	call	4004794 <__fixsfsi>
 40003e0:	d0a00115 	stw	r2,-32764(gp)

				// redraw cursor
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 40003e4:	d1200017 	ldw	r4,-32768(gp)
 40003e8:	d1600117 	ldw	r5,-32764(gp)
 40003ec:	d1a00017 	ldw	r6,-32768(gp)
 40003f0:	d0a00117 	ldw	r2,-32764(gp)
 40003f4:	d8000215 	stw	zero,8(sp)
 40003f8:	00ffffd4 	movui	r3,65535
 40003fc:	d8c00115 	stw	r3,4(sp)
 4000400:	d8800015 	stw	r2,0(sp)
 4000404:	300f883a 	mov	r7,r6
 4000408:	280d883a 	mov	r6,r5
 400040c:	200b883a 	mov	r5,r4
 4000410:	e13ffc17 	ldw	r4,-16(fp)
 4000414:	40080140 	call	4008014 <alt_up_pixel_buffer_dma_draw_box>
			}
		}

		// KEY0 allows drawing calculated color
		if(IORD(PIO_PUSH_BASE,0) == 0b10){
 4000418:	00820234 	movhi	r2,2056
 400041c:	10841004 	addi	r2,r2,4160
 4000420:	10800037 	ldwio	r2,0(r2)
 4000424:	10800098 	cmpnei	r2,r2,2
 4000428:	1000441e 	bne	r2,zero,400053c <main+0x2c8>
			// calculate next cursor position
			cursorMove(accel);
 400042c:	e13ffd17 	ldw	r4,-12(fp)
 4000430:	4000bc00 	call	4000bc0 <cursorMove>

			// move on-screen cursor if position has changed
			if((roundf(xFloat) != x) || (roundf(yFloat) != y)){
 4000434:	d0a00217 	ldw	r2,-32760(gp)
 4000438:	1009883a 	mov	r4,r2
 400043c:	40011540 	call	4001154 <roundf>
 4000440:	1021883a 	mov	r16,r2
 4000444:	d0a00017 	ldw	r2,-32768(gp)
 4000448:	1009883a 	mov	r4,r2
 400044c:	40048040 	call	4004804 <__floatsisf>
 4000450:	1007883a 	mov	r3,r2
 4000454:	180b883a 	mov	r5,r3
 4000458:	8009883a 	mov	r4,r16
 400045c:	4003cb80 	call	4003cb8 <__eqsf2>
 4000460:	10000c1e 	bne	r2,zero,4000494 <main+0x220>
 4000464:	d0a00317 	ldw	r2,-32756(gp)
 4000468:	1009883a 	mov	r4,r2
 400046c:	40011540 	call	4001154 <roundf>
 4000470:	1021883a 	mov	r16,r2
 4000474:	d0a00117 	ldw	r2,-32764(gp)
 4000478:	1009883a 	mov	r4,r2
 400047c:	40048040 	call	4004804 <__floatsisf>
 4000480:	1007883a 	mov	r3,r2
 4000484:	180b883a 	mov	r5,r3
 4000488:	8009883a 	mov	r4,r16
 400048c:	4003cb80 	call	4003cb8 <__eqsf2>
 4000490:	10002a26 	beq	r2,zero,400053c <main+0x2c8>
				// fill previous position with color to be drawn
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,colorToDraw,0);
 4000494:	d1200017 	ldw	r4,-32768(gp)
 4000498:	d1600117 	ldw	r5,-32764(gp)
 400049c:	d1a00017 	ldw	r6,-32768(gp)
 40004a0:	d0a00117 	ldw	r2,-32764(gp)
 40004a4:	d0e0fc17 	ldw	r3,-31760(gp)
 40004a8:	d8000215 	stw	zero,8(sp)
 40004ac:	d8c00115 	stw	r3,4(sp)
 40004b0:	d8800015 	stw	r2,0(sp)
 40004b4:	300f883a 	mov	r7,r6
 40004b8:	280d883a 	mov	r6,r5
 40004bc:	200b883a 	mov	r5,r4
 40004c0:	e13ffc17 	ldw	r4,-16(fp)
 40004c4:	40080140 	call	4008014 <alt_up_pixel_buffer_dma_draw_box>

				// adjust grid coords to follow floating coords
				x = roundf(xFloat);
 40004c8:	d0a00217 	ldw	r2,-32760(gp)
 40004cc:	1009883a 	mov	r4,r2
 40004d0:	40011540 	call	4001154 <roundf>
 40004d4:	1007883a 	mov	r3,r2
 40004d8:	1809883a 	mov	r4,r3
 40004dc:	40047940 	call	4004794 <__fixsfsi>
 40004e0:	d0a00015 	stw	r2,-32768(gp)
				y = roundf(yFloat);
 40004e4:	d0a00317 	ldw	r2,-32756(gp)
 40004e8:	1009883a 	mov	r4,r2
 40004ec:	40011540 	call	4001154 <roundf>
 40004f0:	1007883a 	mov	r3,r2
 40004f4:	1809883a 	mov	r4,r3
 40004f8:	40047940 	call	4004794 <__fixsfsi>
 40004fc:	d0a00115 	stw	r2,-32764(gp)

				// redraw cursor
				alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 4000500:	d1200017 	ldw	r4,-32768(gp)
 4000504:	d1600117 	ldw	r5,-32764(gp)
 4000508:	d1a00017 	ldw	r6,-32768(gp)
 400050c:	d0a00117 	ldw	r2,-32764(gp)
 4000510:	d8000215 	stw	zero,8(sp)
 4000514:	00ffffd4 	movui	r3,65535
 4000518:	d8c00115 	stw	r3,4(sp)
 400051c:	d8800015 	stw	r2,0(sp)
 4000520:	300f883a 	mov	r7,r6
 4000524:	280d883a 	mov	r6,r5
 4000528:	200b883a 	mov	r5,r4
 400052c:	e13ffc17 	ldw	r4,-16(fp)
 4000530:	40080140 	call	4008014 <alt_up_pixel_buffer_dma_draw_box>

				// set rainbow flag
				rainbowFlag = 1;
 4000534:	00800044 	movi	r2,1
 4000538:	d0a0fd15 	stw	r2,-31756(gp)
			}
		}

		// both KEYs simultaneously clears screen after holding for 2 sec
		if(IORD(PIO_PUSH_BASE,0) == 0b00){
 400053c:	00820234 	movhi	r2,2056
 4000540:	10841004 	addi	r2,r2,4160
 4000544:	10800037 	ldwio	r2,0(r2)
 4000548:	10000f1e 	bne	r2,zero,4000588 <main+0x314>
			usleep(2000000);
 400054c:	010007f4 	movhi	r4,31
 4000550:	21212004 	addi	r4,r4,-31616
 4000554:	40070640 	call	4007064 <usleep>
			if(IORD(PIO_PUSH_BASE,0) == 0b00){
 4000558:	00820234 	movhi	r2,2056
 400055c:	10841004 	addi	r2,r2,4160
 4000560:	10800037 	ldwio	r2,0(r2)
 4000564:	1000081e 	bne	r2,zero,4000588 <main+0x314>
				alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,1);
 4000568:	01400044 	movi	r5,1
 400056c:	e13ffc17 	ldw	r4,-16(fp)
 4000570:	4007eec0 	call	4007eec <alt_up_pixel_buffer_dma_clear_screen>
				alt_up_pixel_buffer_dma_swap_buffers(pixel_buffer);
 4000574:	e13ffc17 	ldw	r4,-16(fp)
 4000578:	4007e580 	call	4007e58 <alt_up_pixel_buffer_dma_swap_buffers>
				usleep(200000);
 400057c:	010000f4 	movhi	r4,3
 4000580:	21035004 	addi	r4,r4,3392
 4000584:	40070640 	call	4007064 <usleep>
			}
		}

		timeoutFlag = 0;
 4000588:	d020ff15 	stw	zero,-31748(gp)
		// limit drawing/actions to monitor framerate
		//usleep(33333);
	}
	}
 400058c:	003f5706 	br	40002ec <__ram_exceptions_end+0xfbfc00a4>

04000590 <colorCalc>:

//////////////////////////////////////
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
 4000590:	defff504 	addi	sp,sp,-44
 4000594:	dfc00a15 	stw	ra,40(sp)
 4000598:	df000915 	stw	fp,36(sp)
 400059c:	dc400815 	stw	r17,32(sp)
 40005a0:	dc000715 	stw	r16,28(sp)
 40005a4:	df000904 	addi	fp,sp,36
	// input color variables w/ assignment based on SW0-8
	int redIn =   (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 40005a8:	00820234 	movhi	r2,2056
 40005ac:	10840c04 	addi	r2,r2,4144
 40005b0:	10800037 	ldwio	r2,0(r2)
 40005b4:	1080400c 	andi	r2,r2,256
 40005b8:	1005d23a 	srai	r2,r2,8
 40005bc:	100691fa 	slli	r3,r2,7
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
 40005c0:	00820234 	movhi	r2,2056
 40005c4:	10840c04 	addi	r2,r2,4144
 40005c8:	10800037 	ldwio	r2,0(r2)
 40005cc:	1080200c 	andi	r2,r2,128
 40005d0:	1005d1fa 	srai	r2,r2,7
 40005d4:	10801564 	muli	r2,r2,85
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
	// input color variables w/ assignment based on SW0-8
	int redIn =   (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 40005d8:	1887883a 	add	r3,r3,r2
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
 40005dc:	00820234 	movhi	r2,2056
 40005e0:	10840c04 	addi	r2,r2,4144
 40005e4:	10800037 	ldwio	r2,0(r2)
 40005e8:	1080100c 	andi	r2,r2,64
 40005ec:	1005d1ba 	srai	r2,r2,6
 40005f0:	10800aa4 	muli	r2,r2,42
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
	// input color variables w/ assignment based on SW0-8
	int redIn =   (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 40005f4:	1885883a 	add	r2,r3,r2
 40005f8:	e0bffb15 	stw	r2,-20(fp)
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
	int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 40005fc:	00820234 	movhi	r2,2056
 4000600:	10840c04 	addi	r2,r2,4144
 4000604:	10800037 	ldwio	r2,0(r2)
 4000608:	1080080c 	andi	r2,r2,32
 400060c:	1005d17a 	srai	r2,r2,5
 4000610:	100691fa 	slli	r3,r2,7
		        (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
 4000614:	00820234 	movhi	r2,2056
 4000618:	10840c04 	addi	r2,r2,4144
 400061c:	10800037 	ldwio	r2,0(r2)
 4000620:	1080040c 	andi	r2,r2,16
 4000624:	1005d13a 	srai	r2,r2,4
 4000628:	10801564 	muli	r2,r2,85
int colorCalc(){
	// input color variables w/ assignment based on SW0-8
	int redIn =   (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
	int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 400062c:	1887883a 	add	r3,r3,r2
		        (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
				(((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
 4000630:	00820234 	movhi	r2,2056
 4000634:	10840c04 	addi	r2,r2,4144
 4000638:	10800037 	ldwio	r2,0(r2)
 400063c:	1080020c 	andi	r2,r2,8
 4000640:	1005d0fa 	srai	r2,r2,3
 4000644:	10800aa4 	muli	r2,r2,42
int colorCalc(){
	// input color variables w/ assignment based on SW0-8
	int redIn =   (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
	int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 4000648:	1885883a 	add	r2,r3,r2
 400064c:	e0bffc15 	stw	r2,-16(fp)
		        (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
				(((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
	int blueIn =  (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 4000650:	00820234 	movhi	r2,2056
 4000654:	10840c04 	addi	r2,r2,4144
 4000658:	10800037 	ldwio	r2,0(r2)
 400065c:	1080010c 	andi	r2,r2,4
 4000660:	1005d0ba 	srai	r2,r2,2
 4000664:	100691fa 	slli	r3,r2,7
		        (((IORD(PIO_SW_BASE,0) & 0x002) >> 1)* 85) +
 4000668:	00820234 	movhi	r2,2056
 400066c:	10840c04 	addi	r2,r2,4144
 4000670:	10800037 	ldwio	r2,0(r2)
 4000674:	1080008c 	andi	r2,r2,2
 4000678:	1005d07a 	srai	r2,r2,1
 400067c:	10801564 	muli	r2,r2,85
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
	int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
		        (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
				(((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
	int blueIn =  (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 4000680:	1887883a 	add	r3,r3,r2
		        (((IORD(PIO_SW_BASE,0) & 0x002) >> 1)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x001)     )* 42);
 4000684:	00820234 	movhi	r2,2056
 4000688:	10840c04 	addi	r2,r2,4144
 400068c:	10800037 	ldwio	r2,0(r2)
 4000690:	1080004c 	andi	r2,r2,1
 4000694:	10800aa4 	muli	r2,r2,42
			    (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
			    (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
	int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
		        (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
				(((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
	int blueIn =  (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 4000698:	1885883a 	add	r2,r3,r2
 400069c:	e0bffd15 	stw	r2,-12(fp)
	int red;
	int green;
	int blue;

	// rainbow color calculation
	if((IORD(PIO_SW_BASE,0) & 0x200) > 0){
 40006a0:	00820234 	movhi	r2,2056
 40006a4:	10840c04 	addi	r2,r2,4144
 40006a8:	10800037 	ldwio	r2,0(r2)
 40006ac:	1080800c 	andi	r2,r2,512
 40006b0:	0081040e 	bge	zero,r2,4000ac4 <colorCalc+0x534>
		// additionally check for position change to avoid skipping colors
		if(rainbowFlag == 1){
 40006b4:	d0a0fd17 	ldw	r2,-31756(gp)
 40006b8:	10800058 	cmpnei	r2,r2,1
 40006bc:	1001111e 	bne	r2,zero,4000b04 <colorCalc+0x574>
			red =   round(sin(0.105*tRainbow)         * ((float)redIn/2) + ((float)redIn/2));
 40006c0:	d0a0fe17 	ldw	r2,-31752(gp)
 40006c4:	1009883a 	mov	r4,r2
 40006c8:	40063cc0 	call	40063cc <__floatsidf>
 40006cc:	1011883a 	mov	r8,r2
 40006d0:	1813883a 	mov	r9,r3
 40006d4:	01ab8534 	movhi	r6,44564
 40006d8:	319eb844 	addi	r6,r6,31457
 40006dc:	01cfeef4 	movhi	r7,16315
 40006e0:	39f851c4 	addi	r7,r7,-7865
 40006e4:	4009883a 	mov	r4,r8
 40006e8:	480b883a 	mov	r5,r9
 40006ec:	40053380 	call	4005338 <__muldf3>
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	180b883a 	mov	r5,r3
 40006f8:	2005883a 	mov	r2,r4
 40006fc:	2807883a 	mov	r3,r5
 4000700:	1009883a 	mov	r4,r2
 4000704:	180b883a 	mov	r5,r3
 4000708:	40010640 	call	4001064 <sin>
 400070c:	1021883a 	mov	r16,r2
 4000710:	1823883a 	mov	r17,r3
 4000714:	e13ffb17 	ldw	r4,-20(fp)
 4000718:	40048040 	call	4004804 <__floatsisf>
 400071c:	1007883a 	mov	r3,r2
 4000720:	01500034 	movhi	r5,16384
 4000724:	1809883a 	mov	r4,r3
 4000728:	40038780 	call	4003878 <__divsf3>
 400072c:	1007883a 	mov	r3,r2
 4000730:	1805883a 	mov	r2,r3
 4000734:	1009883a 	mov	r4,r2
 4000738:	40064a80 	call	40064a8 <__extendsfdf2>
 400073c:	1009883a 	mov	r4,r2
 4000740:	180b883a 	mov	r5,r3
 4000744:	200d883a 	mov	r6,r4
 4000748:	280f883a 	mov	r7,r5
 400074c:	8009883a 	mov	r4,r16
 4000750:	880b883a 	mov	r5,r17
 4000754:	40053380 	call	4005338 <__muldf3>
 4000758:	1009883a 	mov	r4,r2
 400075c:	180b883a 	mov	r5,r3
 4000760:	2021883a 	mov	r16,r4
 4000764:	2823883a 	mov	r17,r5
 4000768:	e13ffb17 	ldw	r4,-20(fp)
 400076c:	40048040 	call	4004804 <__floatsisf>
 4000770:	1007883a 	mov	r3,r2
 4000774:	01500034 	movhi	r5,16384
 4000778:	1809883a 	mov	r4,r3
 400077c:	40038780 	call	4003878 <__divsf3>
 4000780:	1007883a 	mov	r3,r2
 4000784:	1805883a 	mov	r2,r3
 4000788:	1009883a 	mov	r4,r2
 400078c:	40064a80 	call	40064a8 <__extendsfdf2>
 4000790:	1009883a 	mov	r4,r2
 4000794:	180b883a 	mov	r5,r3
 4000798:	200d883a 	mov	r6,r4
 400079c:	280f883a 	mov	r7,r5
 40007a0:	8009883a 	mov	r4,r16
 40007a4:	880b883a 	mov	r5,r17
 40007a8:	40049280 	call	4004928 <__adddf3>
 40007ac:	1009883a 	mov	r4,r2
 40007b0:	180b883a 	mov	r5,r3
 40007b4:	2005883a 	mov	r2,r4
 40007b8:	2807883a 	mov	r3,r5
 40007bc:	1009883a 	mov	r4,r2
 40007c0:	180b883a 	mov	r5,r3
 40007c4:	4000f640 	call	4000f64 <round>
 40007c8:	100b883a 	mov	r5,r2
 40007cc:	180d883a 	mov	r6,r3
 40007d0:	2809883a 	mov	r4,r5
 40007d4:	300b883a 	mov	r5,r6
 40007d8:	400634c0 	call	400634c <__fixdfsi>
 40007dc:	e0bff815 	stw	r2,-32(fp)
			green = round(sin(0.105*tRainbow + 2.094) * ((float)greenIn/2) + ((float)greenIn/2));
 40007e0:	d0a0fe17 	ldw	r2,-31752(gp)
 40007e4:	1009883a 	mov	r4,r2
 40007e8:	40063cc0 	call	40063cc <__floatsidf>
 40007ec:	1011883a 	mov	r8,r2
 40007f0:	1813883a 	mov	r9,r3
 40007f4:	01ab8534 	movhi	r6,44564
 40007f8:	319eb844 	addi	r6,r6,31457
 40007fc:	01cfeef4 	movhi	r7,16315
 4000800:	39f851c4 	addi	r7,r7,-7865
 4000804:	4009883a 	mov	r4,r8
 4000808:	480b883a 	mov	r5,r9
 400080c:	40053380 	call	4005338 <__muldf3>
 4000810:	1009883a 	mov	r4,r2
 4000814:	180b883a 	mov	r5,r3
 4000818:	2005883a 	mov	r2,r4
 400081c:	2807883a 	mov	r3,r5
 4000820:	01849bf4 	movhi	r6,4719
 4000824:	31a5e344 	addi	r6,r6,-26739
 4000828:	01d00074 	movhi	r7,16385
 400082c:	39f020c4 	addi	r7,r7,-16253
 4000830:	1009883a 	mov	r4,r2
 4000834:	180b883a 	mov	r5,r3
 4000838:	40049280 	call	4004928 <__adddf3>
 400083c:	1009883a 	mov	r4,r2
 4000840:	180b883a 	mov	r5,r3
 4000844:	2005883a 	mov	r2,r4
 4000848:	2807883a 	mov	r3,r5
 400084c:	1009883a 	mov	r4,r2
 4000850:	180b883a 	mov	r5,r3
 4000854:	40010640 	call	4001064 <sin>
 4000858:	1021883a 	mov	r16,r2
 400085c:	1823883a 	mov	r17,r3
 4000860:	e13ffc17 	ldw	r4,-16(fp)
 4000864:	40048040 	call	4004804 <__floatsisf>
 4000868:	1007883a 	mov	r3,r2
 400086c:	01500034 	movhi	r5,16384
 4000870:	1809883a 	mov	r4,r3
 4000874:	40038780 	call	4003878 <__divsf3>
 4000878:	1007883a 	mov	r3,r2
 400087c:	1805883a 	mov	r2,r3
 4000880:	1009883a 	mov	r4,r2
 4000884:	40064a80 	call	40064a8 <__extendsfdf2>
 4000888:	1009883a 	mov	r4,r2
 400088c:	180b883a 	mov	r5,r3
 4000890:	200d883a 	mov	r6,r4
 4000894:	280f883a 	mov	r7,r5
 4000898:	8009883a 	mov	r4,r16
 400089c:	880b883a 	mov	r5,r17
 40008a0:	40053380 	call	4005338 <__muldf3>
 40008a4:	1009883a 	mov	r4,r2
 40008a8:	180b883a 	mov	r5,r3
 40008ac:	2021883a 	mov	r16,r4
 40008b0:	2823883a 	mov	r17,r5
 40008b4:	e13ffc17 	ldw	r4,-16(fp)
 40008b8:	40048040 	call	4004804 <__floatsisf>
 40008bc:	1007883a 	mov	r3,r2
 40008c0:	01500034 	movhi	r5,16384
 40008c4:	1809883a 	mov	r4,r3
 40008c8:	40038780 	call	4003878 <__divsf3>
 40008cc:	1007883a 	mov	r3,r2
 40008d0:	1805883a 	mov	r2,r3
 40008d4:	1009883a 	mov	r4,r2
 40008d8:	40064a80 	call	40064a8 <__extendsfdf2>
 40008dc:	1009883a 	mov	r4,r2
 40008e0:	180b883a 	mov	r5,r3
 40008e4:	200d883a 	mov	r6,r4
 40008e8:	280f883a 	mov	r7,r5
 40008ec:	8009883a 	mov	r4,r16
 40008f0:	880b883a 	mov	r5,r17
 40008f4:	40049280 	call	4004928 <__adddf3>
 40008f8:	1009883a 	mov	r4,r2
 40008fc:	180b883a 	mov	r5,r3
 4000900:	2005883a 	mov	r2,r4
 4000904:	2807883a 	mov	r3,r5
 4000908:	1009883a 	mov	r4,r2
 400090c:	180b883a 	mov	r5,r3
 4000910:	4000f640 	call	4000f64 <round>
 4000914:	100b883a 	mov	r5,r2
 4000918:	180d883a 	mov	r6,r3
 400091c:	2809883a 	mov	r4,r5
 4000920:	300b883a 	mov	r5,r6
 4000924:	400634c0 	call	400634c <__fixdfsi>
 4000928:	e0bff915 	stw	r2,-28(fp)
			blue =  round(sin(0.105*tRainbow + 4.188) * ((float)blueIn/2) + ((float)blueIn/2));
 400092c:	d0a0fe17 	ldw	r2,-31752(gp)
 4000930:	1009883a 	mov	r4,r2
 4000934:	40063cc0 	call	40063cc <__floatsidf>
 4000938:	1011883a 	mov	r8,r2
 400093c:	1813883a 	mov	r9,r3
 4000940:	01ab8534 	movhi	r6,44564
 4000944:	319eb844 	addi	r6,r6,31457
 4000948:	01cfeef4 	movhi	r7,16315
 400094c:	39f851c4 	addi	r7,r7,-7865
 4000950:	4009883a 	mov	r4,r8
 4000954:	480b883a 	mov	r5,r9
 4000958:	40053380 	call	4005338 <__muldf3>
 400095c:	1009883a 	mov	r4,r2
 4000960:	180b883a 	mov	r5,r3
 4000964:	2005883a 	mov	r2,r4
 4000968:	2807883a 	mov	r3,r5
 400096c:	01849bf4 	movhi	r6,4719
 4000970:	31a5e344 	addi	r6,r6,-26739
 4000974:	01d00474 	movhi	r7,16401
 4000978:	39f020c4 	addi	r7,r7,-16253
 400097c:	1009883a 	mov	r4,r2
 4000980:	180b883a 	mov	r5,r3
 4000984:	40049280 	call	4004928 <__adddf3>
 4000988:	1009883a 	mov	r4,r2
 400098c:	180b883a 	mov	r5,r3
 4000990:	2005883a 	mov	r2,r4
 4000994:	2807883a 	mov	r3,r5
 4000998:	1009883a 	mov	r4,r2
 400099c:	180b883a 	mov	r5,r3
 40009a0:	40010640 	call	4001064 <sin>
 40009a4:	1021883a 	mov	r16,r2
 40009a8:	1823883a 	mov	r17,r3
 40009ac:	e13ffd17 	ldw	r4,-12(fp)
 40009b0:	40048040 	call	4004804 <__floatsisf>
 40009b4:	1007883a 	mov	r3,r2
 40009b8:	01500034 	movhi	r5,16384
 40009bc:	1809883a 	mov	r4,r3
 40009c0:	40038780 	call	4003878 <__divsf3>
 40009c4:	1007883a 	mov	r3,r2
 40009c8:	1805883a 	mov	r2,r3
 40009cc:	1009883a 	mov	r4,r2
 40009d0:	40064a80 	call	40064a8 <__extendsfdf2>
 40009d4:	1009883a 	mov	r4,r2
 40009d8:	180b883a 	mov	r5,r3
 40009dc:	200d883a 	mov	r6,r4
 40009e0:	280f883a 	mov	r7,r5
 40009e4:	8009883a 	mov	r4,r16
 40009e8:	880b883a 	mov	r5,r17
 40009ec:	40053380 	call	4005338 <__muldf3>
 40009f0:	1009883a 	mov	r4,r2
 40009f4:	180b883a 	mov	r5,r3
 40009f8:	2021883a 	mov	r16,r4
 40009fc:	2823883a 	mov	r17,r5
 4000a00:	e13ffd17 	ldw	r4,-12(fp)
 4000a04:	40048040 	call	4004804 <__floatsisf>
 4000a08:	1007883a 	mov	r3,r2
 4000a0c:	01500034 	movhi	r5,16384
 4000a10:	1809883a 	mov	r4,r3
 4000a14:	40038780 	call	4003878 <__divsf3>
 4000a18:	1007883a 	mov	r3,r2
 4000a1c:	1805883a 	mov	r2,r3
 4000a20:	1009883a 	mov	r4,r2
 4000a24:	40064a80 	call	40064a8 <__extendsfdf2>
 4000a28:	1009883a 	mov	r4,r2
 4000a2c:	180b883a 	mov	r5,r3
 4000a30:	200d883a 	mov	r6,r4
 4000a34:	280f883a 	mov	r7,r5
 4000a38:	8009883a 	mov	r4,r16
 4000a3c:	880b883a 	mov	r5,r17
 4000a40:	40049280 	call	4004928 <__adddf3>
 4000a44:	1009883a 	mov	r4,r2
 4000a48:	180b883a 	mov	r5,r3
 4000a4c:	2005883a 	mov	r2,r4
 4000a50:	2807883a 	mov	r3,r5
 4000a54:	1009883a 	mov	r4,r2
 4000a58:	180b883a 	mov	r5,r3
 4000a5c:	4000f640 	call	4000f64 <round>
 4000a60:	100b883a 	mov	r5,r2
 4000a64:	180d883a 	mov	r6,r3
 4000a68:	2809883a 	mov	r4,r5
 4000a6c:	300b883a 	mov	r5,r6
 4000a70:	400634c0 	call	400634c <__fixdfsi>
 4000a74:	e0bffa15 	stw	r2,-24(fp)

			// increment and bind rainbow position
			// restricts tRainbow to a single period
			tRainbow++;
 4000a78:	d0a0fe17 	ldw	r2,-31752(gp)
 4000a7c:	10800044 	addi	r2,r2,1
 4000a80:	d0a0fe15 	stw	r2,-31752(gp)
			if(tRainbow >= 60)
 4000a84:	d0a0fe17 	ldw	r2,-31752(gp)
 4000a88:	10800f10 	cmplti	r2,r2,60
 4000a8c:	1000011e 	bne	r2,zero,4000a94 <colorCalc+0x504>
				tRainbow = 0;
 4000a90:	d020fe15 	stw	zero,-31752(gp)

			// send hex color codes to SSDs every rainbow calculation
			IOWR(PIO_HEX_BASE, 0, ((red << 16) + (green << 8) + blue));
 4000a94:	e0bff817 	ldw	r2,-32(fp)
 4000a98:	1006943a 	slli	r3,r2,16
 4000a9c:	e0bff917 	ldw	r2,-28(fp)
 4000aa0:	1004923a 	slli	r2,r2,8
 4000aa4:	1887883a 	add	r3,r3,r2
 4000aa8:	e0bffa17 	ldw	r2,-24(fp)
 4000aac:	1887883a 	add	r3,r3,r2
 4000ab0:	00820234 	movhi	r2,2056
 4000ab4:	10840804 	addi	r2,r2,4128
 4000ab8:	10c00035 	stwio	r3,0(r2)

			// reset rainbow flag
			rainbowFlag = 0;
 4000abc:	d020fd15 	stw	zero,-31756(gp)
 4000ac0:	00001006 	br	4000b04 <colorCalc+0x574>
	}


	else{
		// direct assignment without rainbow mode
		red = redIn;
 4000ac4:	e0bffb17 	ldw	r2,-20(fp)
 4000ac8:	e0bff815 	stw	r2,-32(fp)
		green = greenIn;
 4000acc:	e0bffc17 	ldw	r2,-16(fp)
 4000ad0:	e0bff915 	stw	r2,-28(fp)
		blue = blueIn;
 4000ad4:	e0bffd17 	ldw	r2,-12(fp)
 4000ad8:	e0bffa15 	stw	r2,-24(fp)

		// send hex color codes to SSDs every frame if not in rainbow mode
		IOWR(PIO_HEX_BASE, 0, ((red << 16) + (green << 8) + blue));
 4000adc:	e0bff817 	ldw	r2,-32(fp)
 4000ae0:	1006943a 	slli	r3,r2,16
 4000ae4:	e0bff917 	ldw	r2,-28(fp)
 4000ae8:	1004923a 	slli	r2,r2,8
 4000aec:	1887883a 	add	r3,r3,r2
 4000af0:	e0bffa17 	ldw	r2,-24(fp)
 4000af4:	1887883a 	add	r3,r3,r2
 4000af8:	00820234 	movhi	r2,2056
 4000afc:	10840804 	addi	r2,r2,4128
 4000b00:	10c00035 	stwio	r3,0(r2)
	}

	// map/convert hex color codes to 16 bit
	// red to 5 bits
	red = mapi(red,0,255,0,0x1F);
 4000b04:	e13ff817 	ldw	r4,-32(fp)
 4000b08:	40048040 	call	4004804 <__floatsisf>
 4000b0c:	1007883a 	mov	r3,r2
 4000b10:	00907e34 	movhi	r2,16888
 4000b14:	d8800015 	stw	r2,0(sp)
 4000b18:	000f883a 	mov	r7,zero
 4000b1c:	0190dff4 	movhi	r6,17279
 4000b20:	000b883a 	mov	r5,zero
 4000b24:	1809883a 	mov	r4,r3
 4000b28:	4000d2c0 	call	4000d2c <mapi>
 4000b2c:	e0bff815 	stw	r2,-32(fp)
	// green to 6 bits
	green = mapi(green,0,255,0,0x3F);
 4000b30:	e13ff917 	ldw	r4,-28(fp)
 4000b34:	40048040 	call	4004804 <__floatsisf>
 4000b38:	1007883a 	mov	r3,r2
 4000b3c:	00909f34 	movhi	r2,17020
 4000b40:	d8800015 	stw	r2,0(sp)
 4000b44:	000f883a 	mov	r7,zero
 4000b48:	0190dff4 	movhi	r6,17279
 4000b4c:	000b883a 	mov	r5,zero
 4000b50:	1809883a 	mov	r4,r3
 4000b54:	4000d2c0 	call	4000d2c <mapi>
 4000b58:	e0bff915 	stw	r2,-28(fp)
	// blue to 5 bits
	blue = mapi(blue,0,255,0,0x1F);
 4000b5c:	e13ffa17 	ldw	r4,-24(fp)
 4000b60:	40048040 	call	4004804 <__floatsisf>
 4000b64:	1007883a 	mov	r3,r2
 4000b68:	00907e34 	movhi	r2,16888
 4000b6c:	d8800015 	stw	r2,0(sp)
 4000b70:	000f883a 	mov	r7,zero
 4000b74:	0190dff4 	movhi	r6,17279
 4000b78:	000b883a 	mov	r5,zero
 4000b7c:	1809883a 	mov	r4,r3
 4000b80:	4000d2c0 	call	4000d2c <mapi>
 4000b84:	e0bffa15 	stw	r2,-24(fp)

	// return final color
	return (red << 11) + (green << 5) + blue;
 4000b88:	e0bff817 	ldw	r2,-32(fp)
 4000b8c:	100692fa 	slli	r3,r2,11
 4000b90:	e0bff917 	ldw	r2,-28(fp)
 4000b94:	1004917a 	slli	r2,r2,5
 4000b98:	1887883a 	add	r3,r3,r2
 4000b9c:	e0bffa17 	ldw	r2,-24(fp)
 4000ba0:	1885883a 	add	r2,r3,r2
}
 4000ba4:	e6fffe04 	addi	sp,fp,-8
 4000ba8:	dfc00317 	ldw	ra,12(sp)
 4000bac:	df000217 	ldw	fp,8(sp)
 4000bb0:	dc400117 	ldw	r17,4(sp)
 4000bb4:	dc000017 	ldw	r16,0(sp)
 4000bb8:	dec00404 	addi	sp,sp,16
 4000bbc:	f800283a 	ret

04000bc0 <cursorMove>:

//////////////////////////////////////////////
// Moves the cursor independent of drawing colors
void cursorMove(alt_up_accelerometer_spi_dev* accel_p){
 4000bc0:	defffa04 	addi	sp,sp,-24
 4000bc4:	dfc00515 	stw	ra,20(sp)
 4000bc8:	df000415 	stw	fp,16(sp)
 4000bcc:	df000404 	addi	fp,sp,16
 4000bd0:	e13fff15 	stw	r4,-4(fp)
	// capture accelerometer input
	int xAccel;
	int yAccel;
	alt_up_accelerometer_spi_read_x_axis(accel_p, &xAccel);
 4000bd4:	e17ffd04 	addi	r5,fp,-12
 4000bd8:	e13fff17 	ldw	r4,-4(fp)
 4000bdc:	40079c80 	call	40079c8 <alt_up_accelerometer_spi_read_x_axis>
	alt_up_accelerometer_spi_read_y_axis(accel_p, &yAccel);
 4000be0:	e0bffe04 	addi	r2,fp,-8
 4000be4:	100b883a 	mov	r5,r2
 4000be8:	e13fff17 	ldw	r4,-4(fp)
 4000bec:	4007a940 	call	4007a94 <alt_up_accelerometer_spi_read_y_axis>

	// change floating coords based on accelerometer input
	// max movement speed is 0.5 px/frame = 30 px/s
	xFloat -= mapf(xAccel,-256,256,-0.5,0.5);
 4000bf0:	e0bffd17 	ldw	r2,-12(fp)
 4000bf4:	1009883a 	mov	r4,r2
 4000bf8:	40048040 	call	4004804 <__floatsisf>
 4000bfc:	1007883a 	mov	r3,r2
 4000c00:	008fc034 	movhi	r2,16128
 4000c04:	d8800015 	stw	r2,0(sp)
 4000c08:	01efc034 	movhi	r7,48896
 4000c0c:	0190e034 	movhi	r6,17280
 4000c10:	0170e034 	movhi	r5,50048
 4000c14:	1809883a 	mov	r4,r3
 4000c18:	4000e280 	call	4000e28 <mapf>
 4000c1c:	1007883a 	mov	r3,r2
 4000c20:	d0a00217 	ldw	r2,-32760(gp)
 4000c24:	180b883a 	mov	r5,r3
 4000c28:	1009883a 	mov	r4,r2
 4000c2c:	40042b00 	call	40042b0 <__subsf3>
 4000c30:	1007883a 	mov	r3,r2
 4000c34:	1805883a 	mov	r2,r3
 4000c38:	d0a00215 	stw	r2,-32760(gp)

	yFloat += mapf(yAccel,-256,256,-0.5,0.5);
 4000c3c:	e0bffe17 	ldw	r2,-8(fp)
 4000c40:	1009883a 	mov	r4,r2
 4000c44:	40048040 	call	4004804 <__floatsisf>
 4000c48:	1007883a 	mov	r3,r2
 4000c4c:	008fc034 	movhi	r2,16128
 4000c50:	d8800015 	stw	r2,0(sp)
 4000c54:	01efc034 	movhi	r7,48896
 4000c58:	0190e034 	movhi	r6,17280
 4000c5c:	0170e034 	movhi	r5,50048
 4000c60:	1809883a 	mov	r4,r3
 4000c64:	4000e280 	call	4000e28 <mapf>
 4000c68:	1007883a 	mov	r3,r2
 4000c6c:	d0a00317 	ldw	r2,-32756(gp)
 4000c70:	100b883a 	mov	r5,r2
 4000c74:	1809883a 	mov	r4,r3
 4000c78:	40033b00 	call	40033b0 <__addsf3>
 4000c7c:	1007883a 	mov	r3,r2
 4000c80:	1805883a 	mov	r2,r3
 4000c84:	d0a00315 	stw	r2,-32756(gp)



	// set floating coord boundaries
	if(xFloat <= -0.5)
 4000c88:	d0a00217 	ldw	r2,-32760(gp)
 4000c8c:	016fc034 	movhi	r5,48896
 4000c90:	1009883a 	mov	r4,r2
 4000c94:	4003dec0 	call	4003dec <__lesf2>
 4000c98:	00800316 	blt	zero,r2,4000ca8 <cursorMove+0xe8>
		xFloat = -0.49;
 4000c9c:	00afbef4 	movhi	r2,48891
 4000ca0:	10b85204 	addi	r2,r2,-7864
 4000ca4:	d0a00215 	stw	r2,-32760(gp)
	if(xFloat >= 319.5)
 4000ca8:	d0a00217 	ldw	r2,-32760(gp)
 4000cac:	0150e834 	movhi	r5,17312
 4000cb0:	29700004 	addi	r5,r5,-16384
 4000cb4:	1009883a 	mov	r4,r2
 4000cb8:	4003d300 	call	4003d30 <__gesf2>
 4000cbc:	10000316 	blt	r2,zero,4000ccc <cursorMove+0x10c>
		xFloat = 319.49;
 4000cc0:	0090e834 	movhi	r2,17312
 4000cc4:	10afae04 	addi	r2,r2,-16712
 4000cc8:	d0a00215 	stw	r2,-32760(gp)

	if(yFloat <= -0.5)
 4000ccc:	d0a00317 	ldw	r2,-32756(gp)
 4000cd0:	016fc034 	movhi	r5,48896
 4000cd4:	1009883a 	mov	r4,r2
 4000cd8:	4003dec0 	call	4003dec <__lesf2>
 4000cdc:	00800316 	blt	zero,r2,4000cec <cursorMove+0x12c>
		yFloat = -0.49;
 4000ce0:	00afbef4 	movhi	r2,48891
 4000ce4:	10b85204 	addi	r2,r2,-7864
 4000ce8:	d0a00315 	stw	r2,-32756(gp)
	if(yFloat >= 239.5)
 4000cec:	d0a00317 	ldw	r2,-32756(gp)
 4000cf0:	0150dc34 	movhi	r5,17264
 4000cf4:	29600004 	addi	r5,r5,-32768
 4000cf8:	1009883a 	mov	r4,r2
 4000cfc:	4003d300 	call	4003d30 <__gesf2>
 4000d00:	1000010e 	bge	r2,zero,4000d08 <cursorMove+0x148>
		yFloat = 239.49;
}
 4000d04:	00000306 	br	4000d14 <cursorMove+0x154>
		xFloat = 319.49;

	if(yFloat <= -0.5)
		yFloat = -0.49;
	if(yFloat >= 239.5)
		yFloat = 239.49;
 4000d08:	0090dbf4 	movhi	r2,17263
 4000d0c:	109f5c44 	addi	r2,r2,32113
 4000d10:	d0a00315 	stw	r2,-32756(gp)
}
 4000d14:	0001883a 	nop
 4000d18:	e037883a 	mov	sp,fp
 4000d1c:	dfc00117 	ldw	ra,4(sp)
 4000d20:	df000017 	ldw	fp,0(sp)
 4000d24:	dec00204 	addi	sp,sp,8
 4000d28:	f800283a 	ret

04000d2c <mapi>:

/////////////////////////////////////////////
// Maps a number to an integer range
int mapi(float input, float inMin, float inMax, float outMin, float outMax){
 4000d2c:	defff804 	addi	sp,sp,-32
 4000d30:	dfc00715 	stw	ra,28(sp)
 4000d34:	df000615 	stw	fp,24(sp)
 4000d38:	dc000515 	stw	r16,20(sp)
 4000d3c:	df000604 	addi	fp,sp,24
 4000d40:	e13ffb15 	stw	r4,-20(fp)
 4000d44:	e17ffc15 	stw	r5,-16(fp)
 4000d48:	e1bffd15 	stw	r6,-12(fp)
 4000d4c:	e1fffe15 	stw	r7,-8(fp)
	// bind input
	if(input < inMin)
 4000d50:	e17ffc17 	ldw	r5,-16(fp)
 4000d54:	e13ffb17 	ldw	r4,-20(fp)
 4000d58:	4003dec0 	call	4003dec <__lesf2>
 4000d5c:	1000030e 	bge	r2,zero,4000d6c <mapi+0x40>
		input = inMin;
 4000d60:	e0bffc17 	ldw	r2,-16(fp)
 4000d64:	e0bffb15 	stw	r2,-20(fp)
 4000d68:	00000606 	br	4000d84 <mapi+0x58>
	else if(input > inMax)
 4000d6c:	e17ffd17 	ldw	r5,-12(fp)
 4000d70:	e13ffb17 	ldw	r4,-20(fp)
 4000d74:	4003d300 	call	4003d30 <__gesf2>
 4000d78:	0080020e 	bge	zero,r2,4000d84 <mapi+0x58>
		input = inMax;
 4000d7c:	e0bffd17 	ldw	r2,-12(fp)
 4000d80:	e0bffb15 	stw	r2,-20(fp)

	// mapping function
	float mapped = outMin + ((outMax - outMin) / (inMax - inMin)) * (input - inMin);
 4000d84:	e17ffe17 	ldw	r5,-8(fp)
 4000d88:	e1000217 	ldw	r4,8(fp)
 4000d8c:	40042b00 	call	40042b0 <__subsf3>
 4000d90:	1007883a 	mov	r3,r2
 4000d94:	1821883a 	mov	r16,r3
 4000d98:	e17ffc17 	ldw	r5,-16(fp)
 4000d9c:	e13ffd17 	ldw	r4,-12(fp)
 4000da0:	40042b00 	call	40042b0 <__subsf3>
 4000da4:	1007883a 	mov	r3,r2
 4000da8:	1805883a 	mov	r2,r3
 4000dac:	100b883a 	mov	r5,r2
 4000db0:	8009883a 	mov	r4,r16
 4000db4:	40038780 	call	4003878 <__divsf3>
 4000db8:	1007883a 	mov	r3,r2
 4000dbc:	1821883a 	mov	r16,r3
 4000dc0:	e17ffc17 	ldw	r5,-16(fp)
 4000dc4:	e13ffb17 	ldw	r4,-20(fp)
 4000dc8:	40042b00 	call	40042b0 <__subsf3>
 4000dcc:	1007883a 	mov	r3,r2
 4000dd0:	1805883a 	mov	r2,r3
 4000dd4:	100b883a 	mov	r5,r2
 4000dd8:	8009883a 	mov	r4,r16
 4000ddc:	4003eb40 	call	4003eb4 <__mulsf3>
 4000de0:	1007883a 	mov	r3,r2
 4000de4:	1805883a 	mov	r2,r3
 4000de8:	e17ffe17 	ldw	r5,-8(fp)
 4000dec:	1009883a 	mov	r4,r2
 4000df0:	40033b00 	call	40033b0 <__addsf3>
 4000df4:	1007883a 	mov	r3,r2
 4000df8:	e0fffa15 	stw	r3,-24(fp)

	// return rounded int
	return (int) roundf(mapped);
 4000dfc:	e13ffa17 	ldw	r4,-24(fp)
 4000e00:	40011540 	call	4001154 <roundf>
 4000e04:	1007883a 	mov	r3,r2
 4000e08:	1809883a 	mov	r4,r3
 4000e0c:	40047940 	call	4004794 <__fixsfsi>
}
 4000e10:	e6ffff04 	addi	sp,fp,-4
 4000e14:	dfc00217 	ldw	ra,8(sp)
 4000e18:	df000117 	ldw	fp,4(sp)
 4000e1c:	dc000017 	ldw	r16,0(sp)
 4000e20:	dec00304 	addi	sp,sp,12
 4000e24:	f800283a 	ret

04000e28 <mapf>:

/////////////////////////////////////////////
// Maps a number to a floating point number range
float mapf(float input, float inMin, float inMax, float outMin, float outMax){
 4000e28:	defff804 	addi	sp,sp,-32
 4000e2c:	dfc00715 	stw	ra,28(sp)
 4000e30:	df000615 	stw	fp,24(sp)
 4000e34:	dc000515 	stw	r16,20(sp)
 4000e38:	df000604 	addi	fp,sp,24
 4000e3c:	e13ffb15 	stw	r4,-20(fp)
 4000e40:	e17ffc15 	stw	r5,-16(fp)
 4000e44:	e1bffd15 	stw	r6,-12(fp)
 4000e48:	e1fffe15 	stw	r7,-8(fp)
	// bind input
	if(input < inMin)
 4000e4c:	e17ffc17 	ldw	r5,-16(fp)
 4000e50:	e13ffb17 	ldw	r4,-20(fp)
 4000e54:	4003dec0 	call	4003dec <__lesf2>
 4000e58:	1000030e 	bge	r2,zero,4000e68 <mapf+0x40>
		input = inMin;
 4000e5c:	e0bffc17 	ldw	r2,-16(fp)
 4000e60:	e0bffb15 	stw	r2,-20(fp)
 4000e64:	00000606 	br	4000e80 <mapf+0x58>
	else if(input > inMax)
 4000e68:	e17ffd17 	ldw	r5,-12(fp)
 4000e6c:	e13ffb17 	ldw	r4,-20(fp)
 4000e70:	4003d300 	call	4003d30 <__gesf2>
 4000e74:	0080020e 	bge	zero,r2,4000e80 <mapf+0x58>
		input = inMax;
 4000e78:	e0bffd17 	ldw	r2,-12(fp)
 4000e7c:	e0bffb15 	stw	r2,-20(fp)

	// mapping function
	float mapped = outMin + ((outMax - outMin) / (inMax - inMin)) * (input - inMin);
 4000e80:	e17ffe17 	ldw	r5,-8(fp)
 4000e84:	e1000217 	ldw	r4,8(fp)
 4000e88:	40042b00 	call	40042b0 <__subsf3>
 4000e8c:	1007883a 	mov	r3,r2
 4000e90:	1821883a 	mov	r16,r3
 4000e94:	e17ffc17 	ldw	r5,-16(fp)
 4000e98:	e13ffd17 	ldw	r4,-12(fp)
 4000e9c:	40042b00 	call	40042b0 <__subsf3>
 4000ea0:	1007883a 	mov	r3,r2
 4000ea4:	1805883a 	mov	r2,r3
 4000ea8:	100b883a 	mov	r5,r2
 4000eac:	8009883a 	mov	r4,r16
 4000eb0:	40038780 	call	4003878 <__divsf3>
 4000eb4:	1007883a 	mov	r3,r2
 4000eb8:	1821883a 	mov	r16,r3
 4000ebc:	e17ffc17 	ldw	r5,-16(fp)
 4000ec0:	e13ffb17 	ldw	r4,-20(fp)
 4000ec4:	40042b00 	call	40042b0 <__subsf3>
 4000ec8:	1007883a 	mov	r3,r2
 4000ecc:	1805883a 	mov	r2,r3
 4000ed0:	100b883a 	mov	r5,r2
 4000ed4:	8009883a 	mov	r4,r16
 4000ed8:	4003eb40 	call	4003eb4 <__mulsf3>
 4000edc:	1007883a 	mov	r3,r2
 4000ee0:	1805883a 	mov	r2,r3
 4000ee4:	e17ffe17 	ldw	r5,-8(fp)
 4000ee8:	1009883a 	mov	r4,r2
 4000eec:	40033b00 	call	40033b0 <__addsf3>
 4000ef0:	1007883a 	mov	r3,r2
 4000ef4:	e0fffa15 	stw	r3,-24(fp)

	// return float
	return mapped;
 4000ef8:	e0bffa17 	ldw	r2,-24(fp)
 4000efc:	1007883a 	mov	r3,r2
}
 4000f00:	1805883a 	mov	r2,r3
 4000f04:	e6ffff04 	addi	sp,fp,-4
 4000f08:	dfc00217 	ldw	ra,8(sp)
 4000f0c:	df000117 	ldw	fp,4(sp)
 4000f10:	dc000017 	ldw	r16,0(sp)
 4000f14:	dec00304 	addi	sp,sp,12
 4000f18:	f800283a 	ret

04000f1c <timer_0_isr>:

void timer_0_isr(void* context){
 4000f1c:	defffd04 	addi	sp,sp,-12
 4000f20:	df000215 	stw	fp,8(sp)
 4000f24:	df000204 	addi	fp,sp,8
 4000f28:	e13fff15 	stw	r4,-4(fp)
	// set flag
	volatile int* timeoutFlag_ptr = (volatile int*) context;
 4000f2c:	e0bfff17 	ldw	r2,-4(fp)
 4000f30:	e0bffe15 	stw	r2,-8(fp)
	*timeoutFlag_ptr = 1;
 4000f34:	e0bffe17 	ldw	r2,-8(fp)
 4000f38:	00c00044 	movi	r3,1
 4000f3c:	10c00015 	stw	r3,0(r2)

	// clear interrupt
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 4000f40:	0007883a 	mov	r3,zero
 4000f44:	00820234 	movhi	r2,2056
 4000f48:	10840004 	addi	r2,r2,4096
 4000f4c:	10c00035 	stwio	r3,0(r2)
}
 4000f50:	0001883a 	nop
 4000f54:	e037883a 	mov	sp,fp
 4000f58:	df000017 	ldw	fp,0(sp)
 4000f5c:	dec00104 	addi	sp,sp,4
 4000f60:	f800283a 	ret

04000f64 <round>:
 4000f64:	289ffc2c 	andhi	r2,r5,32752
 4000f68:	1005d53a 	srai	r2,r2,20
 4000f6c:	024004c4 	movi	r9,19
 4000f70:	2807883a 	mov	r3,r5
 4000f74:	123f0044 	addi	r8,r2,-1023
 4000f78:	200d883a 	mov	r6,r4
 4000f7c:	280f883a 	mov	r7,r5
 4000f80:	4a000916 	blt	r9,r8,4000fa8 <round+0x44>
 4000f84:	40002516 	blt	r8,zero,400101c <round+0xb8>
 4000f88:	00800434 	movhi	r2,16
 4000f8c:	10bfffc4 	addi	r2,r2,-1
 4000f90:	1205d83a 	sra	r2,r2,r8
 4000f94:	2888703a 	and	r4,r5,r2
 4000f98:	2000181e 	bne	r4,zero,4000ffc <round+0x98>
 4000f9c:	3000171e 	bne	r6,zero,4000ffc <round+0x98>
 4000fa0:	0005883a 	mov	r2,zero
 4000fa4:	f800283a 	ret
 4000fa8:	02400cc4 	movi	r9,51
 4000fac:	4a00040e 	bge	r9,r8,4000fc0 <round+0x5c>
 4000fb0:	00810004 	movi	r2,1024
 4000fb4:	40802126 	beq	r8,r2,400103c <round+0xd8>
 4000fb8:	3005883a 	mov	r2,r6
 4000fbc:	f800283a 	ret
 4000fc0:	013fffc4 	movi	r4,-1
 4000fc4:	10befb44 	addi	r2,r2,-1043
 4000fc8:	2084d83a 	srl	r2,r4,r2
 4000fcc:	3088703a 	and	r4,r6,r2
 4000fd0:	20001726 	beq	r4,zero,4001030 <round+0xcc>
 4000fd4:	4a11c83a 	sub	r8,r9,r8
 4000fd8:	02400044 	movi	r9,1
 4000fdc:	4a10983a 	sll	r8,r9,r8
 4000fe0:	4191883a 	add	r8,r8,r6
 4000fe4:	4180012e 	bgeu	r8,r6,4000fec <round+0x88>
 4000fe8:	2a47883a 	add	r3,r5,r9
 4000fec:	0084303a 	nor	r2,zero,r2
 4000ff0:	120c703a 	and	r6,r2,r8
 4000ff4:	3005883a 	mov	r2,r6
 4000ff8:	f800283a 	ret
 4000ffc:	00c00234 	movhi	r3,8
 4001000:	1a07d83a 	sra	r3,r3,r8
 4001004:	0084303a 	nor	r2,zero,r2
 4001008:	000d883a 	mov	r6,zero
 400100c:	19c7883a 	add	r3,r3,r7
 4001010:	1886703a 	and	r3,r3,r2
 4001014:	3005883a 	mov	r2,r6
 4001018:	f800283a 	ret
 400101c:	00bfffc4 	movi	r2,-1
 4001020:	28e0002c 	andhi	r3,r5,32768
 4001024:	40800c26 	beq	r8,r2,4001058 <round+0xf4>
 4001028:	000d883a 	mov	r6,zero
 400102c:	003fe206 	br	4000fb8 <__ram_exceptions_end+0xfbfc0d70>
 4001030:	3005883a 	mov	r2,r6
 4001034:	2807883a 	mov	r3,r5
 4001038:	f800283a 	ret
 400103c:	deffff04 	addi	sp,sp,-4
 4001040:	280f883a 	mov	r7,r5
 4001044:	dfc00015 	stw	ra,0(sp)
 4001048:	40049280 	call	4004928 <__adddf3>
 400104c:	dfc00017 	ldw	ra,0(sp)
 4001050:	dec00104 	addi	sp,sp,4
 4001054:	f800283a 	ret
 4001058:	18cffc34 	orhi	r3,r3,16368
 400105c:	000d883a 	mov	r6,zero
 4001060:	003fd506 	br	4000fb8 <__ram_exceptions_end+0xfbfc0d70>

04001064 <sin>:
 4001064:	00a00034 	movhi	r2,32768
 4001068:	defffa04 	addi	sp,sp,-24
 400106c:	10bfffc4 	addi	r2,r2,-1
 4001070:	00cffa74 	movhi	r3,16361
 4001074:	dfc00515 	stw	ra,20(sp)
 4001078:	2884703a 	and	r2,r5,r2
 400107c:	18c87ec4 	addi	r3,r3,8699
 4001080:	1880180e 	bge	r3,r2,40010e4 <sin+0x80>
 4001084:	00dffc34 	movhi	r3,32752
 4001088:	18ffffc4 	addi	r3,r3,-1
 400108c:	1880060e 	bge	r3,r2,40010a8 <sin+0x44>
 4001090:	280f883a 	mov	r7,r5
 4001094:	200d883a 	mov	r6,r4
 4001098:	4005a500 	call	4005a50 <__subdf3>
 400109c:	dfc00517 	ldw	ra,20(sp)
 40010a0:	dec00604 	addi	sp,sp,24
 40010a4:	f800283a 	ret
 40010a8:	d9800104 	addi	r6,sp,4
 40010ac:	40011d80 	call	40011d8 <__ieee754_rem_pio2>
 40010b0:	108000cc 	andi	r2,r2,3
 40010b4:	00c00044 	movi	r3,1
 40010b8:	10c01926 	beq	r2,r3,4001120 <sin+0xbc>
 40010bc:	01000084 	movi	r4,2
 40010c0:	11000f26 	beq	r2,r4,4001100 <sin+0x9c>
 40010c4:	10001c26 	beq	r2,zero,4001138 <sin+0xd4>
 40010c8:	d9800317 	ldw	r6,12(sp)
 40010cc:	d9c00417 	ldw	r7,16(sp)
 40010d0:	d9000117 	ldw	r4,4(sp)
 40010d4:	d9400217 	ldw	r5,8(sp)
 40010d8:	40019440 	call	4001944 <__kernel_cos>
 40010dc:	18e0003c 	xorhi	r3,r3,32768
 40010e0:	003fee06 	br	400109c <__ram_exceptions_end+0xfbfc0e54>
 40010e4:	d8000015 	stw	zero,0(sp)
 40010e8:	000d883a 	mov	r6,zero
 40010ec:	000f883a 	mov	r7,zero
 40010f0:	4002b780 	call	4002b78 <__kernel_sin>
 40010f4:	dfc00517 	ldw	ra,20(sp)
 40010f8:	dec00604 	addi	sp,sp,24
 40010fc:	f800283a 	ret
 4001100:	d9800317 	ldw	r6,12(sp)
 4001104:	d9c00417 	ldw	r7,16(sp)
 4001108:	d9000117 	ldw	r4,4(sp)
 400110c:	d9400217 	ldw	r5,8(sp)
 4001110:	d8c00015 	stw	r3,0(sp)
 4001114:	4002b780 	call	4002b78 <__kernel_sin>
 4001118:	18e0003c 	xorhi	r3,r3,32768
 400111c:	003fdf06 	br	400109c <__ram_exceptions_end+0xfbfc0e54>
 4001120:	d9800317 	ldw	r6,12(sp)
 4001124:	d9c00417 	ldw	r7,16(sp)
 4001128:	d9000117 	ldw	r4,4(sp)
 400112c:	d9400217 	ldw	r5,8(sp)
 4001130:	40019440 	call	4001944 <__kernel_cos>
 4001134:	003fd906 	br	400109c <__ram_exceptions_end+0xfbfc0e54>
 4001138:	d9800317 	ldw	r6,12(sp)
 400113c:	d9c00417 	ldw	r7,16(sp)
 4001140:	d9000117 	ldw	r4,4(sp)
 4001144:	d9400217 	ldw	r5,8(sp)
 4001148:	d8c00015 	stw	r3,0(sp)
 400114c:	4002b780 	call	4002b78 <__kernel_sin>
 4001150:	003fd206 	br	400109c <__ram_exceptions_end+0xfbfc0e54>

04001154 <roundf>:
 4001154:	20dfe02c 	andhi	r3,r4,32640
 4001158:	1806d5fa 	srli	r3,r3,23
 400115c:	01400584 	movi	r5,22
 4001160:	2005883a 	mov	r2,r4
 4001164:	18ffe044 	addi	r3,r3,-127
 4001168:	28c00c16 	blt	r5,r3,400119c <roundf+0x48>
 400116c:	18001516 	blt	r3,zero,40011c4 <roundf+0x70>
 4001170:	01002034 	movhi	r4,128
 4001174:	213fffc4 	addi	r4,r4,-1
 4001178:	20c9d83a 	sra	r4,r4,r3
 400117c:	208a703a 	and	r5,r4,r2
 4001180:	28000826 	beq	r5,zero,40011a4 <roundf+0x50>
 4001184:	01401034 	movhi	r5,64
 4001188:	28c7d83a 	sra	r3,r5,r3
 400118c:	0108303a 	nor	r4,zero,r4
 4001190:	1885883a 	add	r2,r3,r2
 4001194:	2084703a 	and	r2,r4,r2
 4001198:	f800283a 	ret
 400119c:	01402004 	movi	r5,128
 40011a0:	19400126 	beq	r3,r5,40011a8 <roundf+0x54>
 40011a4:	f800283a 	ret
 40011a8:	deffff04 	addi	sp,sp,-4
 40011ac:	200b883a 	mov	r5,r4
 40011b0:	dfc00015 	stw	ra,0(sp)
 40011b4:	40033b00 	call	40033b0 <__addsf3>
 40011b8:	dfc00017 	ldw	ra,0(sp)
 40011bc:	dec00104 	addi	sp,sp,4
 40011c0:	f800283a 	ret
 40011c4:	20a0002c 	andhi	r2,r4,32768
 40011c8:	013fffc4 	movi	r4,-1
 40011cc:	193ff51e 	bne	r3,r4,40011a4 <__ram_exceptions_end+0xfbfc0f5c>
 40011d0:	108fe034 	orhi	r2,r2,16256
 40011d4:	f800283a 	ret

040011d8 <__ieee754_rem_pio2>:
 40011d8:	02200034 	movhi	r8,32768
 40011dc:	deffea04 	addi	sp,sp,-88
 40011e0:	423fffc4 	addi	r8,r8,-1
 40011e4:	00cffa74 	movhi	r3,16361
 40011e8:	ddc01315 	stw	r23,76(sp)
 40011ec:	dc400d15 	stw	r17,52(sp)
 40011f0:	dfc01515 	stw	ra,84(sp)
 40011f4:	df001415 	stw	fp,80(sp)
 40011f8:	dd801215 	stw	r22,72(sp)
 40011fc:	dd401115 	stw	r21,68(sp)
 4001200:	dd001015 	stw	r20,64(sp)
 4001204:	dcc00f15 	stw	r19,60(sp)
 4001208:	dc800e15 	stw	r18,56(sp)
 400120c:	dc000c15 	stw	r16,48(sp)
 4001210:	2a2e703a 	and	r23,r5,r8
 4001214:	18c87ec4 	addi	r3,r3,8699
 4001218:	2823883a 	mov	r17,r5
 400121c:	1dc0790e 	bge	r3,r23,4001404 <__ieee754_rem_pio2+0x22c>
 4001220:	009000f4 	movhi	r2,16387
 4001224:	10b65ec4 	addi	r2,r2,-9861
 4001228:	3021883a 	mov	r16,r6
 400122c:	2027883a 	mov	r19,r4
 4001230:	15c02316 	blt	r2,r23,40012c0 <__ieee754_rem_pio2+0xe8>
 4001234:	01cffe74 	movhi	r7,16377
 4001238:	39c87ec4 	addi	r7,r7,8699
 400123c:	01951034 	movhi	r6,21568
 4001240:	01417a0e 	bge	zero,r5,400182c <__ieee754_rem_pio2+0x654>
 4001244:	4005a500 	call	4005a50 <__subdf3>
 4001248:	1025883a 	mov	r18,r2
 400124c:	008ffe74 	movhi	r2,16377
 4001250:	10887ec4 	addi	r2,r2,8699
 4001254:	1823883a 	mov	r17,r3
 4001258:	b8808426 	beq	r23,r2,400146c <__ieee754_rem_pio2+0x294>
 400125c:	018698b4 	movhi	r6,6754
 4001260:	01cf7474 	movhi	r7,15825
 4001264:	3198cc44 	addi	r6,r6,25393
 4001268:	39ed1844 	addi	r7,r7,-19359
 400126c:	9009883a 	mov	r4,r18
 4001270:	180b883a 	mov	r5,r3
 4001274:	4005a500 	call	4005a50 <__subdf3>
 4001278:	100d883a 	mov	r6,r2
 400127c:	180f883a 	mov	r7,r3
 4001280:	9009883a 	mov	r4,r18
 4001284:	880b883a 	mov	r5,r17
 4001288:	80800015 	stw	r2,0(r16)
 400128c:	80c00115 	stw	r3,4(r16)
 4001290:	4005a500 	call	4005a50 <__subdf3>
 4001294:	018698b4 	movhi	r6,6754
 4001298:	01cf7474 	movhi	r7,15825
 400129c:	3198cc44 	addi	r6,r6,25393
 40012a0:	39ed1844 	addi	r7,r7,-19359
 40012a4:	1009883a 	mov	r4,r2
 40012a8:	180b883a 	mov	r5,r3
 40012ac:	4005a500 	call	4005a50 <__subdf3>
 40012b0:	80800215 	stw	r2,8(r16)
 40012b4:	80c00315 	stw	r3,12(r16)
 40012b8:	00800044 	movi	r2,1
 40012bc:	00005606 	br	4001418 <__ieee754_rem_pio2+0x240>
 40012c0:	00904e74 	movhi	r2,16697
 40012c4:	10887ec4 	addi	r2,r2,8699
 40012c8:	15c0830e 	bge	r2,r23,40014d8 <__ieee754_rem_pio2+0x300>
 40012cc:	009ffc34 	movhi	r2,32752
 40012d0:	10bfffc4 	addi	r2,r2,-1
 40012d4:	15c05c16 	blt	r2,r23,4001448 <__ieee754_rem_pio2+0x270>
 40012d8:	b829d53a 	srai	r20,r23,20
 40012dc:	a53efa84 	addi	r20,r20,-1046
 40012e0:	a024953a 	slli	r18,r20,20
 40012e4:	bca5c83a 	sub	r18,r23,r18
 40012e8:	900b883a 	mov	r5,r18
 40012ec:	400634c0 	call	400634c <__fixdfsi>
 40012f0:	1009883a 	mov	r4,r2
 40012f4:	40063cc0 	call	40063cc <__floatsidf>
 40012f8:	9809883a 	mov	r4,r19
 40012fc:	900b883a 	mov	r5,r18
 4001300:	100d883a 	mov	r6,r2
 4001304:	180f883a 	mov	r7,r3
 4001308:	d8800215 	stw	r2,8(sp)
 400130c:	d8c00315 	stw	r3,12(sp)
 4001310:	4005a500 	call	4005a50 <__subdf3>
 4001314:	000d883a 	mov	r6,zero
 4001318:	01d05c34 	movhi	r7,16752
 400131c:	1009883a 	mov	r4,r2
 4001320:	180b883a 	mov	r5,r3
 4001324:	40053380 	call	4005338 <__muldf3>
 4001328:	180b883a 	mov	r5,r3
 400132c:	1009883a 	mov	r4,r2
 4001330:	182b883a 	mov	r21,r3
 4001334:	102d883a 	mov	r22,r2
 4001338:	400634c0 	call	400634c <__fixdfsi>
 400133c:	1009883a 	mov	r4,r2
 4001340:	40063cc0 	call	40063cc <__floatsidf>
 4001344:	100d883a 	mov	r6,r2
 4001348:	180f883a 	mov	r7,r3
 400134c:	b009883a 	mov	r4,r22
 4001350:	a80b883a 	mov	r5,r21
 4001354:	1027883a 	mov	r19,r2
 4001358:	1825883a 	mov	r18,r3
 400135c:	d8800415 	stw	r2,16(sp)
 4001360:	d8c00515 	stw	r3,20(sp)
 4001364:	4005a500 	call	4005a50 <__subdf3>
 4001368:	000d883a 	mov	r6,zero
 400136c:	01d05c34 	movhi	r7,16752
 4001370:	1009883a 	mov	r4,r2
 4001374:	180b883a 	mov	r5,r3
 4001378:	40053380 	call	4005338 <__muldf3>
 400137c:	000d883a 	mov	r6,zero
 4001380:	000f883a 	mov	r7,zero
 4001384:	1009883a 	mov	r4,r2
 4001388:	180b883a 	mov	r5,r3
 400138c:	d8800615 	stw	r2,24(sp)
 4001390:	d8c00715 	stw	r3,28(sp)
 4001394:	40051d40 	call	40051d4 <__eqdf2>
 4001398:	1001431e 	bne	r2,zero,40018a8 <__ieee754_rem_pio2+0x6d0>
 400139c:	000f883a 	mov	r7,zero
 40013a0:	000d883a 	mov	r6,zero
 40013a4:	9809883a 	mov	r4,r19
 40013a8:	900b883a 	mov	r5,r18
 40013ac:	40051d40 	call	40051d4 <__eqdf2>
 40013b0:	100f003a 	cmpeq	r7,r2,zero
 40013b4:	00800084 	movi	r2,2
 40013b8:	11cfc83a 	sub	r7,r2,r7
 40013bc:	00800084 	movi	r2,2
 40013c0:	d8800015 	stw	r2,0(sp)
 40013c4:	00810074 	movhi	r2,1025
 40013c8:	10a74004 	addi	r2,r2,-25344
 40013cc:	d8800115 	stw	r2,4(sp)
 40013d0:	a00d883a 	mov	r6,r20
 40013d4:	800b883a 	mov	r5,r16
 40013d8:	d9000204 	addi	r4,sp,8
 40013dc:	4001de80 	call	4001de8 <__kernel_rem_pio2>
 40013e0:	88000d0e 	bge	r17,zero,4001418 <__ieee754_rem_pio2+0x240>
 40013e4:	81000117 	ldw	r4,4(r16)
 40013e8:	80c00317 	ldw	r3,12(r16)
 40013ec:	0085c83a 	sub	r2,zero,r2
 40013f0:	2120003c 	xorhi	r4,r4,32768
 40013f4:	18e0003c 	xorhi	r3,r3,32768
 40013f8:	81000115 	stw	r4,4(r16)
 40013fc:	80c00315 	stw	r3,12(r16)
 4001400:	00000506 	br	4001418 <__ieee754_rem_pio2+0x240>
 4001404:	31000015 	stw	r4,0(r6)
 4001408:	31400115 	stw	r5,4(r6)
 400140c:	30000215 	stw	zero,8(r6)
 4001410:	30000315 	stw	zero,12(r6)
 4001414:	0005883a 	mov	r2,zero
 4001418:	dfc01517 	ldw	ra,84(sp)
 400141c:	df001417 	ldw	fp,80(sp)
 4001420:	ddc01317 	ldw	r23,76(sp)
 4001424:	dd801217 	ldw	r22,72(sp)
 4001428:	dd401117 	ldw	r21,68(sp)
 400142c:	dd001017 	ldw	r20,64(sp)
 4001430:	dcc00f17 	ldw	r19,60(sp)
 4001434:	dc800e17 	ldw	r18,56(sp)
 4001438:	dc400d17 	ldw	r17,52(sp)
 400143c:	dc000c17 	ldw	r16,48(sp)
 4001440:	dec01604 	addi	sp,sp,88
 4001444:	f800283a 	ret
 4001448:	200d883a 	mov	r6,r4
 400144c:	280f883a 	mov	r7,r5
 4001450:	4005a500 	call	4005a50 <__subdf3>
 4001454:	80800215 	stw	r2,8(r16)
 4001458:	80800015 	stw	r2,0(r16)
 400145c:	80c00315 	stw	r3,12(r16)
 4001460:	80c00115 	stw	r3,4(r16)
 4001464:	0005883a 	mov	r2,zero
 4001468:	003feb06 	br	4001418 <__ram_exceptions_end+0xfbfc11d0>
 400146c:	01cf7474 	movhi	r7,15825
 4001470:	9009883a 	mov	r4,r18
 4001474:	39ed1844 	addi	r7,r7,-19359
 4001478:	01869834 	movhi	r6,6752
 400147c:	180b883a 	mov	r5,r3
 4001480:	4005a500 	call	4005a50 <__subdf3>
 4001484:	018b80f4 	movhi	r6,11779
 4001488:	01cee8f4 	movhi	r7,15267
 400148c:	319c1cc4 	addi	r6,r6,28787
 4001490:	39c66284 	addi	r7,r7,6538
 4001494:	1009883a 	mov	r4,r2
 4001498:	180b883a 	mov	r5,r3
 400149c:	1025883a 	mov	r18,r2
 40014a0:	1823883a 	mov	r17,r3
 40014a4:	4005a500 	call	4005a50 <__subdf3>
 40014a8:	100d883a 	mov	r6,r2
 40014ac:	180f883a 	mov	r7,r3
 40014b0:	9009883a 	mov	r4,r18
 40014b4:	880b883a 	mov	r5,r17
 40014b8:	80800015 	stw	r2,0(r16)
 40014bc:	80c00115 	stw	r3,4(r16)
 40014c0:	4005a500 	call	4005a50 <__subdf3>
 40014c4:	018b80f4 	movhi	r6,11779
 40014c8:	01cee8f4 	movhi	r7,15267
 40014cc:	319c1cc4 	addi	r6,r6,28787
 40014d0:	39c66284 	addi	r7,r7,6538
 40014d4:	003f7306 	br	40012a4 <__ram_exceptions_end+0xfbfc105c>
 40014d8:	4002e440 	call	4002e44 <fabs>
 40014dc:	019b72b4 	movhi	r6,28106
 40014e0:	01cff934 	movhi	r7,16356
 40014e4:	31b220c4 	addi	r6,r6,-14205
 40014e8:	39d7cc04 	addi	r7,r7,24368
 40014ec:	1009883a 	mov	r4,r2
 40014f0:	180b883a 	mov	r5,r3
 40014f4:	102d883a 	mov	r22,r2
 40014f8:	182b883a 	mov	r21,r3
 40014fc:	40053380 	call	4005338 <__muldf3>
 4001500:	000d883a 	mov	r6,zero
 4001504:	01cff834 	movhi	r7,16352
 4001508:	1009883a 	mov	r4,r2
 400150c:	180b883a 	mov	r5,r3
 4001510:	40049280 	call	4004928 <__adddf3>
 4001514:	180b883a 	mov	r5,r3
 4001518:	1009883a 	mov	r4,r2
 400151c:	400634c0 	call	400634c <__fixdfsi>
 4001520:	1009883a 	mov	r4,r2
 4001524:	1025883a 	mov	r18,r2
 4001528:	40063cc0 	call	40063cc <__floatsidf>
 400152c:	01cffe74 	movhi	r7,16377
 4001530:	39c87ec4 	addi	r7,r7,8699
 4001534:	01951034 	movhi	r6,21568
 4001538:	1009883a 	mov	r4,r2
 400153c:	180b883a 	mov	r5,r3
 4001540:	1029883a 	mov	r20,r2
 4001544:	1827883a 	mov	r19,r3
 4001548:	40053380 	call	4005338 <__muldf3>
 400154c:	b009883a 	mov	r4,r22
 4001550:	a80b883a 	mov	r5,r21
 4001554:	100d883a 	mov	r6,r2
 4001558:	180f883a 	mov	r7,r3
 400155c:	4005a500 	call	4005a50 <__subdf3>
 4001560:	018698b4 	movhi	r6,6754
 4001564:	01cf7474 	movhi	r7,15825
 4001568:	a009883a 	mov	r4,r20
 400156c:	3198cc44 	addi	r6,r6,25393
 4001570:	39ed1844 	addi	r7,r7,-19359
 4001574:	980b883a 	mov	r5,r19
 4001578:	1039883a 	mov	fp,r2
 400157c:	d8c00815 	stw	r3,32(sp)
 4001580:	40053380 	call	4005338 <__muldf3>
 4001584:	010007c4 	movi	r4,31
 4001588:	e017883a 	mov	r11,fp
 400158c:	da800817 	ldw	r10,32(sp)
 4001590:	102d883a 	mov	r22,r2
 4001594:	182b883a 	mov	r21,r3
 4001598:	24802816 	blt	r4,r18,400163c <__ieee754_rem_pio2+0x464>
 400159c:	913fffc4 	addi	r4,r18,-1
 40015a0:	2109883a 	add	r4,r4,r4
 40015a4:	01410074 	movhi	r5,1025
 40015a8:	2109883a 	add	r4,r4,r4
 40015ac:	29672004 	addi	r5,r5,-25472
 40015b0:	2909883a 	add	r4,r5,r4
 40015b4:	21000017 	ldw	r4,0(r4)
 40015b8:	b9002026 	beq	r23,r4,400163c <__ieee754_rem_pio2+0x464>
 40015bc:	100d883a 	mov	r6,r2
 40015c0:	180f883a 	mov	r7,r3
 40015c4:	e009883a 	mov	r4,fp
 40015c8:	500b883a 	mov	r5,r10
 40015cc:	da800b15 	stw	r10,44(sp)
 40015d0:	df000a15 	stw	fp,40(sp)
 40015d4:	4005a500 	call	4005a50 <__subdf3>
 40015d8:	da800b17 	ldw	r10,44(sp)
 40015dc:	dac00a17 	ldw	r11,40(sp)
 40015e0:	1019883a 	mov	r12,r2
 40015e4:	1813883a 	mov	r9,r3
 40015e8:	80800015 	stw	r2,0(r16)
 40015ec:	80c00115 	stw	r3,4(r16)
 40015f0:	600d883a 	mov	r6,r12
 40015f4:	480f883a 	mov	r7,r9
 40015f8:	5809883a 	mov	r4,r11
 40015fc:	500b883a 	mov	r5,r10
 4001600:	da400b15 	stw	r9,44(sp)
 4001604:	db000a15 	stw	r12,40(sp)
 4001608:	4005a500 	call	4005a50 <__subdf3>
 400160c:	b00d883a 	mov	r6,r22
 4001610:	a80f883a 	mov	r7,r21
 4001614:	1009883a 	mov	r4,r2
 4001618:	180b883a 	mov	r5,r3
 400161c:	4005a500 	call	4005a50 <__subdf3>
 4001620:	80800215 	stw	r2,8(r16)
 4001624:	80c00315 	stw	r3,12(r16)
 4001628:	da400b17 	ldw	r9,44(sp)
 400162c:	db000a17 	ldw	r12,40(sp)
 4001630:	88009f16 	blt	r17,zero,40018b0 <__ieee754_rem_pio2+0x6d8>
 4001634:	9005883a 	mov	r2,r18
 4001638:	003f7706 	br	4001418 <__ram_exceptions_end+0xfbfc11d0>
 400163c:	d9400817 	ldw	r5,32(sp)
 4001640:	100d883a 	mov	r6,r2
 4001644:	180f883a 	mov	r7,r3
 4001648:	e009883a 	mov	r4,fp
 400164c:	da800b15 	stw	r10,44(sp)
 4001650:	dac00a15 	stw	r11,40(sp)
 4001654:	4005a500 	call	4005a50 <__subdf3>
 4001658:	1019883a 	mov	r12,r2
 400165c:	1804d53a 	srli	r2,r3,20
 4001660:	b811d53a 	srai	r8,r23,20
 4001664:	1813883a 	mov	r9,r3
 4001668:	1081ffcc 	andi	r2,r2,2047
 400166c:	80c00115 	stw	r3,4(r16)
 4001670:	83000015 	stw	r12,0(r16)
 4001674:	4085c83a 	sub	r2,r8,r2
 4001678:	00c00404 	movi	r3,16
 400167c:	da800b17 	ldw	r10,44(sp)
 4001680:	dac00a17 	ldw	r11,40(sp)
 4001684:	18bfda0e 	bge	r3,r2,40015f0 <__ram_exceptions_end+0xfbfc13a8>
 4001688:	01cf7474 	movhi	r7,15825
 400168c:	39ed1844 	addi	r7,r7,-19359
 4001690:	01869834 	movhi	r6,6752
 4001694:	a009883a 	mov	r4,r20
 4001698:	980b883a 	mov	r5,r19
 400169c:	da000a15 	stw	r8,40(sp)
 40016a0:	40053380 	call	4005338 <__muldf3>
 40016a4:	d9400817 	ldw	r5,32(sp)
 40016a8:	100d883a 	mov	r6,r2
 40016ac:	180f883a 	mov	r7,r3
 40016b0:	e009883a 	mov	r4,fp
 40016b4:	102d883a 	mov	r22,r2
 40016b8:	182b883a 	mov	r21,r3
 40016bc:	4005a500 	call	4005a50 <__subdf3>
 40016c0:	d9400817 	ldw	r5,32(sp)
 40016c4:	100d883a 	mov	r6,r2
 40016c8:	180f883a 	mov	r7,r3
 40016cc:	e009883a 	mov	r4,fp
 40016d0:	182f883a 	mov	r23,r3
 40016d4:	d8800915 	stw	r2,36(sp)
 40016d8:	4005a500 	call	4005a50 <__subdf3>
 40016dc:	b00d883a 	mov	r6,r22
 40016e0:	a80f883a 	mov	r7,r21
 40016e4:	1009883a 	mov	r4,r2
 40016e8:	180b883a 	mov	r5,r3
 40016ec:	4005a500 	call	4005a50 <__subdf3>
 40016f0:	018b80f4 	movhi	r6,11779
 40016f4:	01cee8f4 	movhi	r7,15267
 40016f8:	319c1cc4 	addi	r6,r6,28787
 40016fc:	39c66284 	addi	r7,r7,6538
 4001700:	a009883a 	mov	r4,r20
 4001704:	980b883a 	mov	r5,r19
 4001708:	102d883a 	mov	r22,r2
 400170c:	182b883a 	mov	r21,r3
 4001710:	40053380 	call	4005338 <__muldf3>
 4001714:	b00d883a 	mov	r6,r22
 4001718:	a80f883a 	mov	r7,r21
 400171c:	1009883a 	mov	r4,r2
 4001720:	180b883a 	mov	r5,r3
 4001724:	4005a500 	call	4005a50 <__subdf3>
 4001728:	d9000917 	ldw	r4,36(sp)
 400172c:	100d883a 	mov	r6,r2
 4001730:	180f883a 	mov	r7,r3
 4001734:	b80b883a 	mov	r5,r23
 4001738:	102d883a 	mov	r22,r2
 400173c:	182b883a 	mov	r21,r3
 4001740:	4005a500 	call	4005a50 <__subdf3>
 4001744:	1019883a 	mov	r12,r2
 4001748:	1804d53a 	srli	r2,r3,20
 400174c:	da000a17 	ldw	r8,40(sp)
 4001750:	83000015 	stw	r12,0(r16)
 4001754:	1081ffcc 	andi	r2,r2,2047
 4001758:	4091c83a 	sub	r8,r8,r2
 400175c:	80c00115 	stw	r3,4(r16)
 4001760:	00800c44 	movi	r2,49
 4001764:	1813883a 	mov	r9,r3
 4001768:	1200730e 	bge	r2,r8,4001938 <__ieee754_rem_pio2+0x760>
 400176c:	01cee8f4 	movhi	r7,15267
 4001770:	39c66284 	addi	r7,r7,6538
 4001774:	018b8034 	movhi	r6,11776
 4001778:	a009883a 	mov	r4,r20
 400177c:	980b883a 	mov	r5,r19
 4001780:	40053380 	call	4005338 <__muldf3>
 4001784:	d9000917 	ldw	r4,36(sp)
 4001788:	100d883a 	mov	r6,r2
 400178c:	180f883a 	mov	r7,r3
 4001790:	b80b883a 	mov	r5,r23
 4001794:	102d883a 	mov	r22,r2
 4001798:	182b883a 	mov	r21,r3
 400179c:	4005a500 	call	4005a50 <__subdf3>
 40017a0:	d9000917 	ldw	r4,36(sp)
 40017a4:	100d883a 	mov	r6,r2
 40017a8:	180f883a 	mov	r7,r3
 40017ac:	b80b883a 	mov	r5,r23
 40017b0:	d8c00b15 	stw	r3,44(sp)
 40017b4:	d8800a15 	stw	r2,40(sp)
 40017b8:	4005a500 	call	4005a50 <__subdf3>
 40017bc:	b00d883a 	mov	r6,r22
 40017c0:	a80f883a 	mov	r7,r21
 40017c4:	1009883a 	mov	r4,r2
 40017c8:	180b883a 	mov	r5,r3
 40017cc:	4005a500 	call	4005a50 <__subdf3>
 40017d0:	01894834 	movhi	r6,9504
 40017d4:	01ce5f34 	movhi	r7,14716
 40017d8:	31927044 	addi	r6,r6,18881
 40017dc:	39e0e684 	addi	r7,r7,-31846
 40017e0:	a009883a 	mov	r4,r20
 40017e4:	980b883a 	mov	r5,r19
 40017e8:	102d883a 	mov	r22,r2
 40017ec:	182b883a 	mov	r21,r3
 40017f0:	40053380 	call	4005338 <__muldf3>
 40017f4:	b00d883a 	mov	r6,r22
 40017f8:	a80f883a 	mov	r7,r21
 40017fc:	1009883a 	mov	r4,r2
 4001800:	180b883a 	mov	r5,r3
 4001804:	4005a500 	call	4005a50 <__subdf3>
 4001808:	dac00a17 	ldw	r11,40(sp)
 400180c:	da800b17 	ldw	r10,44(sp)
 4001810:	102d883a 	mov	r22,r2
 4001814:	182b883a 	mov	r21,r3
 4001818:	100d883a 	mov	r6,r2
 400181c:	180f883a 	mov	r7,r3
 4001820:	5809883a 	mov	r4,r11
 4001824:	500b883a 	mov	r5,r10
 4001828:	003f6a06 	br	40015d4 <__ram_exceptions_end+0xfbfc138c>
 400182c:	40049280 	call	4004928 <__adddf3>
 4001830:	1025883a 	mov	r18,r2
 4001834:	008ffe74 	movhi	r2,16377
 4001838:	10887ec4 	addi	r2,r2,8699
 400183c:	1823883a 	mov	r17,r3
 4001840:	b8802226 	beq	r23,r2,40018cc <__ieee754_rem_pio2+0x6f4>
 4001844:	018698b4 	movhi	r6,6754
 4001848:	01cf7474 	movhi	r7,15825
 400184c:	3198cc44 	addi	r6,r6,25393
 4001850:	39ed1844 	addi	r7,r7,-19359
 4001854:	9009883a 	mov	r4,r18
 4001858:	180b883a 	mov	r5,r3
 400185c:	40049280 	call	4004928 <__adddf3>
 4001860:	100d883a 	mov	r6,r2
 4001864:	180f883a 	mov	r7,r3
 4001868:	9009883a 	mov	r4,r18
 400186c:	880b883a 	mov	r5,r17
 4001870:	80800015 	stw	r2,0(r16)
 4001874:	80c00115 	stw	r3,4(r16)
 4001878:	4005a500 	call	4005a50 <__subdf3>
 400187c:	018698b4 	movhi	r6,6754
 4001880:	01cf7474 	movhi	r7,15825
 4001884:	3198cc44 	addi	r6,r6,25393
 4001888:	39ed1844 	addi	r7,r7,-19359
 400188c:	1009883a 	mov	r4,r2
 4001890:	180b883a 	mov	r5,r3
 4001894:	40049280 	call	4004928 <__adddf3>
 4001898:	80800215 	stw	r2,8(r16)
 400189c:	80c00315 	stw	r3,12(r16)
 40018a0:	00bfffc4 	movi	r2,-1
 40018a4:	003edc06 	br	4001418 <__ram_exceptions_end+0xfbfc11d0>
 40018a8:	01c000c4 	movi	r7,3
 40018ac:	003ec306 	br	40013bc <__ram_exceptions_end+0xfbfc1174>
 40018b0:	4a60003c 	xorhi	r9,r9,32768
 40018b4:	18e0003c 	xorhi	r3,r3,32768
 40018b8:	83000015 	stw	r12,0(r16)
 40018bc:	82400115 	stw	r9,4(r16)
 40018c0:	80c00315 	stw	r3,12(r16)
 40018c4:	0485c83a 	sub	r2,zero,r18
 40018c8:	003ed306 	br	4001418 <__ram_exceptions_end+0xfbfc11d0>
 40018cc:	01cf7474 	movhi	r7,15825
 40018d0:	9009883a 	mov	r4,r18
 40018d4:	39ed1844 	addi	r7,r7,-19359
 40018d8:	01869834 	movhi	r6,6752
 40018dc:	180b883a 	mov	r5,r3
 40018e0:	40049280 	call	4004928 <__adddf3>
 40018e4:	018b80f4 	movhi	r6,11779
 40018e8:	01cee8f4 	movhi	r7,15267
 40018ec:	319c1cc4 	addi	r6,r6,28787
 40018f0:	39c66284 	addi	r7,r7,6538
 40018f4:	1009883a 	mov	r4,r2
 40018f8:	180b883a 	mov	r5,r3
 40018fc:	1025883a 	mov	r18,r2
 4001900:	1823883a 	mov	r17,r3
 4001904:	40049280 	call	4004928 <__adddf3>
 4001908:	100d883a 	mov	r6,r2
 400190c:	180f883a 	mov	r7,r3
 4001910:	9009883a 	mov	r4,r18
 4001914:	880b883a 	mov	r5,r17
 4001918:	80800015 	stw	r2,0(r16)
 400191c:	80c00115 	stw	r3,4(r16)
 4001920:	4005a500 	call	4005a50 <__subdf3>
 4001924:	018b80f4 	movhi	r6,11779
 4001928:	01cee8f4 	movhi	r7,15267
 400192c:	319c1cc4 	addi	r6,r6,28787
 4001930:	39c66284 	addi	r7,r7,6538
 4001934:	003fd506 	br	400188c <__ram_exceptions_end+0xfbfc1644>
 4001938:	dac00917 	ldw	r11,36(sp)
 400193c:	b815883a 	mov	r10,r23
 4001940:	003f2b06 	br	40015f0 <__ram_exceptions_end+0xfbfc13a8>

04001944 <__kernel_cos>:
 4001944:	defff304 	addi	sp,sp,-52
 4001948:	dc000315 	stw	r16,12(sp)
 400194c:	04200034 	movhi	r16,32768
 4001950:	843fffc4 	addi	r16,r16,-1
 4001954:	008f9034 	movhi	r2,15936
 4001958:	df000b15 	stw	fp,44(sp)
 400195c:	ddc00a15 	stw	r23,40(sp)
 4001960:	dd800915 	stw	r22,36(sp)
 4001964:	dcc00615 	stw	r19,24(sp)
 4001968:	dfc00c15 	stw	ra,48(sp)
 400196c:	dd400815 	stw	r21,32(sp)
 4001970:	dd000715 	stw	r20,28(sp)
 4001974:	dc800515 	stw	r18,20(sp)
 4001978:	dc400415 	stw	r17,16(sp)
 400197c:	2c20703a 	and	r16,r5,r16
 4001980:	10bfffc4 	addi	r2,r2,-1
 4001984:	2827883a 	mov	r19,r5
 4001988:	202d883a 	mov	r22,r4
 400198c:	302f883a 	mov	r23,r6
 4001990:	3839883a 	mov	fp,r7
 4001994:	14007516 	blt	r2,r16,4001b6c <__kernel_cos+0x228>
 4001998:	400634c0 	call	400634c <__fixdfsi>
 400199c:	10010f26 	beq	r2,zero,4001ddc <__kernel_cos+0x498>
 40019a0:	b00d883a 	mov	r6,r22
 40019a4:	980f883a 	mov	r7,r19
 40019a8:	b009883a 	mov	r4,r22
 40019ac:	980b883a 	mov	r5,r19
 40019b0:	40053380 	call	4005338 <__muldf3>
 40019b4:	01afa234 	movhi	r6,48776
 40019b8:	01ef6a74 	movhi	r7,48553
 40019bc:	318e3504 	addi	r6,r6,14548
 40019c0:	39feba44 	addi	r7,r7,-1303
 40019c4:	1009883a 	mov	r4,r2
 40019c8:	180b883a 	mov	r5,r3
 40019cc:	102b883a 	mov	r21,r2
 40019d0:	1829883a 	mov	r20,r3
 40019d4:	40053380 	call	4005338 <__muldf3>
 40019d8:	01af6d74 	movhi	r6,48565
 40019dc:	01cf88b4 	movhi	r7,15906
 40019e0:	31ac7104 	addi	r6,r6,-20028
 40019e4:	39fba784 	addi	r7,r7,-4450
 40019e8:	1009883a 	mov	r4,r2
 40019ec:	180b883a 	mov	r5,r3
 40019f0:	40049280 	call	4004928 <__adddf3>
 40019f4:	a80d883a 	mov	r6,r21
 40019f8:	a00f883a 	mov	r7,r20
 40019fc:	1009883a 	mov	r4,r2
 4001a00:	180b883a 	mov	r5,r3
 4001a04:	40053380 	call	4005338 <__muldf3>
 4001a08:	01a02734 	movhi	r6,32924
 4001a0c:	01cfa4b4 	movhi	r7,16018
 4001a10:	3194ab44 	addi	r6,r6,21165
 4001a14:	39df93c4 	addi	r7,r7,32335
 4001a18:	1009883a 	mov	r4,r2
 4001a1c:	180b883a 	mov	r5,r3
 4001a20:	4005a500 	call	4005a50 <__subdf3>
 4001a24:	a80d883a 	mov	r6,r21
 4001a28:	a00f883a 	mov	r7,r20
 4001a2c:	1009883a 	mov	r4,r2
 4001a30:	180b883a 	mov	r5,r3
 4001a34:	40053380 	call	4005338 <__muldf3>
 4001a38:	018672f4 	movhi	r6,6603
 4001a3c:	01cfbeb4 	movhi	r7,16122
 4001a40:	31856404 	addi	r6,r6,5520
 4001a44:	39c06804 	addi	r7,r7,416
 4001a48:	1009883a 	mov	r4,r2
 4001a4c:	180b883a 	mov	r5,r3
 4001a50:	40049280 	call	4004928 <__adddf3>
 4001a54:	a80d883a 	mov	r6,r21
 4001a58:	a00f883a 	mov	r7,r20
 4001a5c:	1009883a 	mov	r4,r2
 4001a60:	180b883a 	mov	r5,r3
 4001a64:	40053380 	call	4005338 <__muldf3>
 4001a68:	0185b074 	movhi	r6,5825
 4001a6c:	01cfd5f4 	movhi	r7,16215
 4001a70:	31945dc4 	addi	r6,r6,20855
 4001a74:	39f05b04 	addi	r7,r7,-16020
 4001a78:	1009883a 	mov	r4,r2
 4001a7c:	180b883a 	mov	r5,r3
 4001a80:	4005a500 	call	4005a50 <__subdf3>
 4001a84:	a80d883a 	mov	r6,r21
 4001a88:	a00f883a 	mov	r7,r20
 4001a8c:	1009883a 	mov	r4,r2
 4001a90:	180b883a 	mov	r5,r3
 4001a94:	40053380 	call	4005338 <__muldf3>
 4001a98:	01955574 	movhi	r6,21845
 4001a9c:	01cfe974 	movhi	r7,16293
 4001aa0:	31955304 	addi	r6,r6,21836
 4001aa4:	39d55544 	addi	r7,r7,21845
 4001aa8:	1009883a 	mov	r4,r2
 4001aac:	180b883a 	mov	r5,r3
 4001ab0:	40049280 	call	4004928 <__adddf3>
 4001ab4:	a80d883a 	mov	r6,r21
 4001ab8:	a00f883a 	mov	r7,r20
 4001abc:	1009883a 	mov	r4,r2
 4001ac0:	180b883a 	mov	r5,r3
 4001ac4:	40053380 	call	4005338 <__muldf3>
 4001ac8:	1017883a 	mov	r11,r2
 4001acc:	1815883a 	mov	r10,r3
 4001ad0:	a809883a 	mov	r4,r21
 4001ad4:	a00b883a 	mov	r5,r20
 4001ad8:	000d883a 	mov	r6,zero
 4001adc:	01cff834 	movhi	r7,16352
 4001ae0:	da800215 	stw	r10,8(sp)
 4001ae4:	dac00115 	stw	r11,4(sp)
 4001ae8:	40053380 	call	4005338 <__muldf3>
 4001aec:	dac00117 	ldw	r11,4(sp)
 4001af0:	da800217 	ldw	r10,8(sp)
 4001af4:	a809883a 	mov	r4,r21
 4001af8:	580d883a 	mov	r6,r11
 4001afc:	500f883a 	mov	r7,r10
 4001b00:	a00b883a 	mov	r5,r20
 4001b04:	1023883a 	mov	r17,r2
 4001b08:	1821883a 	mov	r16,r3
 4001b0c:	40053380 	call	4005338 <__muldf3>
 4001b10:	b80d883a 	mov	r6,r23
 4001b14:	e00f883a 	mov	r7,fp
 4001b18:	b009883a 	mov	r4,r22
 4001b1c:	980b883a 	mov	r5,r19
 4001b20:	1029883a 	mov	r20,r2
 4001b24:	1825883a 	mov	r18,r3
 4001b28:	40053380 	call	4005338 <__muldf3>
 4001b2c:	a009883a 	mov	r4,r20
 4001b30:	900b883a 	mov	r5,r18
 4001b34:	100d883a 	mov	r6,r2
 4001b38:	180f883a 	mov	r7,r3
 4001b3c:	4005a500 	call	4005a50 <__subdf3>
 4001b40:	8809883a 	mov	r4,r17
 4001b44:	800b883a 	mov	r5,r16
 4001b48:	100d883a 	mov	r6,r2
 4001b4c:	180f883a 	mov	r7,r3
 4001b50:	4005a500 	call	4005a50 <__subdf3>
 4001b54:	100d883a 	mov	r6,r2
 4001b58:	180f883a 	mov	r7,r3
 4001b5c:	0009883a 	mov	r4,zero
 4001b60:	014ffc34 	movhi	r5,16368
 4001b64:	4005a500 	call	4005a50 <__subdf3>
 4001b68:	00008b06 	br	4001d98 <__kernel_cos+0x454>
 4001b6c:	200d883a 	mov	r6,r4
 4001b70:	280f883a 	mov	r7,r5
 4001b74:	40053380 	call	4005338 <__muldf3>
 4001b78:	01afa234 	movhi	r6,48776
 4001b7c:	01ef6a74 	movhi	r7,48553
 4001b80:	318e3504 	addi	r6,r6,14548
 4001b84:	39feba44 	addi	r7,r7,-1303
 4001b88:	1009883a 	mov	r4,r2
 4001b8c:	180b883a 	mov	r5,r3
 4001b90:	1025883a 	mov	r18,r2
 4001b94:	1823883a 	mov	r17,r3
 4001b98:	40053380 	call	4005338 <__muldf3>
 4001b9c:	01af6d74 	movhi	r6,48565
 4001ba0:	01cf88b4 	movhi	r7,15906
 4001ba4:	31ac7104 	addi	r6,r6,-20028
 4001ba8:	39fba784 	addi	r7,r7,-4450
 4001bac:	1009883a 	mov	r4,r2
 4001bb0:	180b883a 	mov	r5,r3
 4001bb4:	40049280 	call	4004928 <__adddf3>
 4001bb8:	900d883a 	mov	r6,r18
 4001bbc:	880f883a 	mov	r7,r17
 4001bc0:	1009883a 	mov	r4,r2
 4001bc4:	180b883a 	mov	r5,r3
 4001bc8:	40053380 	call	4005338 <__muldf3>
 4001bcc:	01a02734 	movhi	r6,32924
 4001bd0:	01cfa4b4 	movhi	r7,16018
 4001bd4:	3194ab44 	addi	r6,r6,21165
 4001bd8:	39df93c4 	addi	r7,r7,32335
 4001bdc:	1009883a 	mov	r4,r2
 4001be0:	180b883a 	mov	r5,r3
 4001be4:	4005a500 	call	4005a50 <__subdf3>
 4001be8:	900d883a 	mov	r6,r18
 4001bec:	880f883a 	mov	r7,r17
 4001bf0:	1009883a 	mov	r4,r2
 4001bf4:	180b883a 	mov	r5,r3
 4001bf8:	40053380 	call	4005338 <__muldf3>
 4001bfc:	018672f4 	movhi	r6,6603
 4001c00:	01cfbeb4 	movhi	r7,16122
 4001c04:	31856404 	addi	r6,r6,5520
 4001c08:	39c06804 	addi	r7,r7,416
 4001c0c:	1009883a 	mov	r4,r2
 4001c10:	180b883a 	mov	r5,r3
 4001c14:	40049280 	call	4004928 <__adddf3>
 4001c18:	900d883a 	mov	r6,r18
 4001c1c:	880f883a 	mov	r7,r17
 4001c20:	1009883a 	mov	r4,r2
 4001c24:	180b883a 	mov	r5,r3
 4001c28:	40053380 	call	4005338 <__muldf3>
 4001c2c:	0185b074 	movhi	r6,5825
 4001c30:	01cfd5f4 	movhi	r7,16215
 4001c34:	31945dc4 	addi	r6,r6,20855
 4001c38:	39f05b04 	addi	r7,r7,-16020
 4001c3c:	1009883a 	mov	r4,r2
 4001c40:	180b883a 	mov	r5,r3
 4001c44:	4005a500 	call	4005a50 <__subdf3>
 4001c48:	900d883a 	mov	r6,r18
 4001c4c:	880f883a 	mov	r7,r17
 4001c50:	1009883a 	mov	r4,r2
 4001c54:	180b883a 	mov	r5,r3
 4001c58:	40053380 	call	4005338 <__muldf3>
 4001c5c:	01955574 	movhi	r6,21845
 4001c60:	01cfe974 	movhi	r7,16293
 4001c64:	31955304 	addi	r6,r6,21836
 4001c68:	39d55544 	addi	r7,r7,21845
 4001c6c:	1009883a 	mov	r4,r2
 4001c70:	180b883a 	mov	r5,r3
 4001c74:	40049280 	call	4004928 <__adddf3>
 4001c78:	900d883a 	mov	r6,r18
 4001c7c:	880f883a 	mov	r7,r17
 4001c80:	1009883a 	mov	r4,r2
 4001c84:	180b883a 	mov	r5,r3
 4001c88:	40053380 	call	4005338 <__muldf3>
 4001c8c:	1013883a 	mov	r9,r2
 4001c90:	1017883a 	mov	r11,r2
 4001c94:	008ff4f4 	movhi	r2,16339
 4001c98:	108ccc84 	addi	r2,r2,13106
 4001c9c:	1811883a 	mov	r8,r3
 4001ca0:	902b883a 	mov	r21,r18
 4001ca4:	8829883a 	mov	r20,r17
 4001ca8:	1815883a 	mov	r10,r3
 4001cac:	143f880e 	bge	r2,r16,4001ad0 <__ram_exceptions_end+0xfbfc1888>
 4001cb0:	008ffa74 	movhi	r2,16361
 4001cb4:	14004416 	blt	r2,r16,4001dc8 <__kernel_cos+0x484>
 4001cb8:	00bff834 	movhi	r2,65504
 4001cbc:	80a1883a 	add	r16,r16,r2
 4001cc0:	000d883a 	mov	r6,zero
 4001cc4:	800f883a 	mov	r7,r16
 4001cc8:	0009883a 	mov	r4,zero
 4001ccc:	014ffc34 	movhi	r5,16368
 4001cd0:	da400115 	stw	r9,4(sp)
 4001cd4:	d8c00215 	stw	r3,8(sp)
 4001cd8:	4005a500 	call	4005a50 <__subdf3>
 4001cdc:	da000217 	ldw	r8,8(sp)
 4001ce0:	da400117 	ldw	r9,4(sp)
 4001ce4:	102b883a 	mov	r21,r2
 4001ce8:	d8c00015 	stw	r3,0(sp)
 4001cec:	9009883a 	mov	r4,r18
 4001cf0:	880b883a 	mov	r5,r17
 4001cf4:	000d883a 	mov	r6,zero
 4001cf8:	01cff834 	movhi	r7,16352
 4001cfc:	da000215 	stw	r8,8(sp)
 4001d00:	da400115 	stw	r9,4(sp)
 4001d04:	40053380 	call	4005338 <__muldf3>
 4001d08:	800f883a 	mov	r7,r16
 4001d0c:	000d883a 	mov	r6,zero
 4001d10:	1009883a 	mov	r4,r2
 4001d14:	180b883a 	mov	r5,r3
 4001d18:	4005a500 	call	4005a50 <__subdf3>
 4001d1c:	da400117 	ldw	r9,4(sp)
 4001d20:	da000217 	ldw	r8,8(sp)
 4001d24:	9009883a 	mov	r4,r18
 4001d28:	480d883a 	mov	r6,r9
 4001d2c:	400f883a 	mov	r7,r8
 4001d30:	880b883a 	mov	r5,r17
 4001d34:	1029883a 	mov	r20,r2
 4001d38:	1821883a 	mov	r16,r3
 4001d3c:	40053380 	call	4005338 <__muldf3>
 4001d40:	b80d883a 	mov	r6,r23
 4001d44:	e00f883a 	mov	r7,fp
 4001d48:	b009883a 	mov	r4,r22
 4001d4c:	980b883a 	mov	r5,r19
 4001d50:	1025883a 	mov	r18,r2
 4001d54:	1823883a 	mov	r17,r3
 4001d58:	40053380 	call	4005338 <__muldf3>
 4001d5c:	100d883a 	mov	r6,r2
 4001d60:	180f883a 	mov	r7,r3
 4001d64:	9009883a 	mov	r4,r18
 4001d68:	880b883a 	mov	r5,r17
 4001d6c:	4005a500 	call	4005a50 <__subdf3>
 4001d70:	100d883a 	mov	r6,r2
 4001d74:	180f883a 	mov	r7,r3
 4001d78:	a009883a 	mov	r4,r20
 4001d7c:	800b883a 	mov	r5,r16
 4001d80:	4005a500 	call	4005a50 <__subdf3>
 4001d84:	d9400017 	ldw	r5,0(sp)
 4001d88:	100d883a 	mov	r6,r2
 4001d8c:	180f883a 	mov	r7,r3
 4001d90:	a809883a 	mov	r4,r21
 4001d94:	4005a500 	call	4005a50 <__subdf3>
 4001d98:	dfc00c17 	ldw	ra,48(sp)
 4001d9c:	df000b17 	ldw	fp,44(sp)
 4001da0:	ddc00a17 	ldw	r23,40(sp)
 4001da4:	dd800917 	ldw	r22,36(sp)
 4001da8:	dd400817 	ldw	r21,32(sp)
 4001dac:	dd000717 	ldw	r20,28(sp)
 4001db0:	dcc00617 	ldw	r19,24(sp)
 4001db4:	dc800517 	ldw	r18,20(sp)
 4001db8:	dc400417 	ldw	r17,16(sp)
 4001dbc:	dc000317 	ldw	r16,12(sp)
 4001dc0:	dec00d04 	addi	sp,sp,52
 4001dc4:	f800283a 	ret
 4001dc8:	008ff9f4 	movhi	r2,16359
 4001dcc:	002b883a 	mov	r21,zero
 4001dd0:	d8800015 	stw	r2,0(sp)
 4001dd4:	040ff4b4 	movhi	r16,16338
 4001dd8:	003fc406 	br	4001cec <__ram_exceptions_end+0xfbfc1aa4>
 4001ddc:	0005883a 	mov	r2,zero
 4001de0:	00cffc34 	movhi	r3,16368
 4001de4:	003fec06 	br	4001d98 <__ram_exceptions_end+0xfbfc1b50>

04001de8 <__kernel_rem_pio2>:
 4001de8:	deff5a04 	addi	sp,sp,-664
 4001dec:	da00a617 	ldw	r8,664(sp)
 4001df0:	00c10074 	movhi	r3,1025
 4001df4:	18e79204 	addi	r3,r3,-25016
 4001df8:	4205883a 	add	r2,r8,r8
 4001dfc:	1085883a 	add	r2,r2,r2
 4001e00:	1885883a 	add	r2,r3,r2
 4001e04:	d9008e15 	stw	r4,568(sp)
 4001e08:	d9408f15 	stw	r5,572(sp)
 4001e0c:	313fff44 	addi	r4,r6,-3
 4001e10:	01400604 	movi	r5,24
 4001e14:	dd80a215 	stw	r22,648(sp)
 4001e18:	dc009c15 	stw	r16,624(sp)
 4001e1c:	dfc0a515 	stw	ra,660(sp)
 4001e20:	df00a415 	stw	fp,656(sp)
 4001e24:	ddc0a315 	stw	r23,652(sp)
 4001e28:	dd40a115 	stw	r21,644(sp)
 4001e2c:	dd00a015 	stw	r20,640(sp)
 4001e30:	dcc09f15 	stw	r19,636(sp)
 4001e34:	dc809e15 	stw	r18,632(sp)
 4001e38:	dc409d15 	stw	r17,628(sp)
 4001e3c:	3021883a 	mov	r16,r6
 4001e40:	d9c09315 	stw	r7,588(sp)
 4001e44:	15800017 	ldw	r22,0(r2)
 4001e48:	40031fc0 	call	40031fc <__divsi3>
 4001e4c:	da009317 	ldw	r8,588(sp)
 4001e50:	d8809215 	stw	r2,584(sp)
 4001e54:	423fffc4 	addi	r8,r8,-1
 4001e58:	da008d15 	stw	r8,564(sp)
 4001e5c:	10033b16 	blt	r2,zero,4002b4c <__kernel_rem_pio2+0xd64>
 4001e60:	da009217 	ldw	r8,584(sp)
 4001e64:	d9009217 	ldw	r4,584(sp)
 4001e68:	42000044 	addi	r8,r8,1
 4001e6c:	40fffa24 	muli	r3,r8,-24
 4001e70:	da009515 	stw	r8,596(sp)
 4001e74:	da008d17 	ldw	r8,564(sp)
 4001e78:	1c07883a 	add	r3,r3,r16
 4001e7c:	d8c09015 	stw	r3,576(sp)
 4001e80:	b205883a 	add	r2,r22,r8
 4001e84:	2223c83a 	sub	r17,r4,r8
 4001e88:	10001016 	blt	r2,zero,4001ecc <__kernel_rem_pio2+0xe4>
 4001e8c:	da00a717 	ldw	r8,668(sp)
 4001e90:	8c65883a 	add	r18,r17,r17
 4001e94:	94a5883a 	add	r18,r18,r18
 4001e98:	1445883a 	add	r2,r2,r17
 4001e9c:	dcc05004 	addi	r19,sp,320
 4001ea0:	44a5883a 	add	r18,r8,r18
 4001ea4:	14000044 	addi	r16,r2,1
 4001ea8:	88015316 	blt	r17,zero,40023f8 <__kernel_rem_pio2+0x610>
 4001eac:	91000017 	ldw	r4,0(r18)
 4001eb0:	40063cc0 	call	40063cc <__floatsidf>
 4001eb4:	98800015 	stw	r2,0(r19)
 4001eb8:	98c00115 	stw	r3,4(r19)
 4001ebc:	8c400044 	addi	r17,r17,1
 4001ec0:	9cc00204 	addi	r19,r19,8
 4001ec4:	94800104 	addi	r18,r18,4
 4001ec8:	8c3ff71e 	bne	r17,r16,4001ea8 <__ram_exceptions_end+0xfbfc1c60>
 4001ecc:	b0002816 	blt	r22,zero,4001f70 <__kernel_rem_pio2+0x188>
 4001ed0:	da008d17 	ldw	r8,564(sp)
 4001ed4:	b4c00044 	addi	r19,r22,1
 4001ed8:	982690fa 	slli	r19,r19,3
 4001edc:	402490fa 	slli	r18,r8,3
 4001ee0:	da008e17 	ldw	r8,568(sp)
 4001ee4:	d8805004 	addi	r2,sp,320
 4001ee8:	94000204 	addi	r16,r18,8
 4001eec:	d823883a 	mov	r17,sp
 4001ef0:	14a5883a 	add	r18,r2,r18
 4001ef4:	dcef883a 	add	r23,sp,r19
 4001ef8:	4421883a 	add	r16,r8,r16
 4001efc:	dd809115 	stw	r22,580(sp)
 4001f00:	4039883a 	mov	fp,r8
 4001f04:	da008d17 	ldw	r8,564(sp)
 4001f08:	40016016 	blt	r8,zero,400248c <__kernel_rem_pio2+0x6a4>
 4001f0c:	e027883a 	mov	r19,fp
 4001f10:	9029883a 	mov	r20,r18
 4001f14:	002d883a 	mov	r22,zero
 4001f18:	002b883a 	mov	r21,zero
 4001f1c:	a1800017 	ldw	r6,0(r20)
 4001f20:	a1c00117 	ldw	r7,4(r20)
 4001f24:	99000017 	ldw	r4,0(r19)
 4001f28:	99400117 	ldw	r5,4(r19)
 4001f2c:	9cc00204 	addi	r19,r19,8
 4001f30:	a53ffe04 	addi	r20,r20,-8
 4001f34:	40053380 	call	4005338 <__muldf3>
 4001f38:	b009883a 	mov	r4,r22
 4001f3c:	a80b883a 	mov	r5,r21
 4001f40:	100d883a 	mov	r6,r2
 4001f44:	180f883a 	mov	r7,r3
 4001f48:	40049280 	call	4004928 <__adddf3>
 4001f4c:	102d883a 	mov	r22,r2
 4001f50:	182b883a 	mov	r21,r3
 4001f54:	9c3ff11e 	bne	r19,r16,4001f1c <__ram_exceptions_end+0xfbfc1cd4>
 4001f58:	8d800015 	stw	r22,0(r17)
 4001f5c:	8d400115 	stw	r21,4(r17)
 4001f60:	8c400204 	addi	r17,r17,8
 4001f64:	94800204 	addi	r18,r18,8
 4001f68:	8dffe61e 	bne	r17,r23,4001f04 <__ram_exceptions_end+0xfbfc1cbc>
 4001f6c:	dd809117 	ldw	r22,580(sp)
 4001f70:	00d00034 	movhi	r3,16384
 4001f74:	da009317 	ldw	r8,588(sp)
 4001f78:	18ffff84 	addi	r3,r3,-2
 4001f7c:	b0c7883a 	add	r3,r22,r3
 4001f80:	18c7883a 	add	r3,r3,r3
 4001f84:	402090fa 	slli	r16,r8,3
 4001f88:	18c7883a 	add	r3,r3,r3
 4001f8c:	da007804 	addi	r8,sp,480
 4001f90:	40d1883a 	add	r8,r8,r3
 4001f94:	b0bfffc4 	addi	r2,r22,-1
 4001f98:	da009615 	stw	r8,600(sp)
 4001f9c:	da008e17 	ldw	r8,568(sp)
 4001fa0:	1085883a 	add	r2,r2,r2
 4001fa4:	1085883a 	add	r2,r2,r2
 4001fa8:	19000104 	addi	r4,r3,4
 4001fac:	d885883a 	add	r2,sp,r2
 4001fb0:	4421883a 	add	r16,r8,r16
 4001fb4:	da007804 	addi	r8,sp,480
 4001fb8:	4111883a 	add	r8,r8,r4
 4001fbc:	10807804 	addi	r2,r2,480
 4001fc0:	da009715 	stw	r8,604(sp)
 4001fc4:	b025883a 	mov	r18,r22
 4001fc8:	d8809815 	stw	r2,608(sp)
 4001fcc:	dd809415 	stw	r22,592(sp)
 4001fd0:	900490fa 	slli	r2,r18,3
 4001fd4:	d885883a 	add	r2,sp,r2
 4001fd8:	17000017 	ldw	fp,0(r2)
 4001fdc:	15400117 	ldw	r21,4(r2)
 4001fe0:	04802b0e 	bge	zero,r18,4002090 <__kernel_rem_pio2+0x2a8>
 4001fe4:	00880034 	movhi	r2,8192
 4001fe8:	10bfffc4 	addi	r2,r2,-1
 4001fec:	90a9883a 	add	r20,r18,r2
 4001ff0:	a02890fa 	slli	r20,r20,3
 4001ff4:	dc407804 	addi	r17,sp,480
 4001ff8:	dcfffe04 	addi	r19,sp,-8
 4001ffc:	dd29883a 	add	r20,sp,r20
 4002000:	000d883a 	mov	r6,zero
 4002004:	01cf9c34 	movhi	r7,15984
 4002008:	e009883a 	mov	r4,fp
 400200c:	a80b883a 	mov	r5,r21
 4002010:	40053380 	call	4005338 <__muldf3>
 4002014:	180b883a 	mov	r5,r3
 4002018:	1009883a 	mov	r4,r2
 400201c:	400634c0 	call	400634c <__fixdfsi>
 4002020:	1009883a 	mov	r4,r2
 4002024:	40063cc0 	call	40063cc <__floatsidf>
 4002028:	000d883a 	mov	r6,zero
 400202c:	01d05c34 	movhi	r7,16752
 4002030:	1009883a 	mov	r4,r2
 4002034:	180b883a 	mov	r5,r3
 4002038:	102f883a 	mov	r23,r2
 400203c:	182d883a 	mov	r22,r3
 4002040:	40053380 	call	4005338 <__muldf3>
 4002044:	100d883a 	mov	r6,r2
 4002048:	180f883a 	mov	r7,r3
 400204c:	e009883a 	mov	r4,fp
 4002050:	a80b883a 	mov	r5,r21
 4002054:	4005a500 	call	4005a50 <__subdf3>
 4002058:	180b883a 	mov	r5,r3
 400205c:	1009883a 	mov	r4,r2
 4002060:	400634c0 	call	400634c <__fixdfsi>
 4002064:	a1800017 	ldw	r6,0(r20)
 4002068:	a1c00117 	ldw	r7,4(r20)
 400206c:	88800015 	stw	r2,0(r17)
 4002070:	b809883a 	mov	r4,r23
 4002074:	b00b883a 	mov	r5,r22
 4002078:	40049280 	call	4004928 <__adddf3>
 400207c:	a53ffe04 	addi	r20,r20,-8
 4002080:	1039883a 	mov	fp,r2
 4002084:	182b883a 	mov	r21,r3
 4002088:	8c400104 	addi	r17,r17,4
 400208c:	a4ffdc1e 	bne	r20,r19,4002000 <__ram_exceptions_end+0xfbfc1db8>
 4002090:	d9809017 	ldw	r6,576(sp)
 4002094:	a80b883a 	mov	r5,r21
 4002098:	e009883a 	mov	r4,fp
 400209c:	40030440 	call	4003044 <scalbn>
 40020a0:	000d883a 	mov	r6,zero
 40020a4:	01cff034 	movhi	r7,16320
 40020a8:	1009883a 	mov	r4,r2
 40020ac:	180b883a 	mov	r5,r3
 40020b0:	1027883a 	mov	r19,r2
 40020b4:	1823883a 	mov	r17,r3
 40020b8:	40053380 	call	4005338 <__muldf3>
 40020bc:	1009883a 	mov	r4,r2
 40020c0:	180b883a 	mov	r5,r3
 40020c4:	4002e580 	call	4002e58 <floor>
 40020c8:	000d883a 	mov	r6,zero
 40020cc:	01d00834 	movhi	r7,16416
 40020d0:	1009883a 	mov	r4,r2
 40020d4:	180b883a 	mov	r5,r3
 40020d8:	40053380 	call	4005338 <__muldf3>
 40020dc:	100d883a 	mov	r6,r2
 40020e0:	180f883a 	mov	r7,r3
 40020e4:	9809883a 	mov	r4,r19
 40020e8:	880b883a 	mov	r5,r17
 40020ec:	4005a500 	call	4005a50 <__subdf3>
 40020f0:	180b883a 	mov	r5,r3
 40020f4:	1009883a 	mov	r4,r2
 40020f8:	1827883a 	mov	r19,r3
 40020fc:	1029883a 	mov	r20,r2
 4002100:	400634c0 	call	400634c <__fixdfsi>
 4002104:	1009883a 	mov	r4,r2
 4002108:	1023883a 	mov	r17,r2
 400210c:	40063cc0 	call	40063cc <__floatsidf>
 4002110:	a009883a 	mov	r4,r20
 4002114:	100d883a 	mov	r6,r2
 4002118:	180f883a 	mov	r7,r3
 400211c:	980b883a 	mov	r5,r19
 4002120:	4005a500 	call	4005a50 <__subdf3>
 4002124:	d9009017 	ldw	r4,576(sp)
 4002128:	1013883a 	mov	r9,r2
 400212c:	102b883a 	mov	r21,r2
 4002130:	1811883a 	mov	r8,r3
 4002134:	0100b30e 	bge	zero,r4,4002404 <__kernel_rem_pio2+0x61c>
 4002138:	90bfffc4 	addi	r2,r18,-1
 400213c:	1085883a 	add	r2,r2,r2
 4002140:	1085883a 	add	r2,r2,r2
 4002144:	d885883a 	add	r2,sp,r2
 4002148:	10807804 	addi	r2,r2,480
 400214c:	d9809017 	ldw	r6,576(sp)
 4002150:	11400017 	ldw	r5,0(r2)
 4002154:	01000604 	movi	r4,24
 4002158:	2189c83a 	sub	r4,r4,r6
 400215c:	290dd83a 	sra	r6,r5,r4
 4002160:	d9c09017 	ldw	r7,576(sp)
 4002164:	04c005c4 	movi	r19,23
 4002168:	3108983a 	sll	r4,r6,r4
 400216c:	99e7c83a 	sub	r19,r19,r7
 4002170:	89a3883a 	add	r17,r17,r6
 4002174:	2909c83a 	sub	r4,r5,r4
 4002178:	24e7d83a 	sra	r19,r4,r19
 400217c:	11000015 	stw	r4,0(r2)
 4002180:	04c02a0e 	bge	zero,r19,400222c <__kernel_rem_pio2+0x444>
 4002184:	8c400044 	addi	r17,r17,1
 4002188:	0481570e 	bge	zero,r18,40026e8 <__kernel_rem_pio2+0x900>
 400218c:	02804034 	movhi	r10,256
 4002190:	52bfffc4 	addi	r10,r10,-1
 4002194:	d8807804 	addi	r2,sp,480
 4002198:	000b883a 	mov	r5,zero
 400219c:	0029883a 	mov	r20,zero
 40021a0:	01c04034 	movhi	r7,256
 40021a4:	00000706 	br	40021c4 <__kernel_rem_pio2+0x3dc>
 40021a8:	390dc83a 	sub	r6,r7,r4
 40021ac:	20000226 	beq	r4,zero,40021b8 <__kernel_rem_pio2+0x3d0>
 40021b0:	11800015 	stw	r6,0(r2)
 40021b4:	05000044 	movi	r20,1
 40021b8:	29400044 	addi	r5,r5,1
 40021bc:	10800104 	addi	r2,r2,4
 40021c0:	2c80080e 	bge	r5,r18,40021e4 <__kernel_rem_pio2+0x3fc>
 40021c4:	11000017 	ldw	r4,0(r2)
 40021c8:	a03ff726 	beq	r20,zero,40021a8 <__ram_exceptions_end+0xfbfc1f60>
 40021cc:	5109c83a 	sub	r4,r10,r4
 40021d0:	11000015 	stw	r4,0(r2)
 40021d4:	29400044 	addi	r5,r5,1
 40021d8:	05000044 	movi	r20,1
 40021dc:	10800104 	addi	r2,r2,4
 40021e0:	2cbff816 	blt	r5,r18,40021c4 <__ram_exceptions_end+0xfbfc1f7c>
 40021e4:	d9009017 	ldw	r4,576(sp)
 40021e8:	01000e0e 	bge	zero,r4,4002224 <__kernel_rem_pio2+0x43c>
 40021ec:	00800044 	movi	r2,1
 40021f0:	20808d26 	beq	r4,r2,4002428 <__kernel_rem_pio2+0x640>
 40021f4:	00800084 	movi	r2,2
 40021f8:	20800a1e 	bne	r4,r2,4002224 <__kernel_rem_pio2+0x43c>
 40021fc:	90bfffc4 	addi	r2,r18,-1
 4002200:	1085883a 	add	r2,r2,r2
 4002204:	1085883a 	add	r2,r2,r2
 4002208:	d885883a 	add	r2,sp,r2
 400220c:	10807804 	addi	r2,r2,480
 4002210:	11400017 	ldw	r5,0(r2)
 4002214:	01001034 	movhi	r4,64
 4002218:	213fffc4 	addi	r4,r4,-1
 400221c:	2908703a 	and	r4,r5,r4
 4002220:	11000015 	stw	r4,0(r2)
 4002224:	00800084 	movi	r2,2
 4002228:	98805d26 	beq	r19,r2,40023a0 <__kernel_rem_pio2+0x5b8>
 400222c:	400b883a 	mov	r5,r8
 4002230:	000d883a 	mov	r6,zero
 4002234:	000f883a 	mov	r7,zero
 4002238:	a809883a 	mov	r4,r21
 400223c:	da009b15 	stw	r8,620(sp)
 4002240:	40051d40 	call	40051d4 <__eqdf2>
 4002244:	da009b17 	ldw	r8,620(sp)
 4002248:	10012b1e 	bne	r2,zero,40026f8 <__kernel_rem_pio2+0x910>
 400224c:	da009417 	ldw	r8,592(sp)
 4002250:	917fffc4 	addi	r5,r18,-1
 4002254:	2a000e16 	blt	r5,r8,4002290 <__kernel_rem_pio2+0x4a8>
 4002258:	00900034 	movhi	r2,16384
 400225c:	10bfffc4 	addi	r2,r2,-1
 4002260:	9085883a 	add	r2,r18,r2
 4002264:	1085883a 	add	r2,r2,r2
 4002268:	d9809717 	ldw	r6,604(sp)
 400226c:	1085883a 	add	r2,r2,r2
 4002270:	d9007804 	addi	r4,sp,480
 4002274:	0007883a 	mov	r3,zero
 4002278:	2085883a 	add	r2,r4,r2
 400227c:	11000017 	ldw	r4,0(r2)
 4002280:	10bfff04 	addi	r2,r2,-4
 4002284:	1906b03a 	or	r3,r3,r4
 4002288:	11bffc1e 	bne	r2,r6,400227c <__ram_exceptions_end+0xfbfc2034>
 400228c:	1800821e 	bne	r3,zero,4002498 <__kernel_rem_pio2+0x6b0>
 4002290:	da009817 	ldw	r8,608(sp)
 4002294:	40800017 	ldw	r2,0(r8)
 4002298:	1001151e 	bne	r2,zero,40026f0 <__kernel_rem_pio2+0x908>
 400229c:	d8809617 	ldw	r2,600(sp)
 40022a0:	05000044 	movi	r20,1
 40022a4:	10bfff04 	addi	r2,r2,-4
 40022a8:	10c00117 	ldw	r3,4(r2)
 40022ac:	a5000044 	addi	r20,r20,1
 40022b0:	183ffc26 	beq	r3,zero,40022a4 <__ram_exceptions_end+0xfbfc205c>
 40022b4:	9529883a 	add	r20,r18,r20
 40022b8:	90800044 	addi	r2,r18,1
 40022bc:	dd009115 	stw	r20,580(sp)
 40022c0:	a0803216 	blt	r20,r2,400238c <__kernel_rem_pio2+0x5a4>
 40022c4:	da009317 	ldw	r8,588(sp)
 40022c8:	d8c09117 	ldw	r3,580(sp)
 40022cc:	44a3883a 	add	r17,r8,r18
 40022d0:	da009217 	ldw	r8,584(sp)
 40022d4:	882290fa 	slli	r17,r17,3
 40022d8:	40a5883a 	add	r18,r8,r2
 40022dc:	da009517 	ldw	r8,596(sp)
 40022e0:	100490fa 	slli	r2,r2,3
 40022e4:	94a5883a 	add	r18,r18,r18
 40022e8:	40eb883a 	add	r21,r8,r3
 40022ec:	da00a717 	ldw	r8,668(sp)
 40022f0:	ad6b883a 	add	r21,r21,r21
 40022f4:	94a5883a 	add	r18,r18,r18
 40022f8:	ad6b883a 	add	r21,r21,r21
 40022fc:	d8c05004 	addi	r3,sp,320
 4002300:	44a5883a 	add	r18,r8,r18
 4002304:	1c63883a 	add	r17,r3,r17
 4002308:	d8a7883a 	add	r19,sp,r2
 400230c:	456b883a 	add	r21,r8,r21
 4002310:	91000017 	ldw	r4,0(r18)
 4002314:	40063cc0 	call	40063cc <__floatsidf>
 4002318:	da008d17 	ldw	r8,564(sp)
 400231c:	88800015 	stw	r2,0(r17)
 4002320:	88c00115 	stw	r3,4(r17)
 4002324:	40001b16 	blt	r8,zero,4002394 <__kernel_rem_pio2+0x5ac>
 4002328:	dd008e17 	ldw	r20,568(sp)
 400232c:	882d883a 	mov	r22,r17
 4002330:	002f883a 	mov	r23,zero
 4002334:	0039883a 	mov	fp,zero
 4002338:	b1800017 	ldw	r6,0(r22)
 400233c:	b1c00117 	ldw	r7,4(r22)
 4002340:	a1000017 	ldw	r4,0(r20)
 4002344:	a1400117 	ldw	r5,4(r20)
 4002348:	a5000204 	addi	r20,r20,8
 400234c:	b5bffe04 	addi	r22,r22,-8
 4002350:	40053380 	call	4005338 <__muldf3>
 4002354:	b809883a 	mov	r4,r23
 4002358:	e00b883a 	mov	r5,fp
 400235c:	100d883a 	mov	r6,r2
 4002360:	180f883a 	mov	r7,r3
 4002364:	40049280 	call	4004928 <__adddf3>
 4002368:	102f883a 	mov	r23,r2
 400236c:	1839883a 	mov	fp,r3
 4002370:	a43ff11e 	bne	r20,r16,4002338 <__ram_exceptions_end+0xfbfc20f0>
 4002374:	9dc00015 	stw	r23,0(r19)
 4002378:	9f000115 	stw	fp,4(r19)
 400237c:	94800104 	addi	r18,r18,4
 4002380:	8c400204 	addi	r17,r17,8
 4002384:	9cc00204 	addi	r19,r19,8
 4002388:	957fe11e 	bne	r18,r21,4002310 <__ram_exceptions_end+0xfbfc20c8>
 400238c:	dc809117 	ldw	r18,580(sp)
 4002390:	003f0f06 	br	4001fd0 <__ram_exceptions_end+0xfbfc1d88>
 4002394:	002f883a 	mov	r23,zero
 4002398:	0039883a 	mov	fp,zero
 400239c:	003ff506 	br	4002374 <__ram_exceptions_end+0xfbfc212c>
 40023a0:	480d883a 	mov	r6,r9
 40023a4:	180f883a 	mov	r7,r3
 40023a8:	0009883a 	mov	r4,zero
 40023ac:	014ffc34 	movhi	r5,16368
 40023b0:	4005a500 	call	4005a50 <__subdf3>
 40023b4:	102b883a 	mov	r21,r2
 40023b8:	1811883a 	mov	r8,r3
 40023bc:	a03f9b26 	beq	r20,zero,400222c <__ram_exceptions_end+0xfbfc1fe4>
 40023c0:	d9809017 	ldw	r6,576(sp)
 40023c4:	0009883a 	mov	r4,zero
 40023c8:	014ffc34 	movhi	r5,16368
 40023cc:	d8c09b15 	stw	r3,620(sp)
 40023d0:	40030440 	call	4003044 <scalbn>
 40023d4:	da009b17 	ldw	r8,620(sp)
 40023d8:	a809883a 	mov	r4,r21
 40023dc:	100d883a 	mov	r6,r2
 40023e0:	400b883a 	mov	r5,r8
 40023e4:	180f883a 	mov	r7,r3
 40023e8:	4005a500 	call	4005a50 <__subdf3>
 40023ec:	102b883a 	mov	r21,r2
 40023f0:	1811883a 	mov	r8,r3
 40023f4:	003f8d06 	br	400222c <__ram_exceptions_end+0xfbfc1fe4>
 40023f8:	0005883a 	mov	r2,zero
 40023fc:	0007883a 	mov	r3,zero
 4002400:	003eac06 	br	4001eb4 <__ram_exceptions_end+0xfbfc1c6c>
 4002404:	d8809017 	ldw	r2,576(sp)
 4002408:	1000121e 	bne	r2,zero,4002454 <__kernel_rem_pio2+0x66c>
 400240c:	90bfffc4 	addi	r2,r18,-1
 4002410:	1085883a 	add	r2,r2,r2
 4002414:	1085883a 	add	r2,r2,r2
 4002418:	d885883a 	add	r2,sp,r2
 400241c:	14c07817 	ldw	r19,480(r2)
 4002420:	9827d5fa 	srai	r19,r19,23
 4002424:	003f5606 	br	4002180 <__ram_exceptions_end+0xfbfc1f38>
 4002428:	90bfffc4 	addi	r2,r18,-1
 400242c:	1085883a 	add	r2,r2,r2
 4002430:	1085883a 	add	r2,r2,r2
 4002434:	d885883a 	add	r2,sp,r2
 4002438:	10807804 	addi	r2,r2,480
 400243c:	11000017 	ldw	r4,0(r2)
 4002440:	01402034 	movhi	r5,128
 4002444:	297fffc4 	addi	r5,r5,-1
 4002448:	2148703a 	and	r4,r4,r5
 400244c:	11000015 	stw	r4,0(r2)
 4002450:	003f7406 	br	4002224 <__ram_exceptions_end+0xfbfc1fdc>
 4002454:	4809883a 	mov	r4,r9
 4002458:	180b883a 	mov	r5,r3
 400245c:	000d883a 	mov	r6,zero
 4002460:	01cff834 	movhi	r7,16352
 4002464:	d8c09a15 	stw	r3,616(sp)
 4002468:	d8c09b15 	stw	r3,620(sp)
 400246c:	da409915 	stw	r9,612(sp)
 4002470:	400525c0 	call	400525c <__gedf2>
 4002474:	d8c09a17 	ldw	r3,616(sp)
 4002478:	da009b17 	ldw	r8,620(sp)
 400247c:	da409917 	ldw	r9,612(sp)
 4002480:	1000920e 	bge	r2,zero,40026cc <__kernel_rem_pio2+0x8e4>
 4002484:	0027883a 	mov	r19,zero
 4002488:	003f6806 	br	400222c <__ram_exceptions_end+0xfbfc1fe4>
 400248c:	002d883a 	mov	r22,zero
 4002490:	002b883a 	mov	r21,zero
 4002494:	003eb006 	br	4001f58 <__ram_exceptions_end+0xfbfc1d10>
 4002498:	2945883a 	add	r2,r5,r5
 400249c:	da009017 	ldw	r8,576(sp)
 40024a0:	1085883a 	add	r2,r2,r2
 40024a4:	d885883a 	add	r2,sp,r2
 40024a8:	10807817 	ldw	r2,480(r2)
 40024ac:	423ffa04 	addi	r8,r8,-24
 40024b0:	dc409115 	stw	r17,580(sp)
 40024b4:	dcc08d15 	stw	r19,564(sp)
 40024b8:	da009015 	stw	r8,576(sp)
 40024bc:	dd809417 	ldw	r22,592(sp)
 40024c0:	2823883a 	mov	r17,r5
 40024c4:	10000e1e 	bne	r2,zero,4002500 <__kernel_rem_pio2+0x718>
 40024c8:	00900034 	movhi	r2,16384
 40024cc:	10bfffc4 	addi	r2,r2,-1
 40024d0:	2885883a 	add	r2,r5,r2
 40024d4:	1085883a 	add	r2,r2,r2
 40024d8:	d8c07804 	addi	r3,sp,480
 40024dc:	1085883a 	add	r2,r2,r2
 40024e0:	1885883a 	add	r2,r3,r2
 40024e4:	4007883a 	mov	r3,r8
 40024e8:	10bfff04 	addi	r2,r2,-4
 40024ec:	11000117 	ldw	r4,4(r2)
 40024f0:	8c7fffc4 	addi	r17,r17,-1
 40024f4:	18fffa04 	addi	r3,r3,-24
 40024f8:	203ffb26 	beq	r4,zero,40024e8 <__ram_exceptions_end+0xfbfc22a0>
 40024fc:	d8c09015 	stw	r3,576(sp)
 4002500:	d9809017 	ldw	r6,576(sp)
 4002504:	0009883a 	mov	r4,zero
 4002508:	014ffc34 	movhi	r5,16368
 400250c:	40030440 	call	4003044 <scalbn>
 4002510:	1029883a 	mov	r20,r2
 4002514:	182b883a 	mov	r21,r3
 4002518:	88018416 	blt	r17,zero,4002b2c <__kernel_rem_pio2+0xd44>
 400251c:	881090fa 	slli	r8,r17,3
 4002520:	d8c07804 	addi	r3,sp,480
 4002524:	da008e15 	stw	r8,568(sp)
 4002528:	d8808e17 	ldw	r2,568(sp)
 400252c:	8c51883a 	add	r8,r17,r17
 4002530:	4211883a 	add	r8,r8,r8
 4002534:	d8a1883a 	add	r16,sp,r2
 4002538:	1a25883a 	add	r18,r3,r8
 400253c:	da3ffe04 	addi	r8,sp,-8
 4002540:	da008c15 	stw	r8,560(sp)
 4002544:	8039883a 	mov	fp,r16
 4002548:	91000017 	ldw	r4,0(r18)
 400254c:	e73ffe04 	addi	fp,fp,-8
 4002550:	94bfff04 	addi	r18,r18,-4
 4002554:	40063cc0 	call	40063cc <__floatsidf>
 4002558:	a00d883a 	mov	r6,r20
 400255c:	a80f883a 	mov	r7,r21
 4002560:	1009883a 	mov	r4,r2
 4002564:	180b883a 	mov	r5,r3
 4002568:	40053380 	call	4005338 <__muldf3>
 400256c:	a009883a 	mov	r4,r20
 4002570:	a80b883a 	mov	r5,r21
 4002574:	e0800215 	stw	r2,8(fp)
 4002578:	e0c00315 	stw	r3,12(fp)
 400257c:	000d883a 	mov	r6,zero
 4002580:	01cf9c34 	movhi	r7,15984
 4002584:	40053380 	call	4005338 <__muldf3>
 4002588:	da008c17 	ldw	r8,560(sp)
 400258c:	1029883a 	mov	r20,r2
 4002590:	182b883a 	mov	r21,r3
 4002594:	e23fec1e 	bne	fp,r8,4002548 <__ram_exceptions_end+0xfbfc2300>
 4002598:	0029883a 	mov	r20,zero
 400259c:	b0004f16 	blt	r22,zero,40026dc <__kernel_rem_pio2+0x8f4>
 40025a0:	05410074 	movhi	r21,1025
 40025a4:	014ffe74 	movhi	r5,16377
 40025a8:	ad678404 	addi	r21,r21,-25072
 40025ac:	8027883a 	mov	r19,r16
 40025b0:	01100034 	movhi	r4,16384
 40025b4:	29487ec4 	addi	r5,r5,8699
 40025b8:	0039883a 	mov	fp,zero
 40025bc:	002f883a 	mov	r23,zero
 40025c0:	0025883a 	mov	r18,zero
 40025c4:	00000506 	br	40025dc <__kernel_rem_pio2+0x7f4>
 40025c8:	9cc00204 	addi	r19,r19,8
 40025cc:	a4800f16 	blt	r20,r18,400260c <__kernel_rem_pio2+0x824>
 40025d0:	a9000017 	ldw	r4,0(r21)
 40025d4:	a9400117 	ldw	r5,4(r21)
 40025d8:	ad400204 	addi	r21,r21,8
 40025dc:	99800017 	ldw	r6,0(r19)
 40025e0:	99c00117 	ldw	r7,4(r19)
 40025e4:	94800044 	addi	r18,r18,1
 40025e8:	40053380 	call	4005338 <__muldf3>
 40025ec:	e009883a 	mov	r4,fp
 40025f0:	b80b883a 	mov	r5,r23
 40025f4:	100d883a 	mov	r6,r2
 40025f8:	180f883a 	mov	r7,r3
 40025fc:	40049280 	call	4004928 <__adddf3>
 4002600:	1039883a 	mov	fp,r2
 4002604:	182f883a 	mov	r23,r3
 4002608:	b4bfef0e 	bge	r22,r18,40025c8 <__ram_exceptions_end+0xfbfc2380>
 400260c:	a00490fa 	slli	r2,r20,3
 4002610:	da008c17 	ldw	r8,560(sp)
 4002614:	843ffe04 	addi	r16,r16,-8
 4002618:	d885883a 	add	r2,sp,r2
 400261c:	10802804 	addi	r2,r2,160
 4002620:	17000015 	stw	fp,0(r2)
 4002624:	15c00115 	stw	r23,4(r2)
 4002628:	a5000044 	addi	r20,r20,1
 400262c:	823fdb1e 	bne	r16,r8,400259c <__ram_exceptions_end+0xfbfc2354>
 4002630:	da00a617 	ldw	r8,664(sp)
 4002634:	00800084 	movi	r2,2
 4002638:	12006616 	blt	r2,r8,40027d4 <__kernel_rem_pio2+0x9ec>
 400263c:	0200de16 	blt	zero,r8,40029b8 <__kernel_rem_pio2+0xbd0>
 4002640:	4000141e 	bne	r8,zero,4002694 <__kernel_rem_pio2+0x8ac>
 4002644:	da008e17 	ldw	r8,568(sp)
 4002648:	d8802804 	addi	r2,sp,160
 400264c:	0007883a 	mov	r3,zero
 4002650:	1225883a 	add	r18,r2,r8
 4002654:	043fffc4 	movi	r16,-1
 4002658:	0005883a 	mov	r2,zero
 400265c:	91800017 	ldw	r6,0(r18)
 4002660:	91c00117 	ldw	r7,4(r18)
 4002664:	1009883a 	mov	r4,r2
 4002668:	180b883a 	mov	r5,r3
 400266c:	8c7fffc4 	addi	r17,r17,-1
 4002670:	40049280 	call	4004928 <__adddf3>
 4002674:	94bffe04 	addi	r18,r18,-8
 4002678:	8c3ff81e 	bne	r17,r16,400265c <__ram_exceptions_end+0xfbfc2414>
 400267c:	da008d17 	ldw	r8,564(sp)
 4002680:	40000126 	beq	r8,zero,4002688 <__kernel_rem_pio2+0x8a0>
 4002684:	18e0003c 	xorhi	r3,r3,32768
 4002688:	da008f17 	ldw	r8,572(sp)
 400268c:	40800015 	stw	r2,0(r8)
 4002690:	40c00115 	stw	r3,4(r8)
 4002694:	da009117 	ldw	r8,580(sp)
 4002698:	408001cc 	andi	r2,r8,7
 400269c:	dfc0a517 	ldw	ra,660(sp)
 40026a0:	df00a417 	ldw	fp,656(sp)
 40026a4:	ddc0a317 	ldw	r23,652(sp)
 40026a8:	dd80a217 	ldw	r22,648(sp)
 40026ac:	dd40a117 	ldw	r21,644(sp)
 40026b0:	dd00a017 	ldw	r20,640(sp)
 40026b4:	dcc09f17 	ldw	r19,636(sp)
 40026b8:	dc809e17 	ldw	r18,632(sp)
 40026bc:	dc409d17 	ldw	r17,628(sp)
 40026c0:	dc009c17 	ldw	r16,624(sp)
 40026c4:	dec0a604 	addi	sp,sp,664
 40026c8:	f800283a 	ret
 40026cc:	8c400044 	addi	r17,r17,1
 40026d0:	04810d0e 	bge	zero,r18,4002b08 <__kernel_rem_pio2+0xd20>
 40026d4:	04c00084 	movi	r19,2
 40026d8:	003eac06 	br	400218c <__ram_exceptions_end+0xfbfc1f44>
 40026dc:	0039883a 	mov	fp,zero
 40026e0:	002f883a 	mov	r23,zero
 40026e4:	003fc906 	br	400260c <__ram_exceptions_end+0xfbfc23c4>
 40026e8:	0029883a 	mov	r20,zero
 40026ec:	003ebd06 	br	40021e4 <__ram_exceptions_end+0xfbfc1f9c>
 40026f0:	05000044 	movi	r20,1
 40026f4:	003eef06 	br	40022b4 <__ram_exceptions_end+0xfbfc206c>
 40026f8:	4029883a 	mov	r20,r8
 40026fc:	da009017 	ldw	r8,576(sp)
 4002700:	a809883a 	mov	r4,r21
 4002704:	a00b883a 	mov	r5,r20
 4002708:	020dc83a 	sub	r6,zero,r8
 400270c:	dc409115 	stw	r17,580(sp)
 4002710:	dd809417 	ldw	r22,592(sp)
 4002714:	dcc08d15 	stw	r19,564(sp)
 4002718:	40030440 	call	4003044 <scalbn>
 400271c:	000d883a 	mov	r6,zero
 4002720:	01d05c34 	movhi	r7,16752
 4002724:	1009883a 	mov	r4,r2
 4002728:	180b883a 	mov	r5,r3
 400272c:	102b883a 	mov	r21,r2
 4002730:	1823883a 	mov	r17,r3
 4002734:	400525c0 	call	400525c <__gedf2>
 4002738:	1000e916 	blt	r2,zero,4002ae0 <__kernel_rem_pio2+0xcf8>
 400273c:	000d883a 	mov	r6,zero
 4002740:	01cf9c34 	movhi	r7,15984
 4002744:	880b883a 	mov	r5,r17
 4002748:	a809883a 	mov	r4,r21
 400274c:	40053380 	call	4005338 <__muldf3>
 4002750:	180b883a 	mov	r5,r3
 4002754:	1009883a 	mov	r4,r2
 4002758:	400634c0 	call	400634c <__fixdfsi>
 400275c:	1029883a 	mov	r20,r2
 4002760:	9485883a 	add	r2,r18,r18
 4002764:	1085883a 	add	r2,r2,r2
 4002768:	a009883a 	mov	r4,r20
 400276c:	d8a1883a 	add	r16,sp,r2
 4002770:	40063cc0 	call	40063cc <__floatsidf>
 4002774:	000d883a 	mov	r6,zero
 4002778:	01d05c34 	movhi	r7,16752
 400277c:	1009883a 	mov	r4,r2
 4002780:	180b883a 	mov	r5,r3
 4002784:	40053380 	call	4005338 <__muldf3>
 4002788:	880b883a 	mov	r5,r17
 400278c:	100d883a 	mov	r6,r2
 4002790:	180f883a 	mov	r7,r3
 4002794:	a809883a 	mov	r4,r21
 4002798:	4005a500 	call	4005a50 <__subdf3>
 400279c:	180b883a 	mov	r5,r3
 40027a0:	1009883a 	mov	r4,r2
 40027a4:	400634c0 	call	400634c <__fixdfsi>
 40027a8:	da009017 	ldw	r8,576(sp)
 40027ac:	94400044 	addi	r17,r18,1
 40027b0:	8c47883a 	add	r3,r17,r17
 40027b4:	84007804 	addi	r16,r16,480
 40027b8:	18c7883a 	add	r3,r3,r3
 40027bc:	80800015 	stw	r2,0(r16)
 40027c0:	d8c7883a 	add	r3,sp,r3
 40027c4:	42000604 	addi	r8,r8,24
 40027c8:	da009015 	stw	r8,576(sp)
 40027cc:	1d007815 	stw	r20,480(r3)
 40027d0:	003f4b06 	br	4002500 <__ram_exceptions_end+0xfbfc22b8>
 40027d4:	da00a617 	ldw	r8,664(sp)
 40027d8:	008000c4 	movi	r2,3
 40027dc:	40bfad1e 	bne	r8,r2,4002694 <__ram_exceptions_end+0xfbfc244c>
 40027e0:	0440bc0e 	bge	zero,r17,4002ad4 <__kernel_rem_pio2+0xcec>
 40027e4:	da008e17 	ldw	r8,568(sp)
 40027e8:	882090fa 	slli	r16,r17,3
 40027ec:	dd402804 	addi	r21,sp,160
 40027f0:	da05883a 	add	r2,sp,r8
 40027f4:	10802804 	addi	r2,r2,160
 40027f8:	15c00017 	ldw	r23,0(r2)
 40027fc:	15800117 	ldw	r22,4(r2)
 4002800:	8029883a 	mov	r20,r16
 4002804:	843ffe04 	addi	r16,r16,-8
 4002808:	ac21883a 	add	r16,r21,r16
 400280c:	ad29883a 	add	r20,r21,r20
 4002810:	dac02604 	addi	r11,sp,152
 4002814:	8811883a 	mov	r8,r17
 4002818:	84400017 	ldw	r17,0(r16)
 400281c:	87000117 	ldw	fp,4(r16)
 4002820:	b80d883a 	mov	r6,r23
 4002824:	b00f883a 	mov	r7,r22
 4002828:	8809883a 	mov	r4,r17
 400282c:	e00b883a 	mov	r5,fp
 4002830:	da009b15 	stw	r8,620(sp)
 4002834:	dac09915 	stw	r11,612(sp)
 4002838:	40049280 	call	4004928 <__adddf3>
 400283c:	100d883a 	mov	r6,r2
 4002840:	180f883a 	mov	r7,r3
 4002844:	8809883a 	mov	r4,r17
 4002848:	e00b883a 	mov	r5,fp
 400284c:	1027883a 	mov	r19,r2
 4002850:	1825883a 	mov	r18,r3
 4002854:	4005a500 	call	4005a50 <__subdf3>
 4002858:	b80d883a 	mov	r6,r23
 400285c:	b00f883a 	mov	r7,r22
 4002860:	1009883a 	mov	r4,r2
 4002864:	180b883a 	mov	r5,r3
 4002868:	40049280 	call	4004928 <__adddf3>
 400286c:	dac09917 	ldw	r11,612(sp)
 4002870:	a0800015 	stw	r2,0(r20)
 4002874:	a0c00115 	stw	r3,4(r20)
 4002878:	84c00015 	stw	r19,0(r16)
 400287c:	84800115 	stw	r18,4(r16)
 4002880:	843ffe04 	addi	r16,r16,-8
 4002884:	a53ffe04 	addi	r20,r20,-8
 4002888:	982f883a 	mov	r23,r19
 400288c:	902d883a 	mov	r22,r18
 4002890:	da009b17 	ldw	r8,620(sp)
 4002894:	5c3fe01e 	bne	r11,r16,4002818 <__ram_exceptions_end+0xfbfc25d0>
 4002898:	00800044 	movi	r2,1
 400289c:	12008d0e 	bge	r2,r8,4002ad4 <__kernel_rem_pio2+0xcec>
 40028a0:	402090fa 	slli	r16,r8,3
 40028a4:	da008e17 	ldw	r8,568(sp)
 40028a8:	8023883a 	mov	r17,r16
 40028ac:	da05883a 	add	r2,sp,r8
 40028b0:	10802804 	addi	r2,r2,160
 40028b4:	15800017 	ldw	r22,0(r2)
 40028b8:	15000117 	ldw	r20,4(r2)
 40028bc:	ac63883a 	add	r17,r21,r17
 40028c0:	843ffe04 	addi	r16,r16,-8
 40028c4:	ac21883a 	add	r16,r21,r16
 40028c8:	8825883a 	mov	r18,r17
 40028cc:	8811883a 	mov	r8,r17
 40028d0:	84400017 	ldw	r17,0(r16)
 40028d4:	87000117 	ldw	fp,4(r16)
 40028d8:	b009883a 	mov	r4,r22
 40028dc:	a00b883a 	mov	r5,r20
 40028e0:	880d883a 	mov	r6,r17
 40028e4:	e00f883a 	mov	r7,fp
 40028e8:	da009b15 	stw	r8,620(sp)
 40028ec:	40049280 	call	4004928 <__adddf3>
 40028f0:	100d883a 	mov	r6,r2
 40028f4:	180f883a 	mov	r7,r3
 40028f8:	8809883a 	mov	r4,r17
 40028fc:	e00b883a 	mov	r5,fp
 4002900:	102f883a 	mov	r23,r2
 4002904:	1827883a 	mov	r19,r3
 4002908:	4005a500 	call	4005a50 <__subdf3>
 400290c:	b00d883a 	mov	r6,r22
 4002910:	a00f883a 	mov	r7,r20
 4002914:	1009883a 	mov	r4,r2
 4002918:	180b883a 	mov	r5,r3
 400291c:	40049280 	call	4004928 <__adddf3>
 4002920:	90800015 	stw	r2,0(r18)
 4002924:	90c00115 	stw	r3,4(r18)
 4002928:	85c00015 	stw	r23,0(r16)
 400292c:	84c00115 	stw	r19,4(r16)
 4002930:	843ffe04 	addi	r16,r16,-8
 4002934:	94bffe04 	addi	r18,r18,-8
 4002938:	b82d883a 	mov	r22,r23
 400293c:	9829883a 	mov	r20,r19
 4002940:	da009b17 	ldw	r8,620(sp)
 4002944:	ac3fe21e 	bne	r21,r16,40028d0 <__ram_exceptions_end+0xfbfc2688>
 4002948:	4023883a 	mov	r17,r8
 400294c:	dc002a04 	addi	r16,sp,168
 4002950:	0005883a 	mov	r2,zero
 4002954:	0007883a 	mov	r3,zero
 4002958:	89800017 	ldw	r6,0(r17)
 400295c:	89c00117 	ldw	r7,4(r17)
 4002960:	1009883a 	mov	r4,r2
 4002964:	8c7ffe04 	addi	r17,r17,-8
 4002968:	180b883a 	mov	r5,r3
 400296c:	40049280 	call	4004928 <__adddf3>
 4002970:	847ff91e 	bne	r16,r17,4002958 <__ram_exceptions_end+0xfbfc2710>
 4002974:	da008d17 	ldw	r8,564(sp)
 4002978:	40004726 	beq	r8,zero,4002a98 <__kernel_rem_pio2+0xcb0>
 400297c:	d9002b17 	ldw	r4,172(sp)
 4002980:	d9402917 	ldw	r5,164(sp)
 4002984:	d9802a17 	ldw	r6,168(sp)
 4002988:	da008f17 	ldw	r8,572(sp)
 400298c:	d9c02817 	ldw	r7,160(sp)
 4002990:	2960003c 	xorhi	r5,r5,32768
 4002994:	2120003c 	xorhi	r4,r4,32768
 4002998:	18e0003c 	xorhi	r3,r3,32768
 400299c:	41c00015 	stw	r7,0(r8)
 40029a0:	41400115 	stw	r5,4(r8)
 40029a4:	41800215 	stw	r6,8(r8)
 40029a8:	41000315 	stw	r4,12(r8)
 40029ac:	40800415 	stw	r2,16(r8)
 40029b0:	40c00515 	stw	r3,20(r8)
 40029b4:	003f3706 	br	4002694 <__ram_exceptions_end+0xfbfc244c>
 40029b8:	da008e17 	ldw	r8,568(sp)
 40029bc:	d8802804 	addi	r2,sp,160
 40029c0:	dc002604 	addi	r16,sp,152
 40029c4:	1225883a 	add	r18,r2,r8
 40029c8:	0007883a 	mov	r3,zero
 40029cc:	0005883a 	mov	r2,zero
 40029d0:	91800017 	ldw	r6,0(r18)
 40029d4:	91c00117 	ldw	r7,4(r18)
 40029d8:	1009883a 	mov	r4,r2
 40029dc:	94bffe04 	addi	r18,r18,-8
 40029e0:	180b883a 	mov	r5,r3
 40029e4:	40049280 	call	4004928 <__adddf3>
 40029e8:	943ff91e 	bne	r18,r16,40029d0 <__ram_exceptions_end+0xfbfc2788>
 40029ec:	da008d17 	ldw	r8,564(sp)
 40029f0:	d9002817 	ldw	r4,160(sp)
 40029f4:	d9402917 	ldw	r5,164(sp)
 40029f8:	40001a26 	beq	r8,zero,4002a64 <__kernel_rem_pio2+0xc7c>
 40029fc:	da008f17 	ldw	r8,572(sp)
 4002a00:	19a0003c 	xorhi	r6,r3,32768
 4002a04:	180f883a 	mov	r7,r3
 4002a08:	41800115 	stw	r6,4(r8)
 4002a0c:	40800015 	stw	r2,0(r8)
 4002a10:	100d883a 	mov	r6,r2
 4002a14:	4005a500 	call	4005a50 <__subdf3>
 4002a18:	04400c0e 	bge	zero,r17,4002a4c <__kernel_rem_pio2+0xc64>
 4002a1c:	dc002a04 	addi	r16,sp,168
 4002a20:	04800044 	movi	r18,1
 4002a24:	81800017 	ldw	r6,0(r16)
 4002a28:	81c00117 	ldw	r7,4(r16)
 4002a2c:	1009883a 	mov	r4,r2
 4002a30:	180b883a 	mov	r5,r3
 4002a34:	94800044 	addi	r18,r18,1
 4002a38:	40049280 	call	4004928 <__adddf3>
 4002a3c:	84000204 	addi	r16,r16,8
 4002a40:	8cbff80e 	bge	r17,r18,4002a24 <__ram_exceptions_end+0xfbfc27dc>
 4002a44:	da008d17 	ldw	r8,564(sp)
 4002a48:	40004226 	beq	r8,zero,4002b54 <__kernel_rem_pio2+0xd6c>
 4002a4c:	da008f17 	ldw	r8,572(sp)
 4002a50:	1009883a 	mov	r4,r2
 4002a54:	18a0003c 	xorhi	r2,r3,32768
 4002a58:	41000215 	stw	r4,8(r8)
 4002a5c:	40800315 	stw	r2,12(r8)
 4002a60:	003f0c06 	br	4002694 <__ram_exceptions_end+0xfbfc244c>
 4002a64:	da008f17 	ldw	r8,572(sp)
 4002a68:	100d883a 	mov	r6,r2
 4002a6c:	180f883a 	mov	r7,r3
 4002a70:	40800015 	stw	r2,0(r8)
 4002a74:	40c00115 	stw	r3,4(r8)
 4002a78:	4005a500 	call	4005a50 <__subdf3>
 4002a7c:	047fe716 	blt	zero,r17,4002a1c <__ram_exceptions_end+0xfbfc27d4>
 4002a80:	da008f17 	ldw	r8,572(sp)
 4002a84:	1009883a 	mov	r4,r2
 4002a88:	1805883a 	mov	r2,r3
 4002a8c:	41000215 	stw	r4,8(r8)
 4002a90:	40800315 	stw	r2,12(r8)
 4002a94:	003eff06 	br	4002694 <__ram_exceptions_end+0xfbfc244c>
 4002a98:	da008f17 	ldw	r8,572(sp)
 4002a9c:	d9802817 	ldw	r6,160(sp)
 4002aa0:	d9402a17 	ldw	r5,168(sp)
 4002aa4:	d9002b17 	ldw	r4,172(sp)
 4002aa8:	41800015 	stw	r6,0(r8)
 4002aac:	d9802917 	ldw	r6,164(sp)
 4002ab0:	41400215 	stw	r5,8(r8)
 4002ab4:	41000315 	stw	r4,12(r8)
 4002ab8:	41800115 	stw	r6,4(r8)
 4002abc:	40800415 	stw	r2,16(r8)
 4002ac0:	40c00515 	stw	r3,20(r8)
 4002ac4:	003ef306 	br	4002694 <__ram_exceptions_end+0xfbfc244c>
 4002ac8:	da00a617 	ldw	r8,664(sp)
 4002acc:	008000c4 	movi	r2,3
 4002ad0:	40bef01e 	bne	r8,r2,4002694 <__ram_exceptions_end+0xfbfc244c>
 4002ad4:	0005883a 	mov	r2,zero
 4002ad8:	0007883a 	mov	r3,zero
 4002adc:	003fa506 	br	4002974 <__ram_exceptions_end+0xfbfc272c>
 4002ae0:	9485883a 	add	r2,r18,r18
 4002ae4:	1085883a 	add	r2,r2,r2
 4002ae8:	d8a1883a 	add	r16,sp,r2
 4002aec:	880b883a 	mov	r5,r17
 4002af0:	a809883a 	mov	r4,r21
 4002af4:	84007804 	addi	r16,r16,480
 4002af8:	400634c0 	call	400634c <__fixdfsi>
 4002afc:	80800015 	stw	r2,0(r16)
 4002b00:	9023883a 	mov	r17,r18
 4002b04:	003e7e06 	br	4002500 <__ram_exceptions_end+0xfbfc22b8>
 4002b08:	a80d883a 	mov	r6,r21
 4002b0c:	400f883a 	mov	r7,r8
 4002b10:	0009883a 	mov	r4,zero
 4002b14:	014ffc34 	movhi	r5,16368
 4002b18:	4005a500 	call	4005a50 <__subdf3>
 4002b1c:	102b883a 	mov	r21,r2
 4002b20:	1811883a 	mov	r8,r3
 4002b24:	04c00084 	movi	r19,2
 4002b28:	003dc006 	br	400222c <__ram_exceptions_end+0xfbfc1fe4>
 4002b2c:	da00a617 	ldw	r8,664(sp)
 4002b30:	00800084 	movi	r2,2
 4002b34:	123fe416 	blt	r2,r8,4002ac8 <__ram_exceptions_end+0xfbfc2880>
 4002b38:	02000c16 	blt	zero,r8,4002b6c <__kernel_rem_pio2+0xd84>
 4002b3c:	403ed51e 	bne	r8,zero,4002694 <__ram_exceptions_end+0xfbfc244c>
 4002b40:	0005883a 	mov	r2,zero
 4002b44:	0007883a 	mov	r3,zero
 4002b48:	003ecc06 	br	400267c <__ram_exceptions_end+0xfbfc2434>
 4002b4c:	d8009215 	stw	zero,584(sp)
 4002b50:	003cc306 	br	4001e60 <__ram_exceptions_end+0xfbfc1c18>
 4002b54:	da008f17 	ldw	r8,572(sp)
 4002b58:	1009883a 	mov	r4,r2
 4002b5c:	1805883a 	mov	r2,r3
 4002b60:	41000215 	stw	r4,8(r8)
 4002b64:	40800315 	stw	r2,12(r8)
 4002b68:	003eca06 	br	4002694 <__ram_exceptions_end+0xfbfc244c>
 4002b6c:	0005883a 	mov	r2,zero
 4002b70:	0007883a 	mov	r3,zero
 4002b74:	003f9d06 	br	40029ec <__ram_exceptions_end+0xfbfc27a4>

04002b78 <__kernel_sin>:
 4002b78:	00a00034 	movhi	r2,32768
 4002b7c:	defff404 	addi	sp,sp,-48
 4002b80:	10bfffc4 	addi	r2,r2,-1
 4002b84:	00cf9034 	movhi	r3,15936
 4002b88:	ddc00915 	stw	r23,36(sp)
 4002b8c:	dd800815 	stw	r22,32(sp)
 4002b90:	dc400315 	stw	r17,12(sp)
 4002b94:	dc000215 	stw	r16,8(sp)
 4002b98:	dfc00b15 	stw	ra,44(sp)
 4002b9c:	df000a15 	stw	fp,40(sp)
 4002ba0:	dd400715 	stw	r21,28(sp)
 4002ba4:	dd000615 	stw	r20,24(sp)
 4002ba8:	dcc00515 	stw	r19,20(sp)
 4002bac:	dc800415 	stw	r18,16(sp)
 4002bb0:	2884703a 	and	r2,r5,r2
 4002bb4:	18ffffc4 	addi	r3,r3,-1
 4002bb8:	2821883a 	mov	r16,r5
 4002bbc:	2023883a 	mov	r17,r4
 4002bc0:	302f883a 	mov	r23,r6
 4002bc4:	382d883a 	mov	r22,r7
 4002bc8:	18800216 	blt	r3,r2,4002bd4 <__kernel_sin+0x5c>
 4002bcc:	400634c0 	call	400634c <__fixdfsi>
 4002bd0:	10009926 	beq	r2,zero,4002e38 <__kernel_sin+0x2c0>
 4002bd4:	880d883a 	mov	r6,r17
 4002bd8:	800f883a 	mov	r7,r16
 4002bdc:	8809883a 	mov	r4,r17
 4002be0:	800b883a 	mov	r5,r16
 4002be4:	40053380 	call	4005338 <__muldf3>
 4002be8:	100d883a 	mov	r6,r2
 4002bec:	180f883a 	mov	r7,r3
 4002bf0:	8809883a 	mov	r4,r17
 4002bf4:	800b883a 	mov	r5,r16
 4002bf8:	1027883a 	mov	r19,r2
 4002bfc:	1825883a 	mov	r18,r3
 4002c00:	40053380 	call	4005338 <__muldf3>
 4002c04:	0196b434 	movhi	r6,23248
 4002c08:	01cf79b4 	movhi	r7,15846
 4002c0c:	31b55f04 	addi	r6,r6,-10884
 4002c10:	39f64e84 	addi	r7,r7,-9926
 4002c14:	9809883a 	mov	r4,r19
 4002c18:	900b883a 	mov	r5,r18
 4002c1c:	102b883a 	mov	r21,r2
 4002c20:	1829883a 	mov	r20,r3
 4002c24:	40053380 	call	4005338 <__muldf3>
 4002c28:	01a28b34 	movhi	r6,35372
 4002c2c:	01cf96f4 	movhi	r7,15963
 4002c30:	31a73ac4 	addi	r6,r6,-25365
 4002c34:	39f97984 	addi	r7,r7,-6682
 4002c38:	1009883a 	mov	r4,r2
 4002c3c:	180b883a 	mov	r5,r3
 4002c40:	4005a500 	call	4005a50 <__subdf3>
 4002c44:	980d883a 	mov	r6,r19
 4002c48:	900f883a 	mov	r7,r18
 4002c4c:	1009883a 	mov	r4,r2
 4002c50:	180b883a 	mov	r5,r3
 4002c54:	40053380 	call	4005338 <__muldf3>
 4002c58:	0195ecb4 	movhi	r6,22450
 4002c5c:	01cfb1f4 	movhi	r7,16071
 4002c60:	31bf9f44 	addi	r6,r6,-387
 4002c64:	39c778c4 	addi	r7,r7,7651
 4002c68:	1009883a 	mov	r4,r2
 4002c6c:	180b883a 	mov	r5,r3
 4002c70:	40049280 	call	4004928 <__adddf3>
 4002c74:	980d883a 	mov	r6,r19
 4002c78:	900f883a 	mov	r7,r18
 4002c7c:	1009883a 	mov	r4,r2
 4002c80:	180b883a 	mov	r5,r3
 4002c84:	40053380 	call	4005338 <__muldf3>
 4002c88:	01867074 	movhi	r6,6593
 4002c8c:	01cfcab4 	movhi	r7,16170
 4002c90:	31987544 	addi	r6,r6,25045
 4002c94:	39c06804 	addi	r7,r7,416
 4002c98:	1009883a 	mov	r4,r2
 4002c9c:	180b883a 	mov	r5,r3
 4002ca0:	4005a500 	call	4005a50 <__subdf3>
 4002ca4:	980d883a 	mov	r6,r19
 4002ca8:	900f883a 	mov	r7,r18
 4002cac:	1009883a 	mov	r4,r2
 4002cb0:	180b883a 	mov	r5,r3
 4002cb4:	40053380 	call	4005338 <__muldf3>
 4002cb8:	01844474 	movhi	r6,4369
 4002cbc:	01cfe074 	movhi	r7,16257
 4002cc0:	31be2984 	addi	r6,r6,-1882
 4002cc4:	39c44444 	addi	r7,r7,4369
 4002cc8:	1009883a 	mov	r4,r2
 4002ccc:	180b883a 	mov	r5,r3
 4002cd0:	40049280 	call	4004928 <__adddf3>
 4002cd4:	1011883a 	mov	r8,r2
 4002cd8:	d8800c17 	ldw	r2,48(sp)
 4002cdc:	1839883a 	mov	fp,r3
 4002ce0:	10003e26 	beq	r2,zero,4002ddc <__kernel_sin+0x264>
 4002ce4:	000d883a 	mov	r6,zero
 4002ce8:	01cff834 	movhi	r7,16352
 4002cec:	b809883a 	mov	r4,r23
 4002cf0:	b00b883a 	mov	r5,r22
 4002cf4:	da000015 	stw	r8,0(sp)
 4002cf8:	40053380 	call	4005338 <__muldf3>
 4002cfc:	da000017 	ldw	r8,0(sp)
 4002d00:	e00f883a 	mov	r7,fp
 4002d04:	a809883a 	mov	r4,r21
 4002d08:	400d883a 	mov	r6,r8
 4002d0c:	a00b883a 	mov	r5,r20
 4002d10:	d8c00115 	stw	r3,4(sp)
 4002d14:	d8800015 	stw	r2,0(sp)
 4002d18:	40053380 	call	4005338 <__muldf3>
 4002d1c:	da800017 	ldw	r10,0(sp)
 4002d20:	da400117 	ldw	r9,4(sp)
 4002d24:	100d883a 	mov	r6,r2
 4002d28:	5009883a 	mov	r4,r10
 4002d2c:	480b883a 	mov	r5,r9
 4002d30:	180f883a 	mov	r7,r3
 4002d34:	4005a500 	call	4005a50 <__subdf3>
 4002d38:	980d883a 	mov	r6,r19
 4002d3c:	900f883a 	mov	r7,r18
 4002d40:	1009883a 	mov	r4,r2
 4002d44:	180b883a 	mov	r5,r3
 4002d48:	40053380 	call	4005338 <__muldf3>
 4002d4c:	b80d883a 	mov	r6,r23
 4002d50:	b00f883a 	mov	r7,r22
 4002d54:	1009883a 	mov	r4,r2
 4002d58:	180b883a 	mov	r5,r3
 4002d5c:	4005a500 	call	4005a50 <__subdf3>
 4002d60:	01955574 	movhi	r6,21845
 4002d64:	01cff174 	movhi	r7,16325
 4002d68:	31955244 	addi	r6,r6,21833
 4002d6c:	39d55544 	addi	r7,r7,21845
 4002d70:	a809883a 	mov	r4,r21
 4002d74:	a00b883a 	mov	r5,r20
 4002d78:	1027883a 	mov	r19,r2
 4002d7c:	1825883a 	mov	r18,r3
 4002d80:	40053380 	call	4005338 <__muldf3>
 4002d84:	100d883a 	mov	r6,r2
 4002d88:	180f883a 	mov	r7,r3
 4002d8c:	9809883a 	mov	r4,r19
 4002d90:	900b883a 	mov	r5,r18
 4002d94:	40049280 	call	4004928 <__adddf3>
 4002d98:	100d883a 	mov	r6,r2
 4002d9c:	180f883a 	mov	r7,r3
 4002da0:	8809883a 	mov	r4,r17
 4002da4:	800b883a 	mov	r5,r16
 4002da8:	4005a500 	call	4005a50 <__subdf3>
 4002dac:	dfc00b17 	ldw	ra,44(sp)
 4002db0:	df000a17 	ldw	fp,40(sp)
 4002db4:	ddc00917 	ldw	r23,36(sp)
 4002db8:	dd800817 	ldw	r22,32(sp)
 4002dbc:	dd400717 	ldw	r21,28(sp)
 4002dc0:	dd000617 	ldw	r20,24(sp)
 4002dc4:	dcc00517 	ldw	r19,20(sp)
 4002dc8:	dc800417 	ldw	r18,16(sp)
 4002dcc:	dc400317 	ldw	r17,12(sp)
 4002dd0:	dc000217 	ldw	r16,8(sp)
 4002dd4:	dec00c04 	addi	sp,sp,48
 4002dd8:	f800283a 	ret
 4002ddc:	400d883a 	mov	r6,r8
 4002de0:	9809883a 	mov	r4,r19
 4002de4:	900b883a 	mov	r5,r18
 4002de8:	180f883a 	mov	r7,r3
 4002dec:	40053380 	call	4005338 <__muldf3>
 4002df0:	01955574 	movhi	r6,21845
 4002df4:	01cff174 	movhi	r7,16325
 4002df8:	31955244 	addi	r6,r6,21833
 4002dfc:	39d55544 	addi	r7,r7,21845
 4002e00:	1009883a 	mov	r4,r2
 4002e04:	180b883a 	mov	r5,r3
 4002e08:	4005a500 	call	4005a50 <__subdf3>
 4002e0c:	a80d883a 	mov	r6,r21
 4002e10:	a00f883a 	mov	r7,r20
 4002e14:	1009883a 	mov	r4,r2
 4002e18:	180b883a 	mov	r5,r3
 4002e1c:	40053380 	call	4005338 <__muldf3>
 4002e20:	880d883a 	mov	r6,r17
 4002e24:	800f883a 	mov	r7,r16
 4002e28:	1009883a 	mov	r4,r2
 4002e2c:	180b883a 	mov	r5,r3
 4002e30:	40049280 	call	4004928 <__adddf3>
 4002e34:	003fdd06 	br	4002dac <__ram_exceptions_end+0xfbfc2b64>
 4002e38:	8805883a 	mov	r2,r17
 4002e3c:	8007883a 	mov	r3,r16
 4002e40:	003fda06 	br	4002dac <__ram_exceptions_end+0xfbfc2b64>

04002e44 <fabs>:
 4002e44:	00e00034 	movhi	r3,32768
 4002e48:	18ffffc4 	addi	r3,r3,-1
 4002e4c:	2005883a 	mov	r2,r4
 4002e50:	28c6703a 	and	r3,r5,r3
 4002e54:	f800283a 	ret

04002e58 <floor>:
 4002e58:	2811d53a 	srai	r8,r5,20
 4002e5c:	defffa04 	addi	sp,sp,-24
 4002e60:	dcc00315 	stw	r19,12(sp)
 4002e64:	4201ffcc 	andi	r8,r8,2047
 4002e68:	dc800215 	stw	r18,8(sp)
 4002e6c:	dc400115 	stw	r17,4(sp)
 4002e70:	dc000015 	stw	r16,0(sp)
 4002e74:	dfc00515 	stw	ra,20(sp)
 4002e78:	dd000415 	stw	r20,16(sp)
 4002e7c:	44bf0044 	addi	r18,r8,-1023
 4002e80:	018004c4 	movi	r6,19
 4002e84:	2821883a 	mov	r16,r5
 4002e88:	2005883a 	mov	r2,r4
 4002e8c:	280f883a 	mov	r7,r5
 4002e90:	2827883a 	mov	r19,r5
 4002e94:	2023883a 	mov	r17,r4
 4002e98:	34801916 	blt	r6,r18,4002f00 <floor+0xa8>
 4002e9c:	90003c16 	blt	r18,zero,4002f90 <floor+0x138>
 4002ea0:	05000434 	movhi	r20,16
 4002ea4:	a53fffc4 	addi	r20,r20,-1
 4002ea8:	a4a9d83a 	sra	r20,r20,r18
 4002eac:	2d0c703a 	and	r6,r5,r20
 4002eb0:	310cb03a 	or	r6,r6,r4
 4002eb4:	30001626 	beq	r6,zero,4002f10 <floor+0xb8>
 4002eb8:	01a20034 	movhi	r6,34816
 4002ebc:	01df8e34 	movhi	r7,32312
 4002ec0:	319d6704 	addi	r6,r6,30108
 4002ec4:	39f90f04 	addi	r7,r7,-7108
 4002ec8:	40049280 	call	4004928 <__adddf3>
 4002ecc:	000d883a 	mov	r6,zero
 4002ed0:	000f883a 	mov	r7,zero
 4002ed4:	1009883a 	mov	r4,r2
 4002ed8:	180b883a 	mov	r5,r3
 4002edc:	400525c0 	call	400525c <__gedf2>
 4002ee0:	0080040e 	bge	zero,r2,4002ef4 <floor+0x9c>
 4002ee4:	80003c16 	blt	r16,zero,4002fd8 <floor+0x180>
 4002ee8:	0520303a 	nor	r16,zero,r20
 4002eec:	84e0703a 	and	r16,r16,r19
 4002ef0:	0023883a 	mov	r17,zero
 4002ef4:	8805883a 	mov	r2,r17
 4002ef8:	8007883a 	mov	r3,r16
 4002efc:	00000506 	br	4002f14 <floor+0xbc>
 4002f00:	01800cc4 	movi	r6,51
 4002f04:	34800b0e 	bge	r6,r18,4002f34 <floor+0xdc>
 4002f08:	01810004 	movi	r6,1024
 4002f0c:	91802f26 	beq	r18,r6,4002fcc <floor+0x174>
 4002f10:	3807883a 	mov	r3,r7
 4002f14:	dfc00517 	ldw	ra,20(sp)
 4002f18:	dd000417 	ldw	r20,16(sp)
 4002f1c:	dcc00317 	ldw	r19,12(sp)
 4002f20:	dc800217 	ldw	r18,8(sp)
 4002f24:	dc400117 	ldw	r17,4(sp)
 4002f28:	dc000017 	ldw	r16,0(sp)
 4002f2c:	dec00604 	addi	sp,sp,24
 4002f30:	f800283a 	ret
 4002f34:	423efb44 	addi	r8,r8,-1043
 4002f38:	053fffc4 	movi	r20,-1
 4002f3c:	a228d83a 	srl	r20,r20,r8
 4002f40:	250c703a 	and	r6,r4,r20
 4002f44:	303ff226 	beq	r6,zero,4002f10 <__ram_exceptions_end+0xfbfc2cc8>
 4002f48:	01a20034 	movhi	r6,34816
 4002f4c:	01df8e34 	movhi	r7,32312
 4002f50:	319d6704 	addi	r6,r6,30108
 4002f54:	39f90f04 	addi	r7,r7,-7108
 4002f58:	40049280 	call	4004928 <__adddf3>
 4002f5c:	000d883a 	mov	r6,zero
 4002f60:	000f883a 	mov	r7,zero
 4002f64:	1009883a 	mov	r4,r2
 4002f68:	180b883a 	mov	r5,r3
 4002f6c:	400525c0 	call	400525c <__gedf2>
 4002f70:	00bfe00e 	bge	zero,r2,4002ef4 <__ram_exceptions_end+0xfbfc2cac>
 4002f74:	80001c16 	blt	r16,zero,4002fe8 <floor+0x190>
 4002f78:	0510303a 	nor	r8,zero,r20
 4002f7c:	9821883a 	mov	r16,r19
 4002f80:	8a22703a 	and	r17,r17,r8
 4002f84:	8805883a 	mov	r2,r17
 4002f88:	8007883a 	mov	r3,r16
 4002f8c:	003fe106 	br	4002f14 <__ram_exceptions_end+0xfbfc2ccc>
 4002f90:	01a20034 	movhi	r6,34816
 4002f94:	01df8e34 	movhi	r7,32312
 4002f98:	319d6704 	addi	r6,r6,30108
 4002f9c:	39f90f04 	addi	r7,r7,-7108
 4002fa0:	40049280 	call	4004928 <__adddf3>
 4002fa4:	000d883a 	mov	r6,zero
 4002fa8:	000f883a 	mov	r7,zero
 4002fac:	1009883a 	mov	r4,r2
 4002fb0:	180b883a 	mov	r5,r3
 4002fb4:	400525c0 	call	400525c <__gedf2>
 4002fb8:	00bfce0e 	bge	zero,r2,4002ef4 <__ram_exceptions_end+0xfbfc2cac>
 4002fbc:	80001516 	blt	r16,zero,4003014 <floor+0x1bc>
 4002fc0:	0023883a 	mov	r17,zero
 4002fc4:	0021883a 	mov	r16,zero
 4002fc8:	003fca06 	br	4002ef4 <__ram_exceptions_end+0xfbfc2cac>
 4002fcc:	200d883a 	mov	r6,r4
 4002fd0:	40049280 	call	4004928 <__adddf3>
 4002fd4:	003fcf06 	br	4002f14 <__ram_exceptions_end+0xfbfc2ccc>
 4002fd8:	00800434 	movhi	r2,16
 4002fdc:	14a5d83a 	sra	r18,r2,r18
 4002fe0:	84a7883a 	add	r19,r16,r18
 4002fe4:	003fc006 	br	4002ee8 <__ram_exceptions_end+0xfbfc2ca0>
 4002fe8:	00800504 	movi	r2,20
 4002fec:	90801326 	beq	r18,r2,400303c <floor+0x1e4>
 4002ff0:	00800d04 	movi	r2,52
 4002ff4:	14a5c83a 	sub	r18,r2,r18
 4002ff8:	00800044 	movi	r2,1
 4002ffc:	1484983a 	sll	r2,r2,r18
 4003000:	1445883a 	add	r2,r2,r17
 4003004:	14400b2e 	bgeu	r2,r17,4003034 <floor+0x1dc>
 4003008:	84c00044 	addi	r19,r16,1
 400300c:	1023883a 	mov	r17,r2
 4003010:	003fd906 	br	4002f78 <__ram_exceptions_end+0xfbfc2d30>
 4003014:	00a00034 	movhi	r2,32768
 4003018:	10bfffc4 	addi	r2,r2,-1
 400301c:	8084703a 	and	r2,r16,r2
 4003020:	1462b03a 	or	r17,r2,r17
 4003024:	883fb326 	beq	r17,zero,4002ef4 <__ram_exceptions_end+0xfbfc2cac>
 4003028:	0023883a 	mov	r17,zero
 400302c:	042ffc34 	movhi	r16,49136
 4003030:	003fb006 	br	4002ef4 <__ram_exceptions_end+0xfbfc2cac>
 4003034:	1023883a 	mov	r17,r2
 4003038:	003fcf06 	br	4002f78 <__ram_exceptions_end+0xfbfc2d30>
 400303c:	84c00044 	addi	r19,r16,1
 4003040:	003fcd06 	br	4002f78 <__ram_exceptions_end+0xfbfc2d30>

04003044 <scalbn>:
 4003044:	2a1ffc2c 	andhi	r8,r5,32752
 4003048:	4011d53a 	srai	r8,r8,20
 400304c:	defffe04 	addi	sp,sp,-8
 4003050:	dc000015 	stw	r16,0(sp)
 4003054:	dfc00115 	stw	ra,4(sp)
 4003058:	280f883a 	mov	r7,r5
 400305c:	2015883a 	mov	r10,r4
 4003060:	3021883a 	mov	r16,r6
 4003064:	40001e1e 	bne	r8,zero,40030e0 <scalbn+0x9c>
 4003068:	00a00034 	movhi	r2,32768
 400306c:	10bfffc4 	addi	r2,r2,-1
 4003070:	2884703a 	and	r2,r5,r2
 4003074:	1104b03a 	or	r2,r2,r4
 4003078:	10002226 	beq	r2,zero,4003104 <scalbn+0xc0>
 400307c:	01d0d434 	movhi	r7,17232
 4003080:	000d883a 	mov	r6,zero
 4003084:	40053380 	call	4005338 <__muldf3>
 4003088:	013ffff4 	movhi	r4,65535
 400308c:	210f2c04 	addi	r4,r4,15536
 4003090:	1015883a 	mov	r10,r2
 4003094:	180f883a 	mov	r7,r3
 4003098:	81002a16 	blt	r16,r4,4003144 <scalbn+0x100>
 400309c:	191ffc2c 	andhi	r4,r3,32752
 40030a0:	2009d53a 	srai	r4,r4,20
 40030a4:	223ff284 	addi	r8,r4,-54
 40030a8:	8211883a 	add	r8,r16,r8
 40030ac:	0081ff84 	movi	r2,2046
 40030b0:	12002f16 	blt	r2,r8,4003170 <scalbn+0x12c>
 40030b4:	0200190e 	bge	zero,r8,400311c <scalbn+0xd8>
 40030b8:	4010953a 	slli	r8,r8,20
 40030bc:	01600434 	movhi	r5,32784
 40030c0:	297fffc4 	addi	r5,r5,-1
 40030c4:	194e703a 	and	r7,r3,r5
 40030c8:	5005883a 	mov	r2,r10
 40030cc:	3a06b03a 	or	r3,r7,r8
 40030d0:	dfc00117 	ldw	ra,4(sp)
 40030d4:	dc000017 	ldw	r16,0(sp)
 40030d8:	dec00204 	addi	sp,sp,8
 40030dc:	f800283a 	ret
 40030e0:	0081ffc4 	movi	r2,2047
 40030e4:	2807883a 	mov	r3,r5
 40030e8:	40bfef1e 	bne	r8,r2,40030a8 <__ram_exceptions_end+0xfbfc2e60>
 40030ec:	200d883a 	mov	r6,r4
 40030f0:	40049280 	call	4004928 <__adddf3>
 40030f4:	dfc00117 	ldw	ra,4(sp)
 40030f8:	dc000017 	ldw	r16,0(sp)
 40030fc:	dec00204 	addi	sp,sp,8
 4003100:	f800283a 	ret
 4003104:	2005883a 	mov	r2,r4
 4003108:	2807883a 	mov	r3,r5
 400310c:	dfc00117 	ldw	ra,4(sp)
 4003110:	dc000017 	ldw	r16,0(sp)
 4003114:	dec00204 	addi	sp,sp,8
 4003118:	f800283a 	ret
 400311c:	00bff2c4 	movi	r2,-53
 4003120:	4080240e 	bge	r8,r2,40031b4 <scalbn+0x170>
 4003124:	00b0d414 	movui	r2,50000
 4003128:	14001116 	blt	r2,r16,4003170 <scalbn+0x12c>
 400312c:	0130be74 	movhi	r4,49913
 4003130:	01406974 	movhi	r5,421
 4003134:	213cd644 	addi	r4,r4,-3239
 4003138:	295b87c4 	addi	r5,r5,28191
 400313c:	500d883a 	mov	r6,r10
 4003140:	40031e00 	call	40031e0 <copysign>
 4003144:	01b0be74 	movhi	r6,49913
 4003148:	01c06974 	movhi	r7,421
 400314c:	31bcd644 	addi	r6,r6,-3239
 4003150:	39db87c4 	addi	r7,r7,28191
 4003154:	1009883a 	mov	r4,r2
 4003158:	180b883a 	mov	r5,r3
 400315c:	40053380 	call	4005338 <__muldf3>
 4003160:	dfc00117 	ldw	ra,4(sp)
 4003164:	dc000017 	ldw	r16,0(sp)
 4003168:	dec00204 	addi	sp,sp,8
 400316c:	f800283a 	ret
 4003170:	01220034 	movhi	r4,34816
 4003174:	015f8e34 	movhi	r5,32312
 4003178:	500d883a 	mov	r6,r10
 400317c:	211d6704 	addi	r4,r4,30108
 4003180:	29790f04 	addi	r5,r5,-7108
 4003184:	40031e00 	call	40031e0 <copysign>
 4003188:	01a20034 	movhi	r6,34816
 400318c:	01df8e34 	movhi	r7,32312
 4003190:	319d6704 	addi	r6,r6,30108
 4003194:	39f90f04 	addi	r7,r7,-7108
 4003198:	1009883a 	mov	r4,r2
 400319c:	180b883a 	mov	r5,r3
 40031a0:	40053380 	call	4005338 <__muldf3>
 40031a4:	dfc00117 	ldw	ra,4(sp)
 40031a8:	dc000017 	ldw	r16,0(sp)
 40031ac:	dec00204 	addi	sp,sp,8
 40031b0:	f800283a 	ret
 40031b4:	42000d84 	addi	r8,r8,54
 40031b8:	4012953a 	slli	r9,r8,20
 40031bc:	01e00434 	movhi	r7,32784
 40031c0:	39ffffc4 	addi	r7,r7,-1
 40031c4:	19ca703a 	and	r5,r3,r7
 40031c8:	000d883a 	mov	r6,zero
 40031cc:	01cf2434 	movhi	r7,15504
 40031d0:	5009883a 	mov	r4,r10
 40031d4:	494ab03a 	or	r5,r9,r5
 40031d8:	40053380 	call	4005338 <__muldf3>
 40031dc:	003fbc06 	br	40030d0 <__ram_exceptions_end+0xfbfc2e88>

040031e0 <copysign>:
 40031e0:	2005883a 	mov	r2,r4
 40031e4:	01200034 	movhi	r4,32768
 40031e8:	213fffc4 	addi	r4,r4,-1
 40031ec:	38e0002c 	andhi	r3,r7,32768
 40031f0:	290a703a 	and	r5,r5,r4
 40031f4:	28c6b03a 	or	r3,r5,r3
 40031f8:	f800283a 	ret

040031fc <__divsi3>:
 40031fc:	20001b16 	blt	r4,zero,400326c <__divsi3+0x70>
 4003200:	000f883a 	mov	r7,zero
 4003204:	28001616 	blt	r5,zero,4003260 <__divsi3+0x64>
 4003208:	200d883a 	mov	r6,r4
 400320c:	29001a2e 	bgeu	r5,r4,4003278 <__divsi3+0x7c>
 4003210:	00800804 	movi	r2,32
 4003214:	00c00044 	movi	r3,1
 4003218:	00000106 	br	4003220 <__divsi3+0x24>
 400321c:	10000d26 	beq	r2,zero,4003254 <__divsi3+0x58>
 4003220:	294b883a 	add	r5,r5,r5
 4003224:	10bfffc4 	addi	r2,r2,-1
 4003228:	18c7883a 	add	r3,r3,r3
 400322c:	293ffb36 	bltu	r5,r4,400321c <__ram_exceptions_end+0xfbfc2fd4>
 4003230:	0005883a 	mov	r2,zero
 4003234:	18000726 	beq	r3,zero,4003254 <__divsi3+0x58>
 4003238:	0005883a 	mov	r2,zero
 400323c:	31400236 	bltu	r6,r5,4003248 <__divsi3+0x4c>
 4003240:	314dc83a 	sub	r6,r6,r5
 4003244:	10c4b03a 	or	r2,r2,r3
 4003248:	1806d07a 	srli	r3,r3,1
 400324c:	280ad07a 	srli	r5,r5,1
 4003250:	183ffa1e 	bne	r3,zero,400323c <__ram_exceptions_end+0xfbfc2ff4>
 4003254:	38000126 	beq	r7,zero,400325c <__divsi3+0x60>
 4003258:	0085c83a 	sub	r2,zero,r2
 400325c:	f800283a 	ret
 4003260:	014bc83a 	sub	r5,zero,r5
 4003264:	39c0005c 	xori	r7,r7,1
 4003268:	003fe706 	br	4003208 <__ram_exceptions_end+0xfbfc2fc0>
 400326c:	0109c83a 	sub	r4,zero,r4
 4003270:	01c00044 	movi	r7,1
 4003274:	003fe306 	br	4003204 <__ram_exceptions_end+0xfbfc2fbc>
 4003278:	00c00044 	movi	r3,1
 400327c:	003fee06 	br	4003238 <__ram_exceptions_end+0xfbfc2ff0>

04003280 <__modsi3>:
 4003280:	20001716 	blt	r4,zero,40032e0 <__modsi3+0x60>
 4003284:	000f883a 	mov	r7,zero
 4003288:	2005883a 	mov	r2,r4
 400328c:	28001216 	blt	r5,zero,40032d8 <__modsi3+0x58>
 4003290:	2900162e 	bgeu	r5,r4,40032ec <__modsi3+0x6c>
 4003294:	01800804 	movi	r6,32
 4003298:	00c00044 	movi	r3,1
 400329c:	00000106 	br	40032a4 <__modsi3+0x24>
 40032a0:	30000a26 	beq	r6,zero,40032cc <__modsi3+0x4c>
 40032a4:	294b883a 	add	r5,r5,r5
 40032a8:	31bfffc4 	addi	r6,r6,-1
 40032ac:	18c7883a 	add	r3,r3,r3
 40032b0:	293ffb36 	bltu	r5,r4,40032a0 <__ram_exceptions_end+0xfbfc3058>
 40032b4:	18000526 	beq	r3,zero,40032cc <__modsi3+0x4c>
 40032b8:	1806d07a 	srli	r3,r3,1
 40032bc:	11400136 	bltu	r2,r5,40032c4 <__modsi3+0x44>
 40032c0:	1145c83a 	sub	r2,r2,r5
 40032c4:	280ad07a 	srli	r5,r5,1
 40032c8:	183ffb1e 	bne	r3,zero,40032b8 <__ram_exceptions_end+0xfbfc3070>
 40032cc:	38000126 	beq	r7,zero,40032d4 <__modsi3+0x54>
 40032d0:	0085c83a 	sub	r2,zero,r2
 40032d4:	f800283a 	ret
 40032d8:	014bc83a 	sub	r5,zero,r5
 40032dc:	003fec06 	br	4003290 <__ram_exceptions_end+0xfbfc3048>
 40032e0:	0109c83a 	sub	r4,zero,r4
 40032e4:	01c00044 	movi	r7,1
 40032e8:	003fe706 	br	4003288 <__ram_exceptions_end+0xfbfc3040>
 40032ec:	00c00044 	movi	r3,1
 40032f0:	003ff106 	br	40032b8 <__ram_exceptions_end+0xfbfc3070>

040032f4 <__udivsi3>:
 40032f4:	200d883a 	mov	r6,r4
 40032f8:	2900152e 	bgeu	r5,r4,4003350 <__udivsi3+0x5c>
 40032fc:	28001416 	blt	r5,zero,4003350 <__udivsi3+0x5c>
 4003300:	00800804 	movi	r2,32
 4003304:	00c00044 	movi	r3,1
 4003308:	00000206 	br	4003314 <__udivsi3+0x20>
 400330c:	10000e26 	beq	r2,zero,4003348 <__udivsi3+0x54>
 4003310:	28000516 	blt	r5,zero,4003328 <__udivsi3+0x34>
 4003314:	294b883a 	add	r5,r5,r5
 4003318:	10bfffc4 	addi	r2,r2,-1
 400331c:	18c7883a 	add	r3,r3,r3
 4003320:	293ffa36 	bltu	r5,r4,400330c <__ram_exceptions_end+0xfbfc30c4>
 4003324:	18000826 	beq	r3,zero,4003348 <__udivsi3+0x54>
 4003328:	0005883a 	mov	r2,zero
 400332c:	31400236 	bltu	r6,r5,4003338 <__udivsi3+0x44>
 4003330:	314dc83a 	sub	r6,r6,r5
 4003334:	10c4b03a 	or	r2,r2,r3
 4003338:	1806d07a 	srli	r3,r3,1
 400333c:	280ad07a 	srli	r5,r5,1
 4003340:	183ffa1e 	bne	r3,zero,400332c <__ram_exceptions_end+0xfbfc30e4>
 4003344:	f800283a 	ret
 4003348:	0005883a 	mov	r2,zero
 400334c:	f800283a 	ret
 4003350:	00c00044 	movi	r3,1
 4003354:	003ff406 	br	4003328 <__ram_exceptions_end+0xfbfc30e0>

04003358 <__umodsi3>:
 4003358:	2005883a 	mov	r2,r4
 400335c:	2900122e 	bgeu	r5,r4,40033a8 <__umodsi3+0x50>
 4003360:	28001116 	blt	r5,zero,40033a8 <__umodsi3+0x50>
 4003364:	01800804 	movi	r6,32
 4003368:	00c00044 	movi	r3,1
 400336c:	00000206 	br	4003378 <__umodsi3+0x20>
 4003370:	30000c26 	beq	r6,zero,40033a4 <__umodsi3+0x4c>
 4003374:	28000516 	blt	r5,zero,400338c <__umodsi3+0x34>
 4003378:	294b883a 	add	r5,r5,r5
 400337c:	31bfffc4 	addi	r6,r6,-1
 4003380:	18c7883a 	add	r3,r3,r3
 4003384:	293ffa36 	bltu	r5,r4,4003370 <__ram_exceptions_end+0xfbfc3128>
 4003388:	18000626 	beq	r3,zero,40033a4 <__umodsi3+0x4c>
 400338c:	1806d07a 	srli	r3,r3,1
 4003390:	11400136 	bltu	r2,r5,4003398 <__umodsi3+0x40>
 4003394:	1145c83a 	sub	r2,r2,r5
 4003398:	280ad07a 	srli	r5,r5,1
 400339c:	183ffb1e 	bne	r3,zero,400338c <__ram_exceptions_end+0xfbfc3144>
 40033a0:	f800283a 	ret
 40033a4:	f800283a 	ret
 40033a8:	00c00044 	movi	r3,1
 40033ac:	003ff706 	br	400338c <__ram_exceptions_end+0xfbfc3144>

040033b0 <__addsf3>:
 40033b0:	defffc04 	addi	sp,sp,-16
 40033b4:	2004d7fa 	srli	r2,r4,31
 40033b8:	280cd5fa 	srli	r6,r5,23
 40033bc:	dc000015 	stw	r16,0(sp)
 40033c0:	00c02034 	movhi	r3,128
 40033c4:	2020d5fa 	srli	r16,r4,23
 40033c8:	280ed7fa 	srli	r7,r5,31
 40033cc:	18ffffc4 	addi	r3,r3,-1
 40033d0:	dc400115 	stw	r17,4(sp)
 40033d4:	1908703a 	and	r4,r3,r4
 40033d8:	194a703a 	and	r5,r3,r5
 40033dc:	dfc00315 	stw	ra,12(sp)
 40033e0:	dc800215 	stw	r18,8(sp)
 40033e4:	14403fcc 	andi	r17,r2,255
 40033e8:	84003fcc 	andi	r16,r16,255
 40033ec:	200890fa 	slli	r4,r4,3
 40033f0:	31803fcc 	andi	r6,r6,255
 40033f4:	280a90fa 	slli	r5,r5,3
 40033f8:	89c05026 	beq	r17,r7,400353c <__addsf3+0x18c>
 40033fc:	8185c83a 	sub	r2,r16,r6
 4003400:	00807a0e 	bge	zero,r2,40035ec <__addsf3+0x23c>
 4003404:	30001e1e 	bne	r6,zero,4003480 <__addsf3+0xd0>
 4003408:	28006d1e 	bne	r5,zero,40035c0 <__addsf3+0x210>
 400340c:	208001cc 	andi	r2,r4,7
 4003410:	10000426 	beq	r2,zero,4003424 <__addsf3+0x74>
 4003414:	208003cc 	andi	r2,r4,15
 4003418:	00c00104 	movi	r3,4
 400341c:	10c00126 	beq	r2,r3,4003424 <__addsf3+0x74>
 4003420:	20c9883a 	add	r4,r4,r3
 4003424:	2081002c 	andhi	r2,r4,1024
 4003428:	10003926 	beq	r2,zero,4003510 <__addsf3+0x160>
 400342c:	84000044 	addi	r16,r16,1
 4003430:	00803fc4 	movi	r2,255
 4003434:	80807826 	beq	r16,r2,4003618 <__addsf3+0x268>
 4003438:	200891ba 	slli	r4,r4,6
 400343c:	8805883a 	mov	r2,r17
 4003440:	2008d27a 	srli	r4,r4,9
 4003444:	84003fcc 	andi	r16,r16,255
 4003448:	800695fa 	slli	r3,r16,23
 400344c:	10803fcc 	andi	r2,r2,255
 4003450:	04002034 	movhi	r16,128
 4003454:	843fffc4 	addi	r16,r16,-1
 4003458:	100497fa 	slli	r2,r2,31
 400345c:	2408703a 	and	r4,r4,r16
 4003460:	20e0b03a 	or	r16,r4,r3
 4003464:	8084b03a 	or	r2,r16,r2
 4003468:	dfc00317 	ldw	ra,12(sp)
 400346c:	dc800217 	ldw	r18,8(sp)
 4003470:	dc400117 	ldw	r17,4(sp)
 4003474:	dc000017 	ldw	r16,0(sp)
 4003478:	dec00404 	addi	sp,sp,16
 400347c:	f800283a 	ret
 4003480:	00c03fc4 	movi	r3,255
 4003484:	80ffe126 	beq	r16,r3,400340c <__ram_exceptions_end+0xfbfc31c4>
 4003488:	29410034 	orhi	r5,r5,1024
 400348c:	00c006c4 	movi	r3,27
 4003490:	18807516 	blt	r3,r2,4003668 <__addsf3+0x2b8>
 4003494:	00c00804 	movi	r3,32
 4003498:	1887c83a 	sub	r3,r3,r2
 400349c:	28c6983a 	sll	r3,r5,r3
 40034a0:	288ad83a 	srl	r5,r5,r2
 40034a4:	1804c03a 	cmpne	r2,r3,zero
 40034a8:	288ab03a 	or	r5,r5,r2
 40034ac:	2149c83a 	sub	r4,r4,r5
 40034b0:	2081002c 	andhi	r2,r4,1024
 40034b4:	10001426 	beq	r2,zero,4003508 <__addsf3+0x158>
 40034b8:	04810034 	movhi	r18,1024
 40034bc:	94bfffc4 	addi	r18,r18,-1
 40034c0:	24a4703a 	and	r18,r4,r18
 40034c4:	9009883a 	mov	r4,r18
 40034c8:	40065b80 	call	40065b8 <__clzsi2>
 40034cc:	10bffec4 	addi	r2,r2,-5
 40034d0:	90a4983a 	sll	r18,r18,r2
 40034d4:	14005416 	blt	r2,r16,4003628 <__addsf3+0x278>
 40034d8:	1405c83a 	sub	r2,r2,r16
 40034dc:	11000044 	addi	r4,r2,1
 40034e0:	00800804 	movi	r2,32
 40034e4:	1105c83a 	sub	r2,r2,r4
 40034e8:	9084983a 	sll	r2,r18,r2
 40034ec:	9124d83a 	srl	r18,r18,r4
 40034f0:	0021883a 	mov	r16,zero
 40034f4:	1008c03a 	cmpne	r4,r2,zero
 40034f8:	9108b03a 	or	r4,r18,r4
 40034fc:	003fc306 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003500:	1000db26 	beq	r2,zero,4003870 <__addsf3+0x4c0>
 4003504:	1009883a 	mov	r4,r2
 4003508:	208001cc 	andi	r2,r4,7
 400350c:	103fc11e 	bne	r2,zero,4003414 <__ram_exceptions_end+0xfbfc31cc>
 4003510:	2006d0fa 	srli	r3,r4,3
 4003514:	01003fc4 	movi	r4,255
 4003518:	8805883a 	mov	r2,r17
 400351c:	8100241e 	bne	r16,r4,40035b0 <__addsf3+0x200>
 4003520:	18006e26 	beq	r3,zero,40036dc <__addsf3+0x32c>
 4003524:	19001034 	orhi	r4,r3,64
 4003528:	00c02034 	movhi	r3,128
 400352c:	18ffffc4 	addi	r3,r3,-1
 4003530:	043fffc4 	movi	r16,-1
 4003534:	20c8703a 	and	r4,r4,r3
 4003538:	003fc206 	br	4003444 <__ram_exceptions_end+0xfbfc31fc>
 400353c:	8187c83a 	sub	r3,r16,r6
 4003540:	00c03e0e 	bge	zero,r3,400363c <__addsf3+0x28c>
 4003544:	30002326 	beq	r6,zero,40035d4 <__addsf3+0x224>
 4003548:	01803fc4 	movi	r6,255
 400354c:	81bfaf26 	beq	r16,r6,400340c <__ram_exceptions_end+0xfbfc31c4>
 4003550:	29410034 	orhi	r5,r5,1024
 4003554:	018006c4 	movi	r6,27
 4003558:	30c07416 	blt	r6,r3,400372c <__addsf3+0x37c>
 400355c:	01800804 	movi	r6,32
 4003560:	30cdc83a 	sub	r6,r6,r3
 4003564:	298c983a 	sll	r6,r5,r6
 4003568:	28cad83a 	srl	r5,r5,r3
 400356c:	3006c03a 	cmpne	r3,r6,zero
 4003570:	28cab03a 	or	r5,r5,r3
 4003574:	2149883a 	add	r4,r4,r5
 4003578:	20c1002c 	andhi	r3,r4,1024
 400357c:	183fe226 	beq	r3,zero,4003508 <__ram_exceptions_end+0xfbfc32c0>
 4003580:	84000044 	addi	r16,r16,1
 4003584:	00c03fc4 	movi	r3,255
 4003588:	80c05426 	beq	r16,r3,40036dc <__addsf3+0x32c>
 400358c:	00bf0034 	movhi	r2,64512
 4003590:	10bfffc4 	addi	r2,r2,-1
 4003594:	20c0004c 	andi	r3,r4,1
 4003598:	2088703a 	and	r4,r4,r2
 400359c:	2008d07a 	srli	r4,r4,1
 40035a0:	20c8b03a 	or	r4,r4,r3
 40035a4:	003f9906 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 40035a8:	0007883a 	mov	r3,zero
 40035ac:	0005883a 	mov	r2,zero
 40035b0:	01002034 	movhi	r4,128
 40035b4:	213fffc4 	addi	r4,r4,-1
 40035b8:	1908703a 	and	r4,r3,r4
 40035bc:	003fa106 	br	4003444 <__ram_exceptions_end+0xfbfc31fc>
 40035c0:	10bfffc4 	addi	r2,r2,-1
 40035c4:	103fb926 	beq	r2,zero,40034ac <__ram_exceptions_end+0xfbfc3264>
 40035c8:	00c03fc4 	movi	r3,255
 40035cc:	80ffaf1e 	bne	r16,r3,400348c <__ram_exceptions_end+0xfbfc3244>
 40035d0:	003f8e06 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 40035d4:	283f8d26 	beq	r5,zero,400340c <__ram_exceptions_end+0xfbfc31c4>
 40035d8:	18ffffc4 	addi	r3,r3,-1
 40035dc:	183fe526 	beq	r3,zero,4003574 <__ram_exceptions_end+0xfbfc332c>
 40035e0:	01803fc4 	movi	r6,255
 40035e4:	81bfdb1e 	bne	r16,r6,4003554 <__ram_exceptions_end+0xfbfc330c>
 40035e8:	003f8806 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 40035ec:	1000201e 	bne	r2,zero,4003670 <__addsf3+0x2c0>
 40035f0:	80800044 	addi	r2,r16,1
 40035f4:	10803fcc 	andi	r2,r2,255
 40035f8:	01800044 	movi	r6,1
 40035fc:	3080450e 	bge	r6,r2,4003714 <__addsf3+0x364>
 4003600:	2165c83a 	sub	r18,r4,r5
 4003604:	90c1002c 	andhi	r3,r18,1024
 4003608:	18002b26 	beq	r3,zero,40036b8 <__addsf3+0x308>
 400360c:	2925c83a 	sub	r18,r5,r4
 4003610:	3823883a 	mov	r17,r7
 4003614:	003fab06 	br	40034c4 <__ram_exceptions_end+0xfbfc327c>
 4003618:	8805883a 	mov	r2,r17
 400361c:	043fffc4 	movi	r16,-1
 4003620:	0009883a 	mov	r4,zero
 4003624:	003f8706 	br	4003444 <__ram_exceptions_end+0xfbfc31fc>
 4003628:	013f0034 	movhi	r4,64512
 400362c:	213fffc4 	addi	r4,r4,-1
 4003630:	80a1c83a 	sub	r16,r16,r2
 4003634:	9108703a 	and	r4,r18,r4
 4003638:	003f7406 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 400363c:	1800411e 	bne	r3,zero,4003744 <__addsf3+0x394>
 4003640:	80c00044 	addi	r3,r16,1
 4003644:	19c03fcc 	andi	r7,r3,255
 4003648:	01800044 	movi	r6,1
 400364c:	31c0260e 	bge	r6,r7,40036e8 <__addsf3+0x338>
 4003650:	01803fc4 	movi	r6,255
 4003654:	19802126 	beq	r3,r6,40036dc <__addsf3+0x32c>
 4003658:	2149883a 	add	r4,r4,r5
 400365c:	2008d07a 	srli	r4,r4,1
 4003660:	1821883a 	mov	r16,r3
 4003664:	003f6906 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003668:	01400044 	movi	r5,1
 400366c:	003f8f06 	br	40034ac <__ram_exceptions_end+0xfbfc3264>
 4003670:	8000151e 	bne	r16,zero,40036c8 <__addsf3+0x318>
 4003674:	20002f26 	beq	r4,zero,4003734 <__addsf3+0x384>
 4003678:	0084303a 	nor	r2,zero,r2
 400367c:	10000a26 	beq	r2,zero,40036a8 <__addsf3+0x2f8>
 4003680:	00c03fc4 	movi	r3,255
 4003684:	30c02b26 	beq	r6,r3,4003734 <__addsf3+0x384>
 4003688:	00c006c4 	movi	r3,27
 400368c:	18806d16 	blt	r3,r2,4003844 <__addsf3+0x494>
 4003690:	00c00804 	movi	r3,32
 4003694:	1887c83a 	sub	r3,r3,r2
 4003698:	20c6983a 	sll	r3,r4,r3
 400369c:	2084d83a 	srl	r2,r4,r2
 40036a0:	1808c03a 	cmpne	r4,r3,zero
 40036a4:	1108b03a 	or	r4,r2,r4
 40036a8:	2909c83a 	sub	r4,r5,r4
 40036ac:	3021883a 	mov	r16,r6
 40036b0:	3823883a 	mov	r17,r7
 40036b4:	003f7e06 	br	40034b0 <__ram_exceptions_end+0xfbfc3268>
 40036b8:	903f821e 	bne	r18,zero,40034c4 <__ram_exceptions_end+0xfbfc327c>
 40036bc:	0005883a 	mov	r2,zero
 40036c0:	0021883a 	mov	r16,zero
 40036c4:	003fba06 	br	40035b0 <__ram_exceptions_end+0xfbfc3368>
 40036c8:	00c03fc4 	movi	r3,255
 40036cc:	30c01926 	beq	r6,r3,4003734 <__addsf3+0x384>
 40036d0:	0085c83a 	sub	r2,zero,r2
 40036d4:	21010034 	orhi	r4,r4,1024
 40036d8:	003feb06 	br	4003688 <__ram_exceptions_end+0xfbfc3440>
 40036dc:	043fffc4 	movi	r16,-1
 40036e0:	0009883a 	mov	r4,zero
 40036e4:	003f5706 	br	4003444 <__ram_exceptions_end+0xfbfc31fc>
 40036e8:	80004a1e 	bne	r16,zero,4003814 <__addsf3+0x464>
 40036ec:	20005926 	beq	r4,zero,4003854 <__addsf3+0x4a4>
 40036f0:	283f4626 	beq	r5,zero,400340c <__ram_exceptions_end+0xfbfc31c4>
 40036f4:	2149883a 	add	r4,r4,r5
 40036f8:	2081002c 	andhi	r2,r4,1024
 40036fc:	103f8226 	beq	r2,zero,4003508 <__ram_exceptions_end+0xfbfc32c0>
 4003700:	00bf0034 	movhi	r2,64512
 4003704:	10bfffc4 	addi	r2,r2,-1
 4003708:	3021883a 	mov	r16,r6
 400370c:	2088703a 	and	r4,r4,r2
 4003710:	003f3e06 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003714:	8000121e 	bne	r16,zero,4003760 <__addsf3+0x3b0>
 4003718:	2000261e 	bne	r4,zero,40037b4 <__addsf3+0x404>
 400371c:	283fa226 	beq	r5,zero,40035a8 <__ram_exceptions_end+0xfbfc3360>
 4003720:	2809883a 	mov	r4,r5
 4003724:	3823883a 	mov	r17,r7
 4003728:	003f3806 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 400372c:	01400044 	movi	r5,1
 4003730:	003f9006 	br	4003574 <__ram_exceptions_end+0xfbfc332c>
 4003734:	2809883a 	mov	r4,r5
 4003738:	3021883a 	mov	r16,r6
 400373c:	3823883a 	mov	r17,r7
 4003740:	003f3206 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003744:	80000c1e 	bne	r16,zero,4003778 <__addsf3+0x3c8>
 4003748:	20002f26 	beq	r4,zero,4003808 <__addsf3+0x458>
 400374c:	00c6303a 	nor	r3,zero,r3
 4003750:	18002b1e 	bne	r3,zero,4003800 <__addsf3+0x450>
 4003754:	2149883a 	add	r4,r4,r5
 4003758:	3021883a 	mov	r16,r6
 400375c:	003f8606 	br	4003578 <__ram_exceptions_end+0xfbfc3330>
 4003760:	20001b1e 	bne	r4,zero,40037d0 <__addsf3+0x420>
 4003764:	28003926 	beq	r5,zero,400384c <__addsf3+0x49c>
 4003768:	2809883a 	mov	r4,r5
 400376c:	3823883a 	mov	r17,r7
 4003770:	04003fc4 	movi	r16,255
 4003774:	003f2506 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003778:	01c03fc4 	movi	r7,255
 400377c:	31c02226 	beq	r6,r7,4003808 <__addsf3+0x458>
 4003780:	00c7c83a 	sub	r3,zero,r3
 4003784:	21010034 	orhi	r4,r4,1024
 4003788:	01c006c4 	movi	r7,27
 400378c:	38c03616 	blt	r7,r3,4003868 <__addsf3+0x4b8>
 4003790:	01c00804 	movi	r7,32
 4003794:	38cfc83a 	sub	r7,r7,r3
 4003798:	21ce983a 	sll	r7,r4,r7
 400379c:	20c6d83a 	srl	r3,r4,r3
 40037a0:	3808c03a 	cmpne	r4,r7,zero
 40037a4:	1906b03a 	or	r3,r3,r4
 40037a8:	1949883a 	add	r4,r3,r5
 40037ac:	3021883a 	mov	r16,r6
 40037b0:	003f7106 	br	4003578 <__ram_exceptions_end+0xfbfc3330>
 40037b4:	283f1526 	beq	r5,zero,400340c <__ram_exceptions_end+0xfbfc31c4>
 40037b8:	2145c83a 	sub	r2,r4,r5
 40037bc:	10c1002c 	andhi	r3,r2,1024
 40037c0:	183f4f26 	beq	r3,zero,4003500 <__ram_exceptions_end+0xfbfc32b8>
 40037c4:	2909c83a 	sub	r4,r5,r4
 40037c8:	3823883a 	mov	r17,r7
 40037cc:	003f0f06 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 40037d0:	28001a26 	beq	r5,zero,400383c <__addsf3+0x48c>
 40037d4:	2008d0fa 	srli	r4,r4,3
 40037d8:	2080102c 	andhi	r2,r4,64
 40037dc:	10000526 	beq	r2,zero,40037f4 <__addsf3+0x444>
 40037e0:	280ad0fa 	srli	r5,r5,3
 40037e4:	2880102c 	andhi	r2,r5,64
 40037e8:	1000021e 	bne	r2,zero,40037f4 <__addsf3+0x444>
 40037ec:	2809883a 	mov	r4,r5
 40037f0:	3823883a 	mov	r17,r7
 40037f4:	200890fa 	slli	r4,r4,3
 40037f8:	04003fc4 	movi	r16,255
 40037fc:	003f0306 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003800:	01c03fc4 	movi	r7,255
 4003804:	31ffe01e 	bne	r6,r7,4003788 <__ram_exceptions_end+0xfbfc3540>
 4003808:	2809883a 	mov	r4,r5
 400380c:	3021883a 	mov	r16,r6
 4003810:	003efe06 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003814:	20001126 	beq	r4,zero,400385c <__addsf3+0x4ac>
 4003818:	28000826 	beq	r5,zero,400383c <__addsf3+0x48c>
 400381c:	2008d0fa 	srli	r4,r4,3
 4003820:	2080102c 	andhi	r2,r4,64
 4003824:	103ff326 	beq	r2,zero,40037f4 <__ram_exceptions_end+0xfbfc35ac>
 4003828:	280ad0fa 	srli	r5,r5,3
 400382c:	2880102c 	andhi	r2,r5,64
 4003830:	103ff01e 	bne	r2,zero,40037f4 <__ram_exceptions_end+0xfbfc35ac>
 4003834:	2809883a 	mov	r4,r5
 4003838:	003fee06 	br	40037f4 <__ram_exceptions_end+0xfbfc35ac>
 400383c:	04003fc4 	movi	r16,255
 4003840:	003ef206 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003844:	01000044 	movi	r4,1
 4003848:	003f9706 	br	40036a8 <__ram_exceptions_end+0xfbfc3460>
 400384c:	0005883a 	mov	r2,zero
 4003850:	003f3406 	br	4003524 <__ram_exceptions_end+0xfbfc32dc>
 4003854:	2809883a 	mov	r4,r5
 4003858:	003eec06 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 400385c:	2809883a 	mov	r4,r5
 4003860:	04003fc4 	movi	r16,255
 4003864:	003ee906 	br	400340c <__ram_exceptions_end+0xfbfc31c4>
 4003868:	00c00044 	movi	r3,1
 400386c:	003fce06 	br	40037a8 <__ram_exceptions_end+0xfbfc3560>
 4003870:	0005883a 	mov	r2,zero
 4003874:	003f4e06 	br	40035b0 <__ram_exceptions_end+0xfbfc3368>

04003878 <__divsf3>:
 4003878:	defff504 	addi	sp,sp,-44
 400387c:	200cd5fa 	srli	r6,r4,23
 4003880:	dcc00415 	stw	r19,16(sp)
 4003884:	2026d7fa 	srli	r19,r4,31
 4003888:	00c02034 	movhi	r3,128
 400388c:	dd800715 	stw	r22,28(sp)
 4003890:	dd000515 	stw	r20,20(sp)
 4003894:	dc800315 	stw	r18,12(sp)
 4003898:	18ffffc4 	addi	r3,r3,-1
 400389c:	dfc00a15 	stw	ra,40(sp)
 40038a0:	df000915 	stw	fp,36(sp)
 40038a4:	ddc00815 	stw	r23,32(sp)
 40038a8:	dd400615 	stw	r21,24(sp)
 40038ac:	dc400215 	stw	r17,8(sp)
 40038b0:	dc000115 	stw	r16,4(sp)
 40038b4:	35003fcc 	andi	r20,r6,255
 40038b8:	1924703a 	and	r18,r3,r4
 40038bc:	9d803fcc 	andi	r22,r19,255
 40038c0:	a0005226 	beq	r20,zero,4003a0c <__divsf3+0x194>
 40038c4:	00803fc4 	movi	r2,255
 40038c8:	a0802e26 	beq	r20,r2,4003984 <__divsf3+0x10c>
 40038cc:	91002034 	orhi	r4,r18,128
 40038d0:	202490fa 	slli	r18,r4,3
 40038d4:	a53fe044 	addi	r20,r20,-127
 40038d8:	0021883a 	mov	r16,zero
 40038dc:	002f883a 	mov	r23,zero
 40038e0:	280cd5fa 	srli	r6,r5,23
 40038e4:	282ad7fa 	srli	r21,r5,31
 40038e8:	00c02034 	movhi	r3,128
 40038ec:	18ffffc4 	addi	r3,r3,-1
 40038f0:	31803fcc 	andi	r6,r6,255
 40038f4:	1962703a 	and	r17,r3,r5
 40038f8:	af003fcc 	andi	fp,r21,255
 40038fc:	30004a26 	beq	r6,zero,4003a28 <__divsf3+0x1b0>
 4003900:	00803fc4 	movi	r2,255
 4003904:	30804526 	beq	r6,r2,4003a1c <__divsf3+0x1a4>
 4003908:	89402034 	orhi	r5,r17,128
 400390c:	282290fa 	slli	r17,r5,3
 4003910:	31bfe044 	addi	r6,r6,-127
 4003914:	000b883a 	mov	r5,zero
 4003918:	2c20b03a 	or	r16,r5,r16
 400391c:	802090ba 	slli	r16,r16,2
 4003920:	00810034 	movhi	r2,1024
 4003924:	108e5104 	addi	r2,r2,14660
 4003928:	80a1883a 	add	r16,r16,r2
 400392c:	81000017 	ldw	r4,0(r16)
 4003930:	9d46f03a 	xor	r3,r19,r21
 4003934:	180f883a 	mov	r7,r3
 4003938:	18803fcc 	andi	r2,r3,255
 400393c:	a18dc83a 	sub	r6,r20,r6
 4003940:	2000683a 	jmp	r4
 4003944:	04003b28 	cmpgeui	r16,zero,236
 4003948:	040039ac 	andhi	r16,zero,230
 400394c:	04003b1c 	xori	r16,zero,236
 4003950:	04003998 	cmpnei	r16,zero,230
 4003954:	04003b1c 	xori	r16,zero,236
 4003958:	04003af4 	movhi	r16,235
 400395c:	04003b1c 	xori	r16,zero,236
 4003960:	04003998 	cmpnei	r16,zero,230
 4003964:	040039ac 	andhi	r16,zero,230
 4003968:	040039ac 	andhi	r16,zero,230
 400396c:	04003af4 	movhi	r16,235
 4003970:	04003998 	cmpnei	r16,zero,230
 4003974:	04003c08 	cmpgei	r16,zero,240
 4003978:	04003c08 	cmpgei	r16,zero,240
 400397c:	04003c08 	cmpgei	r16,zero,240
 4003980:	04003bbc 	xorhi	r16,zero,238
 4003984:	9000581e 	bne	r18,zero,4003ae8 <__divsf3+0x270>
 4003988:	04000204 	movi	r16,8
 400398c:	05c00084 	movi	r23,2
 4003990:	003fd306 	br	40038e0 <__ram_exceptions_end+0xfbfc3698>
 4003994:	0023883a 	mov	r17,zero
 4003998:	e02d883a 	mov	r22,fp
 400399c:	282f883a 	mov	r23,r5
 40039a0:	00800084 	movi	r2,2
 40039a4:	b8808f1e 	bne	r23,r2,4003be4 <__divsf3+0x36c>
 40039a8:	b005883a 	mov	r2,r22
 40039ac:	11c0004c 	andi	r7,r2,1
 40039b0:	013fffc4 	movi	r4,-1
 40039b4:	000d883a 	mov	r6,zero
 40039b8:	21003fcc 	andi	r4,r4,255
 40039bc:	200895fa 	slli	r4,r4,23
 40039c0:	38803fcc 	andi	r2,r7,255
 40039c4:	00c02034 	movhi	r3,128
 40039c8:	100497fa 	slli	r2,r2,31
 40039cc:	18ffffc4 	addi	r3,r3,-1
 40039d0:	30c6703a 	and	r3,r6,r3
 40039d4:	1906b03a 	or	r3,r3,r4
 40039d8:	1884b03a 	or	r2,r3,r2
 40039dc:	dfc00a17 	ldw	ra,40(sp)
 40039e0:	df000917 	ldw	fp,36(sp)
 40039e4:	ddc00817 	ldw	r23,32(sp)
 40039e8:	dd800717 	ldw	r22,28(sp)
 40039ec:	dd400617 	ldw	r21,24(sp)
 40039f0:	dd000517 	ldw	r20,20(sp)
 40039f4:	dcc00417 	ldw	r19,16(sp)
 40039f8:	dc800317 	ldw	r18,12(sp)
 40039fc:	dc400217 	ldw	r17,8(sp)
 4003a00:	dc000117 	ldw	r16,4(sp)
 4003a04:	dec00b04 	addi	sp,sp,44
 4003a08:	f800283a 	ret
 4003a0c:	90002b1e 	bne	r18,zero,4003abc <__divsf3+0x244>
 4003a10:	04000104 	movi	r16,4
 4003a14:	05c00044 	movi	r23,1
 4003a18:	003fb106 	br	40038e0 <__ram_exceptions_end+0xfbfc3698>
 4003a1c:	8800251e 	bne	r17,zero,4003ab4 <__divsf3+0x23c>
 4003a20:	01400084 	movi	r5,2
 4003a24:	00000206 	br	4003a30 <__divsf3+0x1b8>
 4003a28:	88001a1e 	bne	r17,zero,4003a94 <__divsf3+0x21c>
 4003a2c:	01400044 	movi	r5,1
 4003a30:	8160b03a 	or	r16,r16,r5
 4003a34:	802090ba 	slli	r16,r16,2
 4003a38:	00c10034 	movhi	r3,1024
 4003a3c:	18ce9504 	addi	r3,r3,14932
 4003a40:	80e1883a 	add	r16,r16,r3
 4003a44:	80c00017 	ldw	r3,0(r16)
 4003a48:	9d44f03a 	xor	r2,r19,r21
 4003a4c:	a18dc83a 	sub	r6,r20,r6
 4003a50:	1800683a 	jmp	r3
 4003a54:	040039ac 	andhi	r16,zero,230
 4003a58:	040039ac 	andhi	r16,zero,230
 4003a5c:	04003bf8 	rdprs	r16,zero,239
 4003a60:	04003994 	movui	r16,230
 4003a64:	04003bf8 	rdprs	r16,zero,239
 4003a68:	04003af4 	movhi	r16,235
 4003a6c:	04003bf8 	rdprs	r16,zero,239
 4003a70:	04003994 	movui	r16,230
 4003a74:	040039ac 	andhi	r16,zero,230
 4003a78:	040039ac 	andhi	r16,zero,230
 4003a7c:	04003af4 	movhi	r16,235
 4003a80:	04003994 	movui	r16,230
 4003a84:	04003c08 	cmpgei	r16,zero,240
 4003a88:	04003c08 	cmpgei	r16,zero,240
 4003a8c:	04003c08 	cmpgei	r16,zero,240
 4003a90:	04003c20 	cmpeqi	r16,zero,240
 4003a94:	8809883a 	mov	r4,r17
 4003a98:	40065b80 	call	40065b8 <__clzsi2>
 4003a9c:	10fffec4 	addi	r3,r2,-5
 4003aa0:	10801d84 	addi	r2,r2,118
 4003aa4:	88e2983a 	sll	r17,r17,r3
 4003aa8:	008dc83a 	sub	r6,zero,r2
 4003aac:	000b883a 	mov	r5,zero
 4003ab0:	003f9906 	br	4003918 <__ram_exceptions_end+0xfbfc36d0>
 4003ab4:	014000c4 	movi	r5,3
 4003ab8:	003f9706 	br	4003918 <__ram_exceptions_end+0xfbfc36d0>
 4003abc:	9009883a 	mov	r4,r18
 4003ac0:	d9400015 	stw	r5,0(sp)
 4003ac4:	40065b80 	call	40065b8 <__clzsi2>
 4003ac8:	10fffec4 	addi	r3,r2,-5
 4003acc:	11801d84 	addi	r6,r2,118
 4003ad0:	90e4983a 	sll	r18,r18,r3
 4003ad4:	01a9c83a 	sub	r20,zero,r6
 4003ad8:	0021883a 	mov	r16,zero
 4003adc:	002f883a 	mov	r23,zero
 4003ae0:	d9400017 	ldw	r5,0(sp)
 4003ae4:	003f7e06 	br	40038e0 <__ram_exceptions_end+0xfbfc3698>
 4003ae8:	04000304 	movi	r16,12
 4003aec:	05c000c4 	movi	r23,3
 4003af0:	003f7b06 	br	40038e0 <__ram_exceptions_end+0xfbfc3698>
 4003af4:	01802034 	movhi	r6,128
 4003af8:	000f883a 	mov	r7,zero
 4003afc:	31bfffc4 	addi	r6,r6,-1
 4003b00:	013fffc4 	movi	r4,-1
 4003b04:	003fac06 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003b08:	01400044 	movi	r5,1
 4003b0c:	2909c83a 	sub	r4,r5,r4
 4003b10:	00c006c4 	movi	r3,27
 4003b14:	19004b0e 	bge	r3,r4,4003c44 <__divsf3+0x3cc>
 4003b18:	114e703a 	and	r7,r2,r5
 4003b1c:	0009883a 	mov	r4,zero
 4003b20:	000d883a 	mov	r6,zero
 4003b24:	003fa406 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003b28:	9006917a 	slli	r3,r18,5
 4003b2c:	8822917a 	slli	r17,r17,5
 4003b30:	1c40372e 	bgeu	r3,r17,4003c10 <__divsf3+0x398>
 4003b34:	31bfffc4 	addi	r6,r6,-1
 4003b38:	010006c4 	movi	r4,27
 4003b3c:	000b883a 	mov	r5,zero
 4003b40:	180f883a 	mov	r7,r3
 4003b44:	294b883a 	add	r5,r5,r5
 4003b48:	18c7883a 	add	r3,r3,r3
 4003b4c:	38000116 	blt	r7,zero,4003b54 <__divsf3+0x2dc>
 4003b50:	1c400236 	bltu	r3,r17,4003b5c <__divsf3+0x2e4>
 4003b54:	1c47c83a 	sub	r3,r3,r17
 4003b58:	29400054 	ori	r5,r5,1
 4003b5c:	213fffc4 	addi	r4,r4,-1
 4003b60:	203ff71e 	bne	r4,zero,4003b40 <__ram_exceptions_end+0xfbfc38f8>
 4003b64:	1806c03a 	cmpne	r3,r3,zero
 4003b68:	1962b03a 	or	r17,r3,r5
 4003b6c:	31001fc4 	addi	r4,r6,127
 4003b70:	013fe50e 	bge	zero,r4,4003b08 <__ram_exceptions_end+0xfbfc38c0>
 4003b74:	88c001cc 	andi	r3,r17,7
 4003b78:	18000426 	beq	r3,zero,4003b8c <__divsf3+0x314>
 4003b7c:	88c003cc 	andi	r3,r17,15
 4003b80:	01400104 	movi	r5,4
 4003b84:	19400126 	beq	r3,r5,4003b8c <__divsf3+0x314>
 4003b88:	8963883a 	add	r17,r17,r5
 4003b8c:	88c2002c 	andhi	r3,r17,2048
 4003b90:	18000426 	beq	r3,zero,4003ba4 <__divsf3+0x32c>
 4003b94:	00fe0034 	movhi	r3,63488
 4003b98:	18ffffc4 	addi	r3,r3,-1
 4003b9c:	31002004 	addi	r4,r6,128
 4003ba0:	88e2703a 	and	r17,r17,r3
 4003ba4:	00c03f84 	movi	r3,254
 4003ba8:	193f8016 	blt	r3,r4,40039ac <__ram_exceptions_end+0xfbfc3764>
 4003bac:	880c91ba 	slli	r6,r17,6
 4003bb0:	11c0004c 	andi	r7,r2,1
 4003bb4:	300cd27a 	srli	r6,r6,9
 4003bb8:	003f7f06 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003bbc:	9080102c 	andhi	r2,r18,64
 4003bc0:	10000226 	beq	r2,zero,4003bcc <__divsf3+0x354>
 4003bc4:	8880102c 	andhi	r2,r17,64
 4003bc8:	10001826 	beq	r2,zero,4003c2c <__divsf3+0x3b4>
 4003bcc:	00802034 	movhi	r2,128
 4003bd0:	91801034 	orhi	r6,r18,64
 4003bd4:	10bfffc4 	addi	r2,r2,-1
 4003bd8:	980f883a 	mov	r7,r19
 4003bdc:	308c703a 	and	r6,r6,r2
 4003be0:	003fc706 	br	4003b00 <__ram_exceptions_end+0xfbfc38b8>
 4003be4:	008000c4 	movi	r2,3
 4003be8:	b8802d26 	beq	r23,r2,4003ca0 <__divsf3+0x428>
 4003bec:	00c00044 	movi	r3,1
 4003bf0:	b005883a 	mov	r2,r22
 4003bf4:	b8ffdd1e 	bne	r23,r3,4003b6c <__ram_exceptions_end+0xfbfc3924>
 4003bf8:	11c0004c 	andi	r7,r2,1
 4003bfc:	0009883a 	mov	r4,zero
 4003c00:	000d883a 	mov	r6,zero
 4003c04:	003f6c06 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003c08:	9023883a 	mov	r17,r18
 4003c0c:	003f6406 	br	40039a0 <__ram_exceptions_end+0xfbfc3758>
 4003c10:	1c47c83a 	sub	r3,r3,r17
 4003c14:	01000684 	movi	r4,26
 4003c18:	01400044 	movi	r5,1
 4003c1c:	003fc806 	br	4003b40 <__ram_exceptions_end+0xfbfc38f8>
 4003c20:	9080102c 	andhi	r2,r18,64
 4003c24:	103fe926 	beq	r2,zero,4003bcc <__ram_exceptions_end+0xfbfc3984>
 4003c28:	0023883a 	mov	r17,zero
 4003c2c:	00802034 	movhi	r2,128
 4003c30:	89801034 	orhi	r6,r17,64
 4003c34:	10bfffc4 	addi	r2,r2,-1
 4003c38:	a80f883a 	mov	r7,r21
 4003c3c:	308c703a 	and	r6,r6,r2
 4003c40:	003faf06 	br	4003b00 <__ram_exceptions_end+0xfbfc38b8>
 4003c44:	01c00804 	movi	r7,32
 4003c48:	390fc83a 	sub	r7,r7,r4
 4003c4c:	89ce983a 	sll	r7,r17,r7
 4003c50:	890ad83a 	srl	r5,r17,r4
 4003c54:	380ec03a 	cmpne	r7,r7,zero
 4003c58:	29cab03a 	or	r5,r5,r7
 4003c5c:	28c001cc 	andi	r3,r5,7
 4003c60:	18000426 	beq	r3,zero,4003c74 <__divsf3+0x3fc>
 4003c64:	28c003cc 	andi	r3,r5,15
 4003c68:	01000104 	movi	r4,4
 4003c6c:	19000126 	beq	r3,r4,4003c74 <__divsf3+0x3fc>
 4003c70:	290b883a 	add	r5,r5,r4
 4003c74:	28c1002c 	andhi	r3,r5,1024
 4003c78:	18000426 	beq	r3,zero,4003c8c <__divsf3+0x414>
 4003c7c:	11c0004c 	andi	r7,r2,1
 4003c80:	01000044 	movi	r4,1
 4003c84:	000d883a 	mov	r6,zero
 4003c88:	003f4b06 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003c8c:	280a91ba 	slli	r5,r5,6
 4003c90:	11c0004c 	andi	r7,r2,1
 4003c94:	0009883a 	mov	r4,zero
 4003c98:	280cd27a 	srli	r6,r5,9
 4003c9c:	003f4606 	br	40039b8 <__ram_exceptions_end+0xfbfc3770>
 4003ca0:	00802034 	movhi	r2,128
 4003ca4:	89801034 	orhi	r6,r17,64
 4003ca8:	10bfffc4 	addi	r2,r2,-1
 4003cac:	b00f883a 	mov	r7,r22
 4003cb0:	308c703a 	and	r6,r6,r2
 4003cb4:	003f9206 	br	4003b00 <__ram_exceptions_end+0xfbfc38b8>

04003cb8 <__eqsf2>:
 4003cb8:	2006d5fa 	srli	r3,r4,23
 4003cbc:	280cd5fa 	srli	r6,r5,23
 4003cc0:	01c02034 	movhi	r7,128
 4003cc4:	39ffffc4 	addi	r7,r7,-1
 4003cc8:	18c03fcc 	andi	r3,r3,255
 4003ccc:	02003fc4 	movi	r8,255
 4003cd0:	3904703a 	and	r2,r7,r4
 4003cd4:	31803fcc 	andi	r6,r6,255
 4003cd8:	394e703a 	and	r7,r7,r5
 4003cdc:	2008d7fa 	srli	r4,r4,31
 4003ce0:	280ad7fa 	srli	r5,r5,31
 4003ce4:	1a000d26 	beq	r3,r8,4003d1c <__eqsf2+0x64>
 4003ce8:	02003fc4 	movi	r8,255
 4003cec:	32000826 	beq	r6,r8,4003d10 <__eqsf2+0x58>
 4003cf0:	19800226 	beq	r3,r6,4003cfc <__eqsf2+0x44>
 4003cf4:	00800044 	movi	r2,1
 4003cf8:	f800283a 	ret
 4003cfc:	11fffd1e 	bne	r2,r7,4003cf4 <__ram_exceptions_end+0xfbfc3aac>
 4003d00:	21400926 	beq	r4,r5,4003d28 <__eqsf2+0x70>
 4003d04:	183ffb1e 	bne	r3,zero,4003cf4 <__ram_exceptions_end+0xfbfc3aac>
 4003d08:	1004c03a 	cmpne	r2,r2,zero
 4003d0c:	f800283a 	ret
 4003d10:	383ff726 	beq	r7,zero,4003cf0 <__ram_exceptions_end+0xfbfc3aa8>
 4003d14:	00800044 	movi	r2,1
 4003d18:	f800283a 	ret
 4003d1c:	103ff226 	beq	r2,zero,4003ce8 <__ram_exceptions_end+0xfbfc3aa0>
 4003d20:	00800044 	movi	r2,1
 4003d24:	f800283a 	ret
 4003d28:	0005883a 	mov	r2,zero
 4003d2c:	f800283a 	ret

04003d30 <__gesf2>:
 4003d30:	2004d5fa 	srli	r2,r4,23
 4003d34:	2806d5fa 	srli	r3,r5,23
 4003d38:	01802034 	movhi	r6,128
 4003d3c:	31bfffc4 	addi	r6,r6,-1
 4003d40:	10803fcc 	andi	r2,r2,255
 4003d44:	01c03fc4 	movi	r7,255
 4003d48:	3110703a 	and	r8,r6,r4
 4003d4c:	18c03fcc 	andi	r3,r3,255
 4003d50:	314c703a 	and	r6,r6,r5
 4003d54:	2008d7fa 	srli	r4,r4,31
 4003d58:	280ad7fa 	srli	r5,r5,31
 4003d5c:	11c01926 	beq	r2,r7,4003dc4 <__gesf2+0x94>
 4003d60:	01c03fc4 	movi	r7,255
 4003d64:	19c00f26 	beq	r3,r7,4003da4 <__gesf2+0x74>
 4003d68:	1000061e 	bne	r2,zero,4003d84 <__gesf2+0x54>
 4003d6c:	400f003a 	cmpeq	r7,r8,zero
 4003d70:	1800071e 	bne	r3,zero,4003d90 <__gesf2+0x60>
 4003d74:	3000061e 	bne	r6,zero,4003d90 <__gesf2+0x60>
 4003d78:	0005883a 	mov	r2,zero
 4003d7c:	40000e1e 	bne	r8,zero,4003db8 <__gesf2+0x88>
 4003d80:	f800283a 	ret
 4003d84:	18000a1e 	bne	r3,zero,4003db0 <__gesf2+0x80>
 4003d88:	30000b26 	beq	r6,zero,4003db8 <__gesf2+0x88>
 4003d8c:	000f883a 	mov	r7,zero
 4003d90:	29403fcc 	andi	r5,r5,255
 4003d94:	38000726 	beq	r7,zero,4003db4 <__gesf2+0x84>
 4003d98:	28000826 	beq	r5,zero,4003dbc <__gesf2+0x8c>
 4003d9c:	00800044 	movi	r2,1
 4003da0:	f800283a 	ret
 4003da4:	303ff026 	beq	r6,zero,4003d68 <__ram_exceptions_end+0xfbfc3b20>
 4003da8:	00bfff84 	movi	r2,-2
 4003dac:	f800283a 	ret
 4003db0:	29403fcc 	andi	r5,r5,255
 4003db4:	21400526 	beq	r4,r5,4003dcc <__gesf2+0x9c>
 4003db8:	203ff826 	beq	r4,zero,4003d9c <__ram_exceptions_end+0xfbfc3b54>
 4003dbc:	00bfffc4 	movi	r2,-1
 4003dc0:	f800283a 	ret
 4003dc4:	403fe626 	beq	r8,zero,4003d60 <__ram_exceptions_end+0xfbfc3b18>
 4003dc8:	003ff706 	br	4003da8 <__ram_exceptions_end+0xfbfc3b60>
 4003dcc:	18bffa16 	blt	r3,r2,4003db8 <__ram_exceptions_end+0xfbfc3b70>
 4003dd0:	10c00216 	blt	r2,r3,4003ddc <__gesf2+0xac>
 4003dd4:	323ff836 	bltu	r6,r8,4003db8 <__ram_exceptions_end+0xfbfc3b70>
 4003dd8:	4180022e 	bgeu	r8,r6,4003de4 <__gesf2+0xb4>
 4003ddc:	203fef1e 	bne	r4,zero,4003d9c <__ram_exceptions_end+0xfbfc3b54>
 4003de0:	003ff606 	br	4003dbc <__ram_exceptions_end+0xfbfc3b74>
 4003de4:	0005883a 	mov	r2,zero
 4003de8:	f800283a 	ret

04003dec <__lesf2>:
 4003dec:	2004d5fa 	srli	r2,r4,23
 4003df0:	280cd5fa 	srli	r6,r5,23
 4003df4:	00c02034 	movhi	r3,128
 4003df8:	18ffffc4 	addi	r3,r3,-1
 4003dfc:	10803fcc 	andi	r2,r2,255
 4003e00:	01c03fc4 	movi	r7,255
 4003e04:	1910703a 	and	r8,r3,r4
 4003e08:	31803fcc 	andi	r6,r6,255
 4003e0c:	1946703a 	and	r3,r3,r5
 4003e10:	2008d7fa 	srli	r4,r4,31
 4003e14:	280ad7fa 	srli	r5,r5,31
 4003e18:	11c01b26 	beq	r2,r7,4003e88 <__lesf2+0x9c>
 4003e1c:	01c03fc4 	movi	r7,255
 4003e20:	31c01126 	beq	r6,r7,4003e68 <__lesf2+0x7c>
 4003e24:	1000071e 	bne	r2,zero,4003e44 <__lesf2+0x58>
 4003e28:	400f003a 	cmpeq	r7,r8,zero
 4003e2c:	21003fcc 	andi	r4,r4,255
 4003e30:	3000081e 	bne	r6,zero,4003e54 <__lesf2+0x68>
 4003e34:	1800071e 	bne	r3,zero,4003e54 <__lesf2+0x68>
 4003e38:	0005883a 	mov	r2,zero
 4003e3c:	40000f1e 	bne	r8,zero,4003e7c <__lesf2+0x90>
 4003e40:	f800283a 	ret
 4003e44:	21003fcc 	andi	r4,r4,255
 4003e48:	30000a1e 	bne	r6,zero,4003e74 <__lesf2+0x88>
 4003e4c:	18000b26 	beq	r3,zero,4003e7c <__lesf2+0x90>
 4003e50:	000f883a 	mov	r7,zero
 4003e54:	29403fcc 	andi	r5,r5,255
 4003e58:	38000726 	beq	r7,zero,4003e78 <__lesf2+0x8c>
 4003e5c:	28000826 	beq	r5,zero,4003e80 <__lesf2+0x94>
 4003e60:	00800044 	movi	r2,1
 4003e64:	f800283a 	ret
 4003e68:	183fee26 	beq	r3,zero,4003e24 <__ram_exceptions_end+0xfbfc3bdc>
 4003e6c:	00800084 	movi	r2,2
 4003e70:	f800283a 	ret
 4003e74:	29403fcc 	andi	r5,r5,255
 4003e78:	21400626 	beq	r4,r5,4003e94 <__lesf2+0xa8>
 4003e7c:	203ff826 	beq	r4,zero,4003e60 <__ram_exceptions_end+0xfbfc3c18>
 4003e80:	00bfffc4 	movi	r2,-1
 4003e84:	f800283a 	ret
 4003e88:	403fe426 	beq	r8,zero,4003e1c <__ram_exceptions_end+0xfbfc3bd4>
 4003e8c:	00800084 	movi	r2,2
 4003e90:	f800283a 	ret
 4003e94:	30bff916 	blt	r6,r2,4003e7c <__ram_exceptions_end+0xfbfc3c34>
 4003e98:	11800216 	blt	r2,r6,4003ea4 <__lesf2+0xb8>
 4003e9c:	1a3ff736 	bltu	r3,r8,4003e7c <__ram_exceptions_end+0xfbfc3c34>
 4003ea0:	40c0022e 	bgeu	r8,r3,4003eac <__lesf2+0xc0>
 4003ea4:	203fee1e 	bne	r4,zero,4003e60 <__ram_exceptions_end+0xfbfc3c18>
 4003ea8:	003ff506 	br	4003e80 <__ram_exceptions_end+0xfbfc3c38>
 4003eac:	0005883a 	mov	r2,zero
 4003eb0:	f800283a 	ret

04003eb4 <__mulsf3>:
 4003eb4:	defff504 	addi	sp,sp,-44
 4003eb8:	dc000115 	stw	r16,4(sp)
 4003ebc:	2020d5fa 	srli	r16,r4,23
 4003ec0:	dd400615 	stw	r21,24(sp)
 4003ec4:	202ad7fa 	srli	r21,r4,31
 4003ec8:	dc800315 	stw	r18,12(sp)
 4003ecc:	04802034 	movhi	r18,128
 4003ed0:	df000915 	stw	fp,36(sp)
 4003ed4:	dd000515 	stw	r20,20(sp)
 4003ed8:	94bfffc4 	addi	r18,r18,-1
 4003edc:	dfc00a15 	stw	ra,40(sp)
 4003ee0:	ddc00815 	stw	r23,32(sp)
 4003ee4:	dd800715 	stw	r22,28(sp)
 4003ee8:	dcc00415 	stw	r19,16(sp)
 4003eec:	dc400215 	stw	r17,8(sp)
 4003ef0:	84003fcc 	andi	r16,r16,255
 4003ef4:	9124703a 	and	r18,r18,r4
 4003ef8:	a829883a 	mov	r20,r21
 4003efc:	af003fcc 	andi	fp,r21,255
 4003f00:	80005426 	beq	r16,zero,4004054 <__mulsf3+0x1a0>
 4003f04:	00803fc4 	movi	r2,255
 4003f08:	80802f26 	beq	r16,r2,4003fc8 <__mulsf3+0x114>
 4003f0c:	91002034 	orhi	r4,r18,128
 4003f10:	202490fa 	slli	r18,r4,3
 4003f14:	843fe044 	addi	r16,r16,-127
 4003f18:	0023883a 	mov	r17,zero
 4003f1c:	002f883a 	mov	r23,zero
 4003f20:	2804d5fa 	srli	r2,r5,23
 4003f24:	282cd7fa 	srli	r22,r5,31
 4003f28:	01002034 	movhi	r4,128
 4003f2c:	213fffc4 	addi	r4,r4,-1
 4003f30:	10803fcc 	andi	r2,r2,255
 4003f34:	2166703a 	and	r19,r4,r5
 4003f38:	b1803fcc 	andi	r6,r22,255
 4003f3c:	10004c26 	beq	r2,zero,4004070 <__mulsf3+0x1bc>
 4003f40:	00c03fc4 	movi	r3,255
 4003f44:	10c04726 	beq	r2,r3,4004064 <__mulsf3+0x1b0>
 4003f48:	99002034 	orhi	r4,r19,128
 4003f4c:	202690fa 	slli	r19,r4,3
 4003f50:	10bfe044 	addi	r2,r2,-127
 4003f54:	0007883a 	mov	r3,zero
 4003f58:	80a1883a 	add	r16,r16,r2
 4003f5c:	010003c4 	movi	r4,15
 4003f60:	1c44b03a 	or	r2,r3,r17
 4003f64:	b56af03a 	xor	r21,r22,r21
 4003f68:	81c00044 	addi	r7,r16,1
 4003f6c:	20806b36 	bltu	r4,r2,400411c <__mulsf3+0x268>
 4003f70:	100490ba 	slli	r2,r2,2
 4003f74:	01010034 	movhi	r4,1024
 4003f78:	210fe204 	addi	r4,r4,16264
 4003f7c:	1105883a 	add	r2,r2,r4
 4003f80:	10800017 	ldw	r2,0(r2)
 4003f84:	1000683a 	jmp	r2
 4003f88:	0400411c 	xori	r16,zero,260
 4003f8c:	04003fdc 	xori	r16,zero,255
 4003f90:	04003fdc 	xori	r16,zero,255
 4003f94:	04003fd8 	cmpnei	r16,zero,255
 4003f98:	04004100 	call	400410 <__alt_mem_new_sdram_controller_0-0x3bffbf0>
 4003f9c:	04004100 	call	400410 <__alt_mem_new_sdram_controller_0-0x3bffbf0>
 4003fa0:	040040ec 	andhi	r16,zero,259
 4003fa4:	04003fd8 	cmpnei	r16,zero,255
 4003fa8:	04004100 	call	400410 <__alt_mem_new_sdram_controller_0-0x3bffbf0>
 4003fac:	040040ec 	andhi	r16,zero,259
 4003fb0:	04004100 	call	400410 <__alt_mem_new_sdram_controller_0-0x3bffbf0>
 4003fb4:	04003fd8 	cmpnei	r16,zero,255
 4003fb8:	0400410c 	andi	r16,zero,260
 4003fbc:	0400410c 	andi	r16,zero,260
 4003fc0:	0400410c 	andi	r16,zero,260
 4003fc4:	040041e8 	cmpgeui	r16,zero,263
 4003fc8:	90003b1e 	bne	r18,zero,40040b8 <__mulsf3+0x204>
 4003fcc:	04400204 	movi	r17,8
 4003fd0:	05c00084 	movi	r23,2
 4003fd4:	003fd206 	br	4003f20 <__ram_exceptions_end+0xfbfc3cd8>
 4003fd8:	302b883a 	mov	r21,r6
 4003fdc:	00800084 	movi	r2,2
 4003fe0:	18802626 	beq	r3,r2,400407c <__mulsf3+0x1c8>
 4003fe4:	008000c4 	movi	r2,3
 4003fe8:	1880ab26 	beq	r3,r2,4004298 <__mulsf3+0x3e4>
 4003fec:	00800044 	movi	r2,1
 4003ff0:	1880a21e 	bne	r3,r2,400427c <__mulsf3+0x3c8>
 4003ff4:	a829883a 	mov	r20,r21
 4003ff8:	0007883a 	mov	r3,zero
 4003ffc:	0009883a 	mov	r4,zero
 4004000:	18803fcc 	andi	r2,r3,255
 4004004:	100695fa 	slli	r3,r2,23
 4004008:	a0803fcc 	andi	r2,r20,255
 400400c:	100a97fa 	slli	r5,r2,31
 4004010:	00802034 	movhi	r2,128
 4004014:	10bfffc4 	addi	r2,r2,-1
 4004018:	2084703a 	and	r2,r4,r2
 400401c:	10c4b03a 	or	r2,r2,r3
 4004020:	1144b03a 	or	r2,r2,r5
 4004024:	dfc00a17 	ldw	ra,40(sp)
 4004028:	df000917 	ldw	fp,36(sp)
 400402c:	ddc00817 	ldw	r23,32(sp)
 4004030:	dd800717 	ldw	r22,28(sp)
 4004034:	dd400617 	ldw	r21,24(sp)
 4004038:	dd000517 	ldw	r20,20(sp)
 400403c:	dcc00417 	ldw	r19,16(sp)
 4004040:	dc800317 	ldw	r18,12(sp)
 4004044:	dc400217 	ldw	r17,8(sp)
 4004048:	dc000117 	ldw	r16,4(sp)
 400404c:	dec00b04 	addi	sp,sp,44
 4004050:	f800283a 	ret
 4004054:	90000d1e 	bne	r18,zero,400408c <__mulsf3+0x1d8>
 4004058:	04400104 	movi	r17,4
 400405c:	05c00044 	movi	r23,1
 4004060:	003faf06 	br	4003f20 <__ram_exceptions_end+0xfbfc3cd8>
 4004064:	9806c03a 	cmpne	r3,r19,zero
 4004068:	18c00084 	addi	r3,r3,2
 400406c:	003fba06 	br	4003f58 <__ram_exceptions_end+0xfbfc3d10>
 4004070:	9800141e 	bne	r19,zero,40040c4 <__mulsf3+0x210>
 4004074:	00c00044 	movi	r3,1
 4004078:	003fb706 	br	4003f58 <__ram_exceptions_end+0xfbfc3d10>
 400407c:	a829883a 	mov	r20,r21
 4004080:	00ffffc4 	movi	r3,-1
 4004084:	0009883a 	mov	r4,zero
 4004088:	003fdd06 	br	4004000 <__ram_exceptions_end+0xfbfc3db8>
 400408c:	9009883a 	mov	r4,r18
 4004090:	d9400015 	stw	r5,0(sp)
 4004094:	40065b80 	call	40065b8 <__clzsi2>
 4004098:	10fffec4 	addi	r3,r2,-5
 400409c:	10801d84 	addi	r2,r2,118
 40040a0:	90e4983a 	sll	r18,r18,r3
 40040a4:	00a1c83a 	sub	r16,zero,r2
 40040a8:	0023883a 	mov	r17,zero
 40040ac:	002f883a 	mov	r23,zero
 40040b0:	d9400017 	ldw	r5,0(sp)
 40040b4:	003f9a06 	br	4003f20 <__ram_exceptions_end+0xfbfc3cd8>
 40040b8:	04400304 	movi	r17,12
 40040bc:	05c000c4 	movi	r23,3
 40040c0:	003f9706 	br	4003f20 <__ram_exceptions_end+0xfbfc3cd8>
 40040c4:	9809883a 	mov	r4,r19
 40040c8:	d9800015 	stw	r6,0(sp)
 40040cc:	40065b80 	call	40065b8 <__clzsi2>
 40040d0:	10fffec4 	addi	r3,r2,-5
 40040d4:	10801d84 	addi	r2,r2,118
 40040d8:	98e6983a 	sll	r19,r19,r3
 40040dc:	0085c83a 	sub	r2,zero,r2
 40040e0:	0007883a 	mov	r3,zero
 40040e4:	d9800017 	ldw	r6,0(sp)
 40040e8:	003f9b06 	br	4003f58 <__ram_exceptions_end+0xfbfc3d10>
 40040ec:	01002034 	movhi	r4,128
 40040f0:	0029883a 	mov	r20,zero
 40040f4:	213fffc4 	addi	r4,r4,-1
 40040f8:	00ffffc4 	movi	r3,-1
 40040fc:	003fc006 	br	4004000 <__ram_exceptions_end+0xfbfc3db8>
 4004100:	9027883a 	mov	r19,r18
 4004104:	b807883a 	mov	r3,r23
 4004108:	003fb406 	br	4003fdc <__ram_exceptions_end+0xfbfc3d94>
 400410c:	9027883a 	mov	r19,r18
 4004110:	e02b883a 	mov	r21,fp
 4004114:	b807883a 	mov	r3,r23
 4004118:	003fb006 	br	4003fdc <__ram_exceptions_end+0xfbfc3d94>
 400411c:	9004d43a 	srli	r2,r18,16
 4004120:	9810d43a 	srli	r8,r19,16
 4004124:	94bfffcc 	andi	r18,r18,65535
 4004128:	993fffcc 	andi	r4,r19,65535
 400412c:	910d383a 	mul	r6,r18,r4
 4004130:	20a7383a 	mul	r19,r4,r2
 4004134:	9225383a 	mul	r18,r18,r8
 4004138:	3006d43a 	srli	r3,r6,16
 400413c:	1211383a 	mul	r8,r2,r8
 4004140:	94e5883a 	add	r18,r18,r19
 4004144:	1c87883a 	add	r3,r3,r18
 4004148:	1cc0022e 	bgeu	r3,r19,4004154 <__mulsf3+0x2a0>
 400414c:	00800074 	movhi	r2,1
 4004150:	4091883a 	add	r8,r8,r2
 4004154:	1804943a 	slli	r2,r3,16
 4004158:	31bfffcc 	andi	r6,r6,65535
 400415c:	1806d43a 	srli	r3,r3,16
 4004160:	1185883a 	add	r2,r2,r6
 4004164:	102691ba 	slli	r19,r2,6
 4004168:	1a07883a 	add	r3,r3,r8
 400416c:	1004d6ba 	srli	r2,r2,26
 4004170:	180891ba 	slli	r4,r3,6
 4004174:	9826c03a 	cmpne	r19,r19,zero
 4004178:	9884b03a 	or	r2,r19,r2
 400417c:	1126b03a 	or	r19,r2,r4
 4004180:	9882002c 	andhi	r2,r19,2048
 4004184:	10000426 	beq	r2,zero,4004198 <__mulsf3+0x2e4>
 4004188:	9804d07a 	srli	r2,r19,1
 400418c:	9900004c 	andi	r4,r19,1
 4004190:	3821883a 	mov	r16,r7
 4004194:	1126b03a 	or	r19,r2,r4
 4004198:	80c01fc4 	addi	r3,r16,127
 400419c:	00c0210e 	bge	zero,r3,4004224 <__mulsf3+0x370>
 40041a0:	988001cc 	andi	r2,r19,7
 40041a4:	10000426 	beq	r2,zero,40041b8 <__mulsf3+0x304>
 40041a8:	988003cc 	andi	r2,r19,15
 40041ac:	01000104 	movi	r4,4
 40041b0:	11000126 	beq	r2,r4,40041b8 <__mulsf3+0x304>
 40041b4:	9927883a 	add	r19,r19,r4
 40041b8:	9882002c 	andhi	r2,r19,2048
 40041bc:	10000426 	beq	r2,zero,40041d0 <__mulsf3+0x31c>
 40041c0:	00be0034 	movhi	r2,63488
 40041c4:	10bfffc4 	addi	r2,r2,-1
 40041c8:	80c02004 	addi	r3,r16,128
 40041cc:	98a6703a 	and	r19,r19,r2
 40041d0:	00803f84 	movi	r2,254
 40041d4:	10ffa916 	blt	r2,r3,400407c <__ram_exceptions_end+0xfbfc3e34>
 40041d8:	980891ba 	slli	r4,r19,6
 40041dc:	a829883a 	mov	r20,r21
 40041e0:	2008d27a 	srli	r4,r4,9
 40041e4:	003f8606 	br	4004000 <__ram_exceptions_end+0xfbfc3db8>
 40041e8:	9080102c 	andhi	r2,r18,64
 40041ec:	10000826 	beq	r2,zero,4004210 <__mulsf3+0x35c>
 40041f0:	9880102c 	andhi	r2,r19,64
 40041f4:	1000061e 	bne	r2,zero,4004210 <__mulsf3+0x35c>
 40041f8:	00802034 	movhi	r2,128
 40041fc:	99001034 	orhi	r4,r19,64
 4004200:	10bfffc4 	addi	r2,r2,-1
 4004204:	b029883a 	mov	r20,r22
 4004208:	2088703a 	and	r4,r4,r2
 400420c:	003fba06 	br	40040f8 <__ram_exceptions_end+0xfbfc3eb0>
 4004210:	00802034 	movhi	r2,128
 4004214:	91001034 	orhi	r4,r18,64
 4004218:	10bfffc4 	addi	r2,r2,-1
 400421c:	2088703a 	and	r4,r4,r2
 4004220:	003fb506 	br	40040f8 <__ram_exceptions_end+0xfbfc3eb0>
 4004224:	00800044 	movi	r2,1
 4004228:	10c7c83a 	sub	r3,r2,r3
 400422c:	008006c4 	movi	r2,27
 4004230:	10ff7016 	blt	r2,r3,4003ff4 <__ram_exceptions_end+0xfbfc3dac>
 4004234:	00800804 	movi	r2,32
 4004238:	10c5c83a 	sub	r2,r2,r3
 400423c:	9884983a 	sll	r2,r19,r2
 4004240:	98c6d83a 	srl	r3,r19,r3
 4004244:	1004c03a 	cmpne	r2,r2,zero
 4004248:	1884b03a 	or	r2,r3,r2
 400424c:	10c001cc 	andi	r3,r2,7
 4004250:	18000426 	beq	r3,zero,4004264 <__mulsf3+0x3b0>
 4004254:	10c003cc 	andi	r3,r2,15
 4004258:	01000104 	movi	r4,4
 400425c:	19000126 	beq	r3,r4,4004264 <__mulsf3+0x3b0>
 4004260:	1105883a 	add	r2,r2,r4
 4004264:	10c1002c 	andhi	r3,r2,1024
 4004268:	18000626 	beq	r3,zero,4004284 <__mulsf3+0x3d0>
 400426c:	a829883a 	mov	r20,r21
 4004270:	00c00044 	movi	r3,1
 4004274:	0009883a 	mov	r4,zero
 4004278:	003f6106 	br	4004000 <__ram_exceptions_end+0xfbfc3db8>
 400427c:	3821883a 	mov	r16,r7
 4004280:	003fc506 	br	4004198 <__ram_exceptions_end+0xfbfc3f50>
 4004284:	100491ba 	slli	r2,r2,6
 4004288:	a829883a 	mov	r20,r21
 400428c:	0007883a 	mov	r3,zero
 4004290:	1008d27a 	srli	r4,r2,9
 4004294:	003f5a06 	br	4004000 <__ram_exceptions_end+0xfbfc3db8>
 4004298:	00802034 	movhi	r2,128
 400429c:	99001034 	orhi	r4,r19,64
 40042a0:	10bfffc4 	addi	r2,r2,-1
 40042a4:	a829883a 	mov	r20,r21
 40042a8:	2088703a 	and	r4,r4,r2
 40042ac:	003f9206 	br	40040f8 <__ram_exceptions_end+0xfbfc3eb0>

040042b0 <__subsf3>:
 40042b0:	defffc04 	addi	sp,sp,-16
 40042b4:	280cd5fa 	srli	r6,r5,23
 40042b8:	dc000015 	stw	r16,0(sp)
 40042bc:	01c02034 	movhi	r7,128
 40042c0:	2020d5fa 	srli	r16,r4,23
 40042c4:	39ffffc4 	addi	r7,r7,-1
 40042c8:	3906703a 	and	r3,r7,r4
 40042cc:	dc400115 	stw	r17,4(sp)
 40042d0:	394e703a 	and	r7,r7,r5
 40042d4:	2022d7fa 	srli	r17,r4,31
 40042d8:	dfc00315 	stw	ra,12(sp)
 40042dc:	dc800215 	stw	r18,8(sp)
 40042e0:	31803fcc 	andi	r6,r6,255
 40042e4:	01003fc4 	movi	r4,255
 40042e8:	84003fcc 	andi	r16,r16,255
 40042ec:	180690fa 	slli	r3,r3,3
 40042f0:	2804d7fa 	srli	r2,r5,31
 40042f4:	380e90fa 	slli	r7,r7,3
 40042f8:	31006d26 	beq	r6,r4,40044b0 <__subsf3+0x200>
 40042fc:	1080005c 	xori	r2,r2,1
 4004300:	8189c83a 	sub	r4,r16,r6
 4004304:	14404f26 	beq	r2,r17,4004444 <__subsf3+0x194>
 4004308:	0100770e 	bge	zero,r4,40044e8 <__subsf3+0x238>
 400430c:	30001e1e 	bne	r6,zero,4004388 <__subsf3+0xd8>
 4004310:	38006a1e 	bne	r7,zero,40044bc <__subsf3+0x20c>
 4004314:	188001cc 	andi	r2,r3,7
 4004318:	10000426 	beq	r2,zero,400432c <__subsf3+0x7c>
 400431c:	188003cc 	andi	r2,r3,15
 4004320:	01000104 	movi	r4,4
 4004324:	11000126 	beq	r2,r4,400432c <__subsf3+0x7c>
 4004328:	1907883a 	add	r3,r3,r4
 400432c:	1881002c 	andhi	r2,r3,1024
 4004330:	10003926 	beq	r2,zero,4004418 <__subsf3+0x168>
 4004334:	84000044 	addi	r16,r16,1
 4004338:	00803fc4 	movi	r2,255
 400433c:	80807526 	beq	r16,r2,4004514 <__subsf3+0x264>
 4004340:	180691ba 	slli	r3,r3,6
 4004344:	8880004c 	andi	r2,r17,1
 4004348:	180ad27a 	srli	r5,r3,9
 400434c:	84003fcc 	andi	r16,r16,255
 4004350:	800695fa 	slli	r3,r16,23
 4004354:	10803fcc 	andi	r2,r2,255
 4004358:	01002034 	movhi	r4,128
 400435c:	213fffc4 	addi	r4,r4,-1
 4004360:	100497fa 	slli	r2,r2,31
 4004364:	2920703a 	and	r16,r5,r4
 4004368:	80e0b03a 	or	r16,r16,r3
 400436c:	8084b03a 	or	r2,r16,r2
 4004370:	dfc00317 	ldw	ra,12(sp)
 4004374:	dc800217 	ldw	r18,8(sp)
 4004378:	dc400117 	ldw	r17,4(sp)
 400437c:	dc000017 	ldw	r16,0(sp)
 4004380:	dec00404 	addi	sp,sp,16
 4004384:	f800283a 	ret
 4004388:	00803fc4 	movi	r2,255
 400438c:	80bfe126 	beq	r16,r2,4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004390:	39c10034 	orhi	r7,r7,1024
 4004394:	008006c4 	movi	r2,27
 4004398:	11007416 	blt	r2,r4,400456c <__subsf3+0x2bc>
 400439c:	00800804 	movi	r2,32
 40043a0:	1105c83a 	sub	r2,r2,r4
 40043a4:	3884983a 	sll	r2,r7,r2
 40043a8:	390ed83a 	srl	r7,r7,r4
 40043ac:	1008c03a 	cmpne	r4,r2,zero
 40043b0:	390eb03a 	or	r7,r7,r4
 40043b4:	19c7c83a 	sub	r3,r3,r7
 40043b8:	1881002c 	andhi	r2,r3,1024
 40043bc:	10001426 	beq	r2,zero,4004410 <__subsf3+0x160>
 40043c0:	04810034 	movhi	r18,1024
 40043c4:	94bfffc4 	addi	r18,r18,-1
 40043c8:	1ca4703a 	and	r18,r3,r18
 40043cc:	9009883a 	mov	r4,r18
 40043d0:	40065b80 	call	40065b8 <__clzsi2>
 40043d4:	10bffec4 	addi	r2,r2,-5
 40043d8:	90a4983a 	sll	r18,r18,r2
 40043dc:	14005116 	blt	r2,r16,4004524 <__subsf3+0x274>
 40043e0:	1405c83a 	sub	r2,r2,r16
 40043e4:	10c00044 	addi	r3,r2,1
 40043e8:	00800804 	movi	r2,32
 40043ec:	10c5c83a 	sub	r2,r2,r3
 40043f0:	9084983a 	sll	r2,r18,r2
 40043f4:	90e4d83a 	srl	r18,r18,r3
 40043f8:	0021883a 	mov	r16,zero
 40043fc:	1006c03a 	cmpne	r3,r2,zero
 4004400:	90c6b03a 	or	r3,r18,r3
 4004404:	003fc306 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004408:	2000e026 	beq	r4,zero,400478c <__subsf3+0x4dc>
 400440c:	2007883a 	mov	r3,r4
 4004410:	188001cc 	andi	r2,r3,7
 4004414:	103fc11e 	bne	r2,zero,400431c <__ram_exceptions_end+0xfbfc40d4>
 4004418:	180ad0fa 	srli	r5,r3,3
 400441c:	00c03fc4 	movi	r3,255
 4004420:	8880004c 	andi	r2,r17,1
 4004424:	80c0031e 	bne	r16,r3,4004434 <__subsf3+0x184>
 4004428:	28006d26 	beq	r5,zero,40045e0 <__subsf3+0x330>
 400442c:	29401034 	orhi	r5,r5,64
 4004430:	043fffc4 	movi	r16,-1
 4004434:	00c02034 	movhi	r3,128
 4004438:	18ffffc4 	addi	r3,r3,-1
 400443c:	28ca703a 	and	r5,r5,r3
 4004440:	003fc206 	br	400434c <__ram_exceptions_end+0xfbfc4104>
 4004444:	01003c0e 	bge	zero,r4,4004538 <__subsf3+0x288>
 4004448:	30002126 	beq	r6,zero,40044d0 <__subsf3+0x220>
 400444c:	01403fc4 	movi	r5,255
 4004450:	817fb026 	beq	r16,r5,4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004454:	39c10034 	orhi	r7,r7,1024
 4004458:	014006c4 	movi	r5,27
 400445c:	29007416 	blt	r5,r4,4004630 <__subsf3+0x380>
 4004460:	01400804 	movi	r5,32
 4004464:	290bc83a 	sub	r5,r5,r4
 4004468:	394a983a 	sll	r5,r7,r5
 400446c:	390ed83a 	srl	r7,r7,r4
 4004470:	2808c03a 	cmpne	r4,r5,zero
 4004474:	390eb03a 	or	r7,r7,r4
 4004478:	19c7883a 	add	r3,r3,r7
 400447c:	1901002c 	andhi	r4,r3,1024
 4004480:	20003826 	beq	r4,zero,4004564 <__subsf3+0x2b4>
 4004484:	84000044 	addi	r16,r16,1
 4004488:	01003fc4 	movi	r4,255
 400448c:	81005426 	beq	r16,r4,40045e0 <__subsf3+0x330>
 4004490:	1023883a 	mov	r17,r2
 4004494:	00bf0034 	movhi	r2,64512
 4004498:	10bfffc4 	addi	r2,r2,-1
 400449c:	1900004c 	andi	r4,r3,1
 40044a0:	1886703a 	and	r3,r3,r2
 40044a4:	1806d07a 	srli	r3,r3,1
 40044a8:	1906b03a 	or	r3,r3,r4
 40044ac:	003f9906 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 40044b0:	383f9226 	beq	r7,zero,40042fc <__ram_exceptions_end+0xfbfc40b4>
 40044b4:	10803fcc 	andi	r2,r2,255
 40044b8:	003f9106 	br	4004300 <__ram_exceptions_end+0xfbfc40b8>
 40044bc:	213fffc4 	addi	r4,r4,-1
 40044c0:	203fbc26 	beq	r4,zero,40043b4 <__ram_exceptions_end+0xfbfc416c>
 40044c4:	00803fc4 	movi	r2,255
 40044c8:	80bfb21e 	bne	r16,r2,4004394 <__ram_exceptions_end+0xfbfc414c>
 40044cc:	003f9106 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 40044d0:	383f9026 	beq	r7,zero,4004314 <__ram_exceptions_end+0xfbfc40cc>
 40044d4:	213fffc4 	addi	r4,r4,-1
 40044d8:	203fe726 	beq	r4,zero,4004478 <__ram_exceptions_end+0xfbfc4230>
 40044dc:	01403fc4 	movi	r5,255
 40044e0:	817fdd1e 	bne	r16,r5,4004458 <__ram_exceptions_end+0xfbfc4210>
 40044e4:	003f8b06 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 40044e8:	2000221e 	bne	r4,zero,4004574 <__subsf3+0x2c4>
 40044ec:	81000044 	addi	r4,r16,1
 40044f0:	21003fcc 	andi	r4,r4,255
 40044f4:	01400044 	movi	r5,1
 40044f8:	2900470e 	bge	r5,r4,4004618 <__subsf3+0x368>
 40044fc:	19e5c83a 	sub	r18,r3,r7
 4004500:	9141002c 	andhi	r5,r18,1024
 4004504:	28002d26 	beq	r5,zero,40045bc <__subsf3+0x30c>
 4004508:	38e5c83a 	sub	r18,r7,r3
 400450c:	1023883a 	mov	r17,r2
 4004510:	003fae06 	br	40043cc <__ram_exceptions_end+0xfbfc4184>
 4004514:	8880004c 	andi	r2,r17,1
 4004518:	043fffc4 	movi	r16,-1
 400451c:	000b883a 	mov	r5,zero
 4004520:	003f8a06 	br	400434c <__ram_exceptions_end+0xfbfc4104>
 4004524:	00ff0034 	movhi	r3,64512
 4004528:	18ffffc4 	addi	r3,r3,-1
 400452c:	80a1c83a 	sub	r16,r16,r2
 4004530:	90c6703a 	and	r3,r18,r3
 4004534:	003f7706 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004538:	2000431e 	bne	r4,zero,4004648 <__subsf3+0x398>
 400453c:	81000044 	addi	r4,r16,1
 4004540:	21803fcc 	andi	r6,r4,255
 4004544:	01400044 	movi	r5,1
 4004548:	2980280e 	bge	r5,r6,40045ec <__subsf3+0x33c>
 400454c:	01403fc4 	movi	r5,255
 4004550:	21402326 	beq	r4,r5,40045e0 <__subsf3+0x330>
 4004554:	19c7883a 	add	r3,r3,r7
 4004558:	1806d07a 	srli	r3,r3,1
 400455c:	2021883a 	mov	r16,r4
 4004560:	003f6c06 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004564:	1023883a 	mov	r17,r2
 4004568:	003fa906 	br	4004410 <__ram_exceptions_end+0xfbfc41c8>
 400456c:	01c00044 	movi	r7,1
 4004570:	003f9006 	br	40043b4 <__ram_exceptions_end+0xfbfc416c>
 4004574:	8000151e 	bne	r16,zero,40045cc <__subsf3+0x31c>
 4004578:	18002f26 	beq	r3,zero,4004638 <__subsf3+0x388>
 400457c:	0108303a 	nor	r4,zero,r4
 4004580:	20000a26 	beq	r4,zero,40045ac <__subsf3+0x2fc>
 4004584:	01403fc4 	movi	r5,255
 4004588:	31402b26 	beq	r6,r5,4004638 <__subsf3+0x388>
 400458c:	014006c4 	movi	r5,27
 4004590:	29006e16 	blt	r5,r4,400474c <__subsf3+0x49c>
 4004594:	01400804 	movi	r5,32
 4004598:	290bc83a 	sub	r5,r5,r4
 400459c:	194a983a 	sll	r5,r3,r5
 40045a0:	1908d83a 	srl	r4,r3,r4
 40045a4:	2806c03a 	cmpne	r3,r5,zero
 40045a8:	20c6b03a 	or	r3,r4,r3
 40045ac:	38c7c83a 	sub	r3,r7,r3
 40045b0:	3021883a 	mov	r16,r6
 40045b4:	1023883a 	mov	r17,r2
 40045b8:	003f7f06 	br	40043b8 <__ram_exceptions_end+0xfbfc4170>
 40045bc:	903f831e 	bne	r18,zero,40043cc <__ram_exceptions_end+0xfbfc4184>
 40045c0:	0005883a 	mov	r2,zero
 40045c4:	0021883a 	mov	r16,zero
 40045c8:	003f9a06 	br	4004434 <__ram_exceptions_end+0xfbfc41ec>
 40045cc:	01403fc4 	movi	r5,255
 40045d0:	31401926 	beq	r6,r5,4004638 <__subsf3+0x388>
 40045d4:	0109c83a 	sub	r4,zero,r4
 40045d8:	18c10034 	orhi	r3,r3,1024
 40045dc:	003feb06 	br	400458c <__ram_exceptions_end+0xfbfc4344>
 40045e0:	043fffc4 	movi	r16,-1
 40045e4:	000b883a 	mov	r5,zero
 40045e8:	003f5806 	br	400434c <__ram_exceptions_end+0xfbfc4104>
 40045ec:	8000481e 	bne	r16,zero,4004710 <__subsf3+0x460>
 40045f0:	18006226 	beq	r3,zero,400477c <__subsf3+0x4cc>
 40045f4:	383f4726 	beq	r7,zero,4004314 <__ram_exceptions_end+0xfbfc40cc>
 40045f8:	19c7883a 	add	r3,r3,r7
 40045fc:	1881002c 	andhi	r2,r3,1024
 4004600:	103f8326 	beq	r2,zero,4004410 <__ram_exceptions_end+0xfbfc41c8>
 4004604:	00bf0034 	movhi	r2,64512
 4004608:	10bfffc4 	addi	r2,r2,-1
 400460c:	2821883a 	mov	r16,r5
 4004610:	1886703a 	and	r3,r3,r2
 4004614:	003f3f06 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004618:	80001c1e 	bne	r16,zero,400468c <__subsf3+0x3dc>
 400461c:	1800261e 	bne	r3,zero,40046b8 <__subsf3+0x408>
 4004620:	38004c26 	beq	r7,zero,4004754 <__subsf3+0x4a4>
 4004624:	3807883a 	mov	r3,r7
 4004628:	1023883a 	mov	r17,r2
 400462c:	003f3906 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004630:	01c00044 	movi	r7,1
 4004634:	003f9006 	br	4004478 <__ram_exceptions_end+0xfbfc4230>
 4004638:	3807883a 	mov	r3,r7
 400463c:	3021883a 	mov	r16,r6
 4004640:	1023883a 	mov	r17,r2
 4004644:	003f3306 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004648:	8000161e 	bne	r16,zero,40046a4 <__subsf3+0x3f4>
 400464c:	18002d26 	beq	r3,zero,4004704 <__subsf3+0x454>
 4004650:	0108303a 	nor	r4,zero,r4
 4004654:	20000a26 	beq	r4,zero,4004680 <__subsf3+0x3d0>
 4004658:	01403fc4 	movi	r5,255
 400465c:	31402926 	beq	r6,r5,4004704 <__subsf3+0x454>
 4004660:	014006c4 	movi	r5,27
 4004664:	29004716 	blt	r5,r4,4004784 <__subsf3+0x4d4>
 4004668:	01400804 	movi	r5,32
 400466c:	290bc83a 	sub	r5,r5,r4
 4004670:	194a983a 	sll	r5,r3,r5
 4004674:	1908d83a 	srl	r4,r3,r4
 4004678:	2806c03a 	cmpne	r3,r5,zero
 400467c:	20c6b03a 	or	r3,r4,r3
 4004680:	19c7883a 	add	r3,r3,r7
 4004684:	3021883a 	mov	r16,r6
 4004688:	003f7c06 	br	400447c <__ram_exceptions_end+0xfbfc4234>
 400468c:	1800111e 	bne	r3,zero,40046d4 <__subsf3+0x424>
 4004690:	38003326 	beq	r7,zero,4004760 <__subsf3+0x4b0>
 4004694:	3807883a 	mov	r3,r7
 4004698:	1023883a 	mov	r17,r2
 400469c:	04003fc4 	movi	r16,255
 40046a0:	003f1c06 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 40046a4:	01403fc4 	movi	r5,255
 40046a8:	31401626 	beq	r6,r5,4004704 <__subsf3+0x454>
 40046ac:	0109c83a 	sub	r4,zero,r4
 40046b0:	18c10034 	orhi	r3,r3,1024
 40046b4:	003fea06 	br	4004660 <__ram_exceptions_end+0xfbfc4418>
 40046b8:	383f1626 	beq	r7,zero,4004314 <__ram_exceptions_end+0xfbfc40cc>
 40046bc:	19c9c83a 	sub	r4,r3,r7
 40046c0:	2141002c 	andhi	r5,r4,1024
 40046c4:	283f5026 	beq	r5,zero,4004408 <__ram_exceptions_end+0xfbfc41c0>
 40046c8:	38c7c83a 	sub	r3,r7,r3
 40046cc:	1023883a 	mov	r17,r2
 40046d0:	003f1006 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 40046d4:	38001b26 	beq	r7,zero,4004744 <__subsf3+0x494>
 40046d8:	1806d0fa 	srli	r3,r3,3
 40046dc:	1900102c 	andhi	r4,r3,64
 40046e0:	20000526 	beq	r4,zero,40046f8 <__subsf3+0x448>
 40046e4:	380ed0fa 	srli	r7,r7,3
 40046e8:	3900102c 	andhi	r4,r7,64
 40046ec:	2000021e 	bne	r4,zero,40046f8 <__subsf3+0x448>
 40046f0:	3807883a 	mov	r3,r7
 40046f4:	1023883a 	mov	r17,r2
 40046f8:	180690fa 	slli	r3,r3,3
 40046fc:	04003fc4 	movi	r16,255
 4004700:	003f0406 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004704:	3807883a 	mov	r3,r7
 4004708:	3021883a 	mov	r16,r6
 400470c:	003f0106 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004710:	18001726 	beq	r3,zero,4004770 <__subsf3+0x4c0>
 4004714:	38000b26 	beq	r7,zero,4004744 <__subsf3+0x494>
 4004718:	1806d0fa 	srli	r3,r3,3
 400471c:	1900102c 	andhi	r4,r3,64
 4004720:	20000426 	beq	r4,zero,4004734 <__subsf3+0x484>
 4004724:	380ed0fa 	srli	r7,r7,3
 4004728:	3900102c 	andhi	r4,r7,64
 400472c:	2000011e 	bne	r4,zero,4004734 <__subsf3+0x484>
 4004730:	3807883a 	mov	r3,r7
 4004734:	180690fa 	slli	r3,r3,3
 4004738:	1023883a 	mov	r17,r2
 400473c:	04003fc4 	movi	r16,255
 4004740:	003ef406 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004744:	04003fc4 	movi	r16,255
 4004748:	003ef206 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 400474c:	00c00044 	movi	r3,1
 4004750:	003f9606 	br	40045ac <__ram_exceptions_end+0xfbfc4364>
 4004754:	000b883a 	mov	r5,zero
 4004758:	0005883a 	mov	r2,zero
 400475c:	003f3506 	br	4004434 <__ram_exceptions_end+0xfbfc41ec>
 4004760:	01402034 	movhi	r5,128
 4004764:	297fffc4 	addi	r5,r5,-1
 4004768:	0005883a 	mov	r2,zero
 400476c:	003f2f06 	br	400442c <__ram_exceptions_end+0xfbfc41e4>
 4004770:	3807883a 	mov	r3,r7
 4004774:	04003fc4 	movi	r16,255
 4004778:	003ee606 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 400477c:	3807883a 	mov	r3,r7
 4004780:	003ee406 	br	4004314 <__ram_exceptions_end+0xfbfc40cc>
 4004784:	00c00044 	movi	r3,1
 4004788:	003fbd06 	br	4004680 <__ram_exceptions_end+0xfbfc4438>
 400478c:	0005883a 	mov	r2,zero
 4004790:	003f2806 	br	4004434 <__ram_exceptions_end+0xfbfc41ec>

04004794 <__fixsfsi>:
 4004794:	200ad5fa 	srli	r5,r4,23
 4004798:	00c02034 	movhi	r3,128
 400479c:	18ffffc4 	addi	r3,r3,-1
 40047a0:	29403fcc 	andi	r5,r5,255
 40047a4:	00801f84 	movi	r2,126
 40047a8:	1906703a 	and	r3,r3,r4
 40047ac:	2008d7fa 	srli	r4,r4,31
 40047b0:	11400e0e 	bge	r2,r5,40047ec <__fixsfsi+0x58>
 40047b4:	00802744 	movi	r2,157
 40047b8:	11400816 	blt	r2,r5,40047dc <__fixsfsi+0x48>
 40047bc:	00802544 	movi	r2,149
 40047c0:	18c02034 	orhi	r3,r3,128
 40047c4:	11400b0e 	bge	r2,r5,40047f4 <__fixsfsi+0x60>
 40047c8:	28bfda84 	addi	r2,r5,-150
 40047cc:	1884983a 	sll	r2,r3,r2
 40047d0:	20000726 	beq	r4,zero,40047f0 <__fixsfsi+0x5c>
 40047d4:	0085c83a 	sub	r2,zero,r2
 40047d8:	f800283a 	ret
 40047dc:	00a00034 	movhi	r2,32768
 40047e0:	10bfffc4 	addi	r2,r2,-1
 40047e4:	2085883a 	add	r2,r4,r2
 40047e8:	f800283a 	ret
 40047ec:	0005883a 	mov	r2,zero
 40047f0:	f800283a 	ret
 40047f4:	00802584 	movi	r2,150
 40047f8:	1145c83a 	sub	r2,r2,r5
 40047fc:	1884d83a 	srl	r2,r3,r2
 4004800:	003ff306 	br	40047d0 <__ram_exceptions_end+0xfbfc4588>

04004804 <__floatsisf>:
 4004804:	defffd04 	addi	sp,sp,-12
 4004808:	dfc00215 	stw	ra,8(sp)
 400480c:	dc400115 	stw	r17,4(sp)
 4004810:	dc000015 	stw	r16,0(sp)
 4004814:	20003526 	beq	r4,zero,40048ec <__floatsisf+0xe8>
 4004818:	2021883a 	mov	r16,r4
 400481c:	2022d7fa 	srli	r17,r4,31
 4004820:	20003616 	blt	r4,zero,40048fc <__floatsisf+0xf8>
 4004824:	8009883a 	mov	r4,r16
 4004828:	40065b80 	call	40065b8 <__clzsi2>
 400482c:	00c02784 	movi	r3,158
 4004830:	1887c83a 	sub	r3,r3,r2
 4004834:	01002584 	movi	r4,150
 4004838:	20c01416 	blt	r4,r3,400488c <__floatsisf+0x88>
 400483c:	20c9c83a 	sub	r4,r4,r3
 4004840:	8120983a 	sll	r16,r16,r4
 4004844:	00802034 	movhi	r2,128
 4004848:	10bfffc4 	addi	r2,r2,-1
 400484c:	8809883a 	mov	r4,r17
 4004850:	80a0703a 	and	r16,r16,r2
 4004854:	18803fcc 	andi	r2,r3,255
 4004858:	100695fa 	slli	r3,r2,23
 400485c:	20803fcc 	andi	r2,r4,255
 4004860:	100897fa 	slli	r4,r2,31
 4004864:	00802034 	movhi	r2,128
 4004868:	10bfffc4 	addi	r2,r2,-1
 400486c:	8084703a 	and	r2,r16,r2
 4004870:	10c4b03a 	or	r2,r2,r3
 4004874:	1104b03a 	or	r2,r2,r4
 4004878:	dfc00217 	ldw	ra,8(sp)
 400487c:	dc400117 	ldw	r17,4(sp)
 4004880:	dc000017 	ldw	r16,0(sp)
 4004884:	dec00304 	addi	sp,sp,12
 4004888:	f800283a 	ret
 400488c:	01002644 	movi	r4,153
 4004890:	20c01c16 	blt	r4,r3,4004904 <__floatsisf+0x100>
 4004894:	20c9c83a 	sub	r4,r4,r3
 4004898:	8120983a 	sll	r16,r16,r4
 400489c:	013f0034 	movhi	r4,64512
 40048a0:	213fffc4 	addi	r4,r4,-1
 40048a4:	814001cc 	andi	r5,r16,7
 40048a8:	8108703a 	and	r4,r16,r4
 40048ac:	28000426 	beq	r5,zero,40048c0 <__floatsisf+0xbc>
 40048b0:	840003cc 	andi	r16,r16,15
 40048b4:	01400104 	movi	r5,4
 40048b8:	81400126 	beq	r16,r5,40048c0 <__floatsisf+0xbc>
 40048bc:	2149883a 	add	r4,r4,r5
 40048c0:	2141002c 	andhi	r5,r4,1024
 40048c4:	28000526 	beq	r5,zero,40048dc <__floatsisf+0xd8>
 40048c8:	00c027c4 	movi	r3,159
 40048cc:	1887c83a 	sub	r3,r3,r2
 40048d0:	00bf0034 	movhi	r2,64512
 40048d4:	10bfffc4 	addi	r2,r2,-1
 40048d8:	2088703a 	and	r4,r4,r2
 40048dc:	202091ba 	slli	r16,r4,6
 40048e0:	8809883a 	mov	r4,r17
 40048e4:	8020d27a 	srli	r16,r16,9
 40048e8:	003fda06 	br	4004854 <__ram_exceptions_end+0xfbfc460c>
 40048ec:	0009883a 	mov	r4,zero
 40048f0:	0007883a 	mov	r3,zero
 40048f4:	0021883a 	mov	r16,zero
 40048f8:	003fd606 	br	4004854 <__ram_exceptions_end+0xfbfc460c>
 40048fc:	0121c83a 	sub	r16,zero,r4
 4004900:	003fc806 	br	4004824 <__ram_exceptions_end+0xfbfc45dc>
 4004904:	01002e44 	movi	r4,185
 4004908:	20c9c83a 	sub	r4,r4,r3
 400490c:	01400144 	movi	r5,5
 4004910:	8108983a 	sll	r4,r16,r4
 4004914:	288bc83a 	sub	r5,r5,r2
 4004918:	8160d83a 	srl	r16,r16,r5
 400491c:	2008c03a 	cmpne	r4,r4,zero
 4004920:	8120b03a 	or	r16,r16,r4
 4004924:	003fdd06 	br	400489c <__ram_exceptions_end+0xfbfc4654>

04004928 <__adddf3>:
 4004928:	02c00434 	movhi	r11,16
 400492c:	5affffc4 	addi	r11,r11,-1
 4004930:	2806d7fa 	srli	r3,r5,31
 4004934:	2ad4703a 	and	r10,r5,r11
 4004938:	3ad2703a 	and	r9,r7,r11
 400493c:	3804d53a 	srli	r2,r7,20
 4004940:	3018d77a 	srli	r12,r6,29
 4004944:	280ad53a 	srli	r5,r5,20
 4004948:	501490fa 	slli	r10,r10,3
 400494c:	2010d77a 	srli	r8,r4,29
 4004950:	481290fa 	slli	r9,r9,3
 4004954:	380ed7fa 	srli	r7,r7,31
 4004958:	defffb04 	addi	sp,sp,-20
 400495c:	dc800215 	stw	r18,8(sp)
 4004960:	dc400115 	stw	r17,4(sp)
 4004964:	dc000015 	stw	r16,0(sp)
 4004968:	dfc00415 	stw	ra,16(sp)
 400496c:	dcc00315 	stw	r19,12(sp)
 4004970:	1c803fcc 	andi	r18,r3,255
 4004974:	2c01ffcc 	andi	r16,r5,2047
 4004978:	5210b03a 	or	r8,r10,r8
 400497c:	202290fa 	slli	r17,r4,3
 4004980:	1081ffcc 	andi	r2,r2,2047
 4004984:	4b12b03a 	or	r9,r9,r12
 4004988:	300c90fa 	slli	r6,r6,3
 400498c:	91c07526 	beq	r18,r7,4004b64 <__adddf3+0x23c>
 4004990:	8087c83a 	sub	r3,r16,r2
 4004994:	00c0ab0e 	bge	zero,r3,4004c44 <__adddf3+0x31c>
 4004998:	10002a1e 	bne	r2,zero,4004a44 <__adddf3+0x11c>
 400499c:	4984b03a 	or	r2,r9,r6
 40049a0:	1000961e 	bne	r2,zero,4004bfc <__adddf3+0x2d4>
 40049a4:	888001cc 	andi	r2,r17,7
 40049a8:	10000726 	beq	r2,zero,40049c8 <__adddf3+0xa0>
 40049ac:	888003cc 	andi	r2,r17,15
 40049b0:	00c00104 	movi	r3,4
 40049b4:	10c00426 	beq	r2,r3,40049c8 <__adddf3+0xa0>
 40049b8:	88c7883a 	add	r3,r17,r3
 40049bc:	1c63803a 	cmpltu	r17,r3,r17
 40049c0:	4451883a 	add	r8,r8,r17
 40049c4:	1823883a 	mov	r17,r3
 40049c8:	4080202c 	andhi	r2,r8,128
 40049cc:	10005926 	beq	r2,zero,4004b34 <__adddf3+0x20c>
 40049d0:	84000044 	addi	r16,r16,1
 40049d4:	0081ffc4 	movi	r2,2047
 40049d8:	8080ba26 	beq	r16,r2,4004cc4 <__adddf3+0x39c>
 40049dc:	00bfe034 	movhi	r2,65408
 40049e0:	10bfffc4 	addi	r2,r2,-1
 40049e4:	4090703a 	and	r8,r8,r2
 40049e8:	4004977a 	slli	r2,r8,29
 40049ec:	4010927a 	slli	r8,r8,9
 40049f0:	8822d0fa 	srli	r17,r17,3
 40049f4:	8401ffcc 	andi	r16,r16,2047
 40049f8:	4010d33a 	srli	r8,r8,12
 40049fc:	9007883a 	mov	r3,r18
 4004a00:	1444b03a 	or	r2,r2,r17
 4004a04:	8401ffcc 	andi	r16,r16,2047
 4004a08:	8020953a 	slli	r16,r16,20
 4004a0c:	18c03fcc 	andi	r3,r3,255
 4004a10:	01000434 	movhi	r4,16
 4004a14:	213fffc4 	addi	r4,r4,-1
 4004a18:	180697fa 	slli	r3,r3,31
 4004a1c:	4110703a 	and	r8,r8,r4
 4004a20:	4410b03a 	or	r8,r8,r16
 4004a24:	40c6b03a 	or	r3,r8,r3
 4004a28:	dfc00417 	ldw	ra,16(sp)
 4004a2c:	dcc00317 	ldw	r19,12(sp)
 4004a30:	dc800217 	ldw	r18,8(sp)
 4004a34:	dc400117 	ldw	r17,4(sp)
 4004a38:	dc000017 	ldw	r16,0(sp)
 4004a3c:	dec00504 	addi	sp,sp,20
 4004a40:	f800283a 	ret
 4004a44:	0081ffc4 	movi	r2,2047
 4004a48:	80bfd626 	beq	r16,r2,40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004a4c:	4a402034 	orhi	r9,r9,128
 4004a50:	00800e04 	movi	r2,56
 4004a54:	10c09f16 	blt	r2,r3,4004cd4 <__adddf3+0x3ac>
 4004a58:	008007c4 	movi	r2,31
 4004a5c:	10c0c216 	blt	r2,r3,4004d68 <__adddf3+0x440>
 4004a60:	00800804 	movi	r2,32
 4004a64:	10c5c83a 	sub	r2,r2,r3
 4004a68:	488a983a 	sll	r5,r9,r2
 4004a6c:	30c8d83a 	srl	r4,r6,r3
 4004a70:	3084983a 	sll	r2,r6,r2
 4004a74:	48c6d83a 	srl	r3,r9,r3
 4004a78:	290cb03a 	or	r6,r5,r4
 4004a7c:	1004c03a 	cmpne	r2,r2,zero
 4004a80:	308cb03a 	or	r6,r6,r2
 4004a84:	898dc83a 	sub	r6,r17,r6
 4004a88:	89a3803a 	cmpltu	r17,r17,r6
 4004a8c:	40d1c83a 	sub	r8,r8,r3
 4004a90:	4451c83a 	sub	r8,r8,r17
 4004a94:	3023883a 	mov	r17,r6
 4004a98:	4080202c 	andhi	r2,r8,128
 4004a9c:	10002326 	beq	r2,zero,4004b2c <__adddf3+0x204>
 4004aa0:	04c02034 	movhi	r19,128
 4004aa4:	9cffffc4 	addi	r19,r19,-1
 4004aa8:	44e6703a 	and	r19,r8,r19
 4004aac:	98007626 	beq	r19,zero,4004c88 <__adddf3+0x360>
 4004ab0:	9809883a 	mov	r4,r19
 4004ab4:	40065b80 	call	40065b8 <__clzsi2>
 4004ab8:	10fffe04 	addi	r3,r2,-8
 4004abc:	010007c4 	movi	r4,31
 4004ac0:	20c07716 	blt	r4,r3,4004ca0 <__adddf3+0x378>
 4004ac4:	00800804 	movi	r2,32
 4004ac8:	10c5c83a 	sub	r2,r2,r3
 4004acc:	8884d83a 	srl	r2,r17,r2
 4004ad0:	98d0983a 	sll	r8,r19,r3
 4004ad4:	88e2983a 	sll	r17,r17,r3
 4004ad8:	1204b03a 	or	r2,r2,r8
 4004adc:	1c007416 	blt	r3,r16,4004cb0 <__adddf3+0x388>
 4004ae0:	1c21c83a 	sub	r16,r3,r16
 4004ae4:	82000044 	addi	r8,r16,1
 4004ae8:	00c007c4 	movi	r3,31
 4004aec:	1a009116 	blt	r3,r8,4004d34 <__adddf3+0x40c>
 4004af0:	00c00804 	movi	r3,32
 4004af4:	1a07c83a 	sub	r3,r3,r8
 4004af8:	8a08d83a 	srl	r4,r17,r8
 4004afc:	88e2983a 	sll	r17,r17,r3
 4004b00:	10c6983a 	sll	r3,r2,r3
 4004b04:	1210d83a 	srl	r8,r2,r8
 4004b08:	8804c03a 	cmpne	r2,r17,zero
 4004b0c:	1906b03a 	or	r3,r3,r4
 4004b10:	18a2b03a 	or	r17,r3,r2
 4004b14:	0021883a 	mov	r16,zero
 4004b18:	003fa206 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004b1c:	1890b03a 	or	r8,r3,r2
 4004b20:	40017d26 	beq	r8,zero,4005118 <__adddf3+0x7f0>
 4004b24:	1011883a 	mov	r8,r2
 4004b28:	1823883a 	mov	r17,r3
 4004b2c:	888001cc 	andi	r2,r17,7
 4004b30:	103f9e1e 	bne	r2,zero,40049ac <__ram_exceptions_end+0xfbfc4764>
 4004b34:	4004977a 	slli	r2,r8,29
 4004b38:	8822d0fa 	srli	r17,r17,3
 4004b3c:	4010d0fa 	srli	r8,r8,3
 4004b40:	9007883a 	mov	r3,r18
 4004b44:	1444b03a 	or	r2,r2,r17
 4004b48:	0101ffc4 	movi	r4,2047
 4004b4c:	81002426 	beq	r16,r4,4004be0 <__adddf3+0x2b8>
 4004b50:	8120703a 	and	r16,r16,r4
 4004b54:	01000434 	movhi	r4,16
 4004b58:	213fffc4 	addi	r4,r4,-1
 4004b5c:	4110703a 	and	r8,r8,r4
 4004b60:	003fa806 	br	4004a04 <__ram_exceptions_end+0xfbfc47bc>
 4004b64:	8089c83a 	sub	r4,r16,r2
 4004b68:	01005e0e 	bge	zero,r4,4004ce4 <__adddf3+0x3bc>
 4004b6c:	10002b26 	beq	r2,zero,4004c1c <__adddf3+0x2f4>
 4004b70:	0081ffc4 	movi	r2,2047
 4004b74:	80bf8b26 	beq	r16,r2,40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004b78:	4a402034 	orhi	r9,r9,128
 4004b7c:	00800e04 	movi	r2,56
 4004b80:	1100a40e 	bge	r2,r4,4004e14 <__adddf3+0x4ec>
 4004b84:	498cb03a 	or	r6,r9,r6
 4004b88:	300ac03a 	cmpne	r5,r6,zero
 4004b8c:	0013883a 	mov	r9,zero
 4004b90:	2c4b883a 	add	r5,r5,r17
 4004b94:	2c63803a 	cmpltu	r17,r5,r17
 4004b98:	4a11883a 	add	r8,r9,r8
 4004b9c:	8a11883a 	add	r8,r17,r8
 4004ba0:	2823883a 	mov	r17,r5
 4004ba4:	4080202c 	andhi	r2,r8,128
 4004ba8:	103fe026 	beq	r2,zero,4004b2c <__ram_exceptions_end+0xfbfc48e4>
 4004bac:	84000044 	addi	r16,r16,1
 4004bb0:	0081ffc4 	movi	r2,2047
 4004bb4:	8080d226 	beq	r16,r2,4004f00 <__adddf3+0x5d8>
 4004bb8:	00bfe034 	movhi	r2,65408
 4004bbc:	10bfffc4 	addi	r2,r2,-1
 4004bc0:	4090703a 	and	r8,r8,r2
 4004bc4:	880ad07a 	srli	r5,r17,1
 4004bc8:	400897fa 	slli	r4,r8,31
 4004bcc:	88c0004c 	andi	r3,r17,1
 4004bd0:	28e2b03a 	or	r17,r5,r3
 4004bd4:	4010d07a 	srli	r8,r8,1
 4004bd8:	2462b03a 	or	r17,r4,r17
 4004bdc:	003f7106 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004be0:	4088b03a 	or	r4,r8,r2
 4004be4:	20014526 	beq	r4,zero,40050fc <__adddf3+0x7d4>
 4004be8:	01000434 	movhi	r4,16
 4004bec:	42000234 	orhi	r8,r8,8
 4004bf0:	213fffc4 	addi	r4,r4,-1
 4004bf4:	4110703a 	and	r8,r8,r4
 4004bf8:	003f8206 	br	4004a04 <__ram_exceptions_end+0xfbfc47bc>
 4004bfc:	18ffffc4 	addi	r3,r3,-1
 4004c00:	1800491e 	bne	r3,zero,4004d28 <__adddf3+0x400>
 4004c04:	898bc83a 	sub	r5,r17,r6
 4004c08:	8963803a 	cmpltu	r17,r17,r5
 4004c0c:	4251c83a 	sub	r8,r8,r9
 4004c10:	4451c83a 	sub	r8,r8,r17
 4004c14:	2823883a 	mov	r17,r5
 4004c18:	003f9f06 	br	4004a98 <__ram_exceptions_end+0xfbfc4850>
 4004c1c:	4984b03a 	or	r2,r9,r6
 4004c20:	103f6026 	beq	r2,zero,40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004c24:	213fffc4 	addi	r4,r4,-1
 4004c28:	2000931e 	bne	r4,zero,4004e78 <__adddf3+0x550>
 4004c2c:	898d883a 	add	r6,r17,r6
 4004c30:	3463803a 	cmpltu	r17,r6,r17
 4004c34:	4251883a 	add	r8,r8,r9
 4004c38:	8a11883a 	add	r8,r17,r8
 4004c3c:	3023883a 	mov	r17,r6
 4004c40:	003fd806 	br	4004ba4 <__ram_exceptions_end+0xfbfc495c>
 4004c44:	1800541e 	bne	r3,zero,4004d98 <__adddf3+0x470>
 4004c48:	80800044 	addi	r2,r16,1
 4004c4c:	1081ffcc 	andi	r2,r2,2047
 4004c50:	00c00044 	movi	r3,1
 4004c54:	1880a00e 	bge	r3,r2,4004ed8 <__adddf3+0x5b0>
 4004c58:	8989c83a 	sub	r4,r17,r6
 4004c5c:	8905803a 	cmpltu	r2,r17,r4
 4004c60:	4267c83a 	sub	r19,r8,r9
 4004c64:	98a7c83a 	sub	r19,r19,r2
 4004c68:	9880202c 	andhi	r2,r19,128
 4004c6c:	10006326 	beq	r2,zero,4004dfc <__adddf3+0x4d4>
 4004c70:	3463c83a 	sub	r17,r6,r17
 4004c74:	4a07c83a 	sub	r3,r9,r8
 4004c78:	344d803a 	cmpltu	r6,r6,r17
 4004c7c:	19a7c83a 	sub	r19,r3,r6
 4004c80:	3825883a 	mov	r18,r7
 4004c84:	983f8a1e 	bne	r19,zero,4004ab0 <__ram_exceptions_end+0xfbfc4868>
 4004c88:	8809883a 	mov	r4,r17
 4004c8c:	40065b80 	call	40065b8 <__clzsi2>
 4004c90:	10800804 	addi	r2,r2,32
 4004c94:	10fffe04 	addi	r3,r2,-8
 4004c98:	010007c4 	movi	r4,31
 4004c9c:	20ff890e 	bge	r4,r3,4004ac4 <__ram_exceptions_end+0xfbfc487c>
 4004ca0:	10bff604 	addi	r2,r2,-40
 4004ca4:	8884983a 	sll	r2,r17,r2
 4004ca8:	0023883a 	mov	r17,zero
 4004cac:	1c3f8c0e 	bge	r3,r16,4004ae0 <__ram_exceptions_end+0xfbfc4898>
 4004cb0:	023fe034 	movhi	r8,65408
 4004cb4:	423fffc4 	addi	r8,r8,-1
 4004cb8:	80e1c83a 	sub	r16,r16,r3
 4004cbc:	1210703a 	and	r8,r2,r8
 4004cc0:	003f3806 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004cc4:	9007883a 	mov	r3,r18
 4004cc8:	0011883a 	mov	r8,zero
 4004ccc:	0005883a 	mov	r2,zero
 4004cd0:	003f4c06 	br	4004a04 <__ram_exceptions_end+0xfbfc47bc>
 4004cd4:	498cb03a 	or	r6,r9,r6
 4004cd8:	300cc03a 	cmpne	r6,r6,zero
 4004cdc:	0007883a 	mov	r3,zero
 4004ce0:	003f6806 	br	4004a84 <__ram_exceptions_end+0xfbfc483c>
 4004ce4:	20009c1e 	bne	r4,zero,4004f58 <__adddf3+0x630>
 4004ce8:	80800044 	addi	r2,r16,1
 4004cec:	1141ffcc 	andi	r5,r2,2047
 4004cf0:	01000044 	movi	r4,1
 4004cf4:	2140670e 	bge	r4,r5,4004e94 <__adddf3+0x56c>
 4004cf8:	0101ffc4 	movi	r4,2047
 4004cfc:	11007f26 	beq	r2,r4,4004efc <__adddf3+0x5d4>
 4004d00:	898d883a 	add	r6,r17,r6
 4004d04:	4247883a 	add	r3,r8,r9
 4004d08:	3451803a 	cmpltu	r8,r6,r17
 4004d0c:	40d1883a 	add	r8,r8,r3
 4004d10:	402297fa 	slli	r17,r8,31
 4004d14:	300cd07a 	srli	r6,r6,1
 4004d18:	4010d07a 	srli	r8,r8,1
 4004d1c:	1021883a 	mov	r16,r2
 4004d20:	89a2b03a 	or	r17,r17,r6
 4004d24:	003f1f06 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004d28:	0081ffc4 	movi	r2,2047
 4004d2c:	80bf481e 	bne	r16,r2,4004a50 <__ram_exceptions_end+0xfbfc4808>
 4004d30:	003f1c06 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004d34:	843ff844 	addi	r16,r16,-31
 4004d38:	01000804 	movi	r4,32
 4004d3c:	1406d83a 	srl	r3,r2,r16
 4004d40:	41005026 	beq	r8,r4,4004e84 <__adddf3+0x55c>
 4004d44:	01001004 	movi	r4,64
 4004d48:	2211c83a 	sub	r8,r4,r8
 4004d4c:	1204983a 	sll	r2,r2,r8
 4004d50:	88a2b03a 	or	r17,r17,r2
 4004d54:	8822c03a 	cmpne	r17,r17,zero
 4004d58:	1c62b03a 	or	r17,r3,r17
 4004d5c:	0011883a 	mov	r8,zero
 4004d60:	0021883a 	mov	r16,zero
 4004d64:	003f7106 	br	4004b2c <__ram_exceptions_end+0xfbfc48e4>
 4004d68:	193ff804 	addi	r4,r3,-32
 4004d6c:	00800804 	movi	r2,32
 4004d70:	4908d83a 	srl	r4,r9,r4
 4004d74:	18804526 	beq	r3,r2,4004e8c <__adddf3+0x564>
 4004d78:	00801004 	movi	r2,64
 4004d7c:	10c5c83a 	sub	r2,r2,r3
 4004d80:	4886983a 	sll	r3,r9,r2
 4004d84:	198cb03a 	or	r6,r3,r6
 4004d88:	300cc03a 	cmpne	r6,r6,zero
 4004d8c:	218cb03a 	or	r6,r4,r6
 4004d90:	0007883a 	mov	r3,zero
 4004d94:	003f3b06 	br	4004a84 <__ram_exceptions_end+0xfbfc483c>
 4004d98:	80002a26 	beq	r16,zero,4004e44 <__adddf3+0x51c>
 4004d9c:	0101ffc4 	movi	r4,2047
 4004da0:	11006826 	beq	r2,r4,4004f44 <__adddf3+0x61c>
 4004da4:	00c7c83a 	sub	r3,zero,r3
 4004da8:	42002034 	orhi	r8,r8,128
 4004dac:	01000e04 	movi	r4,56
 4004db0:	20c07c16 	blt	r4,r3,4004fa4 <__adddf3+0x67c>
 4004db4:	010007c4 	movi	r4,31
 4004db8:	20c0da16 	blt	r4,r3,4005124 <__adddf3+0x7fc>
 4004dbc:	01000804 	movi	r4,32
 4004dc0:	20c9c83a 	sub	r4,r4,r3
 4004dc4:	4114983a 	sll	r10,r8,r4
 4004dc8:	88cad83a 	srl	r5,r17,r3
 4004dcc:	8908983a 	sll	r4,r17,r4
 4004dd0:	40c6d83a 	srl	r3,r8,r3
 4004dd4:	5162b03a 	or	r17,r10,r5
 4004dd8:	2008c03a 	cmpne	r4,r4,zero
 4004ddc:	8922b03a 	or	r17,r17,r4
 4004de0:	3463c83a 	sub	r17,r6,r17
 4004de4:	48c7c83a 	sub	r3,r9,r3
 4004de8:	344d803a 	cmpltu	r6,r6,r17
 4004dec:	1991c83a 	sub	r8,r3,r6
 4004df0:	1021883a 	mov	r16,r2
 4004df4:	3825883a 	mov	r18,r7
 4004df8:	003f2706 	br	4004a98 <__ram_exceptions_end+0xfbfc4850>
 4004dfc:	24d0b03a 	or	r8,r4,r19
 4004e00:	40001b1e 	bne	r8,zero,4004e70 <__adddf3+0x548>
 4004e04:	0005883a 	mov	r2,zero
 4004e08:	0007883a 	mov	r3,zero
 4004e0c:	0021883a 	mov	r16,zero
 4004e10:	003f4d06 	br	4004b48 <__ram_exceptions_end+0xfbfc4900>
 4004e14:	008007c4 	movi	r2,31
 4004e18:	11003c16 	blt	r2,r4,4004f0c <__adddf3+0x5e4>
 4004e1c:	00800804 	movi	r2,32
 4004e20:	1105c83a 	sub	r2,r2,r4
 4004e24:	488e983a 	sll	r7,r9,r2
 4004e28:	310ad83a 	srl	r5,r6,r4
 4004e2c:	3084983a 	sll	r2,r6,r2
 4004e30:	4912d83a 	srl	r9,r9,r4
 4004e34:	394ab03a 	or	r5,r7,r5
 4004e38:	1004c03a 	cmpne	r2,r2,zero
 4004e3c:	288ab03a 	or	r5,r5,r2
 4004e40:	003f5306 	br	4004b90 <__ram_exceptions_end+0xfbfc4948>
 4004e44:	4448b03a 	or	r4,r8,r17
 4004e48:	20003e26 	beq	r4,zero,4004f44 <__adddf3+0x61c>
 4004e4c:	00c6303a 	nor	r3,zero,r3
 4004e50:	18003a1e 	bne	r3,zero,4004f3c <__adddf3+0x614>
 4004e54:	3463c83a 	sub	r17,r6,r17
 4004e58:	4a07c83a 	sub	r3,r9,r8
 4004e5c:	344d803a 	cmpltu	r6,r6,r17
 4004e60:	1991c83a 	sub	r8,r3,r6
 4004e64:	1021883a 	mov	r16,r2
 4004e68:	3825883a 	mov	r18,r7
 4004e6c:	003f0a06 	br	4004a98 <__ram_exceptions_end+0xfbfc4850>
 4004e70:	2023883a 	mov	r17,r4
 4004e74:	003f0d06 	br	4004aac <__ram_exceptions_end+0xfbfc4864>
 4004e78:	0081ffc4 	movi	r2,2047
 4004e7c:	80bf3f1e 	bne	r16,r2,4004b7c <__ram_exceptions_end+0xfbfc4934>
 4004e80:	003ec806 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004e84:	0005883a 	mov	r2,zero
 4004e88:	003fb106 	br	4004d50 <__ram_exceptions_end+0xfbfc4b08>
 4004e8c:	0007883a 	mov	r3,zero
 4004e90:	003fbc06 	br	4004d84 <__ram_exceptions_end+0xfbfc4b3c>
 4004e94:	4444b03a 	or	r2,r8,r17
 4004e98:	8000871e 	bne	r16,zero,40050b8 <__adddf3+0x790>
 4004e9c:	1000ba26 	beq	r2,zero,4005188 <__adddf3+0x860>
 4004ea0:	4984b03a 	or	r2,r9,r6
 4004ea4:	103ebf26 	beq	r2,zero,40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004ea8:	8985883a 	add	r2,r17,r6
 4004eac:	4247883a 	add	r3,r8,r9
 4004eb0:	1451803a 	cmpltu	r8,r2,r17
 4004eb4:	40d1883a 	add	r8,r8,r3
 4004eb8:	40c0202c 	andhi	r3,r8,128
 4004ebc:	1023883a 	mov	r17,r2
 4004ec0:	183f1a26 	beq	r3,zero,4004b2c <__ram_exceptions_end+0xfbfc48e4>
 4004ec4:	00bfe034 	movhi	r2,65408
 4004ec8:	10bfffc4 	addi	r2,r2,-1
 4004ecc:	2021883a 	mov	r16,r4
 4004ed0:	4090703a 	and	r8,r8,r2
 4004ed4:	003eb306 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004ed8:	4444b03a 	or	r2,r8,r17
 4004edc:	8000291e 	bne	r16,zero,4004f84 <__adddf3+0x65c>
 4004ee0:	10004b1e 	bne	r2,zero,4005010 <__adddf3+0x6e8>
 4004ee4:	4990b03a 	or	r8,r9,r6
 4004ee8:	40008b26 	beq	r8,zero,4005118 <__adddf3+0x7f0>
 4004eec:	4811883a 	mov	r8,r9
 4004ef0:	3023883a 	mov	r17,r6
 4004ef4:	3825883a 	mov	r18,r7
 4004ef8:	003eaa06 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004efc:	1021883a 	mov	r16,r2
 4004f00:	0011883a 	mov	r8,zero
 4004f04:	0005883a 	mov	r2,zero
 4004f08:	003f0f06 	br	4004b48 <__ram_exceptions_end+0xfbfc4900>
 4004f0c:	217ff804 	addi	r5,r4,-32
 4004f10:	00800804 	movi	r2,32
 4004f14:	494ad83a 	srl	r5,r9,r5
 4004f18:	20807d26 	beq	r4,r2,4005110 <__adddf3+0x7e8>
 4004f1c:	00801004 	movi	r2,64
 4004f20:	1109c83a 	sub	r4,r2,r4
 4004f24:	4912983a 	sll	r9,r9,r4
 4004f28:	498cb03a 	or	r6,r9,r6
 4004f2c:	300cc03a 	cmpne	r6,r6,zero
 4004f30:	298ab03a 	or	r5,r5,r6
 4004f34:	0013883a 	mov	r9,zero
 4004f38:	003f1506 	br	4004b90 <__ram_exceptions_end+0xfbfc4948>
 4004f3c:	0101ffc4 	movi	r4,2047
 4004f40:	113f9a1e 	bne	r2,r4,4004dac <__ram_exceptions_end+0xfbfc4b64>
 4004f44:	4811883a 	mov	r8,r9
 4004f48:	3023883a 	mov	r17,r6
 4004f4c:	1021883a 	mov	r16,r2
 4004f50:	3825883a 	mov	r18,r7
 4004f54:	003e9306 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004f58:	8000161e 	bne	r16,zero,4004fb4 <__adddf3+0x68c>
 4004f5c:	444ab03a 	or	r5,r8,r17
 4004f60:	28005126 	beq	r5,zero,40050a8 <__adddf3+0x780>
 4004f64:	0108303a 	nor	r4,zero,r4
 4004f68:	20004d1e 	bne	r4,zero,40050a0 <__adddf3+0x778>
 4004f6c:	89a3883a 	add	r17,r17,r6
 4004f70:	4253883a 	add	r9,r8,r9
 4004f74:	898d803a 	cmpltu	r6,r17,r6
 4004f78:	3251883a 	add	r8,r6,r9
 4004f7c:	1021883a 	mov	r16,r2
 4004f80:	003f0806 	br	4004ba4 <__ram_exceptions_end+0xfbfc495c>
 4004f84:	1000301e 	bne	r2,zero,4005048 <__adddf3+0x720>
 4004f88:	4984b03a 	or	r2,r9,r6
 4004f8c:	10007126 	beq	r2,zero,4005154 <__adddf3+0x82c>
 4004f90:	4811883a 	mov	r8,r9
 4004f94:	3023883a 	mov	r17,r6
 4004f98:	3825883a 	mov	r18,r7
 4004f9c:	0401ffc4 	movi	r16,2047
 4004fa0:	003e8006 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4004fa4:	4462b03a 	or	r17,r8,r17
 4004fa8:	8822c03a 	cmpne	r17,r17,zero
 4004fac:	0007883a 	mov	r3,zero
 4004fb0:	003f8b06 	br	4004de0 <__ram_exceptions_end+0xfbfc4b98>
 4004fb4:	0141ffc4 	movi	r5,2047
 4004fb8:	11403b26 	beq	r2,r5,40050a8 <__adddf3+0x780>
 4004fbc:	0109c83a 	sub	r4,zero,r4
 4004fc0:	42002034 	orhi	r8,r8,128
 4004fc4:	01400e04 	movi	r5,56
 4004fc8:	29006716 	blt	r5,r4,4005168 <__adddf3+0x840>
 4004fcc:	014007c4 	movi	r5,31
 4004fd0:	29007016 	blt	r5,r4,4005194 <__adddf3+0x86c>
 4004fd4:	01400804 	movi	r5,32
 4004fd8:	290bc83a 	sub	r5,r5,r4
 4004fdc:	4154983a 	sll	r10,r8,r5
 4004fe0:	890ed83a 	srl	r7,r17,r4
 4004fe4:	894a983a 	sll	r5,r17,r5
 4004fe8:	4108d83a 	srl	r4,r8,r4
 4004fec:	51e2b03a 	or	r17,r10,r7
 4004ff0:	280ac03a 	cmpne	r5,r5,zero
 4004ff4:	8962b03a 	or	r17,r17,r5
 4004ff8:	89a3883a 	add	r17,r17,r6
 4004ffc:	2253883a 	add	r9,r4,r9
 4005000:	898d803a 	cmpltu	r6,r17,r6
 4005004:	3251883a 	add	r8,r6,r9
 4005008:	1021883a 	mov	r16,r2
 400500c:	003ee506 	br	4004ba4 <__ram_exceptions_end+0xfbfc495c>
 4005010:	4984b03a 	or	r2,r9,r6
 4005014:	103e6326 	beq	r2,zero,40049a4 <__ram_exceptions_end+0xfbfc475c>
 4005018:	8987c83a 	sub	r3,r17,r6
 400501c:	88c9803a 	cmpltu	r4,r17,r3
 4005020:	4245c83a 	sub	r2,r8,r9
 4005024:	1105c83a 	sub	r2,r2,r4
 4005028:	1100202c 	andhi	r4,r2,128
 400502c:	203ebb26 	beq	r4,zero,4004b1c <__ram_exceptions_end+0xfbfc48d4>
 4005030:	3463c83a 	sub	r17,r6,r17
 4005034:	4a07c83a 	sub	r3,r9,r8
 4005038:	344d803a 	cmpltu	r6,r6,r17
 400503c:	1991c83a 	sub	r8,r3,r6
 4005040:	3825883a 	mov	r18,r7
 4005044:	003e5706 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4005048:	4984b03a 	or	r2,r9,r6
 400504c:	10002e26 	beq	r2,zero,4005108 <__adddf3+0x7e0>
 4005050:	4004d0fa 	srli	r2,r8,3
 4005054:	8822d0fa 	srli	r17,r17,3
 4005058:	4010977a 	slli	r8,r8,29
 400505c:	10c0022c 	andhi	r3,r2,8
 4005060:	4462b03a 	or	r17,r8,r17
 4005064:	18000826 	beq	r3,zero,4005088 <__adddf3+0x760>
 4005068:	4808d0fa 	srli	r4,r9,3
 400506c:	20c0022c 	andhi	r3,r4,8
 4005070:	1800051e 	bne	r3,zero,4005088 <__adddf3+0x760>
 4005074:	300cd0fa 	srli	r6,r6,3
 4005078:	4806977a 	slli	r3,r9,29
 400507c:	2005883a 	mov	r2,r4
 4005080:	3825883a 	mov	r18,r7
 4005084:	19a2b03a 	or	r17,r3,r6
 4005088:	8810d77a 	srli	r8,r17,29
 400508c:	100490fa 	slli	r2,r2,3
 4005090:	882290fa 	slli	r17,r17,3
 4005094:	0401ffc4 	movi	r16,2047
 4005098:	4090b03a 	or	r8,r8,r2
 400509c:	003e4106 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 40050a0:	0141ffc4 	movi	r5,2047
 40050a4:	117fc71e 	bne	r2,r5,4004fc4 <__ram_exceptions_end+0xfbfc4d7c>
 40050a8:	4811883a 	mov	r8,r9
 40050ac:	3023883a 	mov	r17,r6
 40050b0:	1021883a 	mov	r16,r2
 40050b4:	003e3b06 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 40050b8:	10002f26 	beq	r2,zero,4005178 <__adddf3+0x850>
 40050bc:	4984b03a 	or	r2,r9,r6
 40050c0:	10001126 	beq	r2,zero,4005108 <__adddf3+0x7e0>
 40050c4:	4004d0fa 	srli	r2,r8,3
 40050c8:	8822d0fa 	srli	r17,r17,3
 40050cc:	4010977a 	slli	r8,r8,29
 40050d0:	10c0022c 	andhi	r3,r2,8
 40050d4:	4462b03a 	or	r17,r8,r17
 40050d8:	183feb26 	beq	r3,zero,4005088 <__ram_exceptions_end+0xfbfc4e40>
 40050dc:	4808d0fa 	srli	r4,r9,3
 40050e0:	20c0022c 	andhi	r3,r4,8
 40050e4:	183fe81e 	bne	r3,zero,4005088 <__ram_exceptions_end+0xfbfc4e40>
 40050e8:	300cd0fa 	srli	r6,r6,3
 40050ec:	4806977a 	slli	r3,r9,29
 40050f0:	2005883a 	mov	r2,r4
 40050f4:	19a2b03a 	or	r17,r3,r6
 40050f8:	003fe306 	br	4005088 <__ram_exceptions_end+0xfbfc4e40>
 40050fc:	0011883a 	mov	r8,zero
 4005100:	0005883a 	mov	r2,zero
 4005104:	003e3f06 	br	4004a04 <__ram_exceptions_end+0xfbfc47bc>
 4005108:	0401ffc4 	movi	r16,2047
 400510c:	003e2506 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4005110:	0013883a 	mov	r9,zero
 4005114:	003f8406 	br	4004f28 <__ram_exceptions_end+0xfbfc4ce0>
 4005118:	0005883a 	mov	r2,zero
 400511c:	0007883a 	mov	r3,zero
 4005120:	003e8906 	br	4004b48 <__ram_exceptions_end+0xfbfc4900>
 4005124:	197ff804 	addi	r5,r3,-32
 4005128:	01000804 	movi	r4,32
 400512c:	414ad83a 	srl	r5,r8,r5
 4005130:	19002426 	beq	r3,r4,40051c4 <__adddf3+0x89c>
 4005134:	01001004 	movi	r4,64
 4005138:	20c7c83a 	sub	r3,r4,r3
 400513c:	40c6983a 	sll	r3,r8,r3
 4005140:	1c46b03a 	or	r3,r3,r17
 4005144:	1806c03a 	cmpne	r3,r3,zero
 4005148:	28e2b03a 	or	r17,r5,r3
 400514c:	0007883a 	mov	r3,zero
 4005150:	003f2306 	br	4004de0 <__ram_exceptions_end+0xfbfc4b98>
 4005154:	0007883a 	mov	r3,zero
 4005158:	5811883a 	mov	r8,r11
 400515c:	00bfffc4 	movi	r2,-1
 4005160:	0401ffc4 	movi	r16,2047
 4005164:	003e7806 	br	4004b48 <__ram_exceptions_end+0xfbfc4900>
 4005168:	4462b03a 	or	r17,r8,r17
 400516c:	8822c03a 	cmpne	r17,r17,zero
 4005170:	0009883a 	mov	r4,zero
 4005174:	003fa006 	br	4004ff8 <__ram_exceptions_end+0xfbfc4db0>
 4005178:	4811883a 	mov	r8,r9
 400517c:	3023883a 	mov	r17,r6
 4005180:	0401ffc4 	movi	r16,2047
 4005184:	003e0706 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4005188:	4811883a 	mov	r8,r9
 400518c:	3023883a 	mov	r17,r6
 4005190:	003e0406 	br	40049a4 <__ram_exceptions_end+0xfbfc475c>
 4005194:	21fff804 	addi	r7,r4,-32
 4005198:	01400804 	movi	r5,32
 400519c:	41ced83a 	srl	r7,r8,r7
 40051a0:	21400a26 	beq	r4,r5,40051cc <__adddf3+0x8a4>
 40051a4:	01401004 	movi	r5,64
 40051a8:	2909c83a 	sub	r4,r5,r4
 40051ac:	4108983a 	sll	r4,r8,r4
 40051b0:	2448b03a 	or	r4,r4,r17
 40051b4:	2008c03a 	cmpne	r4,r4,zero
 40051b8:	3922b03a 	or	r17,r7,r4
 40051bc:	0009883a 	mov	r4,zero
 40051c0:	003f8d06 	br	4004ff8 <__ram_exceptions_end+0xfbfc4db0>
 40051c4:	0007883a 	mov	r3,zero
 40051c8:	003fdd06 	br	4005140 <__ram_exceptions_end+0xfbfc4ef8>
 40051cc:	0009883a 	mov	r4,zero
 40051d0:	003ff706 	br	40051b0 <__ram_exceptions_end+0xfbfc4f68>

040051d4 <__eqdf2>:
 40051d4:	2804d53a 	srli	r2,r5,20
 40051d8:	3806d53a 	srli	r3,r7,20
 40051dc:	02000434 	movhi	r8,16
 40051e0:	423fffc4 	addi	r8,r8,-1
 40051e4:	1081ffcc 	andi	r2,r2,2047
 40051e8:	0281ffc4 	movi	r10,2047
 40051ec:	2a12703a 	and	r9,r5,r8
 40051f0:	18c1ffcc 	andi	r3,r3,2047
 40051f4:	3a10703a 	and	r8,r7,r8
 40051f8:	280ad7fa 	srli	r5,r5,31
 40051fc:	380ed7fa 	srli	r7,r7,31
 4005200:	12801026 	beq	r2,r10,4005244 <__eqdf2+0x70>
 4005204:	0281ffc4 	movi	r10,2047
 4005208:	1a800a26 	beq	r3,r10,4005234 <__eqdf2+0x60>
 400520c:	10c00226 	beq	r2,r3,4005218 <__eqdf2+0x44>
 4005210:	00800044 	movi	r2,1
 4005214:	f800283a 	ret
 4005218:	4a3ffd1e 	bne	r9,r8,4005210 <__ram_exceptions_end+0xfbfc4fc8>
 400521c:	21bffc1e 	bne	r4,r6,4005210 <__ram_exceptions_end+0xfbfc4fc8>
 4005220:	29c00c26 	beq	r5,r7,4005254 <__eqdf2+0x80>
 4005224:	103ffa1e 	bne	r2,zero,4005210 <__ram_exceptions_end+0xfbfc4fc8>
 4005228:	2244b03a 	or	r2,r4,r9
 400522c:	1004c03a 	cmpne	r2,r2,zero
 4005230:	f800283a 	ret
 4005234:	3214b03a 	or	r10,r6,r8
 4005238:	503ff426 	beq	r10,zero,400520c <__ram_exceptions_end+0xfbfc4fc4>
 400523c:	00800044 	movi	r2,1
 4005240:	f800283a 	ret
 4005244:	2254b03a 	or	r10,r4,r9
 4005248:	503fee26 	beq	r10,zero,4005204 <__ram_exceptions_end+0xfbfc4fbc>
 400524c:	00800044 	movi	r2,1
 4005250:	f800283a 	ret
 4005254:	0005883a 	mov	r2,zero
 4005258:	f800283a 	ret

0400525c <__gedf2>:
 400525c:	2804d53a 	srli	r2,r5,20
 4005260:	3806d53a 	srli	r3,r7,20
 4005264:	02000434 	movhi	r8,16
 4005268:	423fffc4 	addi	r8,r8,-1
 400526c:	1081ffcc 	andi	r2,r2,2047
 4005270:	0241ffc4 	movi	r9,2047
 4005274:	2a14703a 	and	r10,r5,r8
 4005278:	18c1ffcc 	andi	r3,r3,2047
 400527c:	3a10703a 	and	r8,r7,r8
 4005280:	280ad7fa 	srli	r5,r5,31
 4005284:	380ed7fa 	srli	r7,r7,31
 4005288:	12401d26 	beq	r2,r9,4005300 <__gedf2+0xa4>
 400528c:	0241ffc4 	movi	r9,2047
 4005290:	1a401226 	beq	r3,r9,40052dc <__gedf2+0x80>
 4005294:	1000081e 	bne	r2,zero,40052b8 <__gedf2+0x5c>
 4005298:	2296b03a 	or	r11,r4,r10
 400529c:	5813003a 	cmpeq	r9,r11,zero
 40052a0:	1800091e 	bne	r3,zero,40052c8 <__gedf2+0x6c>
 40052a4:	3218b03a 	or	r12,r6,r8
 40052a8:	6000071e 	bne	r12,zero,40052c8 <__gedf2+0x6c>
 40052ac:	0005883a 	mov	r2,zero
 40052b0:	5800101e 	bne	r11,zero,40052f4 <__gedf2+0x98>
 40052b4:	f800283a 	ret
 40052b8:	18000c1e 	bne	r3,zero,40052ec <__gedf2+0x90>
 40052bc:	3212b03a 	or	r9,r6,r8
 40052c0:	48000c26 	beq	r9,zero,40052f4 <__gedf2+0x98>
 40052c4:	0013883a 	mov	r9,zero
 40052c8:	39c03fcc 	andi	r7,r7,255
 40052cc:	48000826 	beq	r9,zero,40052f0 <__gedf2+0x94>
 40052d0:	38000926 	beq	r7,zero,40052f8 <__gedf2+0x9c>
 40052d4:	00800044 	movi	r2,1
 40052d8:	f800283a 	ret
 40052dc:	3212b03a 	or	r9,r6,r8
 40052e0:	483fec26 	beq	r9,zero,4005294 <__ram_exceptions_end+0xfbfc504c>
 40052e4:	00bfff84 	movi	r2,-2
 40052e8:	f800283a 	ret
 40052ec:	39c03fcc 	andi	r7,r7,255
 40052f0:	29c00626 	beq	r5,r7,400530c <__gedf2+0xb0>
 40052f4:	283ff726 	beq	r5,zero,40052d4 <__ram_exceptions_end+0xfbfc508c>
 40052f8:	00bfffc4 	movi	r2,-1
 40052fc:	f800283a 	ret
 4005300:	2292b03a 	or	r9,r4,r10
 4005304:	483fe126 	beq	r9,zero,400528c <__ram_exceptions_end+0xfbfc5044>
 4005308:	003ff606 	br	40052e4 <__ram_exceptions_end+0xfbfc509c>
 400530c:	18bff916 	blt	r3,r2,40052f4 <__ram_exceptions_end+0xfbfc50ac>
 4005310:	10c00316 	blt	r2,r3,4005320 <__gedf2+0xc4>
 4005314:	42bff736 	bltu	r8,r10,40052f4 <__ram_exceptions_end+0xfbfc50ac>
 4005318:	52000326 	beq	r10,r8,4005328 <__gedf2+0xcc>
 400531c:	5200042e 	bgeu	r10,r8,4005330 <__gedf2+0xd4>
 4005320:	283fec1e 	bne	r5,zero,40052d4 <__ram_exceptions_end+0xfbfc508c>
 4005324:	003ff406 	br	40052f8 <__ram_exceptions_end+0xfbfc50b0>
 4005328:	313ff236 	bltu	r6,r4,40052f4 <__ram_exceptions_end+0xfbfc50ac>
 400532c:	21bffc36 	bltu	r4,r6,4005320 <__ram_exceptions_end+0xfbfc50d8>
 4005330:	0005883a 	mov	r2,zero
 4005334:	f800283a 	ret

04005338 <__muldf3>:
 4005338:	defff304 	addi	sp,sp,-52
 400533c:	2804d53a 	srli	r2,r5,20
 4005340:	dd800915 	stw	r22,36(sp)
 4005344:	282cd7fa 	srli	r22,r5,31
 4005348:	dc000315 	stw	r16,12(sp)
 400534c:	04000434 	movhi	r16,16
 4005350:	dd400815 	stw	r21,32(sp)
 4005354:	dc800515 	stw	r18,20(sp)
 4005358:	843fffc4 	addi	r16,r16,-1
 400535c:	dfc00c15 	stw	ra,48(sp)
 4005360:	df000b15 	stw	fp,44(sp)
 4005364:	ddc00a15 	stw	r23,40(sp)
 4005368:	dd000715 	stw	r20,28(sp)
 400536c:	dcc00615 	stw	r19,24(sp)
 4005370:	dc400415 	stw	r17,16(sp)
 4005374:	1481ffcc 	andi	r18,r2,2047
 4005378:	2c20703a 	and	r16,r5,r16
 400537c:	b02b883a 	mov	r21,r22
 4005380:	b2403fcc 	andi	r9,r22,255
 4005384:	90006026 	beq	r18,zero,4005508 <__muldf3+0x1d0>
 4005388:	0081ffc4 	movi	r2,2047
 400538c:	2029883a 	mov	r20,r4
 4005390:	90803626 	beq	r18,r2,400546c <__muldf3+0x134>
 4005394:	80800434 	orhi	r2,r16,16
 4005398:	100490fa 	slli	r2,r2,3
 400539c:	2020d77a 	srli	r16,r4,29
 40053a0:	202890fa 	slli	r20,r4,3
 40053a4:	94bf0044 	addi	r18,r18,-1023
 40053a8:	80a0b03a 	or	r16,r16,r2
 40053ac:	0027883a 	mov	r19,zero
 40053b0:	0039883a 	mov	fp,zero
 40053b4:	3804d53a 	srli	r2,r7,20
 40053b8:	382ed7fa 	srli	r23,r7,31
 40053bc:	04400434 	movhi	r17,16
 40053c0:	8c7fffc4 	addi	r17,r17,-1
 40053c4:	1081ffcc 	andi	r2,r2,2047
 40053c8:	3011883a 	mov	r8,r6
 40053cc:	3c62703a 	and	r17,r7,r17
 40053d0:	ba803fcc 	andi	r10,r23,255
 40053d4:	10006d26 	beq	r2,zero,400558c <__muldf3+0x254>
 40053d8:	00c1ffc4 	movi	r3,2047
 40053dc:	10c06526 	beq	r2,r3,4005574 <__muldf3+0x23c>
 40053e0:	88c00434 	orhi	r3,r17,16
 40053e4:	180690fa 	slli	r3,r3,3
 40053e8:	3022d77a 	srli	r17,r6,29
 40053ec:	301090fa 	slli	r8,r6,3
 40053f0:	10bf0044 	addi	r2,r2,-1023
 40053f4:	88e2b03a 	or	r17,r17,r3
 40053f8:	000b883a 	mov	r5,zero
 40053fc:	9085883a 	add	r2,r18,r2
 4005400:	2cc8b03a 	or	r4,r5,r19
 4005404:	00c003c4 	movi	r3,15
 4005408:	bdacf03a 	xor	r22,r23,r22
 400540c:	12c00044 	addi	r11,r2,1
 4005410:	19009936 	bltu	r3,r4,4005678 <__muldf3+0x340>
 4005414:	200890ba 	slli	r4,r4,2
 4005418:	00c10034 	movhi	r3,1024
 400541c:	18d50b04 	addi	r3,r3,21548
 4005420:	20c9883a 	add	r4,r4,r3
 4005424:	20c00017 	ldw	r3,0(r4)
 4005428:	1800683a 	jmp	r3
 400542c:	04005678 	rdprs	r16,zero,345
 4005430:	0400548c 	andi	r16,zero,338
 4005434:	0400548c 	andi	r16,zero,338
 4005438:	04005488 	cmpgei	r16,zero,338
 400543c:	04005654 	movui	r16,345
 4005440:	04005654 	movui	r16,345
 4005444:	0400563c 	xorhi	r16,zero,344
 4005448:	04005488 	cmpgei	r16,zero,338
 400544c:	04005654 	movui	r16,345
 4005450:	0400563c 	xorhi	r16,zero,344
 4005454:	04005654 	movui	r16,345
 4005458:	04005488 	cmpgei	r16,zero,338
 400545c:	04005664 	muli	r16,zero,345
 4005460:	04005664 	muli	r16,zero,345
 4005464:	04005664 	muli	r16,zero,345
 4005468:	04005880 	call	400588 <__alt_mem_new_sdram_controller_0-0x3bffa78>
 400546c:	2404b03a 	or	r2,r4,r16
 4005470:	10006f1e 	bne	r2,zero,4005630 <__muldf3+0x2f8>
 4005474:	04c00204 	movi	r19,8
 4005478:	0021883a 	mov	r16,zero
 400547c:	0029883a 	mov	r20,zero
 4005480:	07000084 	movi	fp,2
 4005484:	003fcb06 	br	40053b4 <__ram_exceptions_end+0xfbfc516c>
 4005488:	502d883a 	mov	r22,r10
 400548c:	00800084 	movi	r2,2
 4005490:	28805726 	beq	r5,r2,40055f0 <__muldf3+0x2b8>
 4005494:	008000c4 	movi	r2,3
 4005498:	28816626 	beq	r5,r2,4005a34 <__muldf3+0x6fc>
 400549c:	00800044 	movi	r2,1
 40054a0:	2881411e 	bne	r5,r2,40059a8 <__muldf3+0x670>
 40054a4:	b02b883a 	mov	r21,r22
 40054a8:	0005883a 	mov	r2,zero
 40054ac:	000b883a 	mov	r5,zero
 40054b0:	0029883a 	mov	r20,zero
 40054b4:	1004953a 	slli	r2,r2,20
 40054b8:	a8c03fcc 	andi	r3,r21,255
 40054bc:	04400434 	movhi	r17,16
 40054c0:	8c7fffc4 	addi	r17,r17,-1
 40054c4:	180697fa 	slli	r3,r3,31
 40054c8:	2c4a703a 	and	r5,r5,r17
 40054cc:	288ab03a 	or	r5,r5,r2
 40054d0:	28c6b03a 	or	r3,r5,r3
 40054d4:	a005883a 	mov	r2,r20
 40054d8:	dfc00c17 	ldw	ra,48(sp)
 40054dc:	df000b17 	ldw	fp,44(sp)
 40054e0:	ddc00a17 	ldw	r23,40(sp)
 40054e4:	dd800917 	ldw	r22,36(sp)
 40054e8:	dd400817 	ldw	r21,32(sp)
 40054ec:	dd000717 	ldw	r20,28(sp)
 40054f0:	dcc00617 	ldw	r19,24(sp)
 40054f4:	dc800517 	ldw	r18,20(sp)
 40054f8:	dc400417 	ldw	r17,16(sp)
 40054fc:	dc000317 	ldw	r16,12(sp)
 4005500:	dec00d04 	addi	sp,sp,52
 4005504:	f800283a 	ret
 4005508:	2404b03a 	or	r2,r4,r16
 400550c:	2027883a 	mov	r19,r4
 4005510:	10004226 	beq	r2,zero,400561c <__muldf3+0x2e4>
 4005514:	8000fc26 	beq	r16,zero,4005908 <__muldf3+0x5d0>
 4005518:	8009883a 	mov	r4,r16
 400551c:	d9800215 	stw	r6,8(sp)
 4005520:	d9c00015 	stw	r7,0(sp)
 4005524:	da400115 	stw	r9,4(sp)
 4005528:	40065b80 	call	40065b8 <__clzsi2>
 400552c:	d9800217 	ldw	r6,8(sp)
 4005530:	d9c00017 	ldw	r7,0(sp)
 4005534:	da400117 	ldw	r9,4(sp)
 4005538:	113ffd44 	addi	r4,r2,-11
 400553c:	00c00704 	movi	r3,28
 4005540:	1900ed16 	blt	r3,r4,40058f8 <__muldf3+0x5c0>
 4005544:	00c00744 	movi	r3,29
 4005548:	147ffe04 	addi	r17,r2,-8
 400554c:	1907c83a 	sub	r3,r3,r4
 4005550:	8460983a 	sll	r16,r16,r17
 4005554:	98c6d83a 	srl	r3,r19,r3
 4005558:	9c68983a 	sll	r20,r19,r17
 400555c:	1c20b03a 	or	r16,r3,r16
 4005560:	1080fcc4 	addi	r2,r2,1011
 4005564:	00a5c83a 	sub	r18,zero,r2
 4005568:	0027883a 	mov	r19,zero
 400556c:	0039883a 	mov	fp,zero
 4005570:	003f9006 	br	40053b4 <__ram_exceptions_end+0xfbfc516c>
 4005574:	3446b03a 	or	r3,r6,r17
 4005578:	1800261e 	bne	r3,zero,4005614 <__muldf3+0x2dc>
 400557c:	0023883a 	mov	r17,zero
 4005580:	0011883a 	mov	r8,zero
 4005584:	01400084 	movi	r5,2
 4005588:	003f9c06 	br	40053fc <__ram_exceptions_end+0xfbfc51b4>
 400558c:	3446b03a 	or	r3,r6,r17
 4005590:	18001c26 	beq	r3,zero,4005604 <__muldf3+0x2cc>
 4005594:	8800ce26 	beq	r17,zero,40058d0 <__muldf3+0x598>
 4005598:	8809883a 	mov	r4,r17
 400559c:	d9800215 	stw	r6,8(sp)
 40055a0:	da400115 	stw	r9,4(sp)
 40055a4:	da800015 	stw	r10,0(sp)
 40055a8:	40065b80 	call	40065b8 <__clzsi2>
 40055ac:	d9800217 	ldw	r6,8(sp)
 40055b0:	da400117 	ldw	r9,4(sp)
 40055b4:	da800017 	ldw	r10,0(sp)
 40055b8:	113ffd44 	addi	r4,r2,-11
 40055bc:	00c00704 	movi	r3,28
 40055c0:	1900bf16 	blt	r3,r4,40058c0 <__muldf3+0x588>
 40055c4:	00c00744 	movi	r3,29
 40055c8:	123ffe04 	addi	r8,r2,-8
 40055cc:	1907c83a 	sub	r3,r3,r4
 40055d0:	8a22983a 	sll	r17,r17,r8
 40055d4:	30c6d83a 	srl	r3,r6,r3
 40055d8:	3210983a 	sll	r8,r6,r8
 40055dc:	1c62b03a 	or	r17,r3,r17
 40055e0:	1080fcc4 	addi	r2,r2,1011
 40055e4:	0085c83a 	sub	r2,zero,r2
 40055e8:	000b883a 	mov	r5,zero
 40055ec:	003f8306 	br	40053fc <__ram_exceptions_end+0xfbfc51b4>
 40055f0:	b02b883a 	mov	r21,r22
 40055f4:	0081ffc4 	movi	r2,2047
 40055f8:	000b883a 	mov	r5,zero
 40055fc:	0029883a 	mov	r20,zero
 4005600:	003fac06 	br	40054b4 <__ram_exceptions_end+0xfbfc526c>
 4005604:	0023883a 	mov	r17,zero
 4005608:	0011883a 	mov	r8,zero
 400560c:	01400044 	movi	r5,1
 4005610:	003f7a06 	br	40053fc <__ram_exceptions_end+0xfbfc51b4>
 4005614:	014000c4 	movi	r5,3
 4005618:	003f7806 	br	40053fc <__ram_exceptions_end+0xfbfc51b4>
 400561c:	04c00104 	movi	r19,4
 4005620:	0021883a 	mov	r16,zero
 4005624:	0029883a 	mov	r20,zero
 4005628:	07000044 	movi	fp,1
 400562c:	003f6106 	br	40053b4 <__ram_exceptions_end+0xfbfc516c>
 4005630:	04c00304 	movi	r19,12
 4005634:	070000c4 	movi	fp,3
 4005638:	003f5e06 	br	40053b4 <__ram_exceptions_end+0xfbfc516c>
 400563c:	01400434 	movhi	r5,16
 4005640:	002b883a 	mov	r21,zero
 4005644:	297fffc4 	addi	r5,r5,-1
 4005648:	053fffc4 	movi	r20,-1
 400564c:	0081ffc4 	movi	r2,2047
 4005650:	003f9806 	br	40054b4 <__ram_exceptions_end+0xfbfc526c>
 4005654:	8023883a 	mov	r17,r16
 4005658:	a011883a 	mov	r8,r20
 400565c:	e00b883a 	mov	r5,fp
 4005660:	003f8a06 	br	400548c <__ram_exceptions_end+0xfbfc5244>
 4005664:	8023883a 	mov	r17,r16
 4005668:	a011883a 	mov	r8,r20
 400566c:	482d883a 	mov	r22,r9
 4005670:	e00b883a 	mov	r5,fp
 4005674:	003f8506 	br	400548c <__ram_exceptions_end+0xfbfc5244>
 4005678:	a00ad43a 	srli	r5,r20,16
 400567c:	401ad43a 	srli	r13,r8,16
 4005680:	a53fffcc 	andi	r20,r20,65535
 4005684:	423fffcc 	andi	r8,r8,65535
 4005688:	4519383a 	mul	r12,r8,r20
 400568c:	4147383a 	mul	r3,r8,r5
 4005690:	6d09383a 	mul	r4,r13,r20
 4005694:	600cd43a 	srli	r6,r12,16
 4005698:	2b5d383a 	mul	r14,r5,r13
 400569c:	20c9883a 	add	r4,r4,r3
 40056a0:	310d883a 	add	r6,r6,r4
 40056a4:	30c0022e 	bgeu	r6,r3,40056b0 <__muldf3+0x378>
 40056a8:	00c00074 	movhi	r3,1
 40056ac:	70dd883a 	add	r14,r14,r3
 40056b0:	8826d43a 	srli	r19,r17,16
 40056b4:	8bffffcc 	andi	r15,r17,65535
 40056b8:	7d23383a 	mul	r17,r15,r20
 40056bc:	7949383a 	mul	r4,r15,r5
 40056c0:	9d29383a 	mul	r20,r19,r20
 40056c4:	8814d43a 	srli	r10,r17,16
 40056c8:	3012943a 	slli	r9,r6,16
 40056cc:	a129883a 	add	r20,r20,r4
 40056d0:	633fffcc 	andi	r12,r12,65535
 40056d4:	5515883a 	add	r10,r10,r20
 40056d8:	3006d43a 	srli	r3,r6,16
 40056dc:	4b13883a 	add	r9,r9,r12
 40056e0:	2ccb383a 	mul	r5,r5,r19
 40056e4:	5100022e 	bgeu	r10,r4,40056f0 <__muldf3+0x3b8>
 40056e8:	01000074 	movhi	r4,1
 40056ec:	290b883a 	add	r5,r5,r4
 40056f0:	802ad43a 	srli	r21,r16,16
 40056f4:	843fffcc 	andi	r16,r16,65535
 40056f8:	440d383a 	mul	r6,r8,r16
 40056fc:	4565383a 	mul	r18,r8,r21
 4005700:	8349383a 	mul	r4,r16,r13
 4005704:	500e943a 	slli	r7,r10,16
 4005708:	3010d43a 	srli	r8,r6,16
 400570c:	5028d43a 	srli	r20,r10,16
 4005710:	2489883a 	add	r4,r4,r18
 4005714:	8abfffcc 	andi	r10,r17,65535
 4005718:	3a95883a 	add	r10,r7,r10
 400571c:	4119883a 	add	r12,r8,r4
 4005720:	a169883a 	add	r20,r20,r5
 4005724:	1a87883a 	add	r3,r3,r10
 4005728:	6d5b383a 	mul	r13,r13,r21
 400572c:	6480022e 	bgeu	r12,r18,4005738 <__muldf3+0x400>
 4005730:	01000074 	movhi	r4,1
 4005734:	691b883a 	add	r13,r13,r4
 4005738:	7c25383a 	mul	r18,r15,r16
 400573c:	7d4b383a 	mul	r5,r15,r21
 4005740:	84cf383a 	mul	r7,r16,r19
 4005744:	901ed43a 	srli	r15,r18,16
 4005748:	6008d43a 	srli	r4,r12,16
 400574c:	6010943a 	slli	r8,r12,16
 4005750:	394f883a 	add	r7,r7,r5
 4005754:	333fffcc 	andi	r12,r6,65535
 4005758:	79df883a 	add	r15,r15,r7
 400575c:	235b883a 	add	r13,r4,r13
 4005760:	9d63383a 	mul	r17,r19,r21
 4005764:	4309883a 	add	r4,r8,r12
 4005768:	7940022e 	bgeu	r15,r5,4005774 <__muldf3+0x43c>
 400576c:	01400074 	movhi	r5,1
 4005770:	8963883a 	add	r17,r17,r5
 4005774:	780a943a 	slli	r5,r15,16
 4005778:	91bfffcc 	andi	r6,r18,65535
 400577c:	70c7883a 	add	r3,r14,r3
 4005780:	298d883a 	add	r6,r5,r6
 4005784:	1a8f803a 	cmpltu	r7,r3,r10
 4005788:	350b883a 	add	r5,r6,r20
 400578c:	20c7883a 	add	r3,r4,r3
 4005790:	3955883a 	add	r10,r7,r5
 4005794:	1909803a 	cmpltu	r4,r3,r4
 4005798:	6a91883a 	add	r8,r13,r10
 400579c:	780cd43a 	srli	r6,r15,16
 40057a0:	2219883a 	add	r12,r4,r8
 40057a4:	2d0b803a 	cmpltu	r5,r5,r20
 40057a8:	51cf803a 	cmpltu	r7,r10,r7
 40057ac:	29ceb03a 	or	r7,r5,r7
 40057b0:	4351803a 	cmpltu	r8,r8,r13
 40057b4:	610b803a 	cmpltu	r5,r12,r4
 40057b8:	4148b03a 	or	r4,r8,r5
 40057bc:	398f883a 	add	r7,r7,r6
 40057c0:	3909883a 	add	r4,r7,r4
 40057c4:	1810927a 	slli	r8,r3,9
 40057c8:	2449883a 	add	r4,r4,r17
 40057cc:	2008927a 	slli	r4,r4,9
 40057d0:	6022d5fa 	srli	r17,r12,23
 40057d4:	1806d5fa 	srli	r3,r3,23
 40057d8:	4252b03a 	or	r9,r8,r9
 40057dc:	600a927a 	slli	r5,r12,9
 40057e0:	4810c03a 	cmpne	r8,r9,zero
 40057e4:	2462b03a 	or	r17,r4,r17
 40057e8:	40c6b03a 	or	r3,r8,r3
 40057ec:	8900402c 	andhi	r4,r17,256
 40057f0:	1950b03a 	or	r8,r3,r5
 40057f4:	20000726 	beq	r4,zero,4005814 <__muldf3+0x4dc>
 40057f8:	4006d07a 	srli	r3,r8,1
 40057fc:	880497fa 	slli	r2,r17,31
 4005800:	4200004c 	andi	r8,r8,1
 4005804:	8822d07a 	srli	r17,r17,1
 4005808:	1a10b03a 	or	r8,r3,r8
 400580c:	1210b03a 	or	r8,r2,r8
 4005810:	5805883a 	mov	r2,r11
 4005814:	1140ffc4 	addi	r5,r2,1023
 4005818:	0140440e 	bge	zero,r5,400592c <__muldf3+0x5f4>
 400581c:	40c001cc 	andi	r3,r8,7
 4005820:	18000726 	beq	r3,zero,4005840 <__muldf3+0x508>
 4005824:	40c003cc 	andi	r3,r8,15
 4005828:	01000104 	movi	r4,4
 400582c:	19000426 	beq	r3,r4,4005840 <__muldf3+0x508>
 4005830:	4107883a 	add	r3,r8,r4
 4005834:	1a11803a 	cmpltu	r8,r3,r8
 4005838:	8a23883a 	add	r17,r17,r8
 400583c:	1811883a 	mov	r8,r3
 4005840:	88c0402c 	andhi	r3,r17,256
 4005844:	18000426 	beq	r3,zero,4005858 <__muldf3+0x520>
 4005848:	11410004 	addi	r5,r2,1024
 400584c:	00bfc034 	movhi	r2,65280
 4005850:	10bfffc4 	addi	r2,r2,-1
 4005854:	88a2703a 	and	r17,r17,r2
 4005858:	0081ff84 	movi	r2,2046
 400585c:	117f6416 	blt	r2,r5,40055f0 <__ram_exceptions_end+0xfbfc53a8>
 4005860:	8828977a 	slli	r20,r17,29
 4005864:	4010d0fa 	srli	r8,r8,3
 4005868:	8822927a 	slli	r17,r17,9
 400586c:	2881ffcc 	andi	r2,r5,2047
 4005870:	a228b03a 	or	r20,r20,r8
 4005874:	880ad33a 	srli	r5,r17,12
 4005878:	b02b883a 	mov	r21,r22
 400587c:	003f0d06 	br	40054b4 <__ram_exceptions_end+0xfbfc526c>
 4005880:	8080022c 	andhi	r2,r16,8
 4005884:	10000926 	beq	r2,zero,40058ac <__muldf3+0x574>
 4005888:	8880022c 	andhi	r2,r17,8
 400588c:	1000071e 	bne	r2,zero,40058ac <__muldf3+0x574>
 4005890:	00800434 	movhi	r2,16
 4005894:	89400234 	orhi	r5,r17,8
 4005898:	10bfffc4 	addi	r2,r2,-1
 400589c:	b82b883a 	mov	r21,r23
 40058a0:	288a703a 	and	r5,r5,r2
 40058a4:	4029883a 	mov	r20,r8
 40058a8:	003f6806 	br	400564c <__ram_exceptions_end+0xfbfc5404>
 40058ac:	00800434 	movhi	r2,16
 40058b0:	81400234 	orhi	r5,r16,8
 40058b4:	10bfffc4 	addi	r2,r2,-1
 40058b8:	288a703a 	and	r5,r5,r2
 40058bc:	003f6306 	br	400564c <__ram_exceptions_end+0xfbfc5404>
 40058c0:	147ff604 	addi	r17,r2,-40
 40058c4:	3462983a 	sll	r17,r6,r17
 40058c8:	0011883a 	mov	r8,zero
 40058cc:	003f4406 	br	40055e0 <__ram_exceptions_end+0xfbfc5398>
 40058d0:	3009883a 	mov	r4,r6
 40058d4:	d9800215 	stw	r6,8(sp)
 40058d8:	da400115 	stw	r9,4(sp)
 40058dc:	da800015 	stw	r10,0(sp)
 40058e0:	40065b80 	call	40065b8 <__clzsi2>
 40058e4:	10800804 	addi	r2,r2,32
 40058e8:	da800017 	ldw	r10,0(sp)
 40058ec:	da400117 	ldw	r9,4(sp)
 40058f0:	d9800217 	ldw	r6,8(sp)
 40058f4:	003f3006 	br	40055b8 <__ram_exceptions_end+0xfbfc5370>
 40058f8:	143ff604 	addi	r16,r2,-40
 40058fc:	9c20983a 	sll	r16,r19,r16
 4005900:	0029883a 	mov	r20,zero
 4005904:	003f1606 	br	4005560 <__ram_exceptions_end+0xfbfc5318>
 4005908:	d9800215 	stw	r6,8(sp)
 400590c:	d9c00015 	stw	r7,0(sp)
 4005910:	da400115 	stw	r9,4(sp)
 4005914:	40065b80 	call	40065b8 <__clzsi2>
 4005918:	10800804 	addi	r2,r2,32
 400591c:	da400117 	ldw	r9,4(sp)
 4005920:	d9c00017 	ldw	r7,0(sp)
 4005924:	d9800217 	ldw	r6,8(sp)
 4005928:	003f0306 	br	4005538 <__ram_exceptions_end+0xfbfc52f0>
 400592c:	00c00044 	movi	r3,1
 4005930:	1947c83a 	sub	r3,r3,r5
 4005934:	00800e04 	movi	r2,56
 4005938:	10feda16 	blt	r2,r3,40054a4 <__ram_exceptions_end+0xfbfc525c>
 400593c:	008007c4 	movi	r2,31
 4005940:	10c01b16 	blt	r2,r3,40059b0 <__muldf3+0x678>
 4005944:	00800804 	movi	r2,32
 4005948:	10c5c83a 	sub	r2,r2,r3
 400594c:	888a983a 	sll	r5,r17,r2
 4005950:	40c8d83a 	srl	r4,r8,r3
 4005954:	4084983a 	sll	r2,r8,r2
 4005958:	88e2d83a 	srl	r17,r17,r3
 400595c:	2906b03a 	or	r3,r5,r4
 4005960:	1004c03a 	cmpne	r2,r2,zero
 4005964:	1886b03a 	or	r3,r3,r2
 4005968:	188001cc 	andi	r2,r3,7
 400596c:	10000726 	beq	r2,zero,400598c <__muldf3+0x654>
 4005970:	188003cc 	andi	r2,r3,15
 4005974:	01000104 	movi	r4,4
 4005978:	11000426 	beq	r2,r4,400598c <__muldf3+0x654>
 400597c:	1805883a 	mov	r2,r3
 4005980:	10c00104 	addi	r3,r2,4
 4005984:	1885803a 	cmpltu	r2,r3,r2
 4005988:	88a3883a 	add	r17,r17,r2
 400598c:	8880202c 	andhi	r2,r17,128
 4005990:	10001c26 	beq	r2,zero,4005a04 <__muldf3+0x6cc>
 4005994:	b02b883a 	mov	r21,r22
 4005998:	00800044 	movi	r2,1
 400599c:	000b883a 	mov	r5,zero
 40059a0:	0029883a 	mov	r20,zero
 40059a4:	003ec306 	br	40054b4 <__ram_exceptions_end+0xfbfc526c>
 40059a8:	5805883a 	mov	r2,r11
 40059ac:	003f9906 	br	4005814 <__ram_exceptions_end+0xfbfc55cc>
 40059b0:	00bff844 	movi	r2,-31
 40059b4:	1145c83a 	sub	r2,r2,r5
 40059b8:	8888d83a 	srl	r4,r17,r2
 40059bc:	00800804 	movi	r2,32
 40059c0:	18801a26 	beq	r3,r2,4005a2c <__muldf3+0x6f4>
 40059c4:	00801004 	movi	r2,64
 40059c8:	10c5c83a 	sub	r2,r2,r3
 40059cc:	8884983a 	sll	r2,r17,r2
 40059d0:	1204b03a 	or	r2,r2,r8
 40059d4:	1004c03a 	cmpne	r2,r2,zero
 40059d8:	2084b03a 	or	r2,r4,r2
 40059dc:	144001cc 	andi	r17,r2,7
 40059e0:	88000d1e 	bne	r17,zero,4005a18 <__muldf3+0x6e0>
 40059e4:	000b883a 	mov	r5,zero
 40059e8:	1028d0fa 	srli	r20,r2,3
 40059ec:	b02b883a 	mov	r21,r22
 40059f0:	0005883a 	mov	r2,zero
 40059f4:	a468b03a 	or	r20,r20,r17
 40059f8:	003eae06 	br	40054b4 <__ram_exceptions_end+0xfbfc526c>
 40059fc:	1007883a 	mov	r3,r2
 4005a00:	0023883a 	mov	r17,zero
 4005a04:	880a927a 	slli	r5,r17,9
 4005a08:	1805883a 	mov	r2,r3
 4005a0c:	8822977a 	slli	r17,r17,29
 4005a10:	280ad33a 	srli	r5,r5,12
 4005a14:	003ff406 	br	40059e8 <__ram_exceptions_end+0xfbfc57a0>
 4005a18:	10c003cc 	andi	r3,r2,15
 4005a1c:	01000104 	movi	r4,4
 4005a20:	193ff626 	beq	r3,r4,40059fc <__ram_exceptions_end+0xfbfc57b4>
 4005a24:	0023883a 	mov	r17,zero
 4005a28:	003fd506 	br	4005980 <__ram_exceptions_end+0xfbfc5738>
 4005a2c:	0005883a 	mov	r2,zero
 4005a30:	003fe706 	br	40059d0 <__ram_exceptions_end+0xfbfc5788>
 4005a34:	00800434 	movhi	r2,16
 4005a38:	89400234 	orhi	r5,r17,8
 4005a3c:	10bfffc4 	addi	r2,r2,-1
 4005a40:	b02b883a 	mov	r21,r22
 4005a44:	288a703a 	and	r5,r5,r2
 4005a48:	4029883a 	mov	r20,r8
 4005a4c:	003eff06 	br	400564c <__ram_exceptions_end+0xfbfc5404>

04005a50 <__subdf3>:
 4005a50:	02000434 	movhi	r8,16
 4005a54:	423fffc4 	addi	r8,r8,-1
 4005a58:	defffb04 	addi	sp,sp,-20
 4005a5c:	2a14703a 	and	r10,r5,r8
 4005a60:	3812d53a 	srli	r9,r7,20
 4005a64:	3a10703a 	and	r8,r7,r8
 4005a68:	2006d77a 	srli	r3,r4,29
 4005a6c:	3004d77a 	srli	r2,r6,29
 4005a70:	dc000015 	stw	r16,0(sp)
 4005a74:	501490fa 	slli	r10,r10,3
 4005a78:	2820d53a 	srli	r16,r5,20
 4005a7c:	401090fa 	slli	r8,r8,3
 4005a80:	dc800215 	stw	r18,8(sp)
 4005a84:	dc400115 	stw	r17,4(sp)
 4005a88:	dfc00415 	stw	ra,16(sp)
 4005a8c:	202290fa 	slli	r17,r4,3
 4005a90:	dcc00315 	stw	r19,12(sp)
 4005a94:	4a41ffcc 	andi	r9,r9,2047
 4005a98:	0101ffc4 	movi	r4,2047
 4005a9c:	2824d7fa 	srli	r18,r5,31
 4005aa0:	8401ffcc 	andi	r16,r16,2047
 4005aa4:	50c6b03a 	or	r3,r10,r3
 4005aa8:	380ed7fa 	srli	r7,r7,31
 4005aac:	408ab03a 	or	r5,r8,r2
 4005ab0:	300c90fa 	slli	r6,r6,3
 4005ab4:	49009626 	beq	r9,r4,4005d10 <__subdf3+0x2c0>
 4005ab8:	39c0005c 	xori	r7,r7,1
 4005abc:	8245c83a 	sub	r2,r16,r9
 4005ac0:	3c807426 	beq	r7,r18,4005c94 <__subdf3+0x244>
 4005ac4:	0080af0e 	bge	zero,r2,4005d84 <__subdf3+0x334>
 4005ac8:	48002a1e 	bne	r9,zero,4005b74 <__subdf3+0x124>
 4005acc:	2988b03a 	or	r4,r5,r6
 4005ad0:	20009a1e 	bne	r4,zero,4005d3c <__subdf3+0x2ec>
 4005ad4:	888001cc 	andi	r2,r17,7
 4005ad8:	10000726 	beq	r2,zero,4005af8 <__subdf3+0xa8>
 4005adc:	888003cc 	andi	r2,r17,15
 4005ae0:	01000104 	movi	r4,4
 4005ae4:	11000426 	beq	r2,r4,4005af8 <__subdf3+0xa8>
 4005ae8:	890b883a 	add	r5,r17,r4
 4005aec:	2c63803a 	cmpltu	r17,r5,r17
 4005af0:	1c47883a 	add	r3,r3,r17
 4005af4:	2823883a 	mov	r17,r5
 4005af8:	1880202c 	andhi	r2,r3,128
 4005afc:	10005926 	beq	r2,zero,4005c64 <__subdf3+0x214>
 4005b00:	84000044 	addi	r16,r16,1
 4005b04:	0081ffc4 	movi	r2,2047
 4005b08:	8080be26 	beq	r16,r2,4005e04 <__subdf3+0x3b4>
 4005b0c:	017fe034 	movhi	r5,65408
 4005b10:	297fffc4 	addi	r5,r5,-1
 4005b14:	1946703a 	and	r3,r3,r5
 4005b18:	1804977a 	slli	r2,r3,29
 4005b1c:	1806927a 	slli	r3,r3,9
 4005b20:	8822d0fa 	srli	r17,r17,3
 4005b24:	8401ffcc 	andi	r16,r16,2047
 4005b28:	180ad33a 	srli	r5,r3,12
 4005b2c:	9100004c 	andi	r4,r18,1
 4005b30:	1444b03a 	or	r2,r2,r17
 4005b34:	80c1ffcc 	andi	r3,r16,2047
 4005b38:	1820953a 	slli	r16,r3,20
 4005b3c:	20c03fcc 	andi	r3,r4,255
 4005b40:	180897fa 	slli	r4,r3,31
 4005b44:	00c00434 	movhi	r3,16
 4005b48:	18ffffc4 	addi	r3,r3,-1
 4005b4c:	28c6703a 	and	r3,r5,r3
 4005b50:	1c06b03a 	or	r3,r3,r16
 4005b54:	1906b03a 	or	r3,r3,r4
 4005b58:	dfc00417 	ldw	ra,16(sp)
 4005b5c:	dcc00317 	ldw	r19,12(sp)
 4005b60:	dc800217 	ldw	r18,8(sp)
 4005b64:	dc400117 	ldw	r17,4(sp)
 4005b68:	dc000017 	ldw	r16,0(sp)
 4005b6c:	dec00504 	addi	sp,sp,20
 4005b70:	f800283a 	ret
 4005b74:	0101ffc4 	movi	r4,2047
 4005b78:	813fd626 	beq	r16,r4,4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005b7c:	29402034 	orhi	r5,r5,128
 4005b80:	01000e04 	movi	r4,56
 4005b84:	2080a316 	blt	r4,r2,4005e14 <__subdf3+0x3c4>
 4005b88:	010007c4 	movi	r4,31
 4005b8c:	2080c616 	blt	r4,r2,4005ea8 <__subdf3+0x458>
 4005b90:	01000804 	movi	r4,32
 4005b94:	2089c83a 	sub	r4,r4,r2
 4005b98:	2910983a 	sll	r8,r5,r4
 4005b9c:	308ed83a 	srl	r7,r6,r2
 4005ba0:	3108983a 	sll	r4,r6,r4
 4005ba4:	2884d83a 	srl	r2,r5,r2
 4005ba8:	41ccb03a 	or	r6,r8,r7
 4005bac:	2008c03a 	cmpne	r4,r4,zero
 4005bb0:	310cb03a 	or	r6,r6,r4
 4005bb4:	898dc83a 	sub	r6,r17,r6
 4005bb8:	89a3803a 	cmpltu	r17,r17,r6
 4005bbc:	1887c83a 	sub	r3,r3,r2
 4005bc0:	1c47c83a 	sub	r3,r3,r17
 4005bc4:	3023883a 	mov	r17,r6
 4005bc8:	1880202c 	andhi	r2,r3,128
 4005bcc:	10002326 	beq	r2,zero,4005c5c <__subdf3+0x20c>
 4005bd0:	04c02034 	movhi	r19,128
 4005bd4:	9cffffc4 	addi	r19,r19,-1
 4005bd8:	1ce6703a 	and	r19,r3,r19
 4005bdc:	98007a26 	beq	r19,zero,4005dc8 <__subdf3+0x378>
 4005be0:	9809883a 	mov	r4,r19
 4005be4:	40065b80 	call	40065b8 <__clzsi2>
 4005be8:	113ffe04 	addi	r4,r2,-8
 4005bec:	00c007c4 	movi	r3,31
 4005bf0:	19007b16 	blt	r3,r4,4005de0 <__subdf3+0x390>
 4005bf4:	00800804 	movi	r2,32
 4005bf8:	1105c83a 	sub	r2,r2,r4
 4005bfc:	8884d83a 	srl	r2,r17,r2
 4005c00:	9906983a 	sll	r3,r19,r4
 4005c04:	8922983a 	sll	r17,r17,r4
 4005c08:	10c4b03a 	or	r2,r2,r3
 4005c0c:	24007816 	blt	r4,r16,4005df0 <__subdf3+0x3a0>
 4005c10:	2421c83a 	sub	r16,r4,r16
 4005c14:	80c00044 	addi	r3,r16,1
 4005c18:	010007c4 	movi	r4,31
 4005c1c:	20c09516 	blt	r4,r3,4005e74 <__subdf3+0x424>
 4005c20:	01400804 	movi	r5,32
 4005c24:	28cbc83a 	sub	r5,r5,r3
 4005c28:	88c8d83a 	srl	r4,r17,r3
 4005c2c:	8962983a 	sll	r17,r17,r5
 4005c30:	114a983a 	sll	r5,r2,r5
 4005c34:	10c6d83a 	srl	r3,r2,r3
 4005c38:	8804c03a 	cmpne	r2,r17,zero
 4005c3c:	290ab03a 	or	r5,r5,r4
 4005c40:	28a2b03a 	or	r17,r5,r2
 4005c44:	0021883a 	mov	r16,zero
 4005c48:	003fa206 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005c4c:	2090b03a 	or	r8,r4,r2
 4005c50:	40018e26 	beq	r8,zero,400628c <__subdf3+0x83c>
 4005c54:	1007883a 	mov	r3,r2
 4005c58:	2023883a 	mov	r17,r4
 4005c5c:	888001cc 	andi	r2,r17,7
 4005c60:	103f9e1e 	bne	r2,zero,4005adc <__ram_exceptions_end+0xfbfc5894>
 4005c64:	1804977a 	slli	r2,r3,29
 4005c68:	8822d0fa 	srli	r17,r17,3
 4005c6c:	1810d0fa 	srli	r8,r3,3
 4005c70:	9100004c 	andi	r4,r18,1
 4005c74:	1444b03a 	or	r2,r2,r17
 4005c78:	00c1ffc4 	movi	r3,2047
 4005c7c:	80c02826 	beq	r16,r3,4005d20 <__subdf3+0x2d0>
 4005c80:	01400434 	movhi	r5,16
 4005c84:	297fffc4 	addi	r5,r5,-1
 4005c88:	80e0703a 	and	r16,r16,r3
 4005c8c:	414a703a 	and	r5,r8,r5
 4005c90:	003fa806 	br	4005b34 <__ram_exceptions_end+0xfbfc58ec>
 4005c94:	0080630e 	bge	zero,r2,4005e24 <__subdf3+0x3d4>
 4005c98:	48003026 	beq	r9,zero,4005d5c <__subdf3+0x30c>
 4005c9c:	0101ffc4 	movi	r4,2047
 4005ca0:	813f8c26 	beq	r16,r4,4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005ca4:	29402034 	orhi	r5,r5,128
 4005ca8:	01000e04 	movi	r4,56
 4005cac:	2080a90e 	bge	r4,r2,4005f54 <__subdf3+0x504>
 4005cb0:	298cb03a 	or	r6,r5,r6
 4005cb4:	3012c03a 	cmpne	r9,r6,zero
 4005cb8:	0005883a 	mov	r2,zero
 4005cbc:	4c53883a 	add	r9,r9,r17
 4005cc0:	4c63803a 	cmpltu	r17,r9,r17
 4005cc4:	10c7883a 	add	r3,r2,r3
 4005cc8:	88c7883a 	add	r3,r17,r3
 4005ccc:	4823883a 	mov	r17,r9
 4005cd0:	1880202c 	andhi	r2,r3,128
 4005cd4:	1000d026 	beq	r2,zero,4006018 <__subdf3+0x5c8>
 4005cd8:	84000044 	addi	r16,r16,1
 4005cdc:	0081ffc4 	movi	r2,2047
 4005ce0:	8080fe26 	beq	r16,r2,40060dc <__subdf3+0x68c>
 4005ce4:	00bfe034 	movhi	r2,65408
 4005ce8:	10bfffc4 	addi	r2,r2,-1
 4005cec:	1886703a 	and	r3,r3,r2
 4005cf0:	880ad07a 	srli	r5,r17,1
 4005cf4:	180497fa 	slli	r2,r3,31
 4005cf8:	8900004c 	andi	r4,r17,1
 4005cfc:	2922b03a 	or	r17,r5,r4
 4005d00:	1806d07a 	srli	r3,r3,1
 4005d04:	1462b03a 	or	r17,r2,r17
 4005d08:	3825883a 	mov	r18,r7
 4005d0c:	003f7106 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005d10:	2984b03a 	or	r2,r5,r6
 4005d14:	103f6826 	beq	r2,zero,4005ab8 <__ram_exceptions_end+0xfbfc5870>
 4005d18:	39c03fcc 	andi	r7,r7,255
 4005d1c:	003f6706 	br	4005abc <__ram_exceptions_end+0xfbfc5874>
 4005d20:	4086b03a 	or	r3,r8,r2
 4005d24:	18015226 	beq	r3,zero,4006270 <__subdf3+0x820>
 4005d28:	00c00434 	movhi	r3,16
 4005d2c:	41400234 	orhi	r5,r8,8
 4005d30:	18ffffc4 	addi	r3,r3,-1
 4005d34:	28ca703a 	and	r5,r5,r3
 4005d38:	003f7e06 	br	4005b34 <__ram_exceptions_end+0xfbfc58ec>
 4005d3c:	10bfffc4 	addi	r2,r2,-1
 4005d40:	1000491e 	bne	r2,zero,4005e68 <__subdf3+0x418>
 4005d44:	898fc83a 	sub	r7,r17,r6
 4005d48:	89e3803a 	cmpltu	r17,r17,r7
 4005d4c:	1947c83a 	sub	r3,r3,r5
 4005d50:	1c47c83a 	sub	r3,r3,r17
 4005d54:	3823883a 	mov	r17,r7
 4005d58:	003f9b06 	br	4005bc8 <__ram_exceptions_end+0xfbfc5980>
 4005d5c:	2988b03a 	or	r4,r5,r6
 4005d60:	203f5c26 	beq	r4,zero,4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005d64:	10bfffc4 	addi	r2,r2,-1
 4005d68:	1000931e 	bne	r2,zero,4005fb8 <__subdf3+0x568>
 4005d6c:	898d883a 	add	r6,r17,r6
 4005d70:	3463803a 	cmpltu	r17,r6,r17
 4005d74:	1947883a 	add	r3,r3,r5
 4005d78:	88c7883a 	add	r3,r17,r3
 4005d7c:	3023883a 	mov	r17,r6
 4005d80:	003fd306 	br	4005cd0 <__ram_exceptions_end+0xfbfc5a88>
 4005d84:	1000541e 	bne	r2,zero,4005ed8 <__subdf3+0x488>
 4005d88:	80800044 	addi	r2,r16,1
 4005d8c:	1081ffcc 	andi	r2,r2,2047
 4005d90:	01000044 	movi	r4,1
 4005d94:	2080a20e 	bge	r4,r2,4006020 <__subdf3+0x5d0>
 4005d98:	8989c83a 	sub	r4,r17,r6
 4005d9c:	8905803a 	cmpltu	r2,r17,r4
 4005da0:	1967c83a 	sub	r19,r3,r5
 4005da4:	98a7c83a 	sub	r19,r19,r2
 4005da8:	9880202c 	andhi	r2,r19,128
 4005dac:	10006326 	beq	r2,zero,4005f3c <__subdf3+0x4ec>
 4005db0:	3463c83a 	sub	r17,r6,r17
 4005db4:	28c7c83a 	sub	r3,r5,r3
 4005db8:	344d803a 	cmpltu	r6,r6,r17
 4005dbc:	19a7c83a 	sub	r19,r3,r6
 4005dc0:	3825883a 	mov	r18,r7
 4005dc4:	983f861e 	bne	r19,zero,4005be0 <__ram_exceptions_end+0xfbfc5998>
 4005dc8:	8809883a 	mov	r4,r17
 4005dcc:	40065b80 	call	40065b8 <__clzsi2>
 4005dd0:	10800804 	addi	r2,r2,32
 4005dd4:	113ffe04 	addi	r4,r2,-8
 4005dd8:	00c007c4 	movi	r3,31
 4005ddc:	193f850e 	bge	r3,r4,4005bf4 <__ram_exceptions_end+0xfbfc59ac>
 4005de0:	10bff604 	addi	r2,r2,-40
 4005de4:	8884983a 	sll	r2,r17,r2
 4005de8:	0023883a 	mov	r17,zero
 4005dec:	243f880e 	bge	r4,r16,4005c10 <__ram_exceptions_end+0xfbfc59c8>
 4005df0:	00ffe034 	movhi	r3,65408
 4005df4:	18ffffc4 	addi	r3,r3,-1
 4005df8:	8121c83a 	sub	r16,r16,r4
 4005dfc:	10c6703a 	and	r3,r2,r3
 4005e00:	003f3406 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005e04:	9100004c 	andi	r4,r18,1
 4005e08:	000b883a 	mov	r5,zero
 4005e0c:	0005883a 	mov	r2,zero
 4005e10:	003f4806 	br	4005b34 <__ram_exceptions_end+0xfbfc58ec>
 4005e14:	298cb03a 	or	r6,r5,r6
 4005e18:	300cc03a 	cmpne	r6,r6,zero
 4005e1c:	0005883a 	mov	r2,zero
 4005e20:	003f6406 	br	4005bb4 <__ram_exceptions_end+0xfbfc596c>
 4005e24:	10009a1e 	bne	r2,zero,4006090 <__subdf3+0x640>
 4005e28:	82400044 	addi	r9,r16,1
 4005e2c:	4881ffcc 	andi	r2,r9,2047
 4005e30:	02800044 	movi	r10,1
 4005e34:	5080670e 	bge	r10,r2,4005fd4 <__subdf3+0x584>
 4005e38:	0081ffc4 	movi	r2,2047
 4005e3c:	4880af26 	beq	r9,r2,40060fc <__subdf3+0x6ac>
 4005e40:	898d883a 	add	r6,r17,r6
 4005e44:	1945883a 	add	r2,r3,r5
 4005e48:	3447803a 	cmpltu	r3,r6,r17
 4005e4c:	1887883a 	add	r3,r3,r2
 4005e50:	182297fa 	slli	r17,r3,31
 4005e54:	300cd07a 	srli	r6,r6,1
 4005e58:	1806d07a 	srli	r3,r3,1
 4005e5c:	4821883a 	mov	r16,r9
 4005e60:	89a2b03a 	or	r17,r17,r6
 4005e64:	003f1b06 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005e68:	0101ffc4 	movi	r4,2047
 4005e6c:	813f441e 	bne	r16,r4,4005b80 <__ram_exceptions_end+0xfbfc5938>
 4005e70:	003f1806 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005e74:	843ff844 	addi	r16,r16,-31
 4005e78:	01400804 	movi	r5,32
 4005e7c:	1408d83a 	srl	r4,r2,r16
 4005e80:	19405026 	beq	r3,r5,4005fc4 <__subdf3+0x574>
 4005e84:	01401004 	movi	r5,64
 4005e88:	28c7c83a 	sub	r3,r5,r3
 4005e8c:	10c4983a 	sll	r2,r2,r3
 4005e90:	88a2b03a 	or	r17,r17,r2
 4005e94:	8822c03a 	cmpne	r17,r17,zero
 4005e98:	2462b03a 	or	r17,r4,r17
 4005e9c:	0007883a 	mov	r3,zero
 4005ea0:	0021883a 	mov	r16,zero
 4005ea4:	003f6d06 	br	4005c5c <__ram_exceptions_end+0xfbfc5a14>
 4005ea8:	11fff804 	addi	r7,r2,-32
 4005eac:	01000804 	movi	r4,32
 4005eb0:	29ced83a 	srl	r7,r5,r7
 4005eb4:	11004526 	beq	r2,r4,4005fcc <__subdf3+0x57c>
 4005eb8:	01001004 	movi	r4,64
 4005ebc:	2089c83a 	sub	r4,r4,r2
 4005ec0:	2904983a 	sll	r2,r5,r4
 4005ec4:	118cb03a 	or	r6,r2,r6
 4005ec8:	300cc03a 	cmpne	r6,r6,zero
 4005ecc:	398cb03a 	or	r6,r7,r6
 4005ed0:	0005883a 	mov	r2,zero
 4005ed4:	003f3706 	br	4005bb4 <__ram_exceptions_end+0xfbfc596c>
 4005ed8:	80002a26 	beq	r16,zero,4005f84 <__subdf3+0x534>
 4005edc:	0101ffc4 	movi	r4,2047
 4005ee0:	49006626 	beq	r9,r4,400607c <__subdf3+0x62c>
 4005ee4:	0085c83a 	sub	r2,zero,r2
 4005ee8:	18c02034 	orhi	r3,r3,128
 4005eec:	01000e04 	movi	r4,56
 4005ef0:	20807e16 	blt	r4,r2,40060ec <__subdf3+0x69c>
 4005ef4:	010007c4 	movi	r4,31
 4005ef8:	2080e716 	blt	r4,r2,4006298 <__subdf3+0x848>
 4005efc:	01000804 	movi	r4,32
 4005f00:	2089c83a 	sub	r4,r4,r2
 4005f04:	1914983a 	sll	r10,r3,r4
 4005f08:	8890d83a 	srl	r8,r17,r2
 4005f0c:	8908983a 	sll	r4,r17,r4
 4005f10:	1884d83a 	srl	r2,r3,r2
 4005f14:	5222b03a 	or	r17,r10,r8
 4005f18:	2006c03a 	cmpne	r3,r4,zero
 4005f1c:	88e2b03a 	or	r17,r17,r3
 4005f20:	3463c83a 	sub	r17,r6,r17
 4005f24:	2885c83a 	sub	r2,r5,r2
 4005f28:	344d803a 	cmpltu	r6,r6,r17
 4005f2c:	1187c83a 	sub	r3,r2,r6
 4005f30:	4821883a 	mov	r16,r9
 4005f34:	3825883a 	mov	r18,r7
 4005f38:	003f2306 	br	4005bc8 <__ram_exceptions_end+0xfbfc5980>
 4005f3c:	24d0b03a 	or	r8,r4,r19
 4005f40:	40001b1e 	bne	r8,zero,4005fb0 <__subdf3+0x560>
 4005f44:	0005883a 	mov	r2,zero
 4005f48:	0009883a 	mov	r4,zero
 4005f4c:	0021883a 	mov	r16,zero
 4005f50:	003f4906 	br	4005c78 <__ram_exceptions_end+0xfbfc5a30>
 4005f54:	010007c4 	movi	r4,31
 4005f58:	20803a16 	blt	r4,r2,4006044 <__subdf3+0x5f4>
 4005f5c:	01000804 	movi	r4,32
 4005f60:	2089c83a 	sub	r4,r4,r2
 4005f64:	2912983a 	sll	r9,r5,r4
 4005f68:	3090d83a 	srl	r8,r6,r2
 4005f6c:	3108983a 	sll	r4,r6,r4
 4005f70:	2884d83a 	srl	r2,r5,r2
 4005f74:	4a12b03a 	or	r9,r9,r8
 4005f78:	2008c03a 	cmpne	r4,r4,zero
 4005f7c:	4912b03a 	or	r9,r9,r4
 4005f80:	003f4e06 	br	4005cbc <__ram_exceptions_end+0xfbfc5a74>
 4005f84:	1c48b03a 	or	r4,r3,r17
 4005f88:	20003c26 	beq	r4,zero,400607c <__subdf3+0x62c>
 4005f8c:	0084303a 	nor	r2,zero,r2
 4005f90:	1000381e 	bne	r2,zero,4006074 <__subdf3+0x624>
 4005f94:	3463c83a 	sub	r17,r6,r17
 4005f98:	28c5c83a 	sub	r2,r5,r3
 4005f9c:	344d803a 	cmpltu	r6,r6,r17
 4005fa0:	1187c83a 	sub	r3,r2,r6
 4005fa4:	4821883a 	mov	r16,r9
 4005fa8:	3825883a 	mov	r18,r7
 4005fac:	003f0606 	br	4005bc8 <__ram_exceptions_end+0xfbfc5980>
 4005fb0:	2023883a 	mov	r17,r4
 4005fb4:	003f0906 	br	4005bdc <__ram_exceptions_end+0xfbfc5994>
 4005fb8:	0101ffc4 	movi	r4,2047
 4005fbc:	813f3a1e 	bne	r16,r4,4005ca8 <__ram_exceptions_end+0xfbfc5a60>
 4005fc0:	003ec406 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005fc4:	0005883a 	mov	r2,zero
 4005fc8:	003fb106 	br	4005e90 <__ram_exceptions_end+0xfbfc5c48>
 4005fcc:	0005883a 	mov	r2,zero
 4005fd0:	003fbc06 	br	4005ec4 <__ram_exceptions_end+0xfbfc5c7c>
 4005fd4:	1c44b03a 	or	r2,r3,r17
 4005fd8:	80008e1e 	bne	r16,zero,4006214 <__subdf3+0x7c4>
 4005fdc:	1000c826 	beq	r2,zero,4006300 <__subdf3+0x8b0>
 4005fe0:	2984b03a 	or	r2,r5,r6
 4005fe4:	103ebb26 	beq	r2,zero,4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4005fe8:	8989883a 	add	r4,r17,r6
 4005fec:	1945883a 	add	r2,r3,r5
 4005ff0:	2447803a 	cmpltu	r3,r4,r17
 4005ff4:	1887883a 	add	r3,r3,r2
 4005ff8:	1880202c 	andhi	r2,r3,128
 4005ffc:	2023883a 	mov	r17,r4
 4006000:	103f1626 	beq	r2,zero,4005c5c <__ram_exceptions_end+0xfbfc5a14>
 4006004:	00bfe034 	movhi	r2,65408
 4006008:	10bfffc4 	addi	r2,r2,-1
 400600c:	5021883a 	mov	r16,r10
 4006010:	1886703a 	and	r3,r3,r2
 4006014:	003eaf06 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006018:	3825883a 	mov	r18,r7
 400601c:	003f0f06 	br	4005c5c <__ram_exceptions_end+0xfbfc5a14>
 4006020:	1c44b03a 	or	r2,r3,r17
 4006024:	8000251e 	bne	r16,zero,40060bc <__subdf3+0x66c>
 4006028:	1000661e 	bne	r2,zero,40061c4 <__subdf3+0x774>
 400602c:	2990b03a 	or	r8,r5,r6
 4006030:	40009626 	beq	r8,zero,400628c <__subdf3+0x83c>
 4006034:	2807883a 	mov	r3,r5
 4006038:	3023883a 	mov	r17,r6
 400603c:	3825883a 	mov	r18,r7
 4006040:	003ea406 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006044:	127ff804 	addi	r9,r2,-32
 4006048:	01000804 	movi	r4,32
 400604c:	2a52d83a 	srl	r9,r5,r9
 4006050:	11008c26 	beq	r2,r4,4006284 <__subdf3+0x834>
 4006054:	01001004 	movi	r4,64
 4006058:	2085c83a 	sub	r2,r4,r2
 400605c:	2884983a 	sll	r2,r5,r2
 4006060:	118cb03a 	or	r6,r2,r6
 4006064:	300cc03a 	cmpne	r6,r6,zero
 4006068:	4992b03a 	or	r9,r9,r6
 400606c:	0005883a 	mov	r2,zero
 4006070:	003f1206 	br	4005cbc <__ram_exceptions_end+0xfbfc5a74>
 4006074:	0101ffc4 	movi	r4,2047
 4006078:	493f9c1e 	bne	r9,r4,4005eec <__ram_exceptions_end+0xfbfc5ca4>
 400607c:	2807883a 	mov	r3,r5
 4006080:	3023883a 	mov	r17,r6
 4006084:	4821883a 	mov	r16,r9
 4006088:	3825883a 	mov	r18,r7
 400608c:	003e9106 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006090:	80001f1e 	bne	r16,zero,4006110 <__subdf3+0x6c0>
 4006094:	1c48b03a 	or	r4,r3,r17
 4006098:	20005a26 	beq	r4,zero,4006204 <__subdf3+0x7b4>
 400609c:	0084303a 	nor	r2,zero,r2
 40060a0:	1000561e 	bne	r2,zero,40061fc <__subdf3+0x7ac>
 40060a4:	89a3883a 	add	r17,r17,r6
 40060a8:	1945883a 	add	r2,r3,r5
 40060ac:	898d803a 	cmpltu	r6,r17,r6
 40060b0:	3087883a 	add	r3,r6,r2
 40060b4:	4821883a 	mov	r16,r9
 40060b8:	003f0506 	br	4005cd0 <__ram_exceptions_end+0xfbfc5a88>
 40060bc:	10002b1e 	bne	r2,zero,400616c <__subdf3+0x71c>
 40060c0:	2984b03a 	or	r2,r5,r6
 40060c4:	10008026 	beq	r2,zero,40062c8 <__subdf3+0x878>
 40060c8:	2807883a 	mov	r3,r5
 40060cc:	3023883a 	mov	r17,r6
 40060d0:	3825883a 	mov	r18,r7
 40060d4:	0401ffc4 	movi	r16,2047
 40060d8:	003e7e06 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 40060dc:	3809883a 	mov	r4,r7
 40060e0:	0011883a 	mov	r8,zero
 40060e4:	0005883a 	mov	r2,zero
 40060e8:	003ee306 	br	4005c78 <__ram_exceptions_end+0xfbfc5a30>
 40060ec:	1c62b03a 	or	r17,r3,r17
 40060f0:	8822c03a 	cmpne	r17,r17,zero
 40060f4:	0005883a 	mov	r2,zero
 40060f8:	003f8906 	br	4005f20 <__ram_exceptions_end+0xfbfc5cd8>
 40060fc:	3809883a 	mov	r4,r7
 4006100:	4821883a 	mov	r16,r9
 4006104:	0011883a 	mov	r8,zero
 4006108:	0005883a 	mov	r2,zero
 400610c:	003eda06 	br	4005c78 <__ram_exceptions_end+0xfbfc5a30>
 4006110:	0101ffc4 	movi	r4,2047
 4006114:	49003b26 	beq	r9,r4,4006204 <__subdf3+0x7b4>
 4006118:	0085c83a 	sub	r2,zero,r2
 400611c:	18c02034 	orhi	r3,r3,128
 4006120:	01000e04 	movi	r4,56
 4006124:	20806e16 	blt	r4,r2,40062e0 <__subdf3+0x890>
 4006128:	010007c4 	movi	r4,31
 400612c:	20807716 	blt	r4,r2,400630c <__subdf3+0x8bc>
 4006130:	01000804 	movi	r4,32
 4006134:	2089c83a 	sub	r4,r4,r2
 4006138:	1914983a 	sll	r10,r3,r4
 400613c:	8890d83a 	srl	r8,r17,r2
 4006140:	8908983a 	sll	r4,r17,r4
 4006144:	1884d83a 	srl	r2,r3,r2
 4006148:	5222b03a 	or	r17,r10,r8
 400614c:	2006c03a 	cmpne	r3,r4,zero
 4006150:	88e2b03a 	or	r17,r17,r3
 4006154:	89a3883a 	add	r17,r17,r6
 4006158:	1145883a 	add	r2,r2,r5
 400615c:	898d803a 	cmpltu	r6,r17,r6
 4006160:	3087883a 	add	r3,r6,r2
 4006164:	4821883a 	mov	r16,r9
 4006168:	003ed906 	br	4005cd0 <__ram_exceptions_end+0xfbfc5a88>
 400616c:	2984b03a 	or	r2,r5,r6
 4006170:	10004226 	beq	r2,zero,400627c <__subdf3+0x82c>
 4006174:	1808d0fa 	srli	r4,r3,3
 4006178:	8822d0fa 	srli	r17,r17,3
 400617c:	1806977a 	slli	r3,r3,29
 4006180:	2080022c 	andhi	r2,r4,8
 4006184:	1c62b03a 	or	r17,r3,r17
 4006188:	10000826 	beq	r2,zero,40061ac <__subdf3+0x75c>
 400618c:	2812d0fa 	srli	r9,r5,3
 4006190:	4880022c 	andhi	r2,r9,8
 4006194:	1000051e 	bne	r2,zero,40061ac <__subdf3+0x75c>
 4006198:	300cd0fa 	srli	r6,r6,3
 400619c:	2804977a 	slli	r2,r5,29
 40061a0:	4809883a 	mov	r4,r9
 40061a4:	3825883a 	mov	r18,r7
 40061a8:	11a2b03a 	or	r17,r2,r6
 40061ac:	8806d77a 	srli	r3,r17,29
 40061b0:	200890fa 	slli	r4,r4,3
 40061b4:	882290fa 	slli	r17,r17,3
 40061b8:	0401ffc4 	movi	r16,2047
 40061bc:	1906b03a 	or	r3,r3,r4
 40061c0:	003e4406 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 40061c4:	2984b03a 	or	r2,r5,r6
 40061c8:	103e4226 	beq	r2,zero,4005ad4 <__ram_exceptions_end+0xfbfc588c>
 40061cc:	8989c83a 	sub	r4,r17,r6
 40061d0:	8911803a 	cmpltu	r8,r17,r4
 40061d4:	1945c83a 	sub	r2,r3,r5
 40061d8:	1205c83a 	sub	r2,r2,r8
 40061dc:	1200202c 	andhi	r8,r2,128
 40061e0:	403e9a26 	beq	r8,zero,4005c4c <__ram_exceptions_end+0xfbfc5a04>
 40061e4:	3463c83a 	sub	r17,r6,r17
 40061e8:	28c5c83a 	sub	r2,r5,r3
 40061ec:	344d803a 	cmpltu	r6,r6,r17
 40061f0:	1187c83a 	sub	r3,r2,r6
 40061f4:	3825883a 	mov	r18,r7
 40061f8:	003e3606 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 40061fc:	0101ffc4 	movi	r4,2047
 4006200:	493fc71e 	bne	r9,r4,4006120 <__ram_exceptions_end+0xfbfc5ed8>
 4006204:	2807883a 	mov	r3,r5
 4006208:	3023883a 	mov	r17,r6
 400620c:	4821883a 	mov	r16,r9
 4006210:	003e3006 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006214:	10003626 	beq	r2,zero,40062f0 <__subdf3+0x8a0>
 4006218:	2984b03a 	or	r2,r5,r6
 400621c:	10001726 	beq	r2,zero,400627c <__subdf3+0x82c>
 4006220:	1808d0fa 	srli	r4,r3,3
 4006224:	8822d0fa 	srli	r17,r17,3
 4006228:	1806977a 	slli	r3,r3,29
 400622c:	2080022c 	andhi	r2,r4,8
 4006230:	1c62b03a 	or	r17,r3,r17
 4006234:	10000726 	beq	r2,zero,4006254 <__subdf3+0x804>
 4006238:	2812d0fa 	srli	r9,r5,3
 400623c:	4880022c 	andhi	r2,r9,8
 4006240:	1000041e 	bne	r2,zero,4006254 <__subdf3+0x804>
 4006244:	300cd0fa 	srli	r6,r6,3
 4006248:	2804977a 	slli	r2,r5,29
 400624c:	4809883a 	mov	r4,r9
 4006250:	11a2b03a 	or	r17,r2,r6
 4006254:	8806d77a 	srli	r3,r17,29
 4006258:	200890fa 	slli	r4,r4,3
 400625c:	882290fa 	slli	r17,r17,3
 4006260:	3825883a 	mov	r18,r7
 4006264:	1906b03a 	or	r3,r3,r4
 4006268:	0401ffc4 	movi	r16,2047
 400626c:	003e1906 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006270:	000b883a 	mov	r5,zero
 4006274:	0005883a 	mov	r2,zero
 4006278:	003e2e06 	br	4005b34 <__ram_exceptions_end+0xfbfc58ec>
 400627c:	0401ffc4 	movi	r16,2047
 4006280:	003e1406 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006284:	0005883a 	mov	r2,zero
 4006288:	003f7506 	br	4006060 <__ram_exceptions_end+0xfbfc5e18>
 400628c:	0005883a 	mov	r2,zero
 4006290:	0009883a 	mov	r4,zero
 4006294:	003e7806 	br	4005c78 <__ram_exceptions_end+0xfbfc5a30>
 4006298:	123ff804 	addi	r8,r2,-32
 400629c:	01000804 	movi	r4,32
 40062a0:	1a10d83a 	srl	r8,r3,r8
 40062a4:	11002526 	beq	r2,r4,400633c <__subdf3+0x8ec>
 40062a8:	01001004 	movi	r4,64
 40062ac:	2085c83a 	sub	r2,r4,r2
 40062b0:	1884983a 	sll	r2,r3,r2
 40062b4:	1444b03a 	or	r2,r2,r17
 40062b8:	1004c03a 	cmpne	r2,r2,zero
 40062bc:	40a2b03a 	or	r17,r8,r2
 40062c0:	0005883a 	mov	r2,zero
 40062c4:	003f1606 	br	4005f20 <__ram_exceptions_end+0xfbfc5cd8>
 40062c8:	02000434 	movhi	r8,16
 40062cc:	0009883a 	mov	r4,zero
 40062d0:	423fffc4 	addi	r8,r8,-1
 40062d4:	00bfffc4 	movi	r2,-1
 40062d8:	0401ffc4 	movi	r16,2047
 40062dc:	003e6606 	br	4005c78 <__ram_exceptions_end+0xfbfc5a30>
 40062e0:	1c62b03a 	or	r17,r3,r17
 40062e4:	8822c03a 	cmpne	r17,r17,zero
 40062e8:	0005883a 	mov	r2,zero
 40062ec:	003f9906 	br	4006154 <__ram_exceptions_end+0xfbfc5f0c>
 40062f0:	2807883a 	mov	r3,r5
 40062f4:	3023883a 	mov	r17,r6
 40062f8:	0401ffc4 	movi	r16,2047
 40062fc:	003df506 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 4006300:	2807883a 	mov	r3,r5
 4006304:	3023883a 	mov	r17,r6
 4006308:	003df206 	br	4005ad4 <__ram_exceptions_end+0xfbfc588c>
 400630c:	123ff804 	addi	r8,r2,-32
 4006310:	01000804 	movi	r4,32
 4006314:	1a10d83a 	srl	r8,r3,r8
 4006318:	11000a26 	beq	r2,r4,4006344 <__subdf3+0x8f4>
 400631c:	01001004 	movi	r4,64
 4006320:	2085c83a 	sub	r2,r4,r2
 4006324:	1884983a 	sll	r2,r3,r2
 4006328:	1444b03a 	or	r2,r2,r17
 400632c:	1004c03a 	cmpne	r2,r2,zero
 4006330:	40a2b03a 	or	r17,r8,r2
 4006334:	0005883a 	mov	r2,zero
 4006338:	003f8606 	br	4006154 <__ram_exceptions_end+0xfbfc5f0c>
 400633c:	0005883a 	mov	r2,zero
 4006340:	003fdc06 	br	40062b4 <__ram_exceptions_end+0xfbfc606c>
 4006344:	0005883a 	mov	r2,zero
 4006348:	003ff706 	br	4006328 <__ram_exceptions_end+0xfbfc60e0>

0400634c <__fixdfsi>:
 400634c:	280cd53a 	srli	r6,r5,20
 4006350:	00c00434 	movhi	r3,16
 4006354:	18ffffc4 	addi	r3,r3,-1
 4006358:	3181ffcc 	andi	r6,r6,2047
 400635c:	01c0ff84 	movi	r7,1022
 4006360:	28c6703a 	and	r3,r5,r3
 4006364:	280ad7fa 	srli	r5,r5,31
 4006368:	3980120e 	bge	r7,r6,40063b4 <__fixdfsi+0x68>
 400636c:	00810744 	movi	r2,1053
 4006370:	11800c16 	blt	r2,r6,40063a4 <__fixdfsi+0x58>
 4006374:	00810cc4 	movi	r2,1075
 4006378:	1185c83a 	sub	r2,r2,r6
 400637c:	01c007c4 	movi	r7,31
 4006380:	18c00434 	orhi	r3,r3,16
 4006384:	38800d16 	blt	r7,r2,40063bc <__fixdfsi+0x70>
 4006388:	31befb44 	addi	r6,r6,-1043
 400638c:	2084d83a 	srl	r2,r4,r2
 4006390:	1986983a 	sll	r3,r3,r6
 4006394:	1884b03a 	or	r2,r3,r2
 4006398:	28000726 	beq	r5,zero,40063b8 <__fixdfsi+0x6c>
 400639c:	0085c83a 	sub	r2,zero,r2
 40063a0:	f800283a 	ret
 40063a4:	00a00034 	movhi	r2,32768
 40063a8:	10bfffc4 	addi	r2,r2,-1
 40063ac:	2885883a 	add	r2,r5,r2
 40063b0:	f800283a 	ret
 40063b4:	0005883a 	mov	r2,zero
 40063b8:	f800283a 	ret
 40063bc:	008104c4 	movi	r2,1043
 40063c0:	1185c83a 	sub	r2,r2,r6
 40063c4:	1884d83a 	srl	r2,r3,r2
 40063c8:	003ff306 	br	4006398 <__ram_exceptions_end+0xfbfc6150>

040063cc <__floatsidf>:
 40063cc:	defffd04 	addi	sp,sp,-12
 40063d0:	dfc00215 	stw	ra,8(sp)
 40063d4:	dc400115 	stw	r17,4(sp)
 40063d8:	dc000015 	stw	r16,0(sp)
 40063dc:	20002b26 	beq	r4,zero,400648c <__floatsidf+0xc0>
 40063e0:	2023883a 	mov	r17,r4
 40063e4:	2020d7fa 	srli	r16,r4,31
 40063e8:	20002d16 	blt	r4,zero,40064a0 <__floatsidf+0xd4>
 40063ec:	8809883a 	mov	r4,r17
 40063f0:	40065b80 	call	40065b8 <__clzsi2>
 40063f4:	01410784 	movi	r5,1054
 40063f8:	288bc83a 	sub	r5,r5,r2
 40063fc:	01010cc4 	movi	r4,1075
 4006400:	2149c83a 	sub	r4,r4,r5
 4006404:	00c007c4 	movi	r3,31
 4006408:	1900160e 	bge	r3,r4,4006464 <__floatsidf+0x98>
 400640c:	00c104c4 	movi	r3,1043
 4006410:	1947c83a 	sub	r3,r3,r5
 4006414:	88c6983a 	sll	r3,r17,r3
 4006418:	00800434 	movhi	r2,16
 400641c:	10bfffc4 	addi	r2,r2,-1
 4006420:	1886703a 	and	r3,r3,r2
 4006424:	2941ffcc 	andi	r5,r5,2047
 4006428:	800d883a 	mov	r6,r16
 400642c:	0005883a 	mov	r2,zero
 4006430:	280a953a 	slli	r5,r5,20
 4006434:	31803fcc 	andi	r6,r6,255
 4006438:	01000434 	movhi	r4,16
 400643c:	300c97fa 	slli	r6,r6,31
 4006440:	213fffc4 	addi	r4,r4,-1
 4006444:	1906703a 	and	r3,r3,r4
 4006448:	1946b03a 	or	r3,r3,r5
 400644c:	1986b03a 	or	r3,r3,r6
 4006450:	dfc00217 	ldw	ra,8(sp)
 4006454:	dc400117 	ldw	r17,4(sp)
 4006458:	dc000017 	ldw	r16,0(sp)
 400645c:	dec00304 	addi	sp,sp,12
 4006460:	f800283a 	ret
 4006464:	00c002c4 	movi	r3,11
 4006468:	1887c83a 	sub	r3,r3,r2
 400646c:	88c6d83a 	srl	r3,r17,r3
 4006470:	8904983a 	sll	r2,r17,r4
 4006474:	01000434 	movhi	r4,16
 4006478:	213fffc4 	addi	r4,r4,-1
 400647c:	2941ffcc 	andi	r5,r5,2047
 4006480:	1906703a 	and	r3,r3,r4
 4006484:	800d883a 	mov	r6,r16
 4006488:	003fe906 	br	4006430 <__ram_exceptions_end+0xfbfc61e8>
 400648c:	000d883a 	mov	r6,zero
 4006490:	000b883a 	mov	r5,zero
 4006494:	0007883a 	mov	r3,zero
 4006498:	0005883a 	mov	r2,zero
 400649c:	003fe406 	br	4006430 <__ram_exceptions_end+0xfbfc61e8>
 40064a0:	0123c83a 	sub	r17,zero,r4
 40064a4:	003fd106 	br	40063ec <__ram_exceptions_end+0xfbfc61a4>

040064a8 <__extendsfdf2>:
 40064a8:	200ad5fa 	srli	r5,r4,23
 40064ac:	defffd04 	addi	sp,sp,-12
 40064b0:	dc400115 	stw	r17,4(sp)
 40064b4:	29403fcc 	andi	r5,r5,255
 40064b8:	29800044 	addi	r6,r5,1
 40064bc:	04402034 	movhi	r17,128
 40064c0:	dc000015 	stw	r16,0(sp)
 40064c4:	8c7fffc4 	addi	r17,r17,-1
 40064c8:	dfc00215 	stw	ra,8(sp)
 40064cc:	31803fcc 	andi	r6,r6,255
 40064d0:	00800044 	movi	r2,1
 40064d4:	8922703a 	and	r17,r17,r4
 40064d8:	2020d7fa 	srli	r16,r4,31
 40064dc:	1180110e 	bge	r2,r6,4006524 <__extendsfdf2+0x7c>
 40064e0:	880cd0fa 	srli	r6,r17,3
 40064e4:	8822977a 	slli	r17,r17,29
 40064e8:	2940e004 	addi	r5,r5,896
 40064ec:	2941ffcc 	andi	r5,r5,2047
 40064f0:	2804953a 	slli	r2,r5,20
 40064f4:	01400434 	movhi	r5,16
 40064f8:	800697fa 	slli	r3,r16,31
 40064fc:	297fffc4 	addi	r5,r5,-1
 4006500:	314a703a 	and	r5,r6,r5
 4006504:	288ab03a 	or	r5,r5,r2
 4006508:	28c6b03a 	or	r3,r5,r3
 400650c:	8805883a 	mov	r2,r17
 4006510:	dfc00217 	ldw	ra,8(sp)
 4006514:	dc400117 	ldw	r17,4(sp)
 4006518:	dc000017 	ldw	r16,0(sp)
 400651c:	dec00304 	addi	sp,sp,12
 4006520:	f800283a 	ret
 4006524:	2800111e 	bne	r5,zero,400656c <__extendsfdf2+0xc4>
 4006528:	88001c26 	beq	r17,zero,400659c <__extendsfdf2+0xf4>
 400652c:	8809883a 	mov	r4,r17
 4006530:	40065b80 	call	40065b8 <__clzsi2>
 4006534:	00c00284 	movi	r3,10
 4006538:	18801b16 	blt	r3,r2,40065a8 <__extendsfdf2+0x100>
 400653c:	018002c4 	movi	r6,11
 4006540:	308dc83a 	sub	r6,r6,r2
 4006544:	11000544 	addi	r4,r2,21
 4006548:	8986d83a 	srl	r3,r17,r6
 400654c:	8922983a 	sll	r17,r17,r4
 4006550:	0180e244 	movi	r6,905
 4006554:	01400434 	movhi	r5,16
 4006558:	3085c83a 	sub	r2,r6,r2
 400655c:	297fffc4 	addi	r5,r5,-1
 4006560:	194c703a 	and	r6,r3,r5
 4006564:	1141ffcc 	andi	r5,r2,2047
 4006568:	003fe006 	br	40064ec <__ram_exceptions_end+0xfbfc62a4>
 400656c:	88000826 	beq	r17,zero,4006590 <__extendsfdf2+0xe8>
 4006570:	880cd0fa 	srli	r6,r17,3
 4006574:	00800434 	movhi	r2,16
 4006578:	10bfffc4 	addi	r2,r2,-1
 400657c:	31800234 	orhi	r6,r6,8
 4006580:	8822977a 	slli	r17,r17,29
 4006584:	308c703a 	and	r6,r6,r2
 4006588:	0141ffc4 	movi	r5,2047
 400658c:	003fd706 	br	40064ec <__ram_exceptions_end+0xfbfc62a4>
 4006590:	0141ffc4 	movi	r5,2047
 4006594:	000d883a 	mov	r6,zero
 4006598:	003fd406 	br	40064ec <__ram_exceptions_end+0xfbfc62a4>
 400659c:	000b883a 	mov	r5,zero
 40065a0:	000d883a 	mov	r6,zero
 40065a4:	003fd106 	br	40064ec <__ram_exceptions_end+0xfbfc62a4>
 40065a8:	11bffd44 	addi	r6,r2,-11
 40065ac:	8986983a 	sll	r3,r17,r6
 40065b0:	0023883a 	mov	r17,zero
 40065b4:	003fe606 	br	4006550 <__ram_exceptions_end+0xfbfc6308>

040065b8 <__clzsi2>:
 40065b8:	00bfffd4 	movui	r2,65535
 40065bc:	11000536 	bltu	r2,r4,40065d4 <__clzsi2+0x1c>
 40065c0:	00803fc4 	movi	r2,255
 40065c4:	11000f36 	bltu	r2,r4,4006604 <__clzsi2+0x4c>
 40065c8:	00800804 	movi	r2,32
 40065cc:	0007883a 	mov	r3,zero
 40065d0:	00000506 	br	40065e8 <__clzsi2+0x30>
 40065d4:	00804034 	movhi	r2,256
 40065d8:	10bfffc4 	addi	r2,r2,-1
 40065dc:	11000c2e 	bgeu	r2,r4,4006610 <__clzsi2+0x58>
 40065e0:	00800204 	movi	r2,8
 40065e4:	00c00604 	movi	r3,24
 40065e8:	20c8d83a 	srl	r4,r4,r3
 40065ec:	00c10074 	movhi	r3,1025
 40065f0:	18e79604 	addi	r3,r3,-25000
 40065f4:	1909883a 	add	r4,r3,r4
 40065f8:	20c00003 	ldbu	r3,0(r4)
 40065fc:	10c5c83a 	sub	r2,r2,r3
 4006600:	f800283a 	ret
 4006604:	00800604 	movi	r2,24
 4006608:	00c00204 	movi	r3,8
 400660c:	003ff606 	br	40065e8 <__ram_exceptions_end+0xfbfc63a0>
 4006610:	00800404 	movi	r2,16
 4006614:	1007883a 	mov	r3,r2
 4006618:	003ff306 	br	40065e8 <__ram_exceptions_end+0xfbfc63a0>

0400661c <_printf_r>:
 400661c:	defffd04 	addi	sp,sp,-12
 4006620:	dfc00015 	stw	ra,0(sp)
 4006624:	d9800115 	stw	r6,4(sp)
 4006628:	d9c00215 	stw	r7,8(sp)
 400662c:	20c00217 	ldw	r3,8(r4)
 4006630:	01810034 	movhi	r6,1024
 4006634:	319b1404 	addi	r6,r6,27728
 4006638:	19800115 	stw	r6,4(r3)
 400663c:	280d883a 	mov	r6,r5
 4006640:	21400217 	ldw	r5,8(r4)
 4006644:	d9c00104 	addi	r7,sp,4
 4006648:	40067100 	call	4006710 <___vfprintf_internal_r>
 400664c:	dfc00017 	ldw	ra,0(sp)
 4006650:	dec00304 	addi	sp,sp,12
 4006654:	f800283a 	ret

04006658 <printf>:
 4006658:	defffc04 	addi	sp,sp,-16
 400665c:	dfc00015 	stw	ra,0(sp)
 4006660:	d9400115 	stw	r5,4(sp)
 4006664:	d9800215 	stw	r6,8(sp)
 4006668:	d9c00315 	stw	r7,12(sp)
 400666c:	00810074 	movhi	r2,1025
 4006670:	10a8dc04 	addi	r2,r2,-23696
 4006674:	10800017 	ldw	r2,0(r2)
 4006678:	01410034 	movhi	r5,1024
 400667c:	295b1404 	addi	r5,r5,27728
 4006680:	10c00217 	ldw	r3,8(r2)
 4006684:	d9800104 	addi	r6,sp,4
 4006688:	19400115 	stw	r5,4(r3)
 400668c:	200b883a 	mov	r5,r4
 4006690:	11000217 	ldw	r4,8(r2)
 4006694:	4006c340 	call	4006c34 <__vfprintf_internal>
 4006698:	dfc00017 	ldw	ra,0(sp)
 400669c:	dec00404 	addi	sp,sp,16
 40066a0:	f800283a 	ret

040066a4 <print_repeat>:
 40066a4:	defffb04 	addi	sp,sp,-20
 40066a8:	dc800315 	stw	r18,12(sp)
 40066ac:	dc400215 	stw	r17,8(sp)
 40066b0:	dc000115 	stw	r16,4(sp)
 40066b4:	dfc00415 	stw	ra,16(sp)
 40066b8:	2025883a 	mov	r18,r4
 40066bc:	2823883a 	mov	r17,r5
 40066c0:	d9800005 	stb	r6,0(sp)
 40066c4:	3821883a 	mov	r16,r7
 40066c8:	04000a0e 	bge	zero,r16,40066f4 <print_repeat+0x50>
 40066cc:	88800117 	ldw	r2,4(r17)
 40066d0:	01c00044 	movi	r7,1
 40066d4:	d80d883a 	mov	r6,sp
 40066d8:	880b883a 	mov	r5,r17
 40066dc:	9009883a 	mov	r4,r18
 40066e0:	103ee83a 	callr	r2
 40066e4:	843fffc4 	addi	r16,r16,-1
 40066e8:	103ff726 	beq	r2,zero,40066c8 <__ram_exceptions_end+0xfbfc6480>
 40066ec:	00bfffc4 	movi	r2,-1
 40066f0:	00000106 	br	40066f8 <print_repeat+0x54>
 40066f4:	0005883a 	mov	r2,zero
 40066f8:	dfc00417 	ldw	ra,16(sp)
 40066fc:	dc800317 	ldw	r18,12(sp)
 4006700:	dc400217 	ldw	r17,8(sp)
 4006704:	dc000117 	ldw	r16,4(sp)
 4006708:	dec00504 	addi	sp,sp,20
 400670c:	f800283a 	ret

04006710 <___vfprintf_internal_r>:
 4006710:	deffe504 	addi	sp,sp,-108
 4006714:	d8c00804 	addi	r3,sp,32
 4006718:	df001915 	stw	fp,100(sp)
 400671c:	ddc01815 	stw	r23,96(sp)
 4006720:	dd801715 	stw	r22,92(sp)
 4006724:	dd401615 	stw	r21,88(sp)
 4006728:	dd001515 	stw	r20,84(sp)
 400672c:	dcc01415 	stw	r19,80(sp)
 4006730:	dc801315 	stw	r18,76(sp)
 4006734:	dc401215 	stw	r17,72(sp)
 4006738:	dc001115 	stw	r16,68(sp)
 400673c:	dfc01a15 	stw	ra,104(sp)
 4006740:	2027883a 	mov	r19,r4
 4006744:	2839883a 	mov	fp,r5
 4006748:	382d883a 	mov	r22,r7
 400674c:	d9800f15 	stw	r6,60(sp)
 4006750:	0021883a 	mov	r16,zero
 4006754:	d8000e15 	stw	zero,56(sp)
 4006758:	002f883a 	mov	r23,zero
 400675c:	002b883a 	mov	r21,zero
 4006760:	0025883a 	mov	r18,zero
 4006764:	0023883a 	mov	r17,zero
 4006768:	d8000c15 	stw	zero,48(sp)
 400676c:	d8000b15 	stw	zero,44(sp)
 4006770:	0029883a 	mov	r20,zero
 4006774:	d8c00915 	stw	r3,36(sp)
 4006778:	d8c00f17 	ldw	r3,60(sp)
 400677c:	19000003 	ldbu	r4,0(r3)
 4006780:	20803fcc 	andi	r2,r4,255
 4006784:	1080201c 	xori	r2,r2,128
 4006788:	10bfe004 	addi	r2,r2,-128
 400678c:	10011c26 	beq	r2,zero,4006c00 <___vfprintf_internal_r+0x4f0>
 4006790:	00c00044 	movi	r3,1
 4006794:	a0c01426 	beq	r20,r3,40067e8 <___vfprintf_internal_r+0xd8>
 4006798:	1d000216 	blt	r3,r20,40067a4 <___vfprintf_internal_r+0x94>
 400679c:	a0000626 	beq	r20,zero,40067b8 <___vfprintf_internal_r+0xa8>
 40067a0:	00011306 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 40067a4:	01400084 	movi	r5,2
 40067a8:	a1401d26 	beq	r20,r5,4006820 <___vfprintf_internal_r+0x110>
 40067ac:	014000c4 	movi	r5,3
 40067b0:	a1402926 	beq	r20,r5,4006858 <___vfprintf_internal_r+0x148>
 40067b4:	00010e06 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 40067b8:	01400944 	movi	r5,37
 40067bc:	1140fb26 	beq	r2,r5,4006bac <___vfprintf_internal_r+0x49c>
 40067c0:	e0800117 	ldw	r2,4(fp)
 40067c4:	d9000005 	stb	r4,0(sp)
 40067c8:	01c00044 	movi	r7,1
 40067cc:	d80d883a 	mov	r6,sp
 40067d0:	e00b883a 	mov	r5,fp
 40067d4:	9809883a 	mov	r4,r19
 40067d8:	103ee83a 	callr	r2
 40067dc:	1000d61e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 40067e0:	84000044 	addi	r16,r16,1
 40067e4:	00010206 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 40067e8:	01400c04 	movi	r5,48
 40067ec:	1140f826 	beq	r2,r5,4006bd0 <___vfprintf_internal_r+0x4c0>
 40067f0:	01400944 	movi	r5,37
 40067f4:	11400a1e 	bne	r2,r5,4006820 <___vfprintf_internal_r+0x110>
 40067f8:	d8800005 	stb	r2,0(sp)
 40067fc:	e0800117 	ldw	r2,4(fp)
 4006800:	a00f883a 	mov	r7,r20
 4006804:	d80d883a 	mov	r6,sp
 4006808:	e00b883a 	mov	r5,fp
 400680c:	9809883a 	mov	r4,r19
 4006810:	103ee83a 	callr	r2
 4006814:	1000c81e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006818:	84000044 	addi	r16,r16,1
 400681c:	0000f306 	br	4006bec <___vfprintf_internal_r+0x4dc>
 4006820:	217ff404 	addi	r5,r4,-48
 4006824:	29403fcc 	andi	r5,r5,255
 4006828:	00c00244 	movi	r3,9
 400682c:	19400736 	bltu	r3,r5,400684c <___vfprintf_internal_r+0x13c>
 4006830:	00bfffc4 	movi	r2,-1
 4006834:	88800226 	beq	r17,r2,4006840 <___vfprintf_internal_r+0x130>
 4006838:	8c4002a4 	muli	r17,r17,10
 400683c:	00000106 	br	4006844 <___vfprintf_internal_r+0x134>
 4006840:	0023883a 	mov	r17,zero
 4006844:	2c63883a 	add	r17,r5,r17
 4006848:	0000e206 	br	4006bd4 <___vfprintf_internal_r+0x4c4>
 400684c:	01400b84 	movi	r5,46
 4006850:	1140e426 	beq	r2,r5,4006be4 <___vfprintf_internal_r+0x4d4>
 4006854:	05000084 	movi	r20,2
 4006858:	213ff404 	addi	r4,r4,-48
 400685c:	21003fcc 	andi	r4,r4,255
 4006860:	00c00244 	movi	r3,9
 4006864:	19000736 	bltu	r3,r4,4006884 <___vfprintf_internal_r+0x174>
 4006868:	00bfffc4 	movi	r2,-1
 400686c:	90800226 	beq	r18,r2,4006878 <___vfprintf_internal_r+0x168>
 4006870:	948002a4 	muli	r18,r18,10
 4006874:	00000106 	br	400687c <___vfprintf_internal_r+0x16c>
 4006878:	0025883a 	mov	r18,zero
 400687c:	24a5883a 	add	r18,r4,r18
 4006880:	0000db06 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 4006884:	00c01b04 	movi	r3,108
 4006888:	10c0d426 	beq	r2,r3,4006bdc <___vfprintf_internal_r+0x4cc>
 400688c:	013fffc4 	movi	r4,-1
 4006890:	91000226 	beq	r18,r4,400689c <___vfprintf_internal_r+0x18c>
 4006894:	d8000b15 	stw	zero,44(sp)
 4006898:	00000106 	br	40068a0 <___vfprintf_internal_r+0x190>
 400689c:	04800044 	movi	r18,1
 40068a0:	01001a44 	movi	r4,105
 40068a4:	11001626 	beq	r2,r4,4006900 <___vfprintf_internal_r+0x1f0>
 40068a8:	20800916 	blt	r4,r2,40068d0 <___vfprintf_internal_r+0x1c0>
 40068ac:	010018c4 	movi	r4,99
 40068b0:	11008a26 	beq	r2,r4,4006adc <___vfprintf_internal_r+0x3cc>
 40068b4:	01001904 	movi	r4,100
 40068b8:	11001126 	beq	r2,r4,4006900 <___vfprintf_internal_r+0x1f0>
 40068bc:	01001604 	movi	r4,88
 40068c0:	1100ca1e 	bne	r2,r4,4006bec <___vfprintf_internal_r+0x4dc>
 40068c4:	00c00044 	movi	r3,1
 40068c8:	d8c00e15 	stw	r3,56(sp)
 40068cc:	00001406 	br	4006920 <___vfprintf_internal_r+0x210>
 40068d0:	01001cc4 	movi	r4,115
 40068d4:	11009a26 	beq	r2,r4,4006b40 <___vfprintf_internal_r+0x430>
 40068d8:	20800416 	blt	r4,r2,40068ec <___vfprintf_internal_r+0x1dc>
 40068dc:	01001bc4 	movi	r4,111
 40068e0:	1100c21e 	bne	r2,r4,4006bec <___vfprintf_internal_r+0x4dc>
 40068e4:	05400204 	movi	r21,8
 40068e8:	00000e06 	br	4006924 <___vfprintf_internal_r+0x214>
 40068ec:	01001d44 	movi	r4,117
 40068f0:	11000c26 	beq	r2,r4,4006924 <___vfprintf_internal_r+0x214>
 40068f4:	01001e04 	movi	r4,120
 40068f8:	11000926 	beq	r2,r4,4006920 <___vfprintf_internal_r+0x210>
 40068fc:	0000bb06 	br	4006bec <___vfprintf_internal_r+0x4dc>
 4006900:	b5000104 	addi	r20,r22,4
 4006904:	b8000726 	beq	r23,zero,4006924 <___vfprintf_internal_r+0x214>
 4006908:	dd000d15 	stw	r20,52(sp)
 400690c:	b5800017 	ldw	r22,0(r22)
 4006910:	b000080e 	bge	r22,zero,4006934 <___vfprintf_internal_r+0x224>
 4006914:	05adc83a 	sub	r22,zero,r22
 4006918:	02800044 	movi	r10,1
 400691c:	00000606 	br	4006938 <___vfprintf_internal_r+0x228>
 4006920:	05400404 	movi	r21,16
 4006924:	b0c00104 	addi	r3,r22,4
 4006928:	d8c00d15 	stw	r3,52(sp)
 400692c:	b5800017 	ldw	r22,0(r22)
 4006930:	002f883a 	mov	r23,zero
 4006934:	0015883a 	mov	r10,zero
 4006938:	d829883a 	mov	r20,sp
 400693c:	b0001426 	beq	r22,zero,4006990 <___vfprintf_internal_r+0x280>
 4006940:	b009883a 	mov	r4,r22
 4006944:	a80b883a 	mov	r5,r21
 4006948:	da801015 	stw	r10,64(sp)
 400694c:	40032f40 	call	40032f4 <__udivsi3>
 4006950:	1549383a 	mul	r4,r2,r21
 4006954:	00c00244 	movi	r3,9
 4006958:	da801017 	ldw	r10,64(sp)
 400695c:	b12dc83a 	sub	r22,r22,r4
 4006960:	1d800216 	blt	r3,r22,400696c <___vfprintf_internal_r+0x25c>
 4006964:	b5800c04 	addi	r22,r22,48
 4006968:	00000506 	br	4006980 <___vfprintf_internal_r+0x270>
 400696c:	d8c00e17 	ldw	r3,56(sp)
 4006970:	18000226 	beq	r3,zero,400697c <___vfprintf_internal_r+0x26c>
 4006974:	b5800dc4 	addi	r22,r22,55
 4006978:	00000106 	br	4006980 <___vfprintf_internal_r+0x270>
 400697c:	b58015c4 	addi	r22,r22,87
 4006980:	a5800005 	stb	r22,0(r20)
 4006984:	a5000044 	addi	r20,r20,1
 4006988:	102d883a 	mov	r22,r2
 400698c:	003feb06 	br	400693c <__ram_exceptions_end+0xfbfc66f4>
 4006990:	a6c7c83a 	sub	r3,r20,sp
 4006994:	d8c00a15 	stw	r3,40(sp)
 4006998:	90c5c83a 	sub	r2,r18,r3
 400699c:	00800a0e 	bge	zero,r2,40069c8 <___vfprintf_internal_r+0x2b8>
 40069a0:	a085883a 	add	r2,r20,r2
 40069a4:	01400c04 	movi	r5,48
 40069a8:	d8c00917 	ldw	r3,36(sp)
 40069ac:	a009883a 	mov	r4,r20
 40069b0:	a0c0032e 	bgeu	r20,r3,40069c0 <___vfprintf_internal_r+0x2b0>
 40069b4:	a5000044 	addi	r20,r20,1
 40069b8:	21400005 	stb	r5,0(r4)
 40069bc:	a0bffa1e 	bne	r20,r2,40069a8 <__ram_exceptions_end+0xfbfc6760>
 40069c0:	a6c7c83a 	sub	r3,r20,sp
 40069c4:	d8c00a15 	stw	r3,40(sp)
 40069c8:	d8c00a17 	ldw	r3,40(sp)
 40069cc:	50d3883a 	add	r9,r10,r3
 40069d0:	d8c00b17 	ldw	r3,44(sp)
 40069d4:	8a6dc83a 	sub	r22,r17,r9
 40069d8:	18001726 	beq	r3,zero,4006a38 <___vfprintf_internal_r+0x328>
 40069dc:	50000a26 	beq	r10,zero,4006a08 <___vfprintf_internal_r+0x2f8>
 40069e0:	00800b44 	movi	r2,45
 40069e4:	d8800805 	stb	r2,32(sp)
 40069e8:	e0800117 	ldw	r2,4(fp)
 40069ec:	01c00044 	movi	r7,1
 40069f0:	d9800804 	addi	r6,sp,32
 40069f4:	e00b883a 	mov	r5,fp
 40069f8:	9809883a 	mov	r4,r19
 40069fc:	103ee83a 	callr	r2
 4006a00:	10004d1e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006a04:	84000044 	addi	r16,r16,1
 4006a08:	0580070e 	bge	zero,r22,4006a28 <___vfprintf_internal_r+0x318>
 4006a0c:	b00f883a 	mov	r7,r22
 4006a10:	01800c04 	movi	r6,48
 4006a14:	e00b883a 	mov	r5,fp
 4006a18:	9809883a 	mov	r4,r19
 4006a1c:	40066a40 	call	40066a4 <print_repeat>
 4006a20:	1000451e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006a24:	85a1883a 	add	r16,r16,r22
 4006a28:	d8c00a17 	ldw	r3,40(sp)
 4006a2c:	a013883a 	mov	r9,r20
 4006a30:	1d2dc83a 	sub	r22,r3,r20
 4006a34:	00002206 	br	4006ac0 <___vfprintf_internal_r+0x3b0>
 4006a38:	0580090e 	bge	zero,r22,4006a60 <___vfprintf_internal_r+0x350>
 4006a3c:	b00f883a 	mov	r7,r22
 4006a40:	01800804 	movi	r6,32
 4006a44:	e00b883a 	mov	r5,fp
 4006a48:	9809883a 	mov	r4,r19
 4006a4c:	da801015 	stw	r10,64(sp)
 4006a50:	40066a40 	call	40066a4 <print_repeat>
 4006a54:	da801017 	ldw	r10,64(sp)
 4006a58:	1000371e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006a5c:	85a1883a 	add	r16,r16,r22
 4006a60:	503ff126 	beq	r10,zero,4006a28 <__ram_exceptions_end+0xfbfc67e0>
 4006a64:	00800b44 	movi	r2,45
 4006a68:	d8800805 	stb	r2,32(sp)
 4006a6c:	e0800117 	ldw	r2,4(fp)
 4006a70:	01c00044 	movi	r7,1
 4006a74:	d9800804 	addi	r6,sp,32
 4006a78:	e00b883a 	mov	r5,fp
 4006a7c:	9809883a 	mov	r4,r19
 4006a80:	103ee83a 	callr	r2
 4006a84:	10002c1e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006a88:	84000044 	addi	r16,r16,1
 4006a8c:	003fe606 	br	4006a28 <__ram_exceptions_end+0xfbfc67e0>
 4006a90:	4a7fffc4 	addi	r9,r9,-1
 4006a94:	48800003 	ldbu	r2,0(r9)
 4006a98:	01c00044 	movi	r7,1
 4006a9c:	d9800804 	addi	r6,sp,32
 4006aa0:	d8800805 	stb	r2,32(sp)
 4006aa4:	e0800117 	ldw	r2,4(fp)
 4006aa8:	e00b883a 	mov	r5,fp
 4006aac:	da401015 	stw	r9,64(sp)
 4006ab0:	9809883a 	mov	r4,r19
 4006ab4:	103ee83a 	callr	r2
 4006ab8:	da401017 	ldw	r9,64(sp)
 4006abc:	10001e1e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006ac0:	8245c83a 	sub	r2,r16,r9
 4006ac4:	4d89883a 	add	r4,r9,r22
 4006ac8:	a085883a 	add	r2,r20,r2
 4006acc:	013ff016 	blt	zero,r4,4006a90 <__ram_exceptions_end+0xfbfc6848>
 4006ad0:	1021883a 	mov	r16,r2
 4006ad4:	dd800d17 	ldw	r22,52(sp)
 4006ad8:	00004406 	br	4006bec <___vfprintf_internal_r+0x4dc>
 4006adc:	00800044 	movi	r2,1
 4006ae0:	1440080e 	bge	r2,r17,4006b04 <___vfprintf_internal_r+0x3f4>
 4006ae4:	8d3fffc4 	addi	r20,r17,-1
 4006ae8:	a00f883a 	mov	r7,r20
 4006aec:	01800804 	movi	r6,32
 4006af0:	e00b883a 	mov	r5,fp
 4006af4:	9809883a 	mov	r4,r19
 4006af8:	40066a40 	call	40066a4 <print_repeat>
 4006afc:	10000e1e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006b00:	8521883a 	add	r16,r16,r20
 4006b04:	b0800017 	ldw	r2,0(r22)
 4006b08:	01c00044 	movi	r7,1
 4006b0c:	d80d883a 	mov	r6,sp
 4006b10:	d8800005 	stb	r2,0(sp)
 4006b14:	e0800117 	ldw	r2,4(fp)
 4006b18:	e00b883a 	mov	r5,fp
 4006b1c:	9809883a 	mov	r4,r19
 4006b20:	b5000104 	addi	r20,r22,4
 4006b24:	103ee83a 	callr	r2
 4006b28:	1000031e 	bne	r2,zero,4006b38 <___vfprintf_internal_r+0x428>
 4006b2c:	84000044 	addi	r16,r16,1
 4006b30:	a02d883a 	mov	r22,r20
 4006b34:	00002d06 	br	4006bec <___vfprintf_internal_r+0x4dc>
 4006b38:	00bfffc4 	movi	r2,-1
 4006b3c:	00003106 	br	4006c04 <___vfprintf_internal_r+0x4f4>
 4006b40:	b5000017 	ldw	r20,0(r22)
 4006b44:	b0c00104 	addi	r3,r22,4
 4006b48:	d8c00a15 	stw	r3,40(sp)
 4006b4c:	a009883a 	mov	r4,r20
 4006b50:	4006d080 	call	4006d08 <strlen>
 4006b54:	8893c83a 	sub	r9,r17,r2
 4006b58:	102d883a 	mov	r22,r2
 4006b5c:	0240090e 	bge	zero,r9,4006b84 <___vfprintf_internal_r+0x474>
 4006b60:	480f883a 	mov	r7,r9
 4006b64:	01800804 	movi	r6,32
 4006b68:	e00b883a 	mov	r5,fp
 4006b6c:	9809883a 	mov	r4,r19
 4006b70:	da401015 	stw	r9,64(sp)
 4006b74:	40066a40 	call	40066a4 <print_repeat>
 4006b78:	da401017 	ldw	r9,64(sp)
 4006b7c:	103fee1e 	bne	r2,zero,4006b38 <__ram_exceptions_end+0xfbfc68f0>
 4006b80:	8261883a 	add	r16,r16,r9
 4006b84:	e0800117 	ldw	r2,4(fp)
 4006b88:	b00f883a 	mov	r7,r22
 4006b8c:	a00d883a 	mov	r6,r20
 4006b90:	e00b883a 	mov	r5,fp
 4006b94:	9809883a 	mov	r4,r19
 4006b98:	103ee83a 	callr	r2
 4006b9c:	103fe61e 	bne	r2,zero,4006b38 <__ram_exceptions_end+0xfbfc68f0>
 4006ba0:	85a1883a 	add	r16,r16,r22
 4006ba4:	dd800a17 	ldw	r22,40(sp)
 4006ba8:	00001006 	br	4006bec <___vfprintf_internal_r+0x4dc>
 4006bac:	05c00044 	movi	r23,1
 4006bb0:	04bfffc4 	movi	r18,-1
 4006bb4:	d8000e15 	stw	zero,56(sp)
 4006bb8:	05400284 	movi	r21,10
 4006bbc:	9023883a 	mov	r17,r18
 4006bc0:	d8000c15 	stw	zero,48(sp)
 4006bc4:	d8000b15 	stw	zero,44(sp)
 4006bc8:	b829883a 	mov	r20,r23
 4006bcc:	00000806 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 4006bd0:	dd000b15 	stw	r20,44(sp)
 4006bd4:	05000084 	movi	r20,2
 4006bd8:	00000506 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 4006bdc:	00c00044 	movi	r3,1
 4006be0:	d8c00c15 	stw	r3,48(sp)
 4006be4:	050000c4 	movi	r20,3
 4006be8:	00000106 	br	4006bf0 <___vfprintf_internal_r+0x4e0>
 4006bec:	0029883a 	mov	r20,zero
 4006bf0:	d8c00f17 	ldw	r3,60(sp)
 4006bf4:	18c00044 	addi	r3,r3,1
 4006bf8:	d8c00f15 	stw	r3,60(sp)
 4006bfc:	003ede06 	br	4006778 <__ram_exceptions_end+0xfbfc6530>
 4006c00:	8005883a 	mov	r2,r16
 4006c04:	dfc01a17 	ldw	ra,104(sp)
 4006c08:	df001917 	ldw	fp,100(sp)
 4006c0c:	ddc01817 	ldw	r23,96(sp)
 4006c10:	dd801717 	ldw	r22,92(sp)
 4006c14:	dd401617 	ldw	r21,88(sp)
 4006c18:	dd001517 	ldw	r20,84(sp)
 4006c1c:	dcc01417 	ldw	r19,80(sp)
 4006c20:	dc801317 	ldw	r18,76(sp)
 4006c24:	dc401217 	ldw	r17,72(sp)
 4006c28:	dc001117 	ldw	r16,68(sp)
 4006c2c:	dec01b04 	addi	sp,sp,108
 4006c30:	f800283a 	ret

04006c34 <__vfprintf_internal>:
 4006c34:	00810074 	movhi	r2,1025
 4006c38:	10a8dc04 	addi	r2,r2,-23696
 4006c3c:	300f883a 	mov	r7,r6
 4006c40:	280d883a 	mov	r6,r5
 4006c44:	200b883a 	mov	r5,r4
 4006c48:	11000017 	ldw	r4,0(r2)
 4006c4c:	40067101 	jmpi	4006710 <___vfprintf_internal_r>

04006c50 <__sfvwrite_small_dev>:
 4006c50:	2880000b 	ldhu	r2,0(r5)
 4006c54:	1080020c 	andi	r2,r2,8
 4006c58:	10002126 	beq	r2,zero,4006ce0 <__sfvwrite_small_dev+0x90>
 4006c5c:	2880008f 	ldh	r2,2(r5)
 4006c60:	defffa04 	addi	sp,sp,-24
 4006c64:	dc000015 	stw	r16,0(sp)
 4006c68:	dfc00515 	stw	ra,20(sp)
 4006c6c:	dd000415 	stw	r20,16(sp)
 4006c70:	dcc00315 	stw	r19,12(sp)
 4006c74:	dc800215 	stw	r18,8(sp)
 4006c78:	dc400115 	stw	r17,4(sp)
 4006c7c:	2821883a 	mov	r16,r5
 4006c80:	10001216 	blt	r2,zero,4006ccc <__sfvwrite_small_dev+0x7c>
 4006c84:	2027883a 	mov	r19,r4
 4006c88:	3025883a 	mov	r18,r6
 4006c8c:	3823883a 	mov	r17,r7
 4006c90:	05010004 	movi	r20,1024
 4006c94:	04400b0e 	bge	zero,r17,4006cc4 <__sfvwrite_small_dev+0x74>
 4006c98:	880f883a 	mov	r7,r17
 4006c9c:	a440010e 	bge	r20,r17,4006ca4 <__sfvwrite_small_dev+0x54>
 4006ca0:	01c10004 	movi	r7,1024
 4006ca4:	8140008f 	ldh	r5,2(r16)
 4006ca8:	900d883a 	mov	r6,r18
 4006cac:	9809883a 	mov	r4,r19
 4006cb0:	4006d240 	call	4006d24 <_write_r>
 4006cb4:	0080050e 	bge	zero,r2,4006ccc <__sfvwrite_small_dev+0x7c>
 4006cb8:	88a3c83a 	sub	r17,r17,r2
 4006cbc:	90a5883a 	add	r18,r18,r2
 4006cc0:	003ff406 	br	4006c94 <__ram_exceptions_end+0xfbfc6a4c>
 4006cc4:	0005883a 	mov	r2,zero
 4006cc8:	00000706 	br	4006ce8 <__sfvwrite_small_dev+0x98>
 4006ccc:	8080000b 	ldhu	r2,0(r16)
 4006cd0:	10801014 	ori	r2,r2,64
 4006cd4:	8080000d 	sth	r2,0(r16)
 4006cd8:	00bfffc4 	movi	r2,-1
 4006cdc:	00000206 	br	4006ce8 <__sfvwrite_small_dev+0x98>
 4006ce0:	00bfffc4 	movi	r2,-1
 4006ce4:	f800283a 	ret
 4006ce8:	dfc00517 	ldw	ra,20(sp)
 4006cec:	dd000417 	ldw	r20,16(sp)
 4006cf0:	dcc00317 	ldw	r19,12(sp)
 4006cf4:	dc800217 	ldw	r18,8(sp)
 4006cf8:	dc400117 	ldw	r17,4(sp)
 4006cfc:	dc000017 	ldw	r16,0(sp)
 4006d00:	dec00604 	addi	sp,sp,24
 4006d04:	f800283a 	ret

04006d08 <strlen>:
 4006d08:	2005883a 	mov	r2,r4
 4006d0c:	10c00007 	ldb	r3,0(r2)
 4006d10:	18000226 	beq	r3,zero,4006d1c <strlen+0x14>
 4006d14:	10800044 	addi	r2,r2,1
 4006d18:	003ffc06 	br	4006d0c <__ram_exceptions_end+0xfbfc6ac4>
 4006d1c:	1105c83a 	sub	r2,r2,r4
 4006d20:	f800283a 	ret

04006d24 <_write_r>:
 4006d24:	defffd04 	addi	sp,sp,-12
 4006d28:	dc000015 	stw	r16,0(sp)
 4006d2c:	04010074 	movhi	r16,1025
 4006d30:	dc400115 	stw	r17,4(sp)
 4006d34:	8429d704 	addi	r16,r16,-22692
 4006d38:	2023883a 	mov	r17,r4
 4006d3c:	2809883a 	mov	r4,r5
 4006d40:	300b883a 	mov	r5,r6
 4006d44:	380d883a 	mov	r6,r7
 4006d48:	dfc00215 	stw	ra,8(sp)
 4006d4c:	80000015 	stw	zero,0(r16)
 4006d50:	40070d00 	call	40070d0 <write>
 4006d54:	00ffffc4 	movi	r3,-1
 4006d58:	10c0031e 	bne	r2,r3,4006d68 <_write_r+0x44>
 4006d5c:	80c00017 	ldw	r3,0(r16)
 4006d60:	18000126 	beq	r3,zero,4006d68 <_write_r+0x44>
 4006d64:	88c00015 	stw	r3,0(r17)
 4006d68:	dfc00217 	ldw	ra,8(sp)
 4006d6c:	dc400117 	ldw	r17,4(sp)
 4006d70:	dc000017 	ldw	r16,0(sp)
 4006d74:	dec00304 	addi	sp,sp,12
 4006d78:	f800283a 	ret

04006d7c <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4006d7c:	defff004 	addi	sp,sp,-64
 4006d80:	df000f15 	stw	fp,60(sp)
 4006d84:	df000f04 	addi	fp,sp,60
 4006d88:	e13ffd15 	stw	r4,-12(fp)
 4006d8c:	e17ffe15 	stw	r5,-8(fp)
 4006d90:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 4006d94:	00bffa84 	movi	r2,-22
 4006d98:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4006d9c:	e0bffd17 	ldw	r2,-12(fp)
 4006da0:	10800828 	cmpgeui	r2,r2,32
 4006da4:	1000501e 	bne	r2,zero,4006ee8 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006da8:	0005303a 	rdctl	r2,status
 4006dac:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006db0:	e0fff617 	ldw	r3,-40(fp)
 4006db4:	00bfff84 	movi	r2,-2
 4006db8:	1884703a 	and	r2,r3,r2
 4006dbc:	1001703a 	wrctl	status,r2
  
  return context;
 4006dc0:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 4006dc4:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 4006dc8:	00810074 	movhi	r2,1025
 4006dcc:	10a9df04 	addi	r2,r2,-22660
 4006dd0:	e0fffd17 	ldw	r3,-12(fp)
 4006dd4:	180690fa 	slli	r3,r3,3
 4006dd8:	10c5883a 	add	r2,r2,r3
 4006ddc:	e0ffff17 	ldw	r3,-4(fp)
 4006de0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 4006de4:	00810074 	movhi	r2,1025
 4006de8:	10a9df04 	addi	r2,r2,-22660
 4006dec:	e0fffd17 	ldw	r3,-12(fp)
 4006df0:	180690fa 	slli	r3,r3,3
 4006df4:	10c5883a 	add	r2,r2,r3
 4006df8:	10800104 	addi	r2,r2,4
 4006dfc:	e0fffe17 	ldw	r3,-8(fp)
 4006e00:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 4006e04:	e0bfff17 	ldw	r2,-4(fp)
 4006e08:	10001926 	beq	r2,zero,4006e70 <alt_irq_register+0xf4>
 4006e0c:	e0bffd17 	ldw	r2,-12(fp)
 4006e10:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006e14:	0005303a 	rdctl	r2,status
 4006e18:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e1c:	e0fff717 	ldw	r3,-36(fp)
 4006e20:	00bfff84 	movi	r2,-2
 4006e24:	1884703a 	and	r2,r3,r2
 4006e28:	1001703a 	wrctl	status,r2
  
  return context;
 4006e2c:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006e30:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4006e34:	00c00044 	movi	r3,1
 4006e38:	e0bff217 	ldw	r2,-56(fp)
 4006e3c:	1884983a 	sll	r2,r3,r2
 4006e40:	1007883a 	mov	r3,r2
 4006e44:	d0a10117 	ldw	r2,-31740(gp)
 4006e48:	1884b03a 	or	r2,r3,r2
 4006e4c:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006e50:	d0a10117 	ldw	r2,-31740(gp)
 4006e54:	100170fa 	wrctl	ienable,r2
 4006e58:	e0bff817 	ldw	r2,-32(fp)
 4006e5c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006e60:	e0bff917 	ldw	r2,-28(fp)
 4006e64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006e68:	0005883a 	mov	r2,zero
 4006e6c:	00001906 	br	4006ed4 <alt_irq_register+0x158>
 4006e70:	e0bffd17 	ldw	r2,-12(fp)
 4006e74:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006e78:	0005303a 	rdctl	r2,status
 4006e7c:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e80:	e0fffa17 	ldw	r3,-24(fp)
 4006e84:	00bfff84 	movi	r2,-2
 4006e88:	1884703a 	and	r2,r3,r2
 4006e8c:	1001703a 	wrctl	status,r2
  
  return context;
 4006e90:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006e94:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 4006e98:	00c00044 	movi	r3,1
 4006e9c:	e0bff417 	ldw	r2,-48(fp)
 4006ea0:	1884983a 	sll	r2,r3,r2
 4006ea4:	0084303a 	nor	r2,zero,r2
 4006ea8:	1007883a 	mov	r3,r2
 4006eac:	d0a10117 	ldw	r2,-31740(gp)
 4006eb0:	1884703a 	and	r2,r3,r2
 4006eb4:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006eb8:	d0a10117 	ldw	r2,-31740(gp)
 4006ebc:	100170fa 	wrctl	ienable,r2
 4006ec0:	e0bffb17 	ldw	r2,-20(fp)
 4006ec4:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006ec8:	e0bffc17 	ldw	r2,-16(fp)
 4006ecc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006ed0:	0005883a 	mov	r2,zero
 4006ed4:	e0bff115 	stw	r2,-60(fp)
 4006ed8:	e0bff317 	ldw	r2,-52(fp)
 4006edc:	e0bff515 	stw	r2,-44(fp)
 4006ee0:	e0bff517 	ldw	r2,-44(fp)
 4006ee4:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 4006ee8:	e0bff117 	ldw	r2,-60(fp)
}
 4006eec:	e037883a 	mov	sp,fp
 4006ef0:	df000017 	ldw	fp,0(sp)
 4006ef4:	dec00104 	addi	sp,sp,4
 4006ef8:	f800283a 	ret

04006efc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 4006efc:	defffc04 	addi	sp,sp,-16
 4006f00:	df000315 	stw	fp,12(sp)
 4006f04:	df000304 	addi	fp,sp,12
 4006f08:	e13ffd15 	stw	r4,-12(fp)
 4006f0c:	e17ffe15 	stw	r5,-8(fp)
 4006f10:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 4006f14:	e0fffe17 	ldw	r3,-8(fp)
 4006f18:	e0bffd17 	ldw	r2,-12(fp)
 4006f1c:	18800c26 	beq	r3,r2,4006f50 <alt_load_section+0x54>
  {
    while( to != end )
 4006f20:	00000806 	br	4006f44 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4006f24:	e0bffe17 	ldw	r2,-8(fp)
 4006f28:	10c00104 	addi	r3,r2,4
 4006f2c:	e0fffe15 	stw	r3,-8(fp)
 4006f30:	e0fffd17 	ldw	r3,-12(fp)
 4006f34:	19000104 	addi	r4,r3,4
 4006f38:	e13ffd15 	stw	r4,-12(fp)
 4006f3c:	18c00017 	ldw	r3,0(r3)
 4006f40:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4006f44:	e0fffe17 	ldw	r3,-8(fp)
 4006f48:	e0bfff17 	ldw	r2,-4(fp)
 4006f4c:	18bff51e 	bne	r3,r2,4006f24 <__ram_exceptions_end+0xfbfc6cdc>
    {
      *to++ = *from++;
    }
  }
}
 4006f50:	0001883a 	nop
 4006f54:	e037883a 	mov	sp,fp
 4006f58:	df000017 	ldw	fp,0(sp)
 4006f5c:	dec00104 	addi	sp,sp,4
 4006f60:	f800283a 	ret

04006f64 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4006f64:	defffe04 	addi	sp,sp,-8
 4006f68:	dfc00115 	stw	ra,4(sp)
 4006f6c:	df000015 	stw	fp,0(sp)
 4006f70:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4006f74:	01810074 	movhi	r6,1025
 4006f78:	31a8e604 	addi	r6,r6,-23656
 4006f7c:	01410074 	movhi	r5,1025
 4006f80:	2967f904 	addi	r5,r5,-24604
 4006f84:	01010074 	movhi	r4,1025
 4006f88:	2128e604 	addi	r4,r4,-23656
 4006f8c:	4006efc0 	call	4006efc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 4006f90:	01820134 	movhi	r6,2052
 4006f94:	31809204 	addi	r6,r6,584
 4006f98:	01420134 	movhi	r5,2052
 4006f9c:	29400804 	addi	r5,r5,32
 4006fa0:	01010034 	movhi	r4,1024
 4006fa4:	21000004 	addi	r4,r4,0
 4006fa8:	4006efc0 	call	4006efc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4006fac:	01810074 	movhi	r6,1025
 4006fb0:	31a7f904 	addi	r6,r6,-24604
 4006fb4:	01410074 	movhi	r5,1025
 4006fb8:	29670d04 	addi	r5,r5,-25548
 4006fbc:	01010074 	movhi	r4,1025
 4006fc0:	21270d04 	addi	r4,r4,-25548
 4006fc4:	4006efc0 	call	4006efc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 4006fc8:	4008d440 	call	4008d44 <alt_dcache_flush_all>
  alt_icache_flush_all();
 4006fcc:	4008fe80 	call	4008fe8 <alt_icache_flush_all>
}
 4006fd0:	0001883a 	nop
 4006fd4:	e037883a 	mov	sp,fp
 4006fd8:	dfc00117 	ldw	ra,4(sp)
 4006fdc:	df000017 	ldw	fp,0(sp)
 4006fe0:	dec00204 	addi	sp,sp,8
 4006fe4:	f800283a 	ret

04006fe8 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 4006fe8:	defffd04 	addi	sp,sp,-12
 4006fec:	dfc00215 	stw	ra,8(sp)
 4006ff0:	df000115 	stw	fp,4(sp)
 4006ff4:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 4006ff8:	0009883a 	mov	r4,zero
 4006ffc:	40071fc0 	call	40071fc <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 4007000:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 4007004:	40072340 	call	4007234 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 4007008:	01810074 	movhi	r6,1025
 400700c:	31a7d604 	addi	r6,r6,-24744
 4007010:	01410074 	movhi	r5,1025
 4007014:	2967d604 	addi	r5,r5,-24744
 4007018:	01010074 	movhi	r4,1025
 400701c:	2127d604 	addi	r4,r4,-24744
 4007020:	40090e00 	call	40090e0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4007024:	4008e980 	call	4008e98 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4007028:	01010074 	movhi	r4,1025
 400702c:	2123be04 	addi	r4,r4,-28936
 4007030:	40098b40 	call	40098b4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4007034:	d0a10217 	ldw	r2,-31736(gp)
 4007038:	d0e10317 	ldw	r3,-31732(gp)
 400703c:	d1210417 	ldw	r4,-31728(gp)
 4007040:	200d883a 	mov	r6,r4
 4007044:	180b883a 	mov	r5,r3
 4007048:	1009883a 	mov	r4,r2
 400704c:	40002740 	call	4000274 <main>
 4007050:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4007054:	01000044 	movi	r4,1
 4007058:	4008c740 	call	4008c74 <close>
  exit (result);
 400705c:	e13fff17 	ldw	r4,-4(fp)
 4007060:	40098c80 	call	40098c8 <exit>

04007064 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4007064:	defffd04 	addi	sp,sp,-12
 4007068:	dfc00215 	stw	ra,8(sp)
 400706c:	df000115 	stw	fp,4(sp)
 4007070:	df000104 	addi	fp,sp,4
 4007074:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4007078:	e13fff17 	ldw	r4,-4(fp)
 400707c:	4008ae00 	call	4008ae0 <alt_busy_sleep>
}
 4007080:	e037883a 	mov	sp,fp
 4007084:	dfc00117 	ldw	ra,4(sp)
 4007088:	df000017 	ldw	fp,0(sp)
 400708c:	dec00204 	addi	sp,sp,8
 4007090:	f800283a 	ret

04007094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007094:	defffe04 	addi	sp,sp,-8
 4007098:	dfc00115 	stw	ra,4(sp)
 400709c:	df000015 	stw	fp,0(sp)
 40070a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40070a4:	d0a00c17 	ldw	r2,-32720(gp)
 40070a8:	10000326 	beq	r2,zero,40070b8 <alt_get_errno+0x24>
 40070ac:	d0a00c17 	ldw	r2,-32720(gp)
 40070b0:	103ee83a 	callr	r2
 40070b4:	00000106 	br	40070bc <alt_get_errno+0x28>
 40070b8:	d0a10004 	addi	r2,gp,-31744
}
 40070bc:	e037883a 	mov	sp,fp
 40070c0:	dfc00117 	ldw	ra,4(sp)
 40070c4:	df000017 	ldw	fp,0(sp)
 40070c8:	dec00204 	addi	sp,sp,8
 40070cc:	f800283a 	ret

040070d0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 40070d0:	defff904 	addi	sp,sp,-28
 40070d4:	dfc00615 	stw	ra,24(sp)
 40070d8:	df000515 	stw	fp,20(sp)
 40070dc:	df000504 	addi	fp,sp,20
 40070e0:	e13ffd15 	stw	r4,-12(fp)
 40070e4:	e17ffe15 	stw	r5,-8(fp)
 40070e8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 40070ec:	e0bffd17 	ldw	r2,-12(fp)
 40070f0:	10000616 	blt	r2,zero,400710c <write+0x3c>
 40070f4:	e0bffd17 	ldw	r2,-12(fp)
 40070f8:	10c00324 	muli	r3,r2,12
 40070fc:	00810074 	movhi	r2,1025
 4007100:	10a87704 	addi	r2,r2,-24100
 4007104:	1885883a 	add	r2,r3,r2
 4007108:	00000106 	br	4007110 <write+0x40>
 400710c:	0005883a 	mov	r2,zero
 4007110:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 4007114:	e0bffb17 	ldw	r2,-20(fp)
 4007118:	10002126 	beq	r2,zero,40071a0 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400711c:	e0bffb17 	ldw	r2,-20(fp)
 4007120:	10800217 	ldw	r2,8(r2)
 4007124:	108000cc 	andi	r2,r2,3
 4007128:	10001826 	beq	r2,zero,400718c <write+0xbc>
 400712c:	e0bffb17 	ldw	r2,-20(fp)
 4007130:	10800017 	ldw	r2,0(r2)
 4007134:	10800617 	ldw	r2,24(r2)
 4007138:	10001426 	beq	r2,zero,400718c <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400713c:	e0bffb17 	ldw	r2,-20(fp)
 4007140:	10800017 	ldw	r2,0(r2)
 4007144:	10800617 	ldw	r2,24(r2)
 4007148:	e0ffff17 	ldw	r3,-4(fp)
 400714c:	180d883a 	mov	r6,r3
 4007150:	e17ffe17 	ldw	r5,-8(fp)
 4007154:	e13ffb17 	ldw	r4,-20(fp)
 4007158:	103ee83a 	callr	r2
 400715c:	e0bffc15 	stw	r2,-16(fp)
 4007160:	e0bffc17 	ldw	r2,-16(fp)
 4007164:	1000070e 	bge	r2,zero,4007184 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 4007168:	40070940 	call	4007094 <alt_get_errno>
 400716c:	1007883a 	mov	r3,r2
 4007170:	e0bffc17 	ldw	r2,-16(fp)
 4007174:	0085c83a 	sub	r2,zero,r2
 4007178:	18800015 	stw	r2,0(r3)
        return -1;
 400717c:	00bfffc4 	movi	r2,-1
 4007180:	00000c06 	br	40071b4 <write+0xe4>
      }
      return rval;
 4007184:	e0bffc17 	ldw	r2,-16(fp)
 4007188:	00000a06 	br	40071b4 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400718c:	40070940 	call	4007094 <alt_get_errno>
 4007190:	1007883a 	mov	r3,r2
 4007194:	00800344 	movi	r2,13
 4007198:	18800015 	stw	r2,0(r3)
 400719c:	00000406 	br	40071b0 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 40071a0:	40070940 	call	4007094 <alt_get_errno>
 40071a4:	1007883a 	mov	r3,r2
 40071a8:	00801444 	movi	r2,81
 40071ac:	18800015 	stw	r2,0(r3)
  }
  return -1;
 40071b0:	00bfffc4 	movi	r2,-1
}
 40071b4:	e037883a 	mov	sp,fp
 40071b8:	dfc00117 	ldw	ra,4(sp)
 40071bc:	df000017 	ldw	fp,0(sp)
 40071c0:	dec00204 	addi	sp,sp,8
 40071c4:	f800283a 	ret

040071c8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 40071c8:	defffd04 	addi	sp,sp,-12
 40071cc:	dfc00215 	stw	ra,8(sp)
 40071d0:	df000115 	stw	fp,4(sp)
 40071d4:	df000104 	addi	fp,sp,4
 40071d8:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 40071dc:	d1600904 	addi	r5,gp,-32732
 40071e0:	e13fff17 	ldw	r4,-4(fp)
 40071e4:	4008df40 	call	4008df4 <alt_dev_llist_insert>
}
 40071e8:	e037883a 	mov	sp,fp
 40071ec:	dfc00117 	ldw	ra,4(sp)
 40071f0:	df000017 	ldw	fp,0(sp)
 40071f4:	dec00204 	addi	sp,sp,8
 40071f8:	f800283a 	ret

040071fc <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40071fc:	defffd04 	addi	sp,sp,-12
 4007200:	dfc00215 	stw	ra,8(sp)
 4007204:	df000115 	stw	fp,4(sp)
 4007208:	df000104 	addi	fp,sp,4
 400720c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 4007210:	40095b80 	call	40095b8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4007214:	00800044 	movi	r2,1
 4007218:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400721c:	0001883a 	nop
 4007220:	e037883a 	mov	sp,fp
 4007224:	dfc00117 	ldw	ra,4(sp)
 4007228:	df000017 	ldw	fp,0(sp)
 400722c:	dec00204 	addi	sp,sp,8
 4007230:	f800283a 	ret

04007234 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4007234:	defffd04 	addi	sp,sp,-12
 4007238:	dfc00215 	stw	ra,8(sp)
 400723c:	df000115 	stw	fp,4(sp)
 4007240:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 4007244:	01c00f04 	movi	r7,60
 4007248:	01800044 	movi	r6,1
 400724c:	000b883a 	mov	r5,zero
 4007250:	01020234 	movhi	r4,2056
 4007254:	21040004 	addi	r4,r4,4096
 4007258:	40078080 	call	4007808 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 400725c:	01010074 	movhi	r4,1025
 4007260:	21283104 	addi	r4,r4,-24380
 4007264:	40071c80 	call	40071c8 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 4007268:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 400726c:	01010074 	movhi	r4,1025
 4007270:	21283c04 	addi	r4,r4,-24336
 4007274:	40071c80 	call	40071c8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 4007278:	00810074 	movhi	r2,1025
 400727c:	10a84704 	addi	r2,r2,-24292
 4007280:	10800a17 	ldw	r2,40(r2)
 4007284:	10800017 	ldw	r2,0(r2)
 4007288:	1007883a 	mov	r3,r2
 400728c:	00810074 	movhi	r2,1025
 4007290:	10a84704 	addi	r2,r2,-24292
 4007294:	10c00b15 	stw	r3,44(r2)
 4007298:	00810074 	movhi	r2,1025
 400729c:	10a84704 	addi	r2,r2,-24292
 40072a0:	10800a17 	ldw	r2,40(r2)
 40072a4:	10800104 	addi	r2,r2,4
 40072a8:	10800017 	ldw	r2,0(r2)
 40072ac:	1007883a 	mov	r3,r2
 40072b0:	00810074 	movhi	r2,1025
 40072b4:	10a84704 	addi	r2,r2,-24292
 40072b8:	10c00c15 	stw	r3,48(r2)
 40072bc:	00810074 	movhi	r2,1025
 40072c0:	10a84704 	addi	r2,r2,-24292
 40072c4:	10800a17 	ldw	r2,40(r2)
 40072c8:	10800204 	addi	r2,r2,8
 40072cc:	10800017 	ldw	r2,0(r2)
 40072d0:	10ffffcc 	andi	r3,r2,65535
 40072d4:	00810074 	movhi	r2,1025
 40072d8:	10a84704 	addi	r2,r2,-24292
 40072dc:	10c00f15 	stw	r3,60(r2)
 40072e0:	00810074 	movhi	r2,1025
 40072e4:	10a84704 	addi	r2,r2,-24292
 40072e8:	10800a17 	ldw	r2,40(r2)
 40072ec:	10800204 	addi	r2,r2,8
 40072f0:	10800017 	ldw	r2,0(r2)
 40072f4:	1006d43a 	srli	r3,r2,16
 40072f8:	00810074 	movhi	r2,1025
 40072fc:	10a84704 	addi	r2,r2,-24292
 4007300:	10c01015 	stw	r3,64(r2)
 4007304:	00810074 	movhi	r2,1025
 4007308:	10a84704 	addi	r2,r2,-24292
 400730c:	10800a17 	ldw	r2,40(r2)
 4007310:	10800304 	addi	r2,r2,12
 4007314:	10800017 	ldw	r2,0(r2)
 4007318:	1005d07a 	srai	r2,r2,1
 400731c:	10c0004c 	andi	r3,r2,1
 4007320:	00810074 	movhi	r2,1025
 4007324:	10a84704 	addi	r2,r2,-24292
 4007328:	10c00d15 	stw	r3,52(r2)
 400732c:	00810074 	movhi	r2,1025
 4007330:	10a84704 	addi	r2,r2,-24292
 4007334:	10800a17 	ldw	r2,40(r2)
 4007338:	10800304 	addi	r2,r2,12
 400733c:	10800017 	ldw	r2,0(r2)
 4007340:	1005d13a 	srai	r2,r2,4
 4007344:	10c003cc 	andi	r3,r2,15
 4007348:	00810074 	movhi	r2,1025
 400734c:	10a84704 	addi	r2,r2,-24292
 4007350:	10c00e15 	stw	r3,56(r2)
 4007354:	00810074 	movhi	r2,1025
 4007358:	10a84704 	addi	r2,r2,-24292
 400735c:	10800a17 	ldw	r2,40(r2)
 4007360:	10800304 	addi	r2,r2,12
 4007364:	10800017 	ldw	r2,0(r2)
 4007368:	1005d43a 	srai	r2,r2,16
 400736c:	e0bfff05 	stb	r2,-4(fp)
 4007370:	00810074 	movhi	r2,1025
 4007374:	10a84704 	addi	r2,r2,-24292
 4007378:	10800a17 	ldw	r2,40(r2)
 400737c:	10800304 	addi	r2,r2,12
 4007380:	10800017 	ldw	r2,0(r2)
 4007384:	1004d63a 	srli	r2,r2,24
 4007388:	e0bfff45 	stb	r2,-3(fp)
 400738c:	00810074 	movhi	r2,1025
 4007390:	10a84704 	addi	r2,r2,-24292
 4007394:	10800e17 	ldw	r2,56(r2)
 4007398:	10800058 	cmpnei	r2,r2,1
 400739c:	1000041e 	bne	r2,zero,40073b0 <alt_sys_init+0x17c>
 40073a0:	00810074 	movhi	r2,1025
 40073a4:	10a84704 	addi	r2,r2,-24292
 40073a8:	10001115 	stw	zero,68(r2)
 40073ac:	00000e06 	br	40073e8 <alt_sys_init+0x1b4>
 40073b0:	00810074 	movhi	r2,1025
 40073b4:	10a84704 	addi	r2,r2,-24292
 40073b8:	10800e17 	ldw	r2,56(r2)
 40073bc:	10800098 	cmpnei	r2,r2,2
 40073c0:	1000051e 	bne	r2,zero,40073d8 <alt_sys_init+0x1a4>
 40073c4:	00810074 	movhi	r2,1025
 40073c8:	10a84704 	addi	r2,r2,-24292
 40073cc:	00c00044 	movi	r3,1
 40073d0:	10c01115 	stw	r3,68(r2)
 40073d4:	00000406 	br	40073e8 <alt_sys_init+0x1b4>
 40073d8:	00810074 	movhi	r2,1025
 40073dc:	10a84704 	addi	r2,r2,-24292
 40073e0:	00c00084 	movi	r3,2
 40073e4:	10c01115 	stw	r3,68(r2)
 40073e8:	e0bfff03 	ldbu	r2,-4(fp)
 40073ec:	00c00804 	movi	r3,32
 40073f0:	1885c83a 	sub	r2,r3,r2
 40073f4:	00ffffc4 	movi	r3,-1
 40073f8:	1886d83a 	srl	r3,r3,r2
 40073fc:	00810074 	movhi	r2,1025
 4007400:	10a84704 	addi	r2,r2,-24292
 4007404:	10c01215 	stw	r3,72(r2)
 4007408:	e0ffff03 	ldbu	r3,-4(fp)
 400740c:	00810074 	movhi	r2,1025
 4007410:	10a84704 	addi	r2,r2,-24292
 4007414:	10801117 	ldw	r2,68(r2)
 4007418:	1887883a 	add	r3,r3,r2
 400741c:	00810074 	movhi	r2,1025
 4007420:	10a84704 	addi	r2,r2,-24292
 4007424:	10c01315 	stw	r3,76(r2)
 4007428:	e0bfff43 	ldbu	r2,-3(fp)
 400742c:	00c00804 	movi	r3,32
 4007430:	1885c83a 	sub	r2,r3,r2
 4007434:	00ffffc4 	movi	r3,-1
 4007438:	1886d83a 	srl	r3,r3,r2
 400743c:	00810074 	movhi	r2,1025
 4007440:	10a84704 	addi	r2,r2,-24292
 4007444:	10c01415 	stw	r3,80(r2)
 4007448:	01010074 	movhi	r4,1025
 400744c:	21284704 	addi	r4,r4,-24292
 4007450:	40071c80 	call	40071c8 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 4007454:	00810074 	movhi	r2,1025
 4007458:	10a85c04 	addi	r2,r2,-24208
 400745c:	10800a17 	ldw	r2,40(r2)
 4007460:	10800017 	ldw	r2,0(r2)
 4007464:	10c003cc 	andi	r3,r2,15
 4007468:	00810074 	movhi	r2,1025
 400746c:	10a85c04 	addi	r2,r2,-24208
 4007470:	10c00b15 	stw	r3,44(r2)
 4007474:	00810074 	movhi	r2,1025
 4007478:	10a85c04 	addi	r2,r2,-24208
 400747c:	10800a17 	ldw	r2,40(r2)
 4007480:	10800017 	ldw	r2,0(r2)
 4007484:	1005d13a 	srai	r2,r2,4
 4007488:	10c0004c 	andi	r3,r2,1
 400748c:	00810074 	movhi	r2,1025
 4007490:	10a85c04 	addi	r2,r2,-24208
 4007494:	10c00c15 	stw	r3,48(r2)
 4007498:	00810074 	movhi	r2,1025
 400749c:	10a85c04 	addi	r2,r2,-24208
 40074a0:	10800a17 	ldw	r2,40(r2)
 40074a4:	10800017 	ldw	r2,0(r2)
 40074a8:	1005d17a 	srai	r2,r2,5
 40074ac:	10c0004c 	andi	r3,r2,1
 40074b0:	00810074 	movhi	r2,1025
 40074b4:	10a85c04 	addi	r2,r2,-24208
 40074b8:	10c00d15 	stw	r3,52(r2)
 40074bc:	00810074 	movhi	r2,1025
 40074c0:	10a85c04 	addi	r2,r2,-24208
 40074c4:	10800a17 	ldw	r2,40(r2)
 40074c8:	10800017 	ldw	r2,0(r2)
 40074cc:	1005d43a 	srai	r2,r2,16
 40074d0:	10c003cc 	andi	r3,r2,15
 40074d4:	00810074 	movhi	r2,1025
 40074d8:	10a85c04 	addi	r2,r2,-24208
 40074dc:	10c00e15 	stw	r3,56(r2)
 40074e0:	00810074 	movhi	r2,1025
 40074e4:	10a85c04 	addi	r2,r2,-24208
 40074e8:	10800a17 	ldw	r2,40(r2)
 40074ec:	10800017 	ldw	r2,0(r2)
 40074f0:	1005d53a 	srai	r2,r2,20
 40074f4:	10c0004c 	andi	r3,r2,1
 40074f8:	00810074 	movhi	r2,1025
 40074fc:	10a85c04 	addi	r2,r2,-24208
 4007500:	10c00f15 	stw	r3,60(r2)
 4007504:	00810074 	movhi	r2,1025
 4007508:	10a85c04 	addi	r2,r2,-24208
 400750c:	10800a17 	ldw	r2,40(r2)
 4007510:	10800017 	ldw	r2,0(r2)
 4007514:	1005d57a 	srai	r2,r2,21
 4007518:	10c0004c 	andi	r3,r2,1
 400751c:	00810074 	movhi	r2,1025
 4007520:	10a85c04 	addi	r2,r2,-24208
 4007524:	10c01015 	stw	r3,64(r2)
 4007528:	01010074 	movhi	r4,1025
 400752c:	21285c04 	addi	r4,r4,-24208
 4007530:	40071c80 	call	40071c8 <alt_dev_reg>
}
 4007534:	0001883a 	nop
 4007538:	e037883a 	mov	sp,fp
 400753c:	dfc00117 	ldw	ra,4(sp)
 4007540:	df000017 	ldw	fp,0(sp)
 4007544:	dec00204 	addi	sp,sp,8
 4007548:	f800283a 	ret

0400754c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400754c:	defffa04 	addi	sp,sp,-24
 4007550:	dfc00515 	stw	ra,20(sp)
 4007554:	df000415 	stw	fp,16(sp)
 4007558:	df000404 	addi	fp,sp,16
 400755c:	e13ffd15 	stw	r4,-12(fp)
 4007560:	e17ffe15 	stw	r5,-8(fp)
 4007564:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4007568:	e0bffd17 	ldw	r2,-12(fp)
 400756c:	10800017 	ldw	r2,0(r2)
 4007570:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 4007574:	e0bffc17 	ldw	r2,-16(fp)
 4007578:	10c00a04 	addi	r3,r2,40
 400757c:	e0bffd17 	ldw	r2,-12(fp)
 4007580:	10800217 	ldw	r2,8(r2)
 4007584:	100f883a 	mov	r7,r2
 4007588:	e1bfff17 	ldw	r6,-4(fp)
 400758c:	e17ffe17 	ldw	r5,-8(fp)
 4007590:	1809883a 	mov	r4,r3
 4007594:	400760c0 	call	400760c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4007598:	e037883a 	mov	sp,fp
 400759c:	dfc00117 	ldw	ra,4(sp)
 40075a0:	df000017 	ldw	fp,0(sp)
 40075a4:	dec00204 	addi	sp,sp,8
 40075a8:	f800283a 	ret

040075ac <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 40075ac:	defffa04 	addi	sp,sp,-24
 40075b0:	dfc00515 	stw	ra,20(sp)
 40075b4:	df000415 	stw	fp,16(sp)
 40075b8:	df000404 	addi	fp,sp,16
 40075bc:	e13ffd15 	stw	r4,-12(fp)
 40075c0:	e17ffe15 	stw	r5,-8(fp)
 40075c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40075c8:	e0bffd17 	ldw	r2,-12(fp)
 40075cc:	10800017 	ldw	r2,0(r2)
 40075d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 40075d4:	e0bffc17 	ldw	r2,-16(fp)
 40075d8:	10c00a04 	addi	r3,r2,40
 40075dc:	e0bffd17 	ldw	r2,-12(fp)
 40075e0:	10800217 	ldw	r2,8(r2)
 40075e4:	100f883a 	mov	r7,r2
 40075e8:	e1bfff17 	ldw	r6,-4(fp)
 40075ec:	e17ffe17 	ldw	r5,-8(fp)
 40075f0:	1809883a 	mov	r4,r3
 40075f4:	40076f80 	call	40076f8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 40075f8:	e037883a 	mov	sp,fp
 40075fc:	dfc00117 	ldw	ra,4(sp)
 4007600:	df000017 	ldw	fp,0(sp)
 4007604:	dec00204 	addi	sp,sp,8
 4007608:	f800283a 	ret

0400760c <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 400760c:	defff704 	addi	sp,sp,-36
 4007610:	df000815 	stw	fp,32(sp)
 4007614:	df000804 	addi	fp,sp,32
 4007618:	e13ffc15 	stw	r4,-16(fp)
 400761c:	e17ffd15 	stw	r5,-12(fp)
 4007620:	e1bffe15 	stw	r6,-8(fp)
 4007624:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4007628:	e0bffc17 	ldw	r2,-16(fp)
 400762c:	10800017 	ldw	r2,0(r2)
 4007630:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 4007634:	e0bffd17 	ldw	r2,-12(fp)
 4007638:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 400763c:	e0bffe17 	ldw	r2,-8(fp)
 4007640:	e0fffd17 	ldw	r3,-12(fp)
 4007644:	1885883a 	add	r2,r3,r2
 4007648:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 400764c:	00001206 	br	4007698 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4007650:	e0bff917 	ldw	r2,-28(fp)
 4007654:	10800037 	ldwio	r2,0(r2)
 4007658:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 400765c:	e0bffb17 	ldw	r2,-20(fp)
 4007660:	10a0000c 	andi	r2,r2,32768
 4007664:	10000626 	beq	r2,zero,4007680 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4007668:	e0bff817 	ldw	r2,-32(fp)
 400766c:	10c00044 	addi	r3,r2,1
 4007670:	e0fff815 	stw	r3,-32(fp)
 4007674:	e0fffb17 	ldw	r3,-20(fp)
 4007678:	10c00005 	stb	r3,0(r2)
 400767c:	00000606 	br	4007698 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 4007680:	e0fff817 	ldw	r3,-32(fp)
 4007684:	e0bffd17 	ldw	r2,-12(fp)
 4007688:	1880071e 	bne	r3,r2,40076a8 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 400768c:	e0bfff17 	ldw	r2,-4(fp)
 4007690:	1090000c 	andi	r2,r2,16384
 4007694:	1000061e 	bne	r2,zero,40076b0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 4007698:	e0fff817 	ldw	r3,-32(fp)
 400769c:	e0bffa17 	ldw	r2,-24(fp)
 40076a0:	18bfeb36 	bltu	r3,r2,4007650 <__ram_exceptions_end+0xfbfc7408>
 40076a4:	00000306 	br	40076b4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 40076a8:	0001883a 	nop
 40076ac:	00000106 	br	40076b4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 40076b0:	0001883a 	nop
    
  }

  if (ptr != buffer)
 40076b4:	e0fff817 	ldw	r3,-32(fp)
 40076b8:	e0bffd17 	ldw	r2,-12(fp)
 40076bc:	18800426 	beq	r3,r2,40076d0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 40076c0:	e0fff817 	ldw	r3,-32(fp)
 40076c4:	e0bffd17 	ldw	r2,-12(fp)
 40076c8:	1885c83a 	sub	r2,r3,r2
 40076cc:	00000606 	br	40076e8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 40076d0:	e0bfff17 	ldw	r2,-4(fp)
 40076d4:	1090000c 	andi	r2,r2,16384
 40076d8:	10000226 	beq	r2,zero,40076e4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 40076dc:	00bffd44 	movi	r2,-11
 40076e0:	00000106 	br	40076e8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 40076e4:	00bffec4 	movi	r2,-5
}
 40076e8:	e037883a 	mov	sp,fp
 40076ec:	df000017 	ldw	fp,0(sp)
 40076f0:	dec00104 	addi	sp,sp,4
 40076f4:	f800283a 	ret

040076f8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 40076f8:	defff904 	addi	sp,sp,-28
 40076fc:	df000615 	stw	fp,24(sp)
 4007700:	df000604 	addi	fp,sp,24
 4007704:	e13ffc15 	stw	r4,-16(fp)
 4007708:	e17ffd15 	stw	r5,-12(fp)
 400770c:	e1bffe15 	stw	r6,-8(fp)
 4007710:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 4007714:	e0bffc17 	ldw	r2,-16(fp)
 4007718:	10800017 	ldw	r2,0(r2)
 400771c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 4007720:	e0bffe17 	ldw	r2,-8(fp)
 4007724:	e0fffd17 	ldw	r3,-12(fp)
 4007728:	1885883a 	add	r2,r3,r2
 400772c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 4007730:	00000e06 	br	400776c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 4007734:	e0bffa17 	ldw	r2,-24(fp)
 4007738:	10800104 	addi	r2,r2,4
 400773c:	10800037 	ldwio	r2,0(r2)
 4007740:	10bfffec 	andhi	r2,r2,65535
 4007744:	10000926 	beq	r2,zero,400776c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 4007748:	e0fffa17 	ldw	r3,-24(fp)
 400774c:	e0bffd17 	ldw	r2,-12(fp)
 4007750:	11000044 	addi	r4,r2,1
 4007754:	e13ffd15 	stw	r4,-12(fp)
 4007758:	10800003 	ldbu	r2,0(r2)
 400775c:	10803fcc 	andi	r2,r2,255
 4007760:	1080201c 	xori	r2,r2,128
 4007764:	10bfe004 	addi	r2,r2,-128
 4007768:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 400776c:	e0fffd17 	ldw	r3,-12(fp)
 4007770:	e0bffb17 	ldw	r2,-20(fp)
 4007774:	18bfef36 	bltu	r3,r2,4007734 <__ram_exceptions_end+0xfbfc74ec>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 4007778:	e0bffe17 	ldw	r2,-8(fp)
}
 400777c:	e037883a 	mov	sp,fp
 4007780:	df000017 	ldw	fp,0(sp)
 4007784:	dec00104 	addi	sp,sp,4
 4007788:	f800283a 	ret

0400778c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 400778c:	defff904 	addi	sp,sp,-28
 4007790:	dfc00615 	stw	ra,24(sp)
 4007794:	df000515 	stw	fp,20(sp)
 4007798:	df000504 	addi	fp,sp,20
 400779c:	e13ffe15 	stw	r4,-8(fp)
 40077a0:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 40077a4:	0007883a 	mov	r3,zero
 40077a8:	e0bffe17 	ldw	r2,-8(fp)
 40077ac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 40077b0:	e0bffe17 	ldw	r2,-8(fp)
 40077b4:	10800104 	addi	r2,r2,4
 40077b8:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40077bc:	0005303a 	rdctl	r2,status
 40077c0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40077c4:	e0fffc17 	ldw	r3,-16(fp)
 40077c8:	00bfff84 	movi	r2,-2
 40077cc:	1884703a 	and	r2,r3,r2
 40077d0:	1001703a 	wrctl	status,r2
  
  return context;
 40077d4:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 40077d8:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 40077dc:	40094b00 	call	40094b0 <alt_tick>
 40077e0:	e0bffb17 	ldw	r2,-20(fp)
 40077e4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40077e8:	e0bffd17 	ldw	r2,-12(fp)
 40077ec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 40077f0:	0001883a 	nop
 40077f4:	e037883a 	mov	sp,fp
 40077f8:	dfc00117 	ldw	ra,4(sp)
 40077fc:	df000017 	ldw	fp,0(sp)
 4007800:	dec00204 	addi	sp,sp,8
 4007804:	f800283a 	ret

04007808 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 4007808:	defff904 	addi	sp,sp,-28
 400780c:	dfc00615 	stw	ra,24(sp)
 4007810:	df000515 	stw	fp,20(sp)
 4007814:	df000504 	addi	fp,sp,20
 4007818:	e13ffc15 	stw	r4,-16(fp)
 400781c:	e17ffd15 	stw	r5,-12(fp)
 4007820:	e1bffe15 	stw	r6,-8(fp)
 4007824:	e1ffff15 	stw	r7,-4(fp)
 4007828:	e0bfff17 	ldw	r2,-4(fp)
 400782c:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 4007830:	d0a10517 	ldw	r2,-31724(gp)
 4007834:	1000021e 	bne	r2,zero,4007840 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 4007838:	e0bffb17 	ldw	r2,-20(fp)
 400783c:	d0a10515 	stw	r2,-31724(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 4007840:	e0bffc17 	ldw	r2,-16(fp)
 4007844:	10800104 	addi	r2,r2,4
 4007848:	00c001c4 	movi	r3,7
 400784c:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 4007850:	01810034 	movhi	r6,1024
 4007854:	319de304 	addi	r6,r6,30604
 4007858:	e17ffc17 	ldw	r5,-16(fp)
 400785c:	e13ffe17 	ldw	r4,-8(fp)
 4007860:	4006d7c0 	call	4006d7c <alt_irq_register>
#endif  
}
 4007864:	0001883a 	nop
 4007868:	e037883a 	mov	sp,fp
 400786c:	dfc00117 	ldw	ra,4(sp)
 4007870:	df000017 	ldw	fp,0(sp)
 4007874:	dec00204 	addi	sp,sp,8
 4007878:	f800283a 	ret

0400787c <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 400787c:	defffc04 	addi	sp,sp,-16
 4007880:	dfc00315 	stw	ra,12(sp)
 4007884:	df000215 	stw	fp,8(sp)
 4007888:	df000204 	addi	fp,sp,8
 400788c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 4007890:	d1600904 	addi	r5,gp,-32732
 4007894:	e13fff17 	ldw	r4,-4(fp)
 4007898:	4008f580 	call	4008f58 <alt_find_dev>
 400789c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 40078a0:	e0bffe17 	ldw	r2,-8(fp)
}
 40078a4:	e037883a 	mov	sp,fp
 40078a8:	dfc00117 	ldw	ra,4(sp)
 40078ac:	df000017 	ldw	fp,0(sp)
 40078b0:	dec00204 	addi	sp,sp,8
 40078b4:	f800283a 	ret

040078b8 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 40078b8:	defffd04 	addi	sp,sp,-12
 40078bc:	df000215 	stw	fp,8(sp)
 40078c0:	df000204 	addi	fp,sp,8
 40078c4:	e13ffe15 	stw	r4,-8(fp)
 40078c8:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 40078cc:	e0bffe17 	ldw	r2,-8(fp)
 40078d0:	10800a17 	ldw	r2,40(r2)
 40078d4:	10800023 	ldbuio	r2,0(r2)
 40078d8:	10803fcc 	andi	r2,r2,255
 40078dc:	1007883a 	mov	r3,r2
 40078e0:	e0bfff17 	ldw	r2,-4(fp)
 40078e4:	10c00005 	stb	r3,0(r2)

	return 0;
 40078e8:	0005883a 	mov	r2,zero
}
 40078ec:	e037883a 	mov	sp,fp
 40078f0:	df000017 	ldw	fp,0(sp)
 40078f4:	dec00104 	addi	sp,sp,4
 40078f8:	f800283a 	ret

040078fc <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 40078fc:	defffc04 	addi	sp,sp,-16
 4007900:	df000315 	stw	fp,12(sp)
 4007904:	df000304 	addi	fp,sp,12
 4007908:	e13ffd15 	stw	r4,-12(fp)
 400790c:	2805883a 	mov	r2,r5
 4007910:	e1bfff15 	stw	r6,-4(fp)
 4007914:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007918:	e0bffd17 	ldw	r2,-12(fp)
 400791c:	10800a17 	ldw	r2,40(r2)
 4007920:	1007883a 	mov	r3,r2
 4007924:	e0bffe03 	ldbu	r2,-8(fp)
 4007928:	10800fcc 	andi	r2,r2,63
 400792c:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 4007930:	e0bffd17 	ldw	r2,-12(fp)
 4007934:	10800a17 	ldw	r2,40(r2)
 4007938:	10800044 	addi	r2,r2,1
 400793c:	10800023 	ldbuio	r2,0(r2)
 4007940:	10803fcc 	andi	r2,r2,255
 4007944:	1007883a 	mov	r3,r2
 4007948:	e0bfff17 	ldw	r2,-4(fp)
 400794c:	10c00005 	stb	r3,0(r2)

	return 0;
 4007950:	0005883a 	mov	r2,zero
}
 4007954:	e037883a 	mov	sp,fp
 4007958:	df000017 	ldw	fp,0(sp)
 400795c:	dec00104 	addi	sp,sp,4
 4007960:	f800283a 	ret

04007964 <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 4007964:	defffc04 	addi	sp,sp,-16
 4007968:	df000315 	stw	fp,12(sp)
 400796c:	df000304 	addi	fp,sp,12
 4007970:	e13ffd15 	stw	r4,-12(fp)
 4007974:	2807883a 	mov	r3,r5
 4007978:	3005883a 	mov	r2,r6
 400797c:	e0fffe05 	stb	r3,-8(fp)
 4007980:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007984:	e0bffd17 	ldw	r2,-12(fp)
 4007988:	10800a17 	ldw	r2,40(r2)
 400798c:	1007883a 	mov	r3,r2
 4007990:	e0bffe03 	ldbu	r2,-8(fp)
 4007994:	10800fcc 	andi	r2,r2,63
 4007998:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 400799c:	e0bffd17 	ldw	r2,-12(fp)
 40079a0:	10800a17 	ldw	r2,40(r2)
 40079a4:	10800044 	addi	r2,r2,1
 40079a8:	1007883a 	mov	r3,r2
 40079ac:	e0bfff03 	ldbu	r2,-4(fp)
 40079b0:	18800025 	stbio	r2,0(r3)

	return 0;
 40079b4:	0005883a 	mov	r2,zero
}
 40079b8:	e037883a 	mov	sp,fp
 40079bc:	df000017 	ldw	fp,0(sp)
 40079c0:	dec00104 	addi	sp,sp,4
 40079c4:	f800283a 	ret

040079c8 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 40079c8:	defffd04 	addi	sp,sp,-12
 40079cc:	df000215 	stw	fp,8(sp)
 40079d0:	df000204 	addi	fp,sp,8
 40079d4:	e13ffe15 	stw	r4,-8(fp)
 40079d8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 40079dc:	e0bffe17 	ldw	r2,-8(fp)
 40079e0:	10800a17 	ldw	r2,40(r2)
 40079e4:	1007883a 	mov	r3,r2
 40079e8:	00800c84 	movi	r2,50
 40079ec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 40079f0:	e0bffe17 	ldw	r2,-8(fp)
 40079f4:	10800a17 	ldw	r2,40(r2)
 40079f8:	10800044 	addi	r2,r2,1
 40079fc:	10800023 	ldbuio	r2,0(r2)
 4007a00:	10803fcc 	andi	r2,r2,255
 4007a04:	10ffffcc 	andi	r3,r2,65535
 4007a08:	e0bfff17 	ldw	r2,-4(fp)
 4007a0c:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007a10:	e0bffe17 	ldw	r2,-8(fp)
 4007a14:	10800a17 	ldw	r2,40(r2)
 4007a18:	1007883a 	mov	r3,r2
 4007a1c:	00800cc4 	movi	r2,51
 4007a20:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 4007a24:	e0bffe17 	ldw	r2,-8(fp)
 4007a28:	10800a17 	ldw	r2,40(r2)
 4007a2c:	10800044 	addi	r2,r2,1
 4007a30:	10800023 	ldbuio	r2,0(r2)
 4007a34:	10803fcc 	andi	r2,r2,255
 4007a38:	10bfffcc 	andi	r2,r2,65535
 4007a3c:	1004923a 	slli	r2,r2,8
 4007a40:	e0ffff17 	ldw	r3,-4(fp)
 4007a44:	18c00017 	ldw	r3,0(r3)
 4007a48:	1885883a 	add	r2,r3,r2
 4007a4c:	1007883a 	mov	r3,r2
 4007a50:	e0bfff17 	ldw	r2,-4(fp)
 4007a54:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 4007a58:	e0bfff17 	ldw	r2,-4(fp)
 4007a5c:	10800017 	ldw	r2,0(r2)
 4007a60:	10a0000c 	andi	r2,r2,32768
 4007a64:	10000626 	beq	r2,zero,4007a80 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 4007a68:	e0bfff17 	ldw	r2,-4(fp)
 4007a6c:	10800017 	ldw	r2,0(r2)
 4007a70:	10bffff4 	orhi	r2,r2,65535
 4007a74:	1007883a 	mov	r3,r2
 4007a78:	e0bfff17 	ldw	r2,-4(fp)
 4007a7c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 4007a80:	0005883a 	mov	r2,zero
}
 4007a84:	e037883a 	mov	sp,fp
 4007a88:	df000017 	ldw	fp,0(sp)
 4007a8c:	dec00104 	addi	sp,sp,4
 4007a90:	f800283a 	ret

04007a94 <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 4007a94:	defffd04 	addi	sp,sp,-12
 4007a98:	df000215 	stw	fp,8(sp)
 4007a9c:	df000204 	addi	fp,sp,8
 4007aa0:	e13ffe15 	stw	r4,-8(fp)
 4007aa4:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007aa8:	e0bffe17 	ldw	r2,-8(fp)
 4007aac:	10800a17 	ldw	r2,40(r2)
 4007ab0:	1007883a 	mov	r3,r2
 4007ab4:	00800d04 	movi	r2,52
 4007ab8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 4007abc:	e0bffe17 	ldw	r2,-8(fp)
 4007ac0:	10800a17 	ldw	r2,40(r2)
 4007ac4:	10800044 	addi	r2,r2,1
 4007ac8:	10800023 	ldbuio	r2,0(r2)
 4007acc:	10803fcc 	andi	r2,r2,255
 4007ad0:	10ffffcc 	andi	r3,r2,65535
 4007ad4:	e0bfff17 	ldw	r2,-4(fp)
 4007ad8:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007adc:	e0bffe17 	ldw	r2,-8(fp)
 4007ae0:	10800a17 	ldw	r2,40(r2)
 4007ae4:	1007883a 	mov	r3,r2
 4007ae8:	00800d44 	movi	r2,53
 4007aec:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 4007af0:	e0bffe17 	ldw	r2,-8(fp)
 4007af4:	10800a17 	ldw	r2,40(r2)
 4007af8:	10800044 	addi	r2,r2,1
 4007afc:	10800023 	ldbuio	r2,0(r2)
 4007b00:	10803fcc 	andi	r2,r2,255
 4007b04:	10bfffcc 	andi	r2,r2,65535
 4007b08:	1004923a 	slli	r2,r2,8
 4007b0c:	e0ffff17 	ldw	r3,-4(fp)
 4007b10:	18c00017 	ldw	r3,0(r3)
 4007b14:	1885883a 	add	r2,r3,r2
 4007b18:	1007883a 	mov	r3,r2
 4007b1c:	e0bfff17 	ldw	r2,-4(fp)
 4007b20:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 4007b24:	e0bfff17 	ldw	r2,-4(fp)
 4007b28:	10800017 	ldw	r2,0(r2)
 4007b2c:	10a0000c 	andi	r2,r2,32768
 4007b30:	10000626 	beq	r2,zero,4007b4c <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 4007b34:	e0bfff17 	ldw	r2,-4(fp)
 4007b38:	10800017 	ldw	r2,0(r2)
 4007b3c:	10bffff4 	orhi	r2,r2,65535
 4007b40:	1007883a 	mov	r3,r2
 4007b44:	e0bfff17 	ldw	r2,-4(fp)
 4007b48:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 4007b4c:	0005883a 	mov	r2,zero
}
 4007b50:	e037883a 	mov	sp,fp
 4007b54:	df000017 	ldw	fp,0(sp)
 4007b58:	dec00104 	addi	sp,sp,4
 4007b5c:	f800283a 	ret

04007b60 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 4007b60:	defffd04 	addi	sp,sp,-12
 4007b64:	df000215 	stw	fp,8(sp)
 4007b68:	df000204 	addi	fp,sp,8
 4007b6c:	e13ffe15 	stw	r4,-8(fp)
 4007b70:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007b74:	e0bffe17 	ldw	r2,-8(fp)
 4007b78:	10800a17 	ldw	r2,40(r2)
 4007b7c:	1007883a 	mov	r3,r2
 4007b80:	00800d84 	movi	r2,54
 4007b84:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 4007b88:	e0bffe17 	ldw	r2,-8(fp)
 4007b8c:	10800a17 	ldw	r2,40(r2)
 4007b90:	10800044 	addi	r2,r2,1
 4007b94:	10800023 	ldbuio	r2,0(r2)
 4007b98:	10803fcc 	andi	r2,r2,255
 4007b9c:	10ffffcc 	andi	r3,r2,65535
 4007ba0:	e0bfff17 	ldw	r2,-4(fp)
 4007ba4:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 4007ba8:	e0bffe17 	ldw	r2,-8(fp)
 4007bac:	10800a17 	ldw	r2,40(r2)
 4007bb0:	1007883a 	mov	r3,r2
 4007bb4:	00800dc4 	movi	r2,55
 4007bb8:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 4007bbc:	e0bffe17 	ldw	r2,-8(fp)
 4007bc0:	10800a17 	ldw	r2,40(r2)
 4007bc4:	10800044 	addi	r2,r2,1
 4007bc8:	10800023 	ldbuio	r2,0(r2)
 4007bcc:	10803fcc 	andi	r2,r2,255
 4007bd0:	10bfffcc 	andi	r2,r2,65535
 4007bd4:	1004923a 	slli	r2,r2,8
 4007bd8:	e0ffff17 	ldw	r3,-4(fp)
 4007bdc:	18c00017 	ldw	r3,0(r3)
 4007be0:	1885883a 	add	r2,r3,r2
 4007be4:	1007883a 	mov	r3,r2
 4007be8:	e0bfff17 	ldw	r2,-4(fp)
 4007bec:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 4007bf0:	e0bfff17 	ldw	r2,-4(fp)
 4007bf4:	10800017 	ldw	r2,0(r2)
 4007bf8:	10a0000c 	andi	r2,r2,32768
 4007bfc:	10000626 	beq	r2,zero,4007c18 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 4007c00:	e0bfff17 	ldw	r2,-4(fp)
 4007c04:	10800017 	ldw	r2,0(r2)
 4007c08:	10bffff4 	orhi	r2,r2,65535
 4007c0c:	1007883a 	mov	r3,r2
 4007c10:	e0bfff17 	ldw	r2,-4(fp)
 4007c14:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 4007c18:	0005883a 	mov	r2,zero
}
 4007c1c:	e037883a 	mov	sp,fp
 4007c20:	df000017 	ldw	fp,0(sp)
 4007c24:	dec00104 	addi	sp,sp,4
 4007c28:	f800283a 	ret

04007c2c <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 4007c2c:	defffc04 	addi	sp,sp,-16
 4007c30:	dfc00315 	stw	ra,12(sp)
 4007c34:	df000215 	stw	fp,8(sp)
 4007c38:	df000204 	addi	fp,sp,8
 4007c3c:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 4007c40:	d1600904 	addi	r5,gp,-32732
 4007c44:	e13fff17 	ldw	r4,-4(fp)
 4007c48:	4008f580 	call	4008f58 <alt_find_dev>
 4007c4c:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 4007c50:	e0bffe17 	ldw	r2,-8(fp)
}
 4007c54:	e037883a 	mov	sp,fp
 4007c58:	dfc00117 	ldw	ra,4(sp)
 4007c5c:	df000017 	ldw	fp,0(sp)
 4007c60:	dec00204 	addi	sp,sp,8
 4007c64:	f800283a 	ret

04007c68 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 4007c68:	defffa04 	addi	sp,sp,-24
 4007c6c:	df000515 	stw	fp,20(sp)
 4007c70:	df000504 	addi	fp,sp,20
 4007c74:	e13ffc15 	stw	r4,-16(fp)
 4007c78:	e17ffd15 	stw	r5,-12(fp)
 4007c7c:	e1bffe15 	stw	r6,-8(fp)
 4007c80:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 4007c84:	e0bffc17 	ldw	r2,-16(fp)
 4007c88:	10800f17 	ldw	r2,60(r2)
 4007c8c:	e0fffe17 	ldw	r3,-8(fp)
 4007c90:	1880042e 	bgeu	r3,r2,4007ca4 <alt_up_pixel_buffer_dma_draw+0x3c>
 4007c94:	e0bffc17 	ldw	r2,-16(fp)
 4007c98:	10801017 	ldw	r2,64(r2)
 4007c9c:	e0ffff17 	ldw	r3,-4(fp)
 4007ca0:	18800236 	bltu	r3,r2,4007cac <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 4007ca4:	00bfffc4 	movi	r2,-1
 4007ca8:	00005006 	br	4007dec <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 4007cac:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4007cb0:	e0bffc17 	ldw	r2,-16(fp)
 4007cb4:	10800d17 	ldw	r2,52(r2)
 4007cb8:	1000151e 	bne	r2,zero,4007d10 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4007cbc:	e0bffc17 	ldw	r2,-16(fp)
 4007cc0:	10c01217 	ldw	r3,72(r2)
 4007cc4:	e0bffe17 	ldw	r2,-8(fp)
 4007cc8:	1886703a 	and	r3,r3,r2
 4007ccc:	e0bffc17 	ldw	r2,-16(fp)
 4007cd0:	10801117 	ldw	r2,68(r2)
 4007cd4:	1884983a 	sll	r2,r3,r2
 4007cd8:	e0fffb17 	ldw	r3,-20(fp)
 4007cdc:	1885883a 	add	r2,r3,r2
 4007ce0:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 4007ce4:	e0bffc17 	ldw	r2,-16(fp)
 4007ce8:	10c01417 	ldw	r3,80(r2)
 4007cec:	e0bfff17 	ldw	r2,-4(fp)
 4007cf0:	1886703a 	and	r3,r3,r2
 4007cf4:	e0bffc17 	ldw	r2,-16(fp)
 4007cf8:	10801317 	ldw	r2,76(r2)
 4007cfc:	1884983a 	sll	r2,r3,r2
 4007d00:	e0fffb17 	ldw	r3,-20(fp)
 4007d04:	1885883a 	add	r2,r3,r2
 4007d08:	e0bffb15 	stw	r2,-20(fp)
 4007d0c:	00001706 	br	4007d6c <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 4007d10:	e0bffc17 	ldw	r2,-16(fp)
 4007d14:	10c01217 	ldw	r3,72(r2)
 4007d18:	e0bffe17 	ldw	r2,-8(fp)
 4007d1c:	1886703a 	and	r3,r3,r2
 4007d20:	e0bffc17 	ldw	r2,-16(fp)
 4007d24:	10801117 	ldw	r2,68(r2)
 4007d28:	1884983a 	sll	r2,r3,r2
 4007d2c:	e0fffb17 	ldw	r3,-20(fp)
 4007d30:	1885883a 	add	r2,r3,r2
 4007d34:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 4007d38:	e0bffc17 	ldw	r2,-16(fp)
 4007d3c:	10c01417 	ldw	r3,80(r2)
 4007d40:	e0bfff17 	ldw	r2,-4(fp)
 4007d44:	1886703a 	and	r3,r3,r2
 4007d48:	e0bffc17 	ldw	r2,-16(fp)
 4007d4c:	10800f17 	ldw	r2,60(r2)
 4007d50:	1887383a 	mul	r3,r3,r2
 4007d54:	e0bffc17 	ldw	r2,-16(fp)
 4007d58:	10801117 	ldw	r2,68(r2)
 4007d5c:	1884983a 	sll	r2,r3,r2
 4007d60:	e0fffb17 	ldw	r3,-20(fp)
 4007d64:	1885883a 	add	r2,r3,r2
 4007d68:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4007d6c:	e0bffc17 	ldw	r2,-16(fp)
 4007d70:	10800e17 	ldw	r2,56(r2)
 4007d74:	10800058 	cmpnei	r2,r2,1
 4007d78:	1000081e 	bne	r2,zero,4007d9c <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4007d7c:	e0bffc17 	ldw	r2,-16(fp)
 4007d80:	10c00c17 	ldw	r3,48(r2)
 4007d84:	e0bffb17 	ldw	r2,-20(fp)
 4007d88:	1885883a 	add	r2,r3,r2
 4007d8c:	1007883a 	mov	r3,r2
 4007d90:	e0bffd17 	ldw	r2,-12(fp)
 4007d94:	18800025 	stbio	r2,0(r3)
 4007d98:	00001306 	br	4007de8 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4007d9c:	e0bffc17 	ldw	r2,-16(fp)
 4007da0:	10800e17 	ldw	r2,56(r2)
 4007da4:	10800098 	cmpnei	r2,r2,2
 4007da8:	1000081e 	bne	r2,zero,4007dcc <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4007dac:	e0bffc17 	ldw	r2,-16(fp)
 4007db0:	10c00c17 	ldw	r3,48(r2)
 4007db4:	e0bffb17 	ldw	r2,-20(fp)
 4007db8:	1885883a 	add	r2,r3,r2
 4007dbc:	1007883a 	mov	r3,r2
 4007dc0:	e0bffd17 	ldw	r2,-12(fp)
 4007dc4:	1880002d 	sthio	r2,0(r3)
 4007dc8:	00000706 	br	4007de8 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 4007dcc:	e0bffc17 	ldw	r2,-16(fp)
 4007dd0:	10c00c17 	ldw	r3,48(r2)
 4007dd4:	e0bffb17 	ldw	r2,-20(fp)
 4007dd8:	1885883a 	add	r2,r3,r2
 4007ddc:	1007883a 	mov	r3,r2
 4007de0:	e0bffd17 	ldw	r2,-12(fp)
 4007de4:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 4007de8:	0005883a 	mov	r2,zero
}
 4007dec:	e037883a 	mov	sp,fp
 4007df0:	df000017 	ldw	fp,0(sp)
 4007df4:	dec00104 	addi	sp,sp,4
 4007df8:	f800283a 	ret

04007dfc <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 4007dfc:	defffd04 	addi	sp,sp,-12
 4007e00:	df000215 	stw	fp,8(sp)
 4007e04:	df000204 	addi	fp,sp,8
 4007e08:	e13ffe15 	stw	r4,-8(fp)
 4007e0c:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 4007e10:	e0bffe17 	ldw	r2,-8(fp)
 4007e14:	10800a17 	ldw	r2,40(r2)
 4007e18:	10800104 	addi	r2,r2,4
 4007e1c:	1007883a 	mov	r3,r2
 4007e20:	e0bfff17 	ldw	r2,-4(fp)
 4007e24:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 4007e28:	e0bffe17 	ldw	r2,-8(fp)
 4007e2c:	10800a17 	ldw	r2,40(r2)
 4007e30:	10800104 	addi	r2,r2,4
 4007e34:	10800037 	ldwio	r2,0(r2)
 4007e38:	1007883a 	mov	r3,r2
 4007e3c:	e0bffe17 	ldw	r2,-8(fp)
 4007e40:	10c00c15 	stw	r3,48(r2)
	return 0;
 4007e44:	0005883a 	mov	r2,zero
}
 4007e48:	e037883a 	mov	sp,fp
 4007e4c:	df000017 	ldw	fp,0(sp)
 4007e50:	dec00104 	addi	sp,sp,4
 4007e54:	f800283a 	ret

04007e58 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 4007e58:	defffd04 	addi	sp,sp,-12
 4007e5c:	df000215 	stw	fp,8(sp)
 4007e60:	dc000115 	stw	r16,4(sp)
 4007e64:	df000204 	addi	fp,sp,8
 4007e68:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 4007e6c:	e0bffe17 	ldw	r2,-8(fp)
 4007e70:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 4007e74:	e0bffe17 	ldw	r2,-8(fp)
 4007e78:	10800a17 	ldw	r2,40(r2)
 4007e7c:	1007883a 	mov	r3,r2
 4007e80:	00800044 	movi	r2,1
 4007e84:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 4007e88:	e0bffe17 	ldw	r2,-8(fp)
 4007e8c:	10c00b17 	ldw	r3,44(r2)
 4007e90:	e0bffe17 	ldw	r2,-8(fp)
 4007e94:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 4007e98:	e0bffe17 	ldw	r2,-8(fp)
 4007e9c:	14000b15 	stw	r16,44(r2)
	return 0;
 4007ea0:	0005883a 	mov	r2,zero
}
 4007ea4:	e6ffff04 	addi	sp,fp,-4
 4007ea8:	df000117 	ldw	fp,4(sp)
 4007eac:	dc000017 	ldw	r16,0(sp)
 4007eb0:	dec00204 	addi	sp,sp,8
 4007eb4:	f800283a 	ret

04007eb8 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 4007eb8:	defffe04 	addi	sp,sp,-8
 4007ebc:	df000115 	stw	fp,4(sp)
 4007ec0:	df000104 	addi	fp,sp,4
 4007ec4:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 4007ec8:	e0bfff17 	ldw	r2,-4(fp)
 4007ecc:	10800a17 	ldw	r2,40(r2)
 4007ed0:	10800304 	addi	r2,r2,12
 4007ed4:	10800037 	ldwio	r2,0(r2)
 4007ed8:	1080004c 	andi	r2,r2,1
}
 4007edc:	e037883a 	mov	sp,fp
 4007ee0:	df000017 	ldw	fp,0(sp)
 4007ee4:	dec00104 	addi	sp,sp,4
 4007ee8:	f800283a 	ret

04007eec <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 4007eec:	defff704 	addi	sp,sp,-36
 4007ef0:	df000815 	stw	fp,32(sp)
 4007ef4:	dd400715 	stw	r21,28(sp)
 4007ef8:	dd000615 	stw	r20,24(sp)
 4007efc:	dcc00515 	stw	r19,20(sp)
 4007f00:	dc800415 	stw	r18,16(sp)
 4007f04:	dc400315 	stw	r17,12(sp)
 4007f08:	dc000215 	stw	r16,8(sp)
 4007f0c:	df000804 	addi	fp,sp,32
 4007f10:	e13ff815 	stw	r4,-32(fp)
 4007f14:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4007f18:	e0bff917 	ldw	r2,-28(fp)
 4007f1c:	10800058 	cmpnei	r2,r2,1
 4007f20:	1000031e 	bne	r2,zero,4007f30 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 4007f24:	e0bff817 	ldw	r2,-32(fp)
 4007f28:	14400c17 	ldw	r17,48(r2)
 4007f2c:	00000206 	br	4007f38 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 4007f30:	e0bff817 	ldw	r2,-32(fp)
 4007f34:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 4007f38:	e0bff817 	ldw	r2,-32(fp)
 4007f3c:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4007f40:	e0bff817 	ldw	r2,-32(fp)
 4007f44:	10800e17 	ldw	r2,56(r2)
 4007f48:	10800098 	cmpnei	r2,r2,2
 4007f4c:	1000031e 	bne	r2,zero,4007f5c <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 4007f50:	8405883a 	add	r2,r16,r16
 4007f54:	1021883a 	mov	r16,r2
 4007f58:	00000306 	br	4007f68 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 4007f5c:	8405883a 	add	r2,r16,r16
 4007f60:	1085883a 	add	r2,r2,r2
 4007f64:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 4007f68:	e0bff817 	ldw	r2,-32(fp)
 4007f6c:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4007f70:	e0bff817 	ldw	r2,-32(fp)
 4007f74:	10800d17 	ldw	r2,52(r2)
 4007f78:	1000111e 	bne	r2,zero,4007fc0 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4007f7c:	e0bff817 	ldw	r2,-32(fp)
 4007f80:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 4007f84:	0029883a 	mov	r20,zero
 4007f88:	00000b06 	br	4007fb8 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 4007f8c:	0027883a 	mov	r19,zero
 4007f90:	00000406 	br	4007fa4 <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 4007f94:	9c45883a 	add	r2,r19,r17
 4007f98:	0007883a 	mov	r3,zero
 4007f9c:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 4007fa0:	9cc00104 	addi	r19,r19,4
 4007fa4:	9c3ffb36 	bltu	r19,r16,4007f94 <__ram_exceptions_end+0xfbfc7d4c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 4007fa8:	00800044 	movi	r2,1
 4007fac:	1544983a 	sll	r2,r2,r21
 4007fb0:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 4007fb4:	a5000044 	addi	r20,r20,1
 4007fb8:	a4bff436 	bltu	r20,r18,4007f8c <__ram_exceptions_end+0xfbfc7d44>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4007fbc:	00000a06 	br	4007fe8 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 4007fc0:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 4007fc4:	0021883a 	mov	r16,zero
 4007fc8:	00000506 	br	4007fe0 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 4007fcc:	8005883a 	mov	r2,r16
 4007fd0:	1445883a 	add	r2,r2,r17
 4007fd4:	0007883a 	mov	r3,zero
 4007fd8:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 4007fdc:	84000104 	addi	r16,r16,4
 4007fe0:	8005883a 	mov	r2,r16
 4007fe4:	14bff936 	bltu	r2,r18,4007fcc <__ram_exceptions_end+0xfbfc7d84>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 4007fe8:	0001883a 	nop
 4007fec:	e6fffa04 	addi	sp,fp,-24
 4007ff0:	df000617 	ldw	fp,24(sp)
 4007ff4:	dd400517 	ldw	r21,20(sp)
 4007ff8:	dd000417 	ldw	r20,16(sp)
 4007ffc:	dcc00317 	ldw	r19,12(sp)
 4008000:	dc800217 	ldw	r18,8(sp)
 4008004:	dc400117 	ldw	r17,4(sp)
 4008008:	dc000017 	ldw	r16,0(sp)
 400800c:	dec00704 	addi	sp,sp,28
 4008010:	f800283a 	ret

04008014 <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 4008014:	defff304 	addi	sp,sp,-52
 4008018:	df000c15 	stw	fp,48(sp)
 400801c:	ddc00b15 	stw	r23,44(sp)
 4008020:	dd800a15 	stw	r22,40(sp)
 4008024:	dd400915 	stw	r21,36(sp)
 4008028:	dd000815 	stw	r20,32(sp)
 400802c:	dcc00715 	stw	r19,28(sp)
 4008030:	dc800615 	stw	r18,24(sp)
 4008034:	dc400515 	stw	r17,20(sp)
 4008038:	dc000415 	stw	r16,16(sp)
 400803c:	df000c04 	addi	fp,sp,48
 4008040:	e13ff415 	stw	r4,-48(fp)
 4008044:	e17ff515 	stw	r5,-44(fp)
 4008048:	e1bff615 	stw	r6,-40(fp)
 400804c:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4008050:	e0bff417 	ldw	r2,-48(fp)
 4008054:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4008058:	e0bff417 	ldw	r2,-48(fp)
 400805c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4008060:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 4008064:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 4008068:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 400806c:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 4008070:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4008074:	a580032e 	bgeu	r20,r22,4008084 <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 4008078:	b02b883a 	mov	r21,r22
		l_x = r_x;
 400807c:	a02d883a 	mov	r22,r20
		r_x = temp;
 4008080:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 4008084:	9c40032e 	bgeu	r19,r17,4008094 <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 4008088:	882b883a 	mov	r21,r17
		t_y = b_y;
 400808c:	9823883a 	mov	r17,r19
		b_y = temp;
 4008090:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 4008094:	b480892e 	bgeu	r22,r18,40082bc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 4008098:	8c00882e 	bgeu	r17,r16,40082bc <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 400809c:	a4800136 	bltu	r20,r18,40080a4 <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 40080a0:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 40080a4:	9c000136 	bltu	r19,r16,40080ac <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 40080a8:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 40080ac:	e0800317 	ldw	r2,12(fp)
 40080b0:	10800058 	cmpnei	r2,r2,1
 40080b4:	1000031e 	bne	r2,zero,40080c4 <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 40080b8:	e0bff417 	ldw	r2,-48(fp)
 40080bc:	14000c17 	ldw	r16,48(r2)
 40080c0:	00000206 	br	40080cc <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 40080c4:	e0bff417 	ldw	r2,-48(fp)
 40080c8:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 40080cc:	e0bff417 	ldw	r2,-48(fp)
 40080d0:	10800d17 	ldw	r2,52(r2)
 40080d4:	10003c1e 	bne	r2,zero,40081c8 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40080d8:	e0bff417 	ldw	r2,-48(fp)
 40080dc:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 40080e0:	8d44983a 	sll	r2,r17,r21
 40080e4:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40080e8:	e0bff417 	ldw	r2,-48(fp)
 40080ec:	10800e17 	ldw	r2,56(r2)
 40080f0:	10800058 	cmpnei	r2,r2,1
 40080f4:	10000f1e 	bne	r2,zero,4008134 <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 40080f8:	8825883a 	mov	r18,r17
 40080fc:	00000b06 	br	400812c <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 4008100:	b023883a 	mov	r17,r22
 4008104:	00000406 	br	4008118 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 4008108:	8c05883a 	add	r2,r17,r16
 400810c:	b807883a 	mov	r3,r23
 4008110:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4008114:	8c400044 	addi	r17,r17,1
 4008118:	a47ffb2e 	bgeu	r20,r17,4008108 <__ram_exceptions_end+0xfbfc7ec0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 400811c:	00800044 	movi	r2,1
 4008120:	1544983a 	sll	r2,r2,r21
 4008124:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4008128:	94800044 	addi	r18,r18,1
 400812c:	9cbff42e 	bgeu	r19,r18,4008100 <__ram_exceptions_end+0xfbfc7eb8>
 4008130:	00006306 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4008134:	e0bff417 	ldw	r2,-48(fp)
 4008138:	10800e17 	ldw	r2,56(r2)
 400813c:	10800098 	cmpnei	r2,r2,2
 4008140:	1000101e 	bne	r2,zero,4008184 <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 4008144:	8825883a 	mov	r18,r17
 4008148:	00000c06 	br	400817c <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 400814c:	b023883a 	mov	r17,r22
 4008150:	00000506 	br	4008168 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4008154:	8c45883a 	add	r2,r17,r17
 4008158:	1405883a 	add	r2,r2,r16
 400815c:	b807883a 	mov	r3,r23
 4008160:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4008164:	8c400044 	addi	r17,r17,1
 4008168:	a47ffa2e 	bgeu	r20,r17,4008154 <__ram_exceptions_end+0xfbfc7f0c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 400816c:	00800044 	movi	r2,1
 4008170:	1544983a 	sll	r2,r2,r21
 4008174:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4008178:	94800044 	addi	r18,r18,1
 400817c:	9cbff32e 	bgeu	r19,r18,400814c <__ram_exceptions_end+0xfbfc7f04>
 4008180:	00004f06 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4008184:	8825883a 	mov	r18,r17
 4008188:	00000d06 	br	40081c0 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 400818c:	b023883a 	mov	r17,r22
 4008190:	00000606 	br	40081ac <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4008194:	8c45883a 	add	r2,r17,r17
 4008198:	1085883a 	add	r2,r2,r2
 400819c:	1405883a 	add	r2,r2,r16
 40081a0:	b807883a 	mov	r3,r23
 40081a4:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40081a8:	8c400044 	addi	r17,r17,1
 40081ac:	a47ff92e 	bgeu	r20,r17,4008194 <__ram_exceptions_end+0xfbfc7f4c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 40081b0:	00800044 	movi	r2,1
 40081b4:	1544983a 	sll	r2,r2,r21
 40081b8:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 40081bc:	94800044 	addi	r18,r18,1
 40081c0:	9cbff22e 	bgeu	r19,r18,400818c <__ram_exceptions_end+0xfbfc7f44>
 40081c4:	00003e06 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40081c8:	e0bff417 	ldw	r2,-48(fp)
 40081cc:	10800e17 	ldw	r2,56(r2)
 40081d0:	10800058 	cmpnei	r2,r2,1
 40081d4:	10000f1e 	bne	r2,zero,4008214 <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 40081d8:	8c85383a 	mul	r2,r17,r18
 40081dc:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40081e0:	882b883a 	mov	r21,r17
 40081e4:	00000906 	br	400820c <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 40081e8:	b023883a 	mov	r17,r22
 40081ec:	00000406 	br	4008200 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 40081f0:	8c05883a 	add	r2,r17,r16
 40081f4:	b807883a 	mov	r3,r23
 40081f8:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40081fc:	8c400044 	addi	r17,r17,1
 4008200:	a47ffb2e 	bgeu	r20,r17,40081f0 <__ram_exceptions_end+0xfbfc7fa8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 4008204:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4008208:	ad400044 	addi	r21,r21,1
 400820c:	9d7ff62e 	bgeu	r19,r21,40081e8 <__ram_exceptions_end+0xfbfc7fa0>
 4008210:	00002b06 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4008214:	e0bff417 	ldw	r2,-48(fp)
 4008218:	10800e17 	ldw	r2,56(r2)
 400821c:	10800098 	cmpnei	r2,r2,2
 4008220:	1000121e 	bne	r2,zero,400826c <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 4008224:	9485883a 	add	r2,r18,r18
 4008228:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 400822c:	8c85383a 	mul	r2,r17,r18
 4008230:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4008234:	882b883a 	mov	r21,r17
 4008238:	00000a06 	br	4008264 <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 400823c:	b023883a 	mov	r17,r22
 4008240:	00000506 	br	4008258 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 4008244:	8c45883a 	add	r2,r17,r17
 4008248:	1405883a 	add	r2,r2,r16
 400824c:	b807883a 	mov	r3,r23
 4008250:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 4008254:	8c400044 	addi	r17,r17,1
 4008258:	a47ffa2e 	bgeu	r20,r17,4008244 <__ram_exceptions_end+0xfbfc7ffc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 400825c:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4008260:	ad400044 	addi	r21,r21,1
 4008264:	9d7ff52e 	bgeu	r19,r21,400823c <__ram_exceptions_end+0xfbfc7ff4>
 4008268:	00001506 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 400826c:	9485883a 	add	r2,r18,r18
 4008270:	1085883a 	add	r2,r2,r2
 4008274:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 4008278:	8c85383a 	mul	r2,r17,r18
 400827c:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 4008280:	882b883a 	mov	r21,r17
 4008284:	00000b06 	br	40082b4 <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 4008288:	b023883a 	mov	r17,r22
 400828c:	00000606 	br	40082a8 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 4008290:	8c45883a 	add	r2,r17,r17
 4008294:	1085883a 	add	r2,r2,r2
 4008298:	1405883a 	add	r2,r2,r16
 400829c:	b807883a 	mov	r3,r23
 40082a0:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 40082a4:	8c400044 	addi	r17,r17,1
 40082a8:	a47ff92e 	bgeu	r20,r17,4008290 <__ram_exceptions_end+0xfbfc8048>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 40082ac:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40082b0:	ad400044 	addi	r21,r21,1
 40082b4:	9d7ff42e 	bgeu	r19,r21,4008288 <__ram_exceptions_end+0xfbfc8040>
 40082b8:	00000106 	br	40082c0 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 40082bc:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 40082c0:	e6fff804 	addi	sp,fp,-32
 40082c4:	df000817 	ldw	fp,32(sp)
 40082c8:	ddc00717 	ldw	r23,28(sp)
 40082cc:	dd800617 	ldw	r22,24(sp)
 40082d0:	dd400517 	ldw	r21,20(sp)
 40082d4:	dd000417 	ldw	r20,16(sp)
 40082d8:	dcc00317 	ldw	r19,12(sp)
 40082dc:	dc800217 	ldw	r18,8(sp)
 40082e0:	dc400117 	ldw	r17,4(sp)
 40082e4:	dc000017 	ldw	r16,0(sp)
 40082e8:	dec00904 	addi	sp,sp,36
 40082ec:	f800283a 	ret

040082f0 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 40082f0:	defff404 	addi	sp,sp,-48
 40082f4:	df000b15 	stw	fp,44(sp)
 40082f8:	dd800a15 	stw	r22,40(sp)
 40082fc:	dd400915 	stw	r21,36(sp)
 4008300:	dd000815 	stw	r20,32(sp)
 4008304:	dcc00715 	stw	r19,28(sp)
 4008308:	dc800615 	stw	r18,24(sp)
 400830c:	dc400515 	stw	r17,20(sp)
 4008310:	dc000415 	stw	r16,16(sp)
 4008314:	df000b04 	addi	fp,sp,44
 4008318:	e13ff515 	stw	r4,-44(fp)
 400831c:	e17ff615 	stw	r5,-40(fp)
 4008320:	e1bff715 	stw	r6,-36(fp)
 4008324:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4008328:	e0bff517 	ldw	r2,-44(fp)
 400832c:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4008330:	e0bff517 	ldw	r2,-44(fp)
 4008334:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 4008338:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 400833c:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 4008340:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 4008344:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 4008348:	9c40032e 	bgeu	r19,r17,4008358 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 400834c:	882d883a 	mov	r22,r17
		l_x = r_x;
 4008350:	9823883a 	mov	r17,r19
		r_x = temp;
 4008354:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 4008358:	8c805d2e 	bgeu	r17,r18,40084d0 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 400835c:	a4005c2e 	bgeu	r20,r16,40084d0 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 4008360:	9c800136 	bltu	r19,r18,4008368 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 4008364:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4008368:	e0800217 	ldw	r2,8(fp)
 400836c:	10800058 	cmpnei	r2,r2,1
 4008370:	1000031e 	bne	r2,zero,4008380 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4008374:	e0bff517 	ldw	r2,-44(fp)
 4008378:	14000c17 	ldw	r16,48(r2)
 400837c:	00000206 	br	4008388 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4008380:	e0bff517 	ldw	r2,-44(fp)
 4008384:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4008388:	e0bff517 	ldw	r2,-44(fp)
 400838c:	10800d17 	ldw	r2,52(r2)
 4008390:	1000231e 	bne	r2,zero,4008420 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 4008394:	e0bff517 	ldw	r2,-44(fp)
 4008398:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 400839c:	a484983a 	sll	r2,r20,r18
 40083a0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40083a4:	e0bff517 	ldw	r2,-44(fp)
 40083a8:	10800e17 	ldw	r2,56(r2)
 40083ac:	10800058 	cmpnei	r2,r2,1
 40083b0:	1000071e 	bne	r2,zero,40083d0 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 40083b4:	00000406 	br	40083c8 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 40083b8:	8c05883a 	add	r2,r17,r16
 40083bc:	a807883a 	mov	r3,r21
 40083c0:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 40083c4:	8c400044 	addi	r17,r17,1
 40083c8:	9c7ffb2e 	bgeu	r19,r17,40083b8 <__ram_exceptions_end+0xfbfc8170>
 40083cc:	00004106 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40083d0:	e0bff517 	ldw	r2,-44(fp)
 40083d4:	10800e17 	ldw	r2,56(r2)
 40083d8:	10800098 	cmpnei	r2,r2,2
 40083dc:	10000e1e 	bne	r2,zero,4008418 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 40083e0:	00000506 	br	40083f8 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 40083e4:	8c45883a 	add	r2,r17,r17
 40083e8:	1405883a 	add	r2,r2,r16
 40083ec:	a807883a 	mov	r3,r21
 40083f0:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 40083f4:	8c400044 	addi	r17,r17,1
 40083f8:	9c7ffa2e 	bgeu	r19,r17,40083e4 <__ram_exceptions_end+0xfbfc819c>
 40083fc:	00003506 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 4008400:	8c45883a 	add	r2,r17,r17
 4008404:	1085883a 	add	r2,r2,r2
 4008408:	1405883a 	add	r2,r2,r16
 400840c:	a807883a 	mov	r3,r21
 4008410:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 4008414:	8c400044 	addi	r17,r17,1
 4008418:	9c7ff92e 	bgeu	r19,r17,4008400 <__ram_exceptions_end+0xfbfc81b8>
 400841c:	00002d06 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4008420:	e0bff517 	ldw	r2,-44(fp)
 4008424:	10800e17 	ldw	r2,56(r2)
 4008428:	10800058 	cmpnei	r2,r2,1
 400842c:	1000091e 	bne	r2,zero,4008454 <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 4008430:	a485383a 	mul	r2,r20,r18
 4008434:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4008438:	00000406 	br	400844c <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 400843c:	8c05883a 	add	r2,r17,r16
 4008440:	a807883a 	mov	r3,r21
 4008444:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4008448:	8c400044 	addi	r17,r17,1
 400844c:	9c7ffb2e 	bgeu	r19,r17,400843c <__ram_exceptions_end+0xfbfc81f4>
 4008450:	00002006 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 4008454:	e0bff517 	ldw	r2,-44(fp)
 4008458:	10800e17 	ldw	r2,56(r2)
 400845c:	10800098 	cmpnei	r2,r2,2
 4008460:	10000c1e 	bne	r2,zero,4008494 <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 4008464:	9485883a 	add	r2,r18,r18
 4008468:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 400846c:	a485383a 	mul	r2,r20,r18
 4008470:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 4008474:	00000506 	br	400848c <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 4008478:	8c45883a 	add	r2,r17,r17
 400847c:	1405883a 	add	r2,r2,r16
 4008480:	a807883a 	mov	r3,r21
 4008484:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 4008488:	8c400044 	addi	r17,r17,1
 400848c:	9c7ffa2e 	bgeu	r19,r17,4008478 <__ram_exceptions_end+0xfbfc8230>
 4008490:	00001006 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 4008494:	9485883a 	add	r2,r18,r18
 4008498:	1085883a 	add	r2,r2,r2
 400849c:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 40084a0:	a485383a 	mul	r2,r20,r18
 40084a4:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 40084a8:	00000606 	br	40084c4 <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 40084ac:	8c45883a 	add	r2,r17,r17
 40084b0:	1085883a 	add	r2,r2,r2
 40084b4:	1405883a 	add	r2,r2,r16
 40084b8:	a807883a 	mov	r3,r21
 40084bc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 40084c0:	8c400044 	addi	r17,r17,1
 40084c4:	9c7ff92e 	bgeu	r19,r17,40084ac <__ram_exceptions_end+0xfbfc8264>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 40084c8:	84a1883a 	add	r16,r16,r18
 40084cc:	00000106 	br	40084d4 <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 40084d0:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 40084d4:	e6fff904 	addi	sp,fp,-28
 40084d8:	df000717 	ldw	fp,28(sp)
 40084dc:	dd800617 	ldw	r22,24(sp)
 40084e0:	dd400517 	ldw	r21,20(sp)
 40084e4:	dd000417 	ldw	r20,16(sp)
 40084e8:	dcc00317 	ldw	r19,12(sp)
 40084ec:	dc800217 	ldw	r18,8(sp)
 40084f0:	dc400117 	ldw	r17,4(sp)
 40084f4:	dc000017 	ldw	r16,0(sp)
 40084f8:	dec00804 	addi	sp,sp,32
 40084fc:	f800283a 	ret

04008500 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 4008500:	defff404 	addi	sp,sp,-48
 4008504:	df000b15 	stw	fp,44(sp)
 4008508:	dd800a15 	stw	r22,40(sp)
 400850c:	dd400915 	stw	r21,36(sp)
 4008510:	dd000815 	stw	r20,32(sp)
 4008514:	dcc00715 	stw	r19,28(sp)
 4008518:	dc800615 	stw	r18,24(sp)
 400851c:	dc400515 	stw	r17,20(sp)
 4008520:	dc000415 	stw	r16,16(sp)
 4008524:	df000b04 	addi	fp,sp,44
 4008528:	e13ff515 	stw	r4,-44(fp)
 400852c:	e17ff615 	stw	r5,-40(fp)
 4008530:	e1bff715 	stw	r6,-36(fp)
 4008534:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 4008538:	e0bff517 	ldw	r2,-44(fp)
 400853c:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 4008540:	e0bff517 	ldw	r2,-44(fp)
 4008544:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 4008548:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 400854c:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 4008550:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 4008554:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 4008558:	9d00032e 	bgeu	r19,r20,4008568 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 400855c:	a02b883a 	mov	r21,r20
		t_y = b_y;
 4008560:	9829883a 	mov	r20,r19
		b_y = temp;
 4008564:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 4008568:	94406c2e 	bgeu	r18,r17,400871c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 400856c:	a4006b2e 	bgeu	r20,r16,400871c <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 4008570:	9c000136 	bltu	r19,r16,4008578 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 4008574:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 4008578:	e0800217 	ldw	r2,8(fp)
 400857c:	10800058 	cmpnei	r2,r2,1
 4008580:	1000031e 	bne	r2,zero,4008590 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 4008584:	e0bff517 	ldw	r2,-44(fp)
 4008588:	14000c17 	ldw	r16,48(r2)
 400858c:	00000206 	br	4008598 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 4008590:	e0bff517 	ldw	r2,-44(fp)
 4008594:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 4008598:	e0bff517 	ldw	r2,-44(fp)
 400859c:	10800d17 	ldw	r2,52(r2)
 40085a0:	1000301e 	bne	r2,zero,4008664 <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 40085a4:	e0bff517 	ldw	r2,-44(fp)
 40085a8:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 40085ac:	a544983a 	sll	r2,r20,r21
 40085b0:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 40085b4:	e0bff517 	ldw	r2,-44(fp)
 40085b8:	10800e17 	ldw	r2,56(r2)
 40085bc:	10800058 	cmpnei	r2,r2,1
 40085c0:	10000b1e 	bne	r2,zero,40085f0 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 40085c4:	a023883a 	mov	r17,r20
 40085c8:	00000706 	br	40085e8 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 40085cc:	9405883a 	add	r2,r18,r16
 40085d0:	b007883a 	mov	r3,r22
 40085d4:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 40085d8:	00800044 	movi	r2,1
 40085dc:	1544983a 	sll	r2,r2,r21
 40085e0:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 40085e4:	8c400044 	addi	r17,r17,1
 40085e8:	9c7ff82e 	bgeu	r19,r17,40085cc <__ram_exceptions_end+0xfbfc8384>
 40085ec:	00004c06 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 40085f0:	e0bff517 	ldw	r2,-44(fp)
 40085f4:	10800e17 	ldw	r2,56(r2)
 40085f8:	10800098 	cmpnei	r2,r2,2
 40085fc:	10000c1e 	bne	r2,zero,4008630 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 4008600:	a023883a 	mov	r17,r20
 4008604:	00000806 	br	4008628 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 4008608:	9485883a 	add	r2,r18,r18
 400860c:	1405883a 	add	r2,r2,r16
 4008610:	b007883a 	mov	r3,r22
 4008614:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 4008618:	00800044 	movi	r2,1
 400861c:	1544983a 	sll	r2,r2,r21
 4008620:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 4008624:	8c400044 	addi	r17,r17,1
 4008628:	9c7ff72e 	bgeu	r19,r17,4008608 <__ram_exceptions_end+0xfbfc83c0>
 400862c:	00003c06 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4008630:	a023883a 	mov	r17,r20
 4008634:	00000906 	br	400865c <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 4008638:	9485883a 	add	r2,r18,r18
 400863c:	1085883a 	add	r2,r2,r2
 4008640:	1405883a 	add	r2,r2,r16
 4008644:	b007883a 	mov	r3,r22
 4008648:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 400864c:	00800044 	movi	r2,1
 4008650:	1544983a 	sll	r2,r2,r21
 4008654:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 4008658:	8c400044 	addi	r17,r17,1
 400865c:	9c7ff62e 	bgeu	r19,r17,4008638 <__ram_exceptions_end+0xfbfc83f0>
 4008660:	00002f06 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 4008664:	e0bff517 	ldw	r2,-44(fp)
 4008668:	10800e17 	ldw	r2,56(r2)
 400866c:	10800058 	cmpnei	r2,r2,1
 4008670:	10000a1e 	bne	r2,zero,400869c <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 4008674:	a445383a 	mul	r2,r20,r17
 4008678:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 400867c:	00000506 	br	4008694 <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 4008680:	9405883a 	add	r2,r18,r16
 4008684:	b007883a 	mov	r3,r22
 4008688:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 400868c:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4008690:	a5000044 	addi	r20,r20,1
 4008694:	9d3ffa2e 	bgeu	r19,r20,4008680 <__ram_exceptions_end+0xfbfc8438>
 4008698:	00002106 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 400869c:	e0bff517 	ldw	r2,-44(fp)
 40086a0:	10800e17 	ldw	r2,56(r2)
 40086a4:	10800098 	cmpnei	r2,r2,2
 40086a8:	10000d1e 	bne	r2,zero,40086e0 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 40086ac:	8c45883a 	add	r2,r17,r17
 40086b0:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 40086b4:	a445383a 	mul	r2,r20,r17
 40086b8:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40086bc:	00000606 	br	40086d8 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 40086c0:	9485883a 	add	r2,r18,r18
 40086c4:	1405883a 	add	r2,r2,r16
 40086c8:	b007883a 	mov	r3,r22
 40086cc:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 40086d0:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 40086d4:	a5000044 	addi	r20,r20,1
 40086d8:	9d3ff92e 	bgeu	r19,r20,40086c0 <__ram_exceptions_end+0xfbfc8478>
 40086dc:	00001006 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 40086e0:	8c45883a 	add	r2,r17,r17
 40086e4:	1085883a 	add	r2,r2,r2
 40086e8:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 40086ec:	a445383a 	mul	r2,r20,r17
 40086f0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 40086f4:	00000706 	br	4008714 <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 40086f8:	9485883a 	add	r2,r18,r18
 40086fc:	1085883a 	add	r2,r2,r2
 4008700:	1405883a 	add	r2,r2,r16
 4008704:	b007883a 	mov	r3,r22
 4008708:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 400870c:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 4008710:	a5000044 	addi	r20,r20,1
 4008714:	9d3ff82e 	bgeu	r19,r20,40086f8 <__ram_exceptions_end+0xfbfc84b0>
 4008718:	00000106 	br	4008720 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 400871c:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 4008720:	e6fff904 	addi	sp,fp,-28
 4008724:	df000717 	ldw	fp,28(sp)
 4008728:	dd800617 	ldw	r22,24(sp)
 400872c:	dd400517 	ldw	r21,20(sp)
 4008730:	dd000417 	ldw	r20,16(sp)
 4008734:	dcc00317 	ldw	r19,12(sp)
 4008738:	dc800217 	ldw	r18,8(sp)
 400873c:	dc400117 	ldw	r17,4(sp)
 4008740:	dc000017 	ldw	r16,0(sp)
 4008744:	dec00804 	addi	sp,sp,32
 4008748:	f800283a 	ret

0400874c <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 400874c:	defff804 	addi	sp,sp,-32
 4008750:	dfc00715 	stw	ra,28(sp)
 4008754:	df000615 	stw	fp,24(sp)
 4008758:	df000604 	addi	fp,sp,24
 400875c:	e13ffc15 	stw	r4,-16(fp)
 4008760:	e17ffd15 	stw	r5,-12(fp)
 4008764:	e1bffe15 	stw	r6,-8(fp)
 4008768:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 400876c:	e0800417 	ldw	r2,16(fp)
 4008770:	d8800115 	stw	r2,4(sp)
 4008774:	e0800317 	ldw	r2,12(fp)
 4008778:	d8800015 	stw	r2,0(sp)
 400877c:	e1fffe17 	ldw	r7,-8(fp)
 4008780:	e1bfff17 	ldw	r6,-4(fp)
 4008784:	e17ffd17 	ldw	r5,-12(fp)
 4008788:	e13ffc17 	ldw	r4,-16(fp)
 400878c:	40082f00 	call	40082f0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 4008790:	e0800417 	ldw	r2,16(fp)
 4008794:	d8800115 	stw	r2,4(sp)
 4008798:	e0800317 	ldw	r2,12(fp)
 400879c:	d8800015 	stw	r2,0(sp)
 40087a0:	e1c00217 	ldw	r7,8(fp)
 40087a4:	e1bfff17 	ldw	r6,-4(fp)
 40087a8:	e17ffd17 	ldw	r5,-12(fp)
 40087ac:	e13ffc17 	ldw	r4,-16(fp)
 40087b0:	40082f00 	call	40082f0 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 40087b4:	e0800417 	ldw	r2,16(fp)
 40087b8:	d8800115 	stw	r2,4(sp)
 40087bc:	e0800317 	ldw	r2,12(fp)
 40087c0:	d8800015 	stw	r2,0(sp)
 40087c4:	e1c00217 	ldw	r7,8(fp)
 40087c8:	e1bffe17 	ldw	r6,-8(fp)
 40087cc:	e17ffd17 	ldw	r5,-12(fp)
 40087d0:	e13ffc17 	ldw	r4,-16(fp)
 40087d4:	40085000 	call	4008500 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 40087d8:	e0800417 	ldw	r2,16(fp)
 40087dc:	d8800115 	stw	r2,4(sp)
 40087e0:	e0800317 	ldw	r2,12(fp)
 40087e4:	d8800015 	stw	r2,0(sp)
 40087e8:	e1c00217 	ldw	r7,8(fp)
 40087ec:	e1bffe17 	ldw	r6,-8(fp)
 40087f0:	e17fff17 	ldw	r5,-4(fp)
 40087f4:	e13ffc17 	ldw	r4,-16(fp)
 40087f8:	40085000 	call	4008500 <alt_up_pixel_buffer_dma_draw_vline>
}
 40087fc:	0001883a 	nop
 4008800:	e037883a 	mov	sp,fp
 4008804:	dfc00117 	ldw	ra,4(sp)
 4008808:	df000017 	ldw	fp,0(sp)
 400880c:	dec00204 	addi	sp,sp,8
 4008810:	f800283a 	ret

04008814 <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 4008814:	deffff04 	addi	sp,sp,-4
 4008818:	df000015 	stw	fp,0(sp)
 400881c:	d839883a 	mov	fp,sp
 4008820:	2005883a 	mov	r2,r4
 4008824:	3007883a 	mov	r3,r6
 4008828:	3809883a 	mov	r4,r7
 400882c:	e1800117 	ldw	r6,4(fp)
 4008830:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 4008834:	3800051e 	bne	r7,zero,400884c <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 4008838:	2909383a 	mul	r4,r5,r4
 400883c:	20c7883a 	add	r3,r4,r3
 4008840:	1885883a 	add	r2,r3,r2
 4008844:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4008848:	00000e06 	br	4008884 <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 400884c:	39c00058 	cmpnei	r7,r7,1
 4008850:	3800061e 	bne	r7,zero,400886c <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 4008854:	2909383a 	mul	r4,r5,r4
 4008858:	20c7883a 	add	r3,r4,r3
 400885c:	18c7883a 	add	r3,r3,r3
 4008860:	1885883a 	add	r2,r3,r2
 4008864:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 4008868:	00000606 	br	4008884 <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 400886c:	2909383a 	mul	r4,r5,r4
 4008870:	20c7883a 	add	r3,r4,r3
 4008874:	18c7883a 	add	r3,r3,r3
 4008878:	18c7883a 	add	r3,r3,r3
 400887c:	1885883a 	add	r2,r3,r2
 4008880:	11800035 	stwio	r6,0(r2)
}
 4008884:	0001883a 	nop
 4008888:	e037883a 	mov	sp,fp
 400888c:	df000017 	ldw	fp,0(sp)
 4008890:	dec00104 	addi	sp,sp,4
 4008894:	f800283a 	ret

04008898 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 4008898:	deffeb04 	addi	sp,sp,-84
 400889c:	dfc01415 	stw	ra,80(sp)
 40088a0:	df001315 	stw	fp,76(sp)
 40088a4:	ddc01215 	stw	r23,72(sp)
 40088a8:	dd801115 	stw	r22,68(sp)
 40088ac:	dd401015 	stw	r21,64(sp)
 40088b0:	dd000f15 	stw	r20,60(sp)
 40088b4:	dcc00e15 	stw	r19,56(sp)
 40088b8:	dc800d15 	stw	r18,52(sp)
 40088bc:	dc400c15 	stw	r17,48(sp)
 40088c0:	dc000b15 	stw	r16,44(sp)
 40088c4:	df001304 	addi	fp,sp,76
 40088c8:	e13fef15 	stw	r4,-68(fp)
 40088cc:	e17ff015 	stw	r5,-64(fp)
 40088d0:	e1bff115 	stw	r6,-60(fp)
 40088d4:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 40088d8:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 40088dc:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 40088e0:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 40088e4:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 40088e8:	a4c5c83a 	sub	r2,r20,r19
 40088ec:	1000010e 	bge	r2,zero,40088f4 <alt_up_pixel_buffer_dma_draw_line+0x5c>
 40088f0:	0085c83a 	sub	r2,zero,r2
 40088f4:	1007883a 	mov	r3,r2
 40088f8:	9445c83a 	sub	r2,r18,r17
 40088fc:	1000010e 	bge	r2,zero,4008904 <alt_up_pixel_buffer_dma_draw_line+0x6c>
 4008900:	0085c83a 	sub	r2,zero,r2
 4008904:	10c4803a 	cmplt	r2,r2,r3
 4008908:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 400890c:	e0bfef17 	ldw	r2,-68(fp)
 4008910:	10800e17 	ldw	r2,56(r2)
 4008914:	10800060 	cmpeqi	r2,r2,1
 4008918:	1000081e 	bne	r2,zero,400893c <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 400891c:	e0bfef17 	ldw	r2,-68(fp)
 4008920:	10800e17 	ldw	r2,56(r2)
 4008924:	10800098 	cmpnei	r2,r2,2
 4008928:	1000021e 	bne	r2,zero,4008934 <alt_up_pixel_buffer_dma_draw_line+0x9c>
 400892c:	00800044 	movi	r2,1
 4008930:	00000306 	br	4008940 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 4008934:	00800084 	movi	r2,2
 4008938:	00000106 	br	4008940 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 400893c:	0005883a 	mov	r2,zero
 4008940:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 4008944:	e0800317 	ldw	r2,12(fp)
 4008948:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 400894c:	e0bfef17 	ldw	r2,-68(fp)
 4008950:	10800d17 	ldw	r2,52(r2)
 4008954:	1000071e 	bne	r2,zero,4008974 <alt_up_pixel_buffer_dma_draw_line+0xdc>
 4008958:	e0bfef17 	ldw	r2,-68(fp)
 400895c:	10801317 	ldw	r2,76(r2)
 4008960:	e0fff417 	ldw	r3,-48(fp)
 4008964:	10c5c83a 	sub	r2,r2,r3
 4008968:	00c00044 	movi	r3,1
 400896c:	1884983a 	sll	r2,r3,r2
 4008970:	00000206 	br	400897c <alt_up_pixel_buffer_dma_draw_line+0xe4>
 4008974:	e0bfef17 	ldw	r2,-68(fp)
 4008978:	10800f17 	ldw	r2,60(r2)
 400897c:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 4008980:	e0800417 	ldw	r2,16(fp)
 4008984:	10800058 	cmpnei	r2,r2,1
 4008988:	1000031e 	bne	r2,zero,4008998 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 400898c:	e0bfef17 	ldw	r2,-68(fp)
 4008990:	15c00c17 	ldw	r23,48(r2)
 4008994:	00000206 	br	40089a0 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 4008998:	e0bfef17 	ldw	r2,-68(fp)
 400899c:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 40089a0:	e0bff307 	ldb	r2,-52(fp)
 40089a4:	0080060e 	bge	zero,r2,40089c0 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 40089a8:	8821883a 	mov	r16,r17
		x_0 = y_0;
 40089ac:	9823883a 	mov	r17,r19
		y_0 = error;
 40089b0:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 40089b4:	9021883a 	mov	r16,r18
		x_1 = y_1;
 40089b8:	a025883a 	mov	r18,r20
		y_1 = error;
 40089bc:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 40089c0:	9440060e 	bge	r18,r17,40089dc <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 40089c4:	8821883a 	mov	r16,r17
		x_0 = x_1;
 40089c8:	9023883a 	mov	r17,r18
		x_1 = error;
 40089cc:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 40089d0:	9821883a 	mov	r16,r19
		y_0 = y_1;
 40089d4:	a027883a 	mov	r19,r20
		y_1 = error;
 40089d8:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 40089dc:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 40089e0:	a4c5c83a 	sub	r2,r20,r19
 40089e4:	1000010e 	bge	r2,zero,40089ec <alt_up_pixel_buffer_dma_draw_line+0x154>
 40089e8:	0085c83a 	sub	r2,zero,r2
 40089ec:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 40089f0:	a804d7fa 	srli	r2,r21,31
 40089f4:	1545883a 	add	r2,r2,r21
 40089f8:	1005d07a 	srai	r2,r2,1
 40089fc:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 4008a00:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 4008a04:	9d00020e 	bge	r19,r20,4008a10 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 4008a08:	04c00044 	movi	r19,1
 4008a0c:	00000106 	br	4008a14 <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 4008a10:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 4008a14:	e0bff307 	ldb	r2,-52(fp)
 4008a18:	10800058 	cmpnei	r2,r2,1
 4008a1c:	1000211e 	bne	r2,zero,4008aa4 <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 4008a20:	00000f06 	br	4008a60 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 4008a24:	e0bff417 	ldw	r2,-48(fp)
 4008a28:	d8800115 	stw	r2,4(sp)
 4008a2c:	e0bff517 	ldw	r2,-44(fp)
 4008a30:	d8800015 	stw	r2,0(sp)
 4008a34:	880f883a 	mov	r7,r17
 4008a38:	b00d883a 	mov	r6,r22
 4008a3c:	e17ff617 	ldw	r5,-40(fp)
 4008a40:	b809883a 	mov	r4,r23
 4008a44:	40088140 	call	4008814 <helper_plot_pixel>
			error = error + deltay;
 4008a48:	e0bff717 	ldw	r2,-36(fp)
 4008a4c:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4008a50:	0400020e 	bge	zero,r16,4008a5c <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 4008a54:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4008a58:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 4008a5c:	8c400044 	addi	r17,r17,1
 4008a60:	947ff00e 	bge	r18,r17,4008a24 <__ram_exceptions_end+0xfbfc87dc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4008a64:	00001006 	br	4008aa8 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 4008a68:	e0bff417 	ldw	r2,-48(fp)
 4008a6c:	d8800115 	stw	r2,4(sp)
 4008a70:	e0bff517 	ldw	r2,-44(fp)
 4008a74:	d8800015 	stw	r2,0(sp)
 4008a78:	b00f883a 	mov	r7,r22
 4008a7c:	880d883a 	mov	r6,r17
 4008a80:	e17ff617 	ldw	r5,-40(fp)
 4008a84:	b809883a 	mov	r4,r23
 4008a88:	40088140 	call	4008814 <helper_plot_pixel>
			error = error + deltay;
 4008a8c:	e0bff717 	ldw	r2,-36(fp)
 4008a90:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 4008a94:	0400020e 	bge	zero,r16,4008aa0 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 4008a98:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 4008a9c:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 4008aa0:	8c400044 	addi	r17,r17,1
 4008aa4:	947ff00e 	bge	r18,r17,4008a68 <__ram_exceptions_end+0xfbfc8820>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 4008aa8:	0001883a 	nop
 4008aac:	e6fff804 	addi	sp,fp,-32
 4008ab0:	dfc00917 	ldw	ra,36(sp)
 4008ab4:	df000817 	ldw	fp,32(sp)
 4008ab8:	ddc00717 	ldw	r23,28(sp)
 4008abc:	dd800617 	ldw	r22,24(sp)
 4008ac0:	dd400517 	ldw	r21,20(sp)
 4008ac4:	dd000417 	ldw	r20,16(sp)
 4008ac8:	dcc00317 	ldw	r19,12(sp)
 4008acc:	dc800217 	ldw	r18,8(sp)
 4008ad0:	dc400117 	ldw	r17,4(sp)
 4008ad4:	dc000017 	ldw	r16,0(sp)
 4008ad8:	dec00a04 	addi	sp,sp,40
 4008adc:	f800283a 	ret

04008ae0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4008ae0:	defffa04 	addi	sp,sp,-24
 4008ae4:	dfc00515 	stw	ra,20(sp)
 4008ae8:	df000415 	stw	fp,16(sp)
 4008aec:	df000404 	addi	fp,sp,16
 4008af0:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 4008af4:	008000c4 	movi	r2,3
 4008af8:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4008afc:	e0fffd17 	ldw	r3,-12(fp)
 4008b00:	008003f4 	movhi	r2,15
 4008b04:	10909004 	addi	r2,r2,16960
 4008b08:	1885383a 	mul	r2,r3,r2
 4008b0c:	100b883a 	mov	r5,r2
 4008b10:	01017db4 	movhi	r4,1526
 4008b14:	21384004 	addi	r4,r4,-7936
 4008b18:	40032f40 	call	40032f4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4008b1c:	100b883a 	mov	r5,r2
 4008b20:	01200034 	movhi	r4,32768
 4008b24:	213fffc4 	addi	r4,r4,-1
 4008b28:	40032f40 	call	40032f4 <__udivsi3>
 4008b2c:	100b883a 	mov	r5,r2
 4008b30:	e13fff17 	ldw	r4,-4(fp)
 4008b34:	40032f40 	call	40032f4 <__udivsi3>
 4008b38:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4008b3c:	e0bffe17 	ldw	r2,-8(fp)
 4008b40:	10002a26 	beq	r2,zero,4008bec <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4008b44:	e03ffc15 	stw	zero,-16(fp)
 4008b48:	00001706 	br	4008ba8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4008b4c:	00a00034 	movhi	r2,32768
 4008b50:	10bfffc4 	addi	r2,r2,-1
 4008b54:	10bfffc4 	addi	r2,r2,-1
 4008b58:	103ffe1e 	bne	r2,zero,4008b54 <__ram_exceptions_end+0xfbfc890c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4008b5c:	e0fffd17 	ldw	r3,-12(fp)
 4008b60:	008003f4 	movhi	r2,15
 4008b64:	10909004 	addi	r2,r2,16960
 4008b68:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4008b6c:	100b883a 	mov	r5,r2
 4008b70:	01017db4 	movhi	r4,1526
 4008b74:	21384004 	addi	r4,r4,-7936
 4008b78:	40032f40 	call	40032f4 <__udivsi3>
 4008b7c:	100b883a 	mov	r5,r2
 4008b80:	01200034 	movhi	r4,32768
 4008b84:	213fffc4 	addi	r4,r4,-1
 4008b88:	40032f40 	call	40032f4 <__udivsi3>
 4008b8c:	1007883a 	mov	r3,r2
 4008b90:	e0bfff17 	ldw	r2,-4(fp)
 4008b94:	10c5c83a 	sub	r2,r2,r3
 4008b98:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4008b9c:	e0bffc17 	ldw	r2,-16(fp)
 4008ba0:	10800044 	addi	r2,r2,1
 4008ba4:	e0bffc15 	stw	r2,-16(fp)
 4008ba8:	e0fffc17 	ldw	r3,-16(fp)
 4008bac:	e0bffe17 	ldw	r2,-8(fp)
 4008bb0:	18bfe616 	blt	r3,r2,4008b4c <__ram_exceptions_end+0xfbfc8904>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4008bb4:	e0fffd17 	ldw	r3,-12(fp)
 4008bb8:	008003f4 	movhi	r2,15
 4008bbc:	10909004 	addi	r2,r2,16960
 4008bc0:	1885383a 	mul	r2,r3,r2
 4008bc4:	100b883a 	mov	r5,r2
 4008bc8:	01017db4 	movhi	r4,1526
 4008bcc:	21384004 	addi	r4,r4,-7936
 4008bd0:	40032f40 	call	40032f4 <__udivsi3>
 4008bd4:	1007883a 	mov	r3,r2
 4008bd8:	e0bfff17 	ldw	r2,-4(fp)
 4008bdc:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4008be0:	10bfffc4 	addi	r2,r2,-1
 4008be4:	103ffe1e 	bne	r2,zero,4008be0 <__ram_exceptions_end+0xfbfc8998>
 4008be8:	00000d06 	br	4008c20 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4008bec:	e0fffd17 	ldw	r3,-12(fp)
 4008bf0:	008003f4 	movhi	r2,15
 4008bf4:	10909004 	addi	r2,r2,16960
 4008bf8:	1885383a 	mul	r2,r3,r2
 4008bfc:	100b883a 	mov	r5,r2
 4008c00:	01017db4 	movhi	r4,1526
 4008c04:	21384004 	addi	r4,r4,-7936
 4008c08:	40032f40 	call	40032f4 <__udivsi3>
 4008c0c:	1007883a 	mov	r3,r2
 4008c10:	e0bfff17 	ldw	r2,-4(fp)
 4008c14:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4008c18:	10bfffc4 	addi	r2,r2,-1
 4008c1c:	00bffe16 	blt	zero,r2,4008c18 <__ram_exceptions_end+0xfbfc89d0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4008c20:	0005883a 	mov	r2,zero
}
 4008c24:	e037883a 	mov	sp,fp
 4008c28:	dfc00117 	ldw	ra,4(sp)
 4008c2c:	df000017 	ldw	fp,0(sp)
 4008c30:	dec00204 	addi	sp,sp,8
 4008c34:	f800283a 	ret

04008c38 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008c38:	defffe04 	addi	sp,sp,-8
 4008c3c:	dfc00115 	stw	ra,4(sp)
 4008c40:	df000015 	stw	fp,0(sp)
 4008c44:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4008c48:	d0a00c17 	ldw	r2,-32720(gp)
 4008c4c:	10000326 	beq	r2,zero,4008c5c <alt_get_errno+0x24>
 4008c50:	d0a00c17 	ldw	r2,-32720(gp)
 4008c54:	103ee83a 	callr	r2
 4008c58:	00000106 	br	4008c60 <alt_get_errno+0x28>
 4008c5c:	d0a10004 	addi	r2,gp,-31744
}
 4008c60:	e037883a 	mov	sp,fp
 4008c64:	dfc00117 	ldw	ra,4(sp)
 4008c68:	df000017 	ldw	fp,0(sp)
 4008c6c:	dec00204 	addi	sp,sp,8
 4008c70:	f800283a 	ret

04008c74 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4008c74:	defffb04 	addi	sp,sp,-20
 4008c78:	dfc00415 	stw	ra,16(sp)
 4008c7c:	df000315 	stw	fp,12(sp)
 4008c80:	df000304 	addi	fp,sp,12
 4008c84:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4008c88:	e0bfff17 	ldw	r2,-4(fp)
 4008c8c:	10000616 	blt	r2,zero,4008ca8 <close+0x34>
 4008c90:	e0bfff17 	ldw	r2,-4(fp)
 4008c94:	10c00324 	muli	r3,r2,12
 4008c98:	00810074 	movhi	r2,1025
 4008c9c:	10a87704 	addi	r2,r2,-24100
 4008ca0:	1885883a 	add	r2,r3,r2
 4008ca4:	00000106 	br	4008cac <close+0x38>
 4008ca8:	0005883a 	mov	r2,zero
 4008cac:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4008cb0:	e0bffd17 	ldw	r2,-12(fp)
 4008cb4:	10001926 	beq	r2,zero,4008d1c <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4008cb8:	e0bffd17 	ldw	r2,-12(fp)
 4008cbc:	10800017 	ldw	r2,0(r2)
 4008cc0:	10800417 	ldw	r2,16(r2)
 4008cc4:	10000626 	beq	r2,zero,4008ce0 <close+0x6c>
 4008cc8:	e0bffd17 	ldw	r2,-12(fp)
 4008ccc:	10800017 	ldw	r2,0(r2)
 4008cd0:	10800417 	ldw	r2,16(r2)
 4008cd4:	e13ffd17 	ldw	r4,-12(fp)
 4008cd8:	103ee83a 	callr	r2
 4008cdc:	00000106 	br	4008ce4 <close+0x70>
 4008ce0:	0005883a 	mov	r2,zero
 4008ce4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4008ce8:	e13fff17 	ldw	r4,-4(fp)
 4008cec:	40093b00 	call	40093b0 <alt_release_fd>
    if (rval < 0)
 4008cf0:	e0bffe17 	ldw	r2,-8(fp)
 4008cf4:	1000070e 	bge	r2,zero,4008d14 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 4008cf8:	4008c380 	call	4008c38 <alt_get_errno>
 4008cfc:	1007883a 	mov	r3,r2
 4008d00:	e0bffe17 	ldw	r2,-8(fp)
 4008d04:	0085c83a 	sub	r2,zero,r2
 4008d08:	18800015 	stw	r2,0(r3)
      return -1;
 4008d0c:	00bfffc4 	movi	r2,-1
 4008d10:	00000706 	br	4008d30 <close+0xbc>
    }
    return 0;
 4008d14:	0005883a 	mov	r2,zero
 4008d18:	00000506 	br	4008d30 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4008d1c:	4008c380 	call	4008c38 <alt_get_errno>
 4008d20:	1007883a 	mov	r3,r2
 4008d24:	00801444 	movi	r2,81
 4008d28:	18800015 	stw	r2,0(r3)
    return -1;
 4008d2c:	00bfffc4 	movi	r2,-1
  }
}
 4008d30:	e037883a 	mov	sp,fp
 4008d34:	dfc00117 	ldw	ra,4(sp)
 4008d38:	df000017 	ldw	fp,0(sp)
 4008d3c:	dec00204 	addi	sp,sp,8
 4008d40:	f800283a 	ret

04008d44 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4008d44:	defffe04 	addi	sp,sp,-8
 4008d48:	df000115 	stw	fp,4(sp)
 4008d4c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4008d50:	e03fff15 	stw	zero,-4(fp)
 4008d54:	00000506 	br	4008d6c <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 4008d58:	e0bfff17 	ldw	r2,-4(fp)
 4008d5c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 4008d60:	e0bfff17 	ldw	r2,-4(fp)
 4008d64:	10800804 	addi	r2,r2,32
 4008d68:	e0bfff15 	stw	r2,-4(fp)
 4008d6c:	e0bfff17 	ldw	r2,-4(fp)
 4008d70:	10820030 	cmpltui	r2,r2,2048
 4008d74:	103ff81e 	bne	r2,zero,4008d58 <__ram_exceptions_end+0xfbfc8b10>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4008d78:	0001883a 	nop
 4008d7c:	e037883a 	mov	sp,fp
 4008d80:	df000017 	ldw	fp,0(sp)
 4008d84:	dec00104 	addi	sp,sp,4
 4008d88:	f800283a 	ret

04008d8c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4008d8c:	defffc04 	addi	sp,sp,-16
 4008d90:	df000315 	stw	fp,12(sp)
 4008d94:	df000304 	addi	fp,sp,12
 4008d98:	e13ffd15 	stw	r4,-12(fp)
 4008d9c:	e17ffe15 	stw	r5,-8(fp)
 4008da0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4008da4:	e0bfff17 	ldw	r2,-4(fp)
}
 4008da8:	e037883a 	mov	sp,fp
 4008dac:	df000017 	ldw	fp,0(sp)
 4008db0:	dec00104 	addi	sp,sp,4
 4008db4:	f800283a 	ret

04008db8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4008db8:	defffe04 	addi	sp,sp,-8
 4008dbc:	dfc00115 	stw	ra,4(sp)
 4008dc0:	df000015 	stw	fp,0(sp)
 4008dc4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4008dc8:	d0a00c17 	ldw	r2,-32720(gp)
 4008dcc:	10000326 	beq	r2,zero,4008ddc <alt_get_errno+0x24>
 4008dd0:	d0a00c17 	ldw	r2,-32720(gp)
 4008dd4:	103ee83a 	callr	r2
 4008dd8:	00000106 	br	4008de0 <alt_get_errno+0x28>
 4008ddc:	d0a10004 	addi	r2,gp,-31744
}
 4008de0:	e037883a 	mov	sp,fp
 4008de4:	dfc00117 	ldw	ra,4(sp)
 4008de8:	df000017 	ldw	fp,0(sp)
 4008dec:	dec00204 	addi	sp,sp,8
 4008df0:	f800283a 	ret

04008df4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4008df4:	defffa04 	addi	sp,sp,-24
 4008df8:	dfc00515 	stw	ra,20(sp)
 4008dfc:	df000415 	stw	fp,16(sp)
 4008e00:	df000404 	addi	fp,sp,16
 4008e04:	e13ffe15 	stw	r4,-8(fp)
 4008e08:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4008e0c:	e0bffe17 	ldw	r2,-8(fp)
 4008e10:	10000326 	beq	r2,zero,4008e20 <alt_dev_llist_insert+0x2c>
 4008e14:	e0bffe17 	ldw	r2,-8(fp)
 4008e18:	10800217 	ldw	r2,8(r2)
 4008e1c:	1000061e 	bne	r2,zero,4008e38 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4008e20:	4008db80 	call	4008db8 <alt_get_errno>
 4008e24:	1007883a 	mov	r3,r2
 4008e28:	00800584 	movi	r2,22
 4008e2c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4008e30:	00bffa84 	movi	r2,-22
 4008e34:	00001306 	br	4008e84 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4008e38:	e0bffe17 	ldw	r2,-8(fp)
 4008e3c:	e0ffff17 	ldw	r3,-4(fp)
 4008e40:	e0fffc15 	stw	r3,-16(fp)
 4008e44:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4008e48:	e0bffd17 	ldw	r2,-12(fp)
 4008e4c:	e0fffc17 	ldw	r3,-16(fp)
 4008e50:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4008e54:	e0bffc17 	ldw	r2,-16(fp)
 4008e58:	10c00017 	ldw	r3,0(r2)
 4008e5c:	e0bffd17 	ldw	r2,-12(fp)
 4008e60:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4008e64:	e0bffc17 	ldw	r2,-16(fp)
 4008e68:	10800017 	ldw	r2,0(r2)
 4008e6c:	e0fffd17 	ldw	r3,-12(fp)
 4008e70:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4008e74:	e0bffc17 	ldw	r2,-16(fp)
 4008e78:	e0fffd17 	ldw	r3,-12(fp)
 4008e7c:	10c00015 	stw	r3,0(r2)

  return 0;  
 4008e80:	0005883a 	mov	r2,zero
}
 4008e84:	e037883a 	mov	sp,fp
 4008e88:	dfc00117 	ldw	ra,4(sp)
 4008e8c:	df000017 	ldw	fp,0(sp)
 4008e90:	dec00204 	addi	sp,sp,8
 4008e94:	f800283a 	ret

04008e98 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4008e98:	defffd04 	addi	sp,sp,-12
 4008e9c:	dfc00215 	stw	ra,8(sp)
 4008ea0:	df000115 	stw	fp,4(sp)
 4008ea4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4008ea8:	00810074 	movhi	r2,1025
 4008eac:	10a70c04 	addi	r2,r2,-25552
 4008eb0:	e0bfff15 	stw	r2,-4(fp)
 4008eb4:	00000606 	br	4008ed0 <_do_ctors+0x38>
        (*ctor) (); 
 4008eb8:	e0bfff17 	ldw	r2,-4(fp)
 4008ebc:	10800017 	ldw	r2,0(r2)
 4008ec0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4008ec4:	e0bfff17 	ldw	r2,-4(fp)
 4008ec8:	10bfff04 	addi	r2,r2,-4
 4008ecc:	e0bfff15 	stw	r2,-4(fp)
 4008ed0:	e0ffff17 	ldw	r3,-4(fp)
 4008ed4:	00810074 	movhi	r2,1025
 4008ed8:	10a70d04 	addi	r2,r2,-25548
 4008edc:	18bff62e 	bgeu	r3,r2,4008eb8 <__ram_exceptions_end+0xfbfc8c70>
        (*ctor) (); 
}
 4008ee0:	0001883a 	nop
 4008ee4:	e037883a 	mov	sp,fp
 4008ee8:	dfc00117 	ldw	ra,4(sp)
 4008eec:	df000017 	ldw	fp,0(sp)
 4008ef0:	dec00204 	addi	sp,sp,8
 4008ef4:	f800283a 	ret

04008ef8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4008ef8:	defffd04 	addi	sp,sp,-12
 4008efc:	dfc00215 	stw	ra,8(sp)
 4008f00:	df000115 	stw	fp,4(sp)
 4008f04:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4008f08:	00810074 	movhi	r2,1025
 4008f0c:	10a70c04 	addi	r2,r2,-25552
 4008f10:	e0bfff15 	stw	r2,-4(fp)
 4008f14:	00000606 	br	4008f30 <_do_dtors+0x38>
        (*dtor) (); 
 4008f18:	e0bfff17 	ldw	r2,-4(fp)
 4008f1c:	10800017 	ldw	r2,0(r2)
 4008f20:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4008f24:	e0bfff17 	ldw	r2,-4(fp)
 4008f28:	10bfff04 	addi	r2,r2,-4
 4008f2c:	e0bfff15 	stw	r2,-4(fp)
 4008f30:	e0ffff17 	ldw	r3,-4(fp)
 4008f34:	00810074 	movhi	r2,1025
 4008f38:	10a70d04 	addi	r2,r2,-25548
 4008f3c:	18bff62e 	bgeu	r3,r2,4008f18 <__ram_exceptions_end+0xfbfc8cd0>
        (*dtor) (); 
}
 4008f40:	0001883a 	nop
 4008f44:	e037883a 	mov	sp,fp
 4008f48:	dfc00117 	ldw	ra,4(sp)
 4008f4c:	df000017 	ldw	fp,0(sp)
 4008f50:	dec00204 	addi	sp,sp,8
 4008f54:	f800283a 	ret

04008f58 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4008f58:	defffa04 	addi	sp,sp,-24
 4008f5c:	dfc00515 	stw	ra,20(sp)
 4008f60:	df000415 	stw	fp,16(sp)
 4008f64:	df000404 	addi	fp,sp,16
 4008f68:	e13ffe15 	stw	r4,-8(fp)
 4008f6c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4008f70:	e0bfff17 	ldw	r2,-4(fp)
 4008f74:	10800017 	ldw	r2,0(r2)
 4008f78:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4008f7c:	e13ffe17 	ldw	r4,-8(fp)
 4008f80:	4006d080 	call	4006d08 <strlen>
 4008f84:	10800044 	addi	r2,r2,1
 4008f88:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4008f8c:	00000d06 	br	4008fc4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4008f90:	e0bffc17 	ldw	r2,-16(fp)
 4008f94:	10800217 	ldw	r2,8(r2)
 4008f98:	e0fffd17 	ldw	r3,-12(fp)
 4008f9c:	180d883a 	mov	r6,r3
 4008fa0:	e17ffe17 	ldw	r5,-8(fp)
 4008fa4:	1009883a 	mov	r4,r2
 4008fa8:	40098e80 	call	40098e8 <memcmp>
 4008fac:	1000021e 	bne	r2,zero,4008fb8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4008fb0:	e0bffc17 	ldw	r2,-16(fp)
 4008fb4:	00000706 	br	4008fd4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4008fb8:	e0bffc17 	ldw	r2,-16(fp)
 4008fbc:	10800017 	ldw	r2,0(r2)
 4008fc0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4008fc4:	e0fffc17 	ldw	r3,-16(fp)
 4008fc8:	e0bfff17 	ldw	r2,-4(fp)
 4008fcc:	18bff01e 	bne	r3,r2,4008f90 <__ram_exceptions_end+0xfbfc8d48>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4008fd0:	0005883a 	mov	r2,zero
}
 4008fd4:	e037883a 	mov	sp,fp
 4008fd8:	dfc00117 	ldw	ra,4(sp)
 4008fdc:	df000017 	ldw	fp,0(sp)
 4008fe0:	dec00204 	addi	sp,sp,8
 4008fe4:	f800283a 	ret

04008fe8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4008fe8:	defffe04 	addi	sp,sp,-8
 4008fec:	dfc00115 	stw	ra,4(sp)
 4008ff0:	df000015 	stw	fp,0(sp)
 4008ff4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 4008ff8:	01440004 	movi	r5,4096
 4008ffc:	0009883a 	mov	r4,zero
 4009000:	40097880 	call	4009788 <alt_icache_flush>
#endif
}
 4009004:	0001883a 	nop
 4009008:	e037883a 	mov	sp,fp
 400900c:	dfc00117 	ldw	ra,4(sp)
 4009010:	df000017 	ldw	fp,0(sp)
 4009014:	dec00204 	addi	sp,sp,8
 4009018:	f800283a 	ret

0400901c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400901c:	defff904 	addi	sp,sp,-28
 4009020:	dfc00615 	stw	ra,24(sp)
 4009024:	df000515 	stw	fp,20(sp)
 4009028:	df000504 	addi	fp,sp,20
 400902c:	e13ffc15 	stw	r4,-16(fp)
 4009030:	e17ffd15 	stw	r5,-12(fp)
 4009034:	e1bffe15 	stw	r6,-8(fp)
 4009038:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 400903c:	e1bfff17 	ldw	r6,-4(fp)
 4009040:	e17ffe17 	ldw	r5,-8(fp)
 4009044:	e13ffd17 	ldw	r4,-12(fp)
 4009048:	400925c0 	call	400925c <open>
 400904c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 4009050:	e0bffb17 	ldw	r2,-20(fp)
 4009054:	10001c16 	blt	r2,zero,40090c8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 4009058:	00810074 	movhi	r2,1025
 400905c:	10a87704 	addi	r2,r2,-24100
 4009060:	e0fffb17 	ldw	r3,-20(fp)
 4009064:	18c00324 	muli	r3,r3,12
 4009068:	10c5883a 	add	r2,r2,r3
 400906c:	10c00017 	ldw	r3,0(r2)
 4009070:	e0bffc17 	ldw	r2,-16(fp)
 4009074:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4009078:	00810074 	movhi	r2,1025
 400907c:	10a87704 	addi	r2,r2,-24100
 4009080:	e0fffb17 	ldw	r3,-20(fp)
 4009084:	18c00324 	muli	r3,r3,12
 4009088:	10c5883a 	add	r2,r2,r3
 400908c:	10800104 	addi	r2,r2,4
 4009090:	10c00017 	ldw	r3,0(r2)
 4009094:	e0bffc17 	ldw	r2,-16(fp)
 4009098:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400909c:	00810074 	movhi	r2,1025
 40090a0:	10a87704 	addi	r2,r2,-24100
 40090a4:	e0fffb17 	ldw	r3,-20(fp)
 40090a8:	18c00324 	muli	r3,r3,12
 40090ac:	10c5883a 	add	r2,r2,r3
 40090b0:	10800204 	addi	r2,r2,8
 40090b4:	10c00017 	ldw	r3,0(r2)
 40090b8:	e0bffc17 	ldw	r2,-16(fp)
 40090bc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40090c0:	e13ffb17 	ldw	r4,-20(fp)
 40090c4:	40093b00 	call	40093b0 <alt_release_fd>
  }
} 
 40090c8:	0001883a 	nop
 40090cc:	e037883a 	mov	sp,fp
 40090d0:	dfc00117 	ldw	ra,4(sp)
 40090d4:	df000017 	ldw	fp,0(sp)
 40090d8:	dec00204 	addi	sp,sp,8
 40090dc:	f800283a 	ret

040090e0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 40090e0:	defffb04 	addi	sp,sp,-20
 40090e4:	dfc00415 	stw	ra,16(sp)
 40090e8:	df000315 	stw	fp,12(sp)
 40090ec:	df000304 	addi	fp,sp,12
 40090f0:	e13ffd15 	stw	r4,-12(fp)
 40090f4:	e17ffe15 	stw	r5,-8(fp)
 40090f8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 40090fc:	01c07fc4 	movi	r7,511
 4009100:	01800044 	movi	r6,1
 4009104:	e17ffd17 	ldw	r5,-12(fp)
 4009108:	01010074 	movhi	r4,1025
 400910c:	21287a04 	addi	r4,r4,-24088
 4009110:	400901c0 	call	400901c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4009114:	01c07fc4 	movi	r7,511
 4009118:	000d883a 	mov	r6,zero
 400911c:	e17ffe17 	ldw	r5,-8(fp)
 4009120:	01010074 	movhi	r4,1025
 4009124:	21287704 	addi	r4,r4,-24100
 4009128:	400901c0 	call	400901c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400912c:	01c07fc4 	movi	r7,511
 4009130:	01800044 	movi	r6,1
 4009134:	e17fff17 	ldw	r5,-4(fp)
 4009138:	01010074 	movhi	r4,1025
 400913c:	21287d04 	addi	r4,r4,-24076
 4009140:	400901c0 	call	400901c <alt_open_fd>
}  
 4009144:	0001883a 	nop
 4009148:	e037883a 	mov	sp,fp
 400914c:	dfc00117 	ldw	ra,4(sp)
 4009150:	df000017 	ldw	fp,0(sp)
 4009154:	dec00204 	addi	sp,sp,8
 4009158:	f800283a 	ret

0400915c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400915c:	defffe04 	addi	sp,sp,-8
 4009160:	dfc00115 	stw	ra,4(sp)
 4009164:	df000015 	stw	fp,0(sp)
 4009168:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400916c:	d0a00c17 	ldw	r2,-32720(gp)
 4009170:	10000326 	beq	r2,zero,4009180 <alt_get_errno+0x24>
 4009174:	d0a00c17 	ldw	r2,-32720(gp)
 4009178:	103ee83a 	callr	r2
 400917c:	00000106 	br	4009184 <alt_get_errno+0x28>
 4009180:	d0a10004 	addi	r2,gp,-31744
}
 4009184:	e037883a 	mov	sp,fp
 4009188:	dfc00117 	ldw	ra,4(sp)
 400918c:	df000017 	ldw	fp,0(sp)
 4009190:	dec00204 	addi	sp,sp,8
 4009194:	f800283a 	ret

04009198 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 4009198:	defffd04 	addi	sp,sp,-12
 400919c:	df000215 	stw	fp,8(sp)
 40091a0:	df000204 	addi	fp,sp,8
 40091a4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40091a8:	e0bfff17 	ldw	r2,-4(fp)
 40091ac:	10800217 	ldw	r2,8(r2)
 40091b0:	10d00034 	orhi	r3,r2,16384
 40091b4:	e0bfff17 	ldw	r2,-4(fp)
 40091b8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40091bc:	e03ffe15 	stw	zero,-8(fp)
 40091c0:	00001d06 	br	4009238 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40091c4:	00810074 	movhi	r2,1025
 40091c8:	10a87704 	addi	r2,r2,-24100
 40091cc:	e0fffe17 	ldw	r3,-8(fp)
 40091d0:	18c00324 	muli	r3,r3,12
 40091d4:	10c5883a 	add	r2,r2,r3
 40091d8:	10c00017 	ldw	r3,0(r2)
 40091dc:	e0bfff17 	ldw	r2,-4(fp)
 40091e0:	10800017 	ldw	r2,0(r2)
 40091e4:	1880111e 	bne	r3,r2,400922c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 40091e8:	00810074 	movhi	r2,1025
 40091ec:	10a87704 	addi	r2,r2,-24100
 40091f0:	e0fffe17 	ldw	r3,-8(fp)
 40091f4:	18c00324 	muli	r3,r3,12
 40091f8:	10c5883a 	add	r2,r2,r3
 40091fc:	10800204 	addi	r2,r2,8
 4009200:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4009204:	1000090e 	bge	r2,zero,400922c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4009208:	e0bffe17 	ldw	r2,-8(fp)
 400920c:	10c00324 	muli	r3,r2,12
 4009210:	00810074 	movhi	r2,1025
 4009214:	10a87704 	addi	r2,r2,-24100
 4009218:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400921c:	e0bfff17 	ldw	r2,-4(fp)
 4009220:	18800226 	beq	r3,r2,400922c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4009224:	00bffcc4 	movi	r2,-13
 4009228:	00000806 	br	400924c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400922c:	e0bffe17 	ldw	r2,-8(fp)
 4009230:	10800044 	addi	r2,r2,1
 4009234:	e0bffe15 	stw	r2,-8(fp)
 4009238:	d0a00b17 	ldw	r2,-32724(gp)
 400923c:	1007883a 	mov	r3,r2
 4009240:	e0bffe17 	ldw	r2,-8(fp)
 4009244:	18bfdf2e 	bgeu	r3,r2,40091c4 <__ram_exceptions_end+0xfbfc8f7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4009248:	0005883a 	mov	r2,zero
}
 400924c:	e037883a 	mov	sp,fp
 4009250:	df000017 	ldw	fp,0(sp)
 4009254:	dec00104 	addi	sp,sp,4
 4009258:	f800283a 	ret

0400925c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400925c:	defff604 	addi	sp,sp,-40
 4009260:	dfc00915 	stw	ra,36(sp)
 4009264:	df000815 	stw	fp,32(sp)
 4009268:	df000804 	addi	fp,sp,32
 400926c:	e13ffd15 	stw	r4,-12(fp)
 4009270:	e17ffe15 	stw	r5,-8(fp)
 4009274:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 4009278:	00bfffc4 	movi	r2,-1
 400927c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4009280:	00bffb44 	movi	r2,-19
 4009284:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 4009288:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400928c:	d1600904 	addi	r5,gp,-32732
 4009290:	e13ffd17 	ldw	r4,-12(fp)
 4009294:	4008f580 	call	4008f58 <alt_find_dev>
 4009298:	e0bff815 	stw	r2,-32(fp)
 400929c:	e0bff817 	ldw	r2,-32(fp)
 40092a0:	1000051e 	bne	r2,zero,40092b8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40092a4:	e13ffd17 	ldw	r4,-12(fp)
 40092a8:	40095dc0 	call	40095dc <alt_find_file>
 40092ac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40092b0:	00800044 	movi	r2,1
 40092b4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 40092b8:	e0bff817 	ldw	r2,-32(fp)
 40092bc:	10002926 	beq	r2,zero,4009364 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 40092c0:	e13ff817 	ldw	r4,-32(fp)
 40092c4:	40096e40 	call	40096e4 <alt_get_fd>
 40092c8:	e0bff915 	stw	r2,-28(fp)
 40092cc:	e0bff917 	ldw	r2,-28(fp)
 40092d0:	1000030e 	bge	r2,zero,40092e0 <open+0x84>
    {
      status = index;
 40092d4:	e0bff917 	ldw	r2,-28(fp)
 40092d8:	e0bffa15 	stw	r2,-24(fp)
 40092dc:	00002306 	br	400936c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 40092e0:	e0bff917 	ldw	r2,-28(fp)
 40092e4:	10c00324 	muli	r3,r2,12
 40092e8:	00810074 	movhi	r2,1025
 40092ec:	10a87704 	addi	r2,r2,-24100
 40092f0:	1885883a 	add	r2,r3,r2
 40092f4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 40092f8:	e0fffe17 	ldw	r3,-8(fp)
 40092fc:	00900034 	movhi	r2,16384
 4009300:	10bfffc4 	addi	r2,r2,-1
 4009304:	1886703a 	and	r3,r3,r2
 4009308:	e0bffc17 	ldw	r2,-16(fp)
 400930c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4009310:	e0bffb17 	ldw	r2,-20(fp)
 4009314:	1000051e 	bne	r2,zero,400932c <open+0xd0>
 4009318:	e13ffc17 	ldw	r4,-16(fp)
 400931c:	40091980 	call	4009198 <alt_file_locked>
 4009320:	e0bffa15 	stw	r2,-24(fp)
 4009324:	e0bffa17 	ldw	r2,-24(fp)
 4009328:	10001016 	blt	r2,zero,400936c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400932c:	e0bff817 	ldw	r2,-32(fp)
 4009330:	10800317 	ldw	r2,12(r2)
 4009334:	10000826 	beq	r2,zero,4009358 <open+0xfc>
 4009338:	e0bff817 	ldw	r2,-32(fp)
 400933c:	10800317 	ldw	r2,12(r2)
 4009340:	e1ffff17 	ldw	r7,-4(fp)
 4009344:	e1bffe17 	ldw	r6,-8(fp)
 4009348:	e17ffd17 	ldw	r5,-12(fp)
 400934c:	e13ffc17 	ldw	r4,-16(fp)
 4009350:	103ee83a 	callr	r2
 4009354:	00000106 	br	400935c <open+0x100>
 4009358:	0005883a 	mov	r2,zero
 400935c:	e0bffa15 	stw	r2,-24(fp)
 4009360:	00000206 	br	400936c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 4009364:	00bffb44 	movi	r2,-19
 4009368:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400936c:	e0bffa17 	ldw	r2,-24(fp)
 4009370:	1000090e 	bge	r2,zero,4009398 <open+0x13c>
  {
    alt_release_fd (index);  
 4009374:	e13ff917 	ldw	r4,-28(fp)
 4009378:	40093b00 	call	40093b0 <alt_release_fd>
    ALT_ERRNO = -status;
 400937c:	400915c0 	call	400915c <alt_get_errno>
 4009380:	1007883a 	mov	r3,r2
 4009384:	e0bffa17 	ldw	r2,-24(fp)
 4009388:	0085c83a 	sub	r2,zero,r2
 400938c:	18800015 	stw	r2,0(r3)
    return -1;
 4009390:	00bfffc4 	movi	r2,-1
 4009394:	00000106 	br	400939c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 4009398:	e0bff917 	ldw	r2,-28(fp)
}
 400939c:	e037883a 	mov	sp,fp
 40093a0:	dfc00117 	ldw	ra,4(sp)
 40093a4:	df000017 	ldw	fp,0(sp)
 40093a8:	dec00204 	addi	sp,sp,8
 40093ac:	f800283a 	ret

040093b0 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 40093b0:	defffe04 	addi	sp,sp,-8
 40093b4:	df000115 	stw	fp,4(sp)
 40093b8:	df000104 	addi	fp,sp,4
 40093bc:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 40093c0:	e0bfff17 	ldw	r2,-4(fp)
 40093c4:	108000d0 	cmplti	r2,r2,3
 40093c8:	10000d1e 	bne	r2,zero,4009400 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 40093cc:	00810074 	movhi	r2,1025
 40093d0:	10a87704 	addi	r2,r2,-24100
 40093d4:	e0ffff17 	ldw	r3,-4(fp)
 40093d8:	18c00324 	muli	r3,r3,12
 40093dc:	10c5883a 	add	r2,r2,r3
 40093e0:	10800204 	addi	r2,r2,8
 40093e4:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 40093e8:	00810074 	movhi	r2,1025
 40093ec:	10a87704 	addi	r2,r2,-24100
 40093f0:	e0ffff17 	ldw	r3,-4(fp)
 40093f4:	18c00324 	muli	r3,r3,12
 40093f8:	10c5883a 	add	r2,r2,r3
 40093fc:	10000015 	stw	zero,0(r2)
  }
}
 4009400:	0001883a 	nop
 4009404:	e037883a 	mov	sp,fp
 4009408:	df000017 	ldw	fp,0(sp)
 400940c:	dec00104 	addi	sp,sp,4
 4009410:	f800283a 	ret

04009414 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4009414:	defffa04 	addi	sp,sp,-24
 4009418:	df000515 	stw	fp,20(sp)
 400941c:	df000504 	addi	fp,sp,20
 4009420:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4009424:	0005303a 	rdctl	r2,status
 4009428:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400942c:	e0fffc17 	ldw	r3,-16(fp)
 4009430:	00bfff84 	movi	r2,-2
 4009434:	1884703a 	and	r2,r3,r2
 4009438:	1001703a 	wrctl	status,r2
  
  return context;
 400943c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4009440:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4009444:	e0bfff17 	ldw	r2,-4(fp)
 4009448:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400944c:	e0bffd17 	ldw	r2,-12(fp)
 4009450:	10800017 	ldw	r2,0(r2)
 4009454:	e0fffd17 	ldw	r3,-12(fp)
 4009458:	18c00117 	ldw	r3,4(r3)
 400945c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4009460:	e0bffd17 	ldw	r2,-12(fp)
 4009464:	10800117 	ldw	r2,4(r2)
 4009468:	e0fffd17 	ldw	r3,-12(fp)
 400946c:	18c00017 	ldw	r3,0(r3)
 4009470:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4009474:	e0bffd17 	ldw	r2,-12(fp)
 4009478:	e0fffd17 	ldw	r3,-12(fp)
 400947c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4009480:	e0bffd17 	ldw	r2,-12(fp)
 4009484:	e0fffd17 	ldw	r3,-12(fp)
 4009488:	10c00015 	stw	r3,0(r2)
 400948c:	e0bffb17 	ldw	r2,-20(fp)
 4009490:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4009494:	e0bffe17 	ldw	r2,-8(fp)
 4009498:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400949c:	0001883a 	nop
 40094a0:	e037883a 	mov	sp,fp
 40094a4:	df000017 	ldw	fp,0(sp)
 40094a8:	dec00104 	addi	sp,sp,4
 40094ac:	f800283a 	ret

040094b0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40094b0:	defffb04 	addi	sp,sp,-20
 40094b4:	dfc00415 	stw	ra,16(sp)
 40094b8:	df000315 	stw	fp,12(sp)
 40094bc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40094c0:	d0a00d17 	ldw	r2,-32716(gp)
 40094c4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40094c8:	d0a10617 	ldw	r2,-31720(gp)
 40094cc:	10800044 	addi	r2,r2,1
 40094d0:	d0a10615 	stw	r2,-31720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40094d4:	00002e06 	br	4009590 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40094d8:	e0bffd17 	ldw	r2,-12(fp)
 40094dc:	10800017 	ldw	r2,0(r2)
 40094e0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40094e4:	e0bffd17 	ldw	r2,-12(fp)
 40094e8:	10800403 	ldbu	r2,16(r2)
 40094ec:	10803fcc 	andi	r2,r2,255
 40094f0:	10000426 	beq	r2,zero,4009504 <alt_tick+0x54>
 40094f4:	d0a10617 	ldw	r2,-31720(gp)
 40094f8:	1000021e 	bne	r2,zero,4009504 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40094fc:	e0bffd17 	ldw	r2,-12(fp)
 4009500:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4009504:	e0bffd17 	ldw	r2,-12(fp)
 4009508:	10800217 	ldw	r2,8(r2)
 400950c:	d0e10617 	ldw	r3,-31720(gp)
 4009510:	18801d36 	bltu	r3,r2,4009588 <alt_tick+0xd8>
 4009514:	e0bffd17 	ldw	r2,-12(fp)
 4009518:	10800403 	ldbu	r2,16(r2)
 400951c:	10803fcc 	andi	r2,r2,255
 4009520:	1000191e 	bne	r2,zero,4009588 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4009524:	e0bffd17 	ldw	r2,-12(fp)
 4009528:	10800317 	ldw	r2,12(r2)
 400952c:	e0fffd17 	ldw	r3,-12(fp)
 4009530:	18c00517 	ldw	r3,20(r3)
 4009534:	1809883a 	mov	r4,r3
 4009538:	103ee83a 	callr	r2
 400953c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4009540:	e0bfff17 	ldw	r2,-4(fp)
 4009544:	1000031e 	bne	r2,zero,4009554 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 4009548:	e13ffd17 	ldw	r4,-12(fp)
 400954c:	40094140 	call	4009414 <alt_alarm_stop>
 4009550:	00000d06 	br	4009588 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4009554:	e0bffd17 	ldw	r2,-12(fp)
 4009558:	10c00217 	ldw	r3,8(r2)
 400955c:	e0bfff17 	ldw	r2,-4(fp)
 4009560:	1887883a 	add	r3,r3,r2
 4009564:	e0bffd17 	ldw	r2,-12(fp)
 4009568:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400956c:	e0bffd17 	ldw	r2,-12(fp)
 4009570:	10c00217 	ldw	r3,8(r2)
 4009574:	d0a10617 	ldw	r2,-31720(gp)
 4009578:	1880032e 	bgeu	r3,r2,4009588 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400957c:	e0bffd17 	ldw	r2,-12(fp)
 4009580:	00c00044 	movi	r3,1
 4009584:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4009588:	e0bffe17 	ldw	r2,-8(fp)
 400958c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4009590:	e0fffd17 	ldw	r3,-12(fp)
 4009594:	d0a00d04 	addi	r2,gp,-32716
 4009598:	18bfcf1e 	bne	r3,r2,40094d8 <__ram_exceptions_end+0xfbfc9290>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400959c:	0001883a 	nop
}
 40095a0:	0001883a 	nop
 40095a4:	e037883a 	mov	sp,fp
 40095a8:	dfc00117 	ldw	ra,4(sp)
 40095ac:	df000017 	ldw	fp,0(sp)
 40095b0:	dec00204 	addi	sp,sp,8
 40095b4:	f800283a 	ret

040095b8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40095b8:	deffff04 	addi	sp,sp,-4
 40095bc:	df000015 	stw	fp,0(sp)
 40095c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40095c4:	000170fa 	wrctl	ienable,zero
}
 40095c8:	0001883a 	nop
 40095cc:	e037883a 	mov	sp,fp
 40095d0:	df000017 	ldw	fp,0(sp)
 40095d4:	dec00104 	addi	sp,sp,4
 40095d8:	f800283a 	ret

040095dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40095dc:	defffb04 	addi	sp,sp,-20
 40095e0:	dfc00415 	stw	ra,16(sp)
 40095e4:	df000315 	stw	fp,12(sp)
 40095e8:	df000304 	addi	fp,sp,12
 40095ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40095f0:	d0a00717 	ldw	r2,-32740(gp)
 40095f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40095f8:	00003106 	br	40096c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40095fc:	e0bffd17 	ldw	r2,-12(fp)
 4009600:	10800217 	ldw	r2,8(r2)
 4009604:	1009883a 	mov	r4,r2
 4009608:	4006d080 	call	4006d08 <strlen>
 400960c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4009610:	e0bffd17 	ldw	r2,-12(fp)
 4009614:	10c00217 	ldw	r3,8(r2)
 4009618:	e0bffe17 	ldw	r2,-8(fp)
 400961c:	10bfffc4 	addi	r2,r2,-1
 4009620:	1885883a 	add	r2,r3,r2
 4009624:	10800003 	ldbu	r2,0(r2)
 4009628:	10803fcc 	andi	r2,r2,255
 400962c:	1080201c 	xori	r2,r2,128
 4009630:	10bfe004 	addi	r2,r2,-128
 4009634:	10800bd8 	cmpnei	r2,r2,47
 4009638:	1000031e 	bne	r2,zero,4009648 <alt_find_file+0x6c>
    {
      len -= 1;
 400963c:	e0bffe17 	ldw	r2,-8(fp)
 4009640:	10bfffc4 	addi	r2,r2,-1
 4009644:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4009648:	e0bffe17 	ldw	r2,-8(fp)
 400964c:	e0ffff17 	ldw	r3,-4(fp)
 4009650:	1885883a 	add	r2,r3,r2
 4009654:	10800003 	ldbu	r2,0(r2)
 4009658:	10803fcc 	andi	r2,r2,255
 400965c:	1080201c 	xori	r2,r2,128
 4009660:	10bfe004 	addi	r2,r2,-128
 4009664:	10800be0 	cmpeqi	r2,r2,47
 4009668:	1000081e 	bne	r2,zero,400968c <alt_find_file+0xb0>
 400966c:	e0bffe17 	ldw	r2,-8(fp)
 4009670:	e0ffff17 	ldw	r3,-4(fp)
 4009674:	1885883a 	add	r2,r3,r2
 4009678:	10800003 	ldbu	r2,0(r2)
 400967c:	10803fcc 	andi	r2,r2,255
 4009680:	1080201c 	xori	r2,r2,128
 4009684:	10bfe004 	addi	r2,r2,-128
 4009688:	10000a1e 	bne	r2,zero,40096b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400968c:	e0bffd17 	ldw	r2,-12(fp)
 4009690:	10800217 	ldw	r2,8(r2)
 4009694:	e0fffe17 	ldw	r3,-8(fp)
 4009698:	180d883a 	mov	r6,r3
 400969c:	e17fff17 	ldw	r5,-4(fp)
 40096a0:	1009883a 	mov	r4,r2
 40096a4:	40098e80 	call	40098e8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40096a8:	1000021e 	bne	r2,zero,40096b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40096ac:	e0bffd17 	ldw	r2,-12(fp)
 40096b0:	00000706 	br	40096d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40096b4:	e0bffd17 	ldw	r2,-12(fp)
 40096b8:	10800017 	ldw	r2,0(r2)
 40096bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40096c0:	e0fffd17 	ldw	r3,-12(fp)
 40096c4:	d0a00704 	addi	r2,gp,-32740
 40096c8:	18bfcc1e 	bne	r3,r2,40095fc <__ram_exceptions_end+0xfbfc93b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40096cc:	0005883a 	mov	r2,zero
}
 40096d0:	e037883a 	mov	sp,fp
 40096d4:	dfc00117 	ldw	ra,4(sp)
 40096d8:	df000017 	ldw	fp,0(sp)
 40096dc:	dec00204 	addi	sp,sp,8
 40096e0:	f800283a 	ret

040096e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40096e4:	defffc04 	addi	sp,sp,-16
 40096e8:	df000315 	stw	fp,12(sp)
 40096ec:	df000304 	addi	fp,sp,12
 40096f0:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 40096f4:	00bffa04 	movi	r2,-24
 40096f8:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 40096fc:	e03ffd15 	stw	zero,-12(fp)
 4009700:	00001906 	br	4009768 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 4009704:	00810074 	movhi	r2,1025
 4009708:	10a87704 	addi	r2,r2,-24100
 400970c:	e0fffd17 	ldw	r3,-12(fp)
 4009710:	18c00324 	muli	r3,r3,12
 4009714:	10c5883a 	add	r2,r2,r3
 4009718:	10800017 	ldw	r2,0(r2)
 400971c:	10000f1e 	bne	r2,zero,400975c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 4009720:	00810074 	movhi	r2,1025
 4009724:	10a87704 	addi	r2,r2,-24100
 4009728:	e0fffd17 	ldw	r3,-12(fp)
 400972c:	18c00324 	muli	r3,r3,12
 4009730:	10c5883a 	add	r2,r2,r3
 4009734:	e0ffff17 	ldw	r3,-4(fp)
 4009738:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400973c:	d0e00b17 	ldw	r3,-32724(gp)
 4009740:	e0bffd17 	ldw	r2,-12(fp)
 4009744:	1880020e 	bge	r3,r2,4009750 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 4009748:	e0bffd17 	ldw	r2,-12(fp)
 400974c:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 4009750:	e0bffd17 	ldw	r2,-12(fp)
 4009754:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 4009758:	00000606 	br	4009774 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400975c:	e0bffd17 	ldw	r2,-12(fp)
 4009760:	10800044 	addi	r2,r2,1
 4009764:	e0bffd15 	stw	r2,-12(fp)
 4009768:	e0bffd17 	ldw	r2,-12(fp)
 400976c:	10800810 	cmplti	r2,r2,32
 4009770:	103fe41e 	bne	r2,zero,4009704 <__ram_exceptions_end+0xfbfc94bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4009774:	e0bffe17 	ldw	r2,-8(fp)
}
 4009778:	e037883a 	mov	sp,fp
 400977c:	df000017 	ldw	fp,0(sp)
 4009780:	dec00104 	addi	sp,sp,4
 4009784:	f800283a 	ret

04009788 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 4009788:	defffb04 	addi	sp,sp,-20
 400978c:	df000415 	stw	fp,16(sp)
 4009790:	df000404 	addi	fp,sp,16
 4009794:	e13ffe15 	stw	r4,-8(fp)
 4009798:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 400979c:	e0bfff17 	ldw	r2,-4(fp)
 40097a0:	10840070 	cmpltui	r2,r2,4097
 40097a4:	1000021e 	bne	r2,zero,40097b0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 40097a8:	00840004 	movi	r2,4096
 40097ac:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 40097b0:	e0fffe17 	ldw	r3,-8(fp)
 40097b4:	e0bfff17 	ldw	r2,-4(fp)
 40097b8:	1885883a 	add	r2,r3,r2
 40097bc:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40097c0:	e0bffe17 	ldw	r2,-8(fp)
 40097c4:	e0bffc15 	stw	r2,-16(fp)
 40097c8:	00000506 	br	40097e0 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 40097cc:	e0bffc17 	ldw	r2,-16(fp)
 40097d0:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 40097d4:	e0bffc17 	ldw	r2,-16(fp)
 40097d8:	10800804 	addi	r2,r2,32
 40097dc:	e0bffc15 	stw	r2,-16(fp)
 40097e0:	e0fffc17 	ldw	r3,-16(fp)
 40097e4:	e0bffd17 	ldw	r2,-12(fp)
 40097e8:	18bff836 	bltu	r3,r2,40097cc <__ram_exceptions_end+0xfbfc9584>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 40097ec:	e0bffe17 	ldw	r2,-8(fp)
 40097f0:	108007cc 	andi	r2,r2,31
 40097f4:	10000226 	beq	r2,zero,4009800 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 40097f8:	e0bffc17 	ldw	r2,-16(fp)
 40097fc:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 4009800:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 4009804:	0001883a 	nop
 4009808:	e037883a 	mov	sp,fp
 400980c:	df000017 	ldw	fp,0(sp)
 4009810:	dec00104 	addi	sp,sp,4
 4009814:	f800283a 	ret

04009818 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4009818:	defffe04 	addi	sp,sp,-8
 400981c:	df000115 	stw	fp,4(sp)
 4009820:	df000104 	addi	fp,sp,4
 4009824:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4009828:	e0bfff17 	ldw	r2,-4(fp)
 400982c:	10bffe84 	addi	r2,r2,-6
 4009830:	10c00428 	cmpgeui	r3,r2,16
 4009834:	18001a1e 	bne	r3,zero,40098a0 <alt_exception_cause_generated_bad_addr+0x88>
 4009838:	100690ba 	slli	r3,r2,2
 400983c:	00810074 	movhi	r2,1025
 4009840:	10a61404 	addi	r2,r2,-26544
 4009844:	1885883a 	add	r2,r3,r2
 4009848:	10800017 	ldw	r2,0(r2)
 400984c:	1000683a 	jmp	r2
 4009850:	04009890 	cmplti	r16,zero,610
 4009854:	04009890 	cmplti	r16,zero,610
 4009858:	040098a0 	cmpeqi	r16,zero,610
 400985c:	040098a0 	cmpeqi	r16,zero,610
 4009860:	040098a0 	cmpeqi	r16,zero,610
 4009864:	04009890 	cmplti	r16,zero,610
 4009868:	04009898 	cmpnei	r16,zero,610
 400986c:	040098a0 	cmpeqi	r16,zero,610
 4009870:	04009890 	cmplti	r16,zero,610
 4009874:	04009890 	cmplti	r16,zero,610
 4009878:	040098a0 	cmpeqi	r16,zero,610
 400987c:	04009890 	cmplti	r16,zero,610
 4009880:	04009898 	cmpnei	r16,zero,610
 4009884:	040098a0 	cmpeqi	r16,zero,610
 4009888:	040098a0 	cmpeqi	r16,zero,610
 400988c:	04009890 	cmplti	r16,zero,610
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4009890:	00800044 	movi	r2,1
 4009894:	00000306 	br	40098a4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4009898:	0005883a 	mov	r2,zero
 400989c:	00000106 	br	40098a4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 40098a0:	0005883a 	mov	r2,zero
  }
}
 40098a4:	e037883a 	mov	sp,fp
 40098a8:	df000017 	ldw	fp,0(sp)
 40098ac:	dec00104 	addi	sp,sp,4
 40098b0:	f800283a 	ret

040098b4 <atexit>:
 40098b4:	200b883a 	mov	r5,r4
 40098b8:	000f883a 	mov	r7,zero
 40098bc:	000d883a 	mov	r6,zero
 40098c0:	0009883a 	mov	r4,zero
 40098c4:	40099181 	jmpi	4009918 <__register_exitproc>

040098c8 <exit>:
 40098c8:	defffe04 	addi	sp,sp,-8
 40098cc:	000b883a 	mov	r5,zero
 40098d0:	dc000015 	stw	r16,0(sp)
 40098d4:	dfc00115 	stw	ra,4(sp)
 40098d8:	2021883a 	mov	r16,r4
 40098dc:	4009a700 	call	4009a70 <__call_exitprocs>
 40098e0:	8009883a 	mov	r4,r16
 40098e4:	4009c000 	call	4009c00 <_exit>

040098e8 <memcmp>:
 40098e8:	218d883a 	add	r6,r4,r6
 40098ec:	21800826 	beq	r4,r6,4009910 <memcmp+0x28>
 40098f0:	20800003 	ldbu	r2,0(r4)
 40098f4:	28c00003 	ldbu	r3,0(r5)
 40098f8:	10c00226 	beq	r2,r3,4009904 <memcmp+0x1c>
 40098fc:	10c5c83a 	sub	r2,r2,r3
 4009900:	f800283a 	ret
 4009904:	21000044 	addi	r4,r4,1
 4009908:	29400044 	addi	r5,r5,1
 400990c:	003ff706 	br	40098ec <__ram_exceptions_end+0xfbfc96a4>
 4009910:	0005883a 	mov	r2,zero
 4009914:	f800283a 	ret

04009918 <__register_exitproc>:
 4009918:	00810074 	movhi	r2,1025
 400991c:	10a8db04 	addi	r2,r2,-23700
 4009920:	10c00017 	ldw	r3,0(r2)
 4009924:	defff904 	addi	sp,sp,-28
 4009928:	dc000015 	stw	r16,0(sp)
 400992c:	1c000c17 	ldw	r16,48(r3)
 4009930:	dd400515 	stw	r21,20(sp)
 4009934:	dd000415 	stw	r20,16(sp)
 4009938:	dcc00315 	stw	r19,12(sp)
 400993c:	dc800215 	stw	r18,8(sp)
 4009940:	dc400115 	stw	r17,4(sp)
 4009944:	dfc00615 	stw	ra,24(sp)
 4009948:	202b883a 	mov	r21,r4
 400994c:	2823883a 	mov	r17,r5
 4009950:	3027883a 	mov	r19,r6
 4009954:	3825883a 	mov	r18,r7
 4009958:	1029883a 	mov	r20,r2
 400995c:	8000021e 	bne	r16,zero,4009968 <__register_exitproc+0x50>
 4009960:	1c000d04 	addi	r16,r3,52
 4009964:	1c000c15 	stw	r16,48(r3)
 4009968:	80800117 	ldw	r2,4(r16)
 400996c:	00c007c4 	movi	r3,31
 4009970:	1880110e 	bge	r3,r2,40099b8 <__register_exitproc+0xa0>
 4009974:	00800034 	movhi	r2,0
 4009978:	10800004 	addi	r2,r2,0
 400997c:	1000021e 	bne	r2,zero,4009988 <__register_exitproc+0x70>
 4009980:	00bfffc4 	movi	r2,-1
 4009984:	00003106 	br	4009a4c <__register_exitproc+0x134>
 4009988:	01002304 	movi	r4,140
 400998c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 4009990:	1021883a 	mov	r16,r2
 4009994:	103ffa26 	beq	r2,zero,4009980 <__ram_exceptions_end+0xfbfc9738>
 4009998:	10000115 	stw	zero,4(r2)
 400999c:	a0800017 	ldw	r2,0(r20)
 40099a0:	10c00c17 	ldw	r3,48(r2)
 40099a4:	80c00015 	stw	r3,0(r16)
 40099a8:	14000c15 	stw	r16,48(r2)
 40099ac:	80002215 	stw	zero,136(r16)
 40099b0:	a8001d26 	beq	r21,zero,4009a28 <__register_exitproc+0x110>
 40099b4:	00000606 	br	40099d0 <__register_exitproc+0xb8>
 40099b8:	a8001b26 	beq	r21,zero,4009a28 <__register_exitproc+0x110>
 40099bc:	80802217 	ldw	r2,136(r16)
 40099c0:	1000091e 	bne	r2,zero,40099e8 <__register_exitproc+0xd0>
 40099c4:	00800034 	movhi	r2,0
 40099c8:	10800004 	addi	r2,r2,0
 40099cc:	103fec26 	beq	r2,zero,4009980 <__ram_exceptions_end+0xfbfc9738>
 40099d0:	01004204 	movi	r4,264
 40099d4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 40099d8:	103fe926 	beq	r2,zero,4009980 <__ram_exceptions_end+0xfbfc9738>
 40099dc:	10004015 	stw	zero,256(r2)
 40099e0:	10004115 	stw	zero,260(r2)
 40099e4:	80802215 	stw	r2,136(r16)
 40099e8:	81400117 	ldw	r5,4(r16)
 40099ec:	01000044 	movi	r4,1
 40099f0:	2947883a 	add	r3,r5,r5
 40099f4:	18c7883a 	add	r3,r3,r3
 40099f8:	10c7883a 	add	r3,r2,r3
 40099fc:	1cc00015 	stw	r19,0(r3)
 4009a00:	2148983a 	sll	r4,r4,r5
 4009a04:	11404017 	ldw	r5,256(r2)
 4009a08:	290ab03a 	or	r5,r5,r4
 4009a0c:	11404015 	stw	r5,256(r2)
 4009a10:	1c802015 	stw	r18,128(r3)
 4009a14:	00c00084 	movi	r3,2
 4009a18:	a8c0031e 	bne	r21,r3,4009a28 <__register_exitproc+0x110>
 4009a1c:	10c04117 	ldw	r3,260(r2)
 4009a20:	1908b03a 	or	r4,r3,r4
 4009a24:	11004115 	stw	r4,260(r2)
 4009a28:	80800117 	ldw	r2,4(r16)
 4009a2c:	10c00044 	addi	r3,r2,1
 4009a30:	10800084 	addi	r2,r2,2
 4009a34:	1085883a 	add	r2,r2,r2
 4009a38:	1085883a 	add	r2,r2,r2
 4009a3c:	80c00115 	stw	r3,4(r16)
 4009a40:	80a1883a 	add	r16,r16,r2
 4009a44:	84400015 	stw	r17,0(r16)
 4009a48:	0005883a 	mov	r2,zero
 4009a4c:	dfc00617 	ldw	ra,24(sp)
 4009a50:	dd400517 	ldw	r21,20(sp)
 4009a54:	dd000417 	ldw	r20,16(sp)
 4009a58:	dcc00317 	ldw	r19,12(sp)
 4009a5c:	dc800217 	ldw	r18,8(sp)
 4009a60:	dc400117 	ldw	r17,4(sp)
 4009a64:	dc000017 	ldw	r16,0(sp)
 4009a68:	dec00704 	addi	sp,sp,28
 4009a6c:	f800283a 	ret

04009a70 <__call_exitprocs>:
 4009a70:	defff504 	addi	sp,sp,-44
 4009a74:	dd000515 	stw	r20,20(sp)
 4009a78:	05010074 	movhi	r20,1025
 4009a7c:	dc800315 	stw	r18,12(sp)
 4009a80:	dfc00a15 	stw	ra,40(sp)
 4009a84:	df000915 	stw	fp,36(sp)
 4009a88:	ddc00815 	stw	r23,32(sp)
 4009a8c:	dd800715 	stw	r22,28(sp)
 4009a90:	dd400615 	stw	r21,24(sp)
 4009a94:	dcc00415 	stw	r19,16(sp)
 4009a98:	dc400215 	stw	r17,8(sp)
 4009a9c:	dc000115 	stw	r16,4(sp)
 4009aa0:	d9000015 	stw	r4,0(sp)
 4009aa4:	2825883a 	mov	r18,r5
 4009aa8:	a528db04 	addi	r20,r20,-23700
 4009aac:	a4400017 	ldw	r17,0(r20)
 4009ab0:	8cc00c17 	ldw	r19,48(r17)
 4009ab4:	8c400c04 	addi	r17,r17,48
 4009ab8:	98004526 	beq	r19,zero,4009bd0 <__call_exitprocs+0x160>
 4009abc:	9c000117 	ldw	r16,4(r19)
 4009ac0:	00900034 	movhi	r2,16384
 4009ac4:	10bfffc4 	addi	r2,r2,-1
 4009ac8:	9d402217 	ldw	r21,136(r19)
 4009acc:	85bfffc4 	addi	r22,r16,-1
 4009ad0:	80a1883a 	add	r16,r16,r2
 4009ad4:	8421883a 	add	r16,r16,r16
 4009ad8:	8421883a 	add	r16,r16,r16
 4009adc:	ac2f883a 	add	r23,r21,r16
 4009ae0:	84000204 	addi	r16,r16,8
 4009ae4:	9c21883a 	add	r16,r19,r16
 4009ae8:	b0002716 	blt	r22,zero,4009b88 <__call_exitprocs+0x118>
 4009aec:	90000726 	beq	r18,zero,4009b0c <__call_exitprocs+0x9c>
 4009af0:	a800041e 	bne	r21,zero,4009b04 <__call_exitprocs+0x94>
 4009af4:	b5bfffc4 	addi	r22,r22,-1
 4009af8:	bdffff04 	addi	r23,r23,-4
 4009afc:	843fff04 	addi	r16,r16,-4
 4009b00:	003ff906 	br	4009ae8 <__ram_exceptions_end+0xfbfc98a0>
 4009b04:	b9002017 	ldw	r4,128(r23)
 4009b08:	913ffa1e 	bne	r18,r4,4009af4 <__ram_exceptions_end+0xfbfc98ac>
 4009b0c:	99000117 	ldw	r4,4(r19)
 4009b10:	82000017 	ldw	r8,0(r16)
 4009b14:	213fffc4 	addi	r4,r4,-1
 4009b18:	b100021e 	bne	r22,r4,4009b24 <__call_exitprocs+0xb4>
 4009b1c:	9d800115 	stw	r22,4(r19)
 4009b20:	00000106 	br	4009b28 <__call_exitprocs+0xb8>
 4009b24:	80000015 	stw	zero,0(r16)
 4009b28:	403ff226 	beq	r8,zero,4009af4 <__ram_exceptions_end+0xfbfc98ac>
 4009b2c:	9f000117 	ldw	fp,4(r19)
 4009b30:	a8000526 	beq	r21,zero,4009b48 <__call_exitprocs+0xd8>
 4009b34:	00800044 	movi	r2,1
 4009b38:	1592983a 	sll	r9,r2,r22
 4009b3c:	a9404017 	ldw	r5,256(r21)
 4009b40:	494a703a 	and	r5,r9,r5
 4009b44:	2800021e 	bne	r5,zero,4009b50 <__call_exitprocs+0xe0>
 4009b48:	403ee83a 	callr	r8
 4009b4c:	00000906 	br	4009b74 <__call_exitprocs+0x104>
 4009b50:	a9004117 	ldw	r4,260(r21)
 4009b54:	4908703a 	and	r4,r9,r4
 4009b58:	2000041e 	bne	r4,zero,4009b6c <__call_exitprocs+0xfc>
 4009b5c:	b9400017 	ldw	r5,0(r23)
 4009b60:	d9000017 	ldw	r4,0(sp)
 4009b64:	403ee83a 	callr	r8
 4009b68:	00000206 	br	4009b74 <__call_exitprocs+0x104>
 4009b6c:	b9000017 	ldw	r4,0(r23)
 4009b70:	403ee83a 	callr	r8
 4009b74:	99000117 	ldw	r4,4(r19)
 4009b78:	e13fcc1e 	bne	fp,r4,4009aac <__ram_exceptions_end+0xfbfc9864>
 4009b7c:	89000017 	ldw	r4,0(r17)
 4009b80:	993fdc26 	beq	r19,r4,4009af4 <__ram_exceptions_end+0xfbfc98ac>
 4009b84:	003fc906 	br	4009aac <__ram_exceptions_end+0xfbfc9864>
 4009b88:	00800034 	movhi	r2,0
 4009b8c:	10800004 	addi	r2,r2,0
 4009b90:	10000f26 	beq	r2,zero,4009bd0 <__call_exitprocs+0x160>
 4009b94:	99400117 	ldw	r5,4(r19)
 4009b98:	99000017 	ldw	r4,0(r19)
 4009b9c:	2800091e 	bne	r5,zero,4009bc4 <__call_exitprocs+0x154>
 4009ba0:	20000826 	beq	r4,zero,4009bc4 <__call_exitprocs+0x154>
 4009ba4:	89000015 	stw	r4,0(r17)
 4009ba8:	a8000226 	beq	r21,zero,4009bb4 <__call_exitprocs+0x144>
 4009bac:	a809883a 	mov	r4,r21
 4009bb0:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 4009bb4:	9809883a 	mov	r4,r19
 4009bb8:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 4009bbc:	8cc00017 	ldw	r19,0(r17)
 4009bc0:	003fbd06 	br	4009ab8 <__ram_exceptions_end+0xfbfc9870>
 4009bc4:	9823883a 	mov	r17,r19
 4009bc8:	2027883a 	mov	r19,r4
 4009bcc:	003fba06 	br	4009ab8 <__ram_exceptions_end+0xfbfc9870>
 4009bd0:	dfc00a17 	ldw	ra,40(sp)
 4009bd4:	df000917 	ldw	fp,36(sp)
 4009bd8:	ddc00817 	ldw	r23,32(sp)
 4009bdc:	dd800717 	ldw	r22,28(sp)
 4009be0:	dd400617 	ldw	r21,24(sp)
 4009be4:	dd000517 	ldw	r20,20(sp)
 4009be8:	dcc00417 	ldw	r19,16(sp)
 4009bec:	dc800317 	ldw	r18,12(sp)
 4009bf0:	dc400217 	ldw	r17,8(sp)
 4009bf4:	dc000117 	ldw	r16,4(sp)
 4009bf8:	dec00b04 	addi	sp,sp,44
 4009bfc:	f800283a 	ret

04009c00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4009c00:	defffd04 	addi	sp,sp,-12
 4009c04:	df000215 	stw	fp,8(sp)
 4009c08:	df000204 	addi	fp,sp,8
 4009c0c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4009c10:	0001883a 	nop
 4009c14:	e0bfff17 	ldw	r2,-4(fp)
 4009c18:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4009c1c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4009c20:	10000226 	beq	r2,zero,4009c2c <_exit+0x2c>
    ALT_SIM_FAIL();
 4009c24:	002af070 	cmpltui	zero,zero,43969
 4009c28:	00000106 	br	4009c30 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4009c2c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4009c30:	003fff06 	br	4009c30 <__ram_exceptions_end+0xfbfc99e8>
