
accel_sketch.elf:     file format elf32-littlenios2
accel_sketch.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08020248

Program Header:
    LOAD off    0x00001000 vaddr 0x08020000 paddr 0x08020000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08020020 paddr 0x08020020 align 2**12
         filesz 0x0000a01c memsz 0x0000a01c flags r-x
    LOAD off    0x0000b03c vaddr 0x0802a03c paddr 0x0802a3f0 align 2**12
         filesz 0x000003b4 memsz 0x000003b4 flags rw-
    LOAD off    0x0000b7a4 vaddr 0x0802a7a4 paddr 0x0802a7a4 align 2**12
         filesz 0x00000000 memsz 0x00000130 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08020000  08020000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000228  08020020  08020020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00009a44  08020248  08020248  00001248  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003b0  08029c8c  08029c8c  0000ac8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000003b4  0802a03c  0802a3f0  0000b03c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000130  0802a7a4  0802a7a4  0000b7a4  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  04000000  04000000  0000b3f0  2**0
                  CONTENTS
  7 .onchip_memory2_0 00000000  0802a8d4  0802a8d4  0000b3f0  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  0000b3f0  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000a48  00000000  00000000  0000b418  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0000d648  00000000  00000000  0000be60  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00004ef5  00000000  00000000  000194a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00006689  00000000  00000000  0001e39d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00001624  00000000  00000000  00024a28  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000306b  00000000  00000000  0002604c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0000a5d1  00000000  00000000  000290b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000060  00000000  00000000  00033688  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001150  00000000  00000000  000336e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0003704e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00037051  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  0003705d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  0003705e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0003705f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00037063  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00037067  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  0003706b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00037076  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00037081  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 0000000c  00000000  00000000  0003708c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000048  00000000  00000000  00037098  2**0
                  CONTENTS, READONLY
 30 .jdi          00005be8  00000000  00000000  000370e0  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     00083f77  00000000  00000000  0003ccc8  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08020000 l    d  .entry	00000000 .entry
08020020 l    d  .exceptions	00000000 .exceptions
08020248 l    d  .text	00000000 .text
08029c8c l    d  .rodata	00000000 .rodata
0802a03c l    d  .rwdata	00000000 .rwdata
0802a7a4 l    d  .bss	00000000 .bss
04000000 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
0802a8d4 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../accel_sketch_bsp//obj/HAL/src/crt0.o
08020290 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 accel_sketch.c
00000000 l    df *ABS*	00000000 s_round.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 sf_round.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
08029d58 l     O .rodata	00000108 two_over_pi
08029cd8 l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
08029ea0 l     O .rodata	00000010 init_jk
08029e60 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 eqsf2.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
080266fc l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0802a03c l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
08026f54 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
080270ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08027220 l     F .text	00000034 alt_dev_reg
0802a11c l     O .rwdata	0000002c jtag_uart_0
0802a148 l     O .rwdata	0000002c accelerometer_spi_0
0802a174 l     O .rwdata	00000054 video_pixel_buffer_dma_0
0802a1c8 l     O .rwdata	00000044 video_rgb_resampler_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
080277e4 l     F .text	0000007c alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_up_avalon_accelerometer_spi.c
00000000 l    df *ABS*	00000000 altera_up_avalon_video_pixel_buffer_dma.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
08028c90 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
08028de4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08028e10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08029074 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
080291b4 l     F .text	0000003c alt_get_errno
080291f0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0802a7d0 g     O .bss	00000004 alt_instruction_exception_handler
08027040 g     F .text	0000007c alt_main
08028558 g     F .text	0000024c alt_up_pixel_buffer_dma_draw_vline
0802a7d4 g     O .bss	00000100 alt_irq
08022e9c g     F .text	00000014 fabs
0802a3f0 g       *ABS*	00000000 __flash_rwdata_start
0802522c g     F .text	00000088 .hidden __eqdf2
0802a7b0 g     O .bss	00000004 timeoutFlag
080266b0 g     F .text	0000004c printf
08020fbc g     F .text	00000100 round
080238d0 g     F .text	00000440 .hidden __divsf3
0802a3b4 g     O .rwdata	00000004 x
080247ec g     F .text	00000070 .hidden __fixsfsi
08027cc0 g     F .text	00000194 alt_up_pixel_buffer_dma_draw
080252b4 g     F .text	000000dc .hidden __gtdf2
08029610 g     F .text	00000024 altera_nios2_gen2_irq_init
08027c84 g     F .text	0000003c alt_up_pixel_buffer_dma_open_dev
08020000 g     F .entry	0000001c __reset
08027a20 g     F .text	000000cc alt_up_accelerometer_spi_read_x_axis
080205e0 g     F .text	00000638 colorCalc
08020020 g       *ABS*	00000000 __flash_exceptions_start
0802a7b4 g     O .bss	00000004 errno
08022eb0 g     F .text	000001ec floor
0802a7c0 g     O .bss	00000004 alt_argv
080323b4 g       *ABS*	00000000 _gp
080270bc g     F .text	00000030 usleep
08024308 g     F .text	000004e4 .hidden __subsf3
08027e54 g     F .text	0000005c alt_up_pixel_buffer_dma_change_back_buffer_address
0802a234 g     O .rwdata	00000180 alt_fd_list
08021230 g     F .text	0000076c __ieee754_rem_pio2
08028fb0 g     F .text	00000090 alt_find_dev
08026424 g     F .text	000000dc .hidden __floatsidf
08029138 g     F .text	0000007c alt_io_redirect
08029c8c g       *ABS*	00000000 __DTOR_END__
08029870 g     F .text	0000009c alt_exception_cause_generated_bad_addr
08020d84 g     F .text	000000fc mapi
08027f10 g     F .text	00000034 alt_up_pixel_buffer_dma_check_swap_buffers_status
08027664 g     F .text	000000ec altera_avalon_jtag_uart_read
08026674 g     F .text	0000003c _printf_r
08020000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0802334c g     F .text	00000064 .hidden __udivsi3
080211ac g     F .text	00000084 roundf
08028348 g     F .text	00000210 alt_up_pixel_buffer_dma_draw_hline
0802199c g     F .text	000004a4 __kernel_cos
08023e44 g     F .text	000000c8 .hidden __lesf2
080297e0 g     F .text	00000090 alt_icache_flush
0802886c g     F .text	00000084 helper_plot_pixel
0802a3e0 g     O .rwdata	00000004 alt_max_fd
08026dd4 g     F .text	00000180 alt_irq_register
0802a3bc g     O .rwdata	00000004 xFloat
08022bd0 g     F .text	000002cc __kernel_sin
08026500 g     F .text	00000110 .hidden __extendsfdf2
08024980 g     F .text	000008ac .hidden __adddf3
08023d10 g     F .text	00000078 .hidden __nesf2
08027f44 g     F .text	00000128 alt_up_pixel_buffer_dma_clear_screen
0802a3c4 g     O .rwdata	00000004 _global_impure_ptr
0802a8d4 g       *ABS*	00000000 __bss_end
0802806c g     F .text	000002dc alt_up_pixel_buffer_dma_draw_box
08029508 g     F .text	00000108 alt_tick
0802946c g     F .text	0000009c alt_alarm_stop
0802a7b8 g     O .bss	00000004 alt_irq_active
080200fc g     F .exceptions	000000d8 alt_irq_handler
0802a20c g     O .rwdata	00000028 alt_dev_null
08021e40 g     F .text	00000d90 __kernel_rem_pio2
08028d9c g     F .text	00000048 alt_dcache_flush_all
080287a4 g     F .text	000000c8 alt_up_pixel_buffer_dma_draw_rectangle
080263a4 g     F .text	00000080 .hidden __fixdfsi
0802a3f0 g       *ABS*	00000000 __ram_rwdata_end
0802a3d8 g     O .rwdata	00000008 alt_dev_list
08027128 g     F .text	000000f8 write
080288f0 g     F .text	00000248 alt_up_pixel_buffer_dma_draw_line
08023d88 g     F .text	000000bc .hidden __gtsf2
0802a03c g       *ABS*	00000000 __ram_rodata_end
080233b0 g     F .text	00000058 .hidden __umodsi3
0802a7a4 g     O .bss	00000004 colorToDraw
0802a8d4 g       *ABS*	00000000 end
080201d4 g     F .exceptions	00000074 alt_instruction_exception_entry
08029c8c g       *ABS*	00000000 __CTOR_LIST__
080386a0 g       *ABS*	00000000 __alt_stack_pointer
08027860 g     F .text	00000074 alt_avalon_timer_sc_init
08026610 g     F .text	00000064 .hidden __clzsi2
08027750 g     F .text	00000094 altera_avalon_jtag_uart_write
08026768 g     F .text	00000524 ___vfprintf_internal_r
08029ac8 g     F .text	00000190 __call_exitprocs
08020248 g     F .text	0000004c _start
0802a7c8 g     O .bss	00000004 _alt_tick_rate
080210bc g     F .text	000000f0 sin
0802a7cc g     O .bss	00000004 _alt_nticks
0802728c g     F .text	00000318 alt_sys_init
08027910 g     F .text	00000044 alt_up_accelerometer_spi_read_address_register
0802485c g     F .text	00000124 .hidden __floatsisf
08029970 g     F .text	00000158 __register_exitproc
0802a03c g       *ABS*	00000000 __ram_rwdata_start
08029c8c g       *ABS*	00000000 __ram_rodata_start
08023d10 g     F .text	00000078 .hidden __eqsf2
080275a4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0802973c g     F .text	000000a4 alt_get_fd
08028b38 g     F .text	00000158 alt_busy_sleep
08027aec g     F .text	000000cc alt_up_accelerometer_spi_read_y_axis
08029940 g     F .text	00000030 memcmp
08020c18 g     F .text	0000016c cursorMove
0802a8d4 g       *ABS*	00000000 __alt_stack_base
08025390 g     F .text	00000718 .hidden __muldf3
0802a7ac g     O .bss	00000004 tRainbow
08029634 g     F .text	00000108 alt_find_file
08028e4c g     F .text	000000a4 alt_dev_llist_insert
08026ca8 g     F .text	000000b8 __sfvwrite_small_dev
0802a7a4 g       *ABS*	00000000 __bss_start
08020294 g     F .text	0000034c main
0802a7c4 g     O .bss	00000004 alt_envp
08027eb0 g     F .text	00000060 alt_up_pixel_buffer_dma_swap_buffers
08027604 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08023e44 g     F .text	000000c8 .hidden __ltsf2
0802a3b8 g     O .rwdata	00000004 y
0802a3e4 g     O .rwdata	00000004 alt_errno
0802a3c0 g     O .rwdata	00000004 yFloat
08023254 g     F .text	00000084 .hidden __divsi3
08029c8c g       *ABS*	00000000 __CTOR_END__
08023f0c g     F .text	000003fc .hidden __mulsf3
08029c8c g       *ABS*	00000000 __flash_rodata_start
08029c8c g       *ABS*	00000000 __DTOR_LIST__
08023238 g     F .text	0000001c copysign
0802522c g     F .text	00000088 .hidden __nedf2
08027254 g     F .text	00000038 alt_irq_init
08029408 g     F .text	00000064 alt_release_fd
08020f74 g     F .text	00000048 timer_0_isr
08029eb0 g     O .rodata	00000100 .hidden __clz_tab
0802990c g     F .text	00000014 atexit
08023d88 g     F .text	000000bc .hidden __gesf2
08026d7c g     F .text	00000058 _write_r
0802a3c8 g     O .rwdata	00000004 _impure_ptr
0802a7bc g     O .bss	00000004 alt_argc
0802309c g     F .text	0000019c scalbn
08028f50 g     F .text	00000060 _do_dtors
08020020 g       .exceptions	00000000 alt_irq_entry
0802a3d0 g     O .rwdata	00000008 alt_fs_list
08020020 g       *ABS*	00000000 __ram_exceptions_start
080278d4 g     F .text	0000003c alt_up_accelerometer_spi_open_dev
04000000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0802a3f0 g       *ABS*	00000000 _edata
0802a8d4 g       *ABS*	00000000 _end
08020248 g       *ABS*	00000000 __ram_exceptions_end
08029920 g     F .text	00000020 exit
080232d8 g     F .text	00000074 .hidden __modsi3
08027bb8 g     F .text	000000cc alt_up_accelerometer_spi_read_z_axis
080386a0 g       *ABS*	00000000 __alt_data_end
08020020 g     F .exceptions	00000000 alt_exception
08029c58 g     F .text	00000034 _exit
08027954 g     F .text	00000068 alt_up_accelerometer_spi_read
080279bc g     F .text	00000064 alt_up_accelerometer_spi_write
08026d60 g     F .text	0000001c strlen
080292b4 g     F .text	00000154 open
080252b4 g     F .text	000000dc .hidden __gedf2
08029040 g     F .text	00000034 alt_icache_flush_all
08020e80 g     F .text	000000f4 mapf
0802a3cc g     O .rwdata	00000004 alt_priority_mask
08026c8c g     F .text	0000001c __vfprintf_internal
08025aa8 g     F .text	000008fc .hidden __subdf3
0802a3e8 g     O .rwdata	00000008 alt_alarm_list
08028ef0 g     F .text	00000060 _do_ctors
08028ccc g     F .text	000000d0 close
08023408 g     F .text	000004c8 .hidden __addsf3
0802a7a8 g     O .bss	00000004 rainbowFlag
08026fbc g     F .text	00000084 alt_load



Disassembly of section .entry:

08020000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8020000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8020004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8020008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 802000c:	00bffd16 	blt	zero,r2,8020004 <__alt_data_end+0xfffe7964>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8020010:	004200b4 	movhi	at,2050
    ori r1, r1, %lo(_start)
 8020014:	08409214 	ori	at,at,584
    jmp r1
 8020018:	0800683a 	jmp	at
 802001c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>

Disassembly of section .exceptions:

08020020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8020020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8020024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8020028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 802002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8020030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8020034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8020038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 802003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8020040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8020044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8020048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 802004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8020050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8020054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8020058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 802005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8020060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8020064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8020068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 802006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8020070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8020074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8020078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 802007c:	10000326 	beq	r2,zero,802008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8020080:	20000226 	beq	r4,zero,802008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8020084:	80200fc0 	call	80200fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8020088:	00000706 	br	80200a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 802008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8020090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8020094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8020098:	80201d40 	call	80201d4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 802009c:	1000021e 	bne	r2,zero,80200a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80200a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80200a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80200a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80200ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80200b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80200b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80200b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80200bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80200c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80200c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80200c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80200cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80200d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80200d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80200d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80200dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80200e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80200e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80200e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80200ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80200f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80200f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80200f8:	ef80083a 	eret

080200fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80200fc:	defff904 	addi	sp,sp,-28
 8020100:	dfc00615 	stw	ra,24(sp)
 8020104:	df000515 	stw	fp,20(sp)
 8020108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 802010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020110:	0005313a 	rdctl	r2,ipending
 8020114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8020118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 802011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8020120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8020124:	00800044 	movi	r2,1
 8020128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 802012c:	e0fffb17 	ldw	r3,-20(fp)
 8020130:	e0bffc17 	ldw	r2,-16(fp)
 8020134:	1884703a 	and	r2,r3,r2
 8020138:	10001526 	beq	r2,zero,8020190 <alt_irq_handler+0x94>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
 802013c:	008200f4 	movhi	r2,2051
 8020140:	10a9f504 	addi	r2,r2,-22572
 8020144:	e0fffd17 	ldw	r3,-12(fp)
 8020148:	180690fa 	slli	r3,r3,3
 802014c:	10c5883a 	add	r2,r2,r3
 8020150:	10c00017 	ldw	r3,0(r2)
 8020154:	008200f4 	movhi	r2,2051
 8020158:	10a9f504 	addi	r2,r2,-22572
 802015c:	e13ffd17 	ldw	r4,-12(fp)
 8020160:	200890fa 	slli	r4,r4,3
 8020164:	1105883a 	add	r2,r2,r4
 8020168:	10800104 	addi	r2,r2,4
 802016c:	10800017 	ldw	r2,0(r2)
 8020170:	e17ffd17 	ldw	r5,-12(fp)
 8020174:	1009883a 	mov	r4,r2
 8020178:	183ee83a 	callr	r3
#endif
        break;
 802017c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8020180:	0005313a 	rdctl	r2,ipending
 8020184:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8020188:	e0bfff17 	ldw	r2,-4(fp)
 802018c:	00000706 	br	80201ac <alt_irq_handler+0xb0>
      }
      mask <<= 1;
 8020190:	e0bffc17 	ldw	r2,-16(fp)
 8020194:	1085883a 	add	r2,r2,r2
 8020198:	e0bffc15 	stw	r2,-16(fp)
      i++;
 802019c:	e0bffd17 	ldw	r2,-12(fp)
 80201a0:	10800044 	addi	r2,r2,1
 80201a4:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80201a8:	003fe006 	br	802012c <__alt_data_end+0xfffe7a8c>

    active = alt_irq_pending ();
 80201ac:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80201b0:	e0bffb17 	ldw	r2,-20(fp)
 80201b4:	103fda1e 	bne	r2,zero,8020120 <__alt_data_end+0xfffe7a80>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80201b8:	0001883a 	nop
}
 80201bc:	0001883a 	nop
 80201c0:	e037883a 	mov	sp,fp
 80201c4:	dfc00117 	ldw	ra,4(sp)
 80201c8:	df000017 	ldw	fp,0(sp)
 80201cc:	dec00204 	addi	sp,sp,8
 80201d0:	f800283a 	ret

080201d4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80201d4:	defffb04 	addi	sp,sp,-20
 80201d8:	dfc00415 	stw	ra,16(sp)
 80201dc:	df000315 	stw	fp,12(sp)
 80201e0:	df000304 	addi	fp,sp,12
 80201e4:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80201e8:	000531fa 	rdctl	r2,exception
 80201ec:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80201f0:	e0bffd17 	ldw	r2,-12(fp)
 80201f4:	10801f0c 	andi	r2,r2,124
 80201f8:	1004d0ba 	srli	r2,r2,2
 80201fc:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 8020200:	0005333a 	rdctl	r2,badaddr
 8020204:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8020208:	d0a10717 	ldw	r2,-31716(gp)
 802020c:	10000726 	beq	r2,zero,802022c <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8020210:	d0a10717 	ldw	r2,-31716(gp)
 8020214:	e0fffd17 	ldw	r3,-12(fp)
 8020218:	e1bffe17 	ldw	r6,-8(fp)
 802021c:	e17fff17 	ldw	r5,-4(fp)
 8020220:	1809883a 	mov	r4,r3
 8020224:	103ee83a 	callr	r2
 8020228:	00000206 	br	8020234 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 802022c:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8020230:	0005883a 	mov	r2,zero
}
 8020234:	e037883a 	mov	sp,fp
 8020238:	dfc00117 	ldw	ra,4(sp)
 802023c:	df000017 	ldw	fp,0(sp)
 8020240:	dec00204 	addi	sp,sp,8
 8020244:	f800283a 	ret

Disassembly of section .text:

08020248 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8020248:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 802024c:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8020250:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 8020254:	00bffd16 	blt	zero,r2,802024c <__alt_data_end+0xfffe7bac>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8020258:	06c200f4 	movhi	sp,2051
    ori sp, sp, %lo(__alt_stack_pointer)
 802025c:	dee1a814 	ori	sp,sp,34464
    movhi gp, %hi(_gp)
 8020260:	068200f4 	movhi	gp,2051
    ori gp, gp, %lo(_gp)
 8020264:	d688ed14 	ori	gp,gp,9140
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8020268:	008200b4 	movhi	r2,2050
    ori r2, r2, %lo(__bss_start)
 802026c:	10a9e914 	ori	r2,r2,42916

    movhi r3, %hi(__bss_end)
 8020270:	00c200b4 	movhi	r3,2050
    ori r3, r3, %lo(__bss_end)
 8020274:	18ea3514 	ori	r3,r3,43220

    beq r2, r3, 1f
 8020278:	10c00326 	beq	r2,r3,8020288 <_start+0x40>

0:
    stw zero, (r2)
 802027c:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8020280:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8020284:	10fffd36 	bltu	r2,r3,802027c <__alt_data_end+0xfffe7bdc>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8020288:	8026fbc0 	call	8026fbc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 802028c:	80270400 	call	8027040 <alt_main>

08020290 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8020290:	003fff06 	br	8020290 <__alt_data_end+0xfffe7bf0>

08020294 <main>:
int tRainbow = 0;

// timer flag for constant time between frames
volatile int timeoutFlag = 0;

int main(){
 8020294:	defff704 	addi	sp,sp,-36
 8020298:	dfc00815 	stw	ra,32(sp)
 802029c:	df000715 	stw	fp,28(sp)
 80202a0:	dc000615 	stw	r16,24(sp)
 80202a4:	df000704 	addi	fp,sp,28
  printf("entered main");
 80202a8:	010200f4 	movhi	r4,2051
 80202ac:	21272304 	addi	r4,r4,-25460
 80202b0:	80266b00 	call	80266b0 <printf>

  // create pointer to pixel buffer
  alt_up_pixel_buffer_dma_dev* pixel_buffer;
  pixel_buffer = alt_up_pixel_buffer_dma_open_dev("/dev/video_pixel_buffer_dma_0");
 80202b4:	010200f4 	movhi	r4,2051
 80202b8:	21272704 	addi	r4,r4,-25444
 80202bc:	8027c840 	call	8027c84 <alt_up_pixel_buffer_dma_open_dev>
 80202c0:	e0bffc15 	stw	r2,-16(fp)

  // create pointer to accelerometer
  alt_up_accelerometer_spi_dev* accel;
  accel = alt_up_accelerometer_spi_open_dev("/dev/accelerometer_spi_0");
 80202c4:	010200f4 	movhi	r4,2051
 80202c8:	21272f04 	addi	r4,r4,-25412
 80202cc:	80278d40 	call	80278d4 <alt_up_accelerometer_spi_open_dev>
 80202d0:	e0bffd15 	stw	r2,-12(fp)

  // initialize timer settings
  IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE, 0x7);
 80202d4:	00c001c4 	movi	r3,7
 80202d8:	00820134 	movhi	r2,2052
 80202dc:	10840104 	addi	r2,r2,4100
 80202e0:	10c00035 	stwio	r3,0(r2)

  // initialize timer IRQ with legacy function
  void* timeoutFlag_ptr = (void*) &timeoutFlag;
 80202e4:	d0a0ff04 	addi	r2,gp,-31748
 80202e8:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_register(
 80202ec:	018200b4 	movhi	r6,2050
 80202f0:	3183dd04 	addi	r6,r6,3956
 80202f4:	e17ffe17 	ldw	r5,-8(fp)
 80202f8:	01000044 	movi	r4,1
 80202fc:	8026dd40 	call	8026dd4 <alt_irq_register>
    timeoutFlag_ptr,
    timer_0_isr
  );

  // initial screen clear
  alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,0);
 8020300:	000b883a 	mov	r5,zero
 8020304:	e13ffc17 	ldw	r4,-16(fp)
 8020308:	8027f440 	call	8027f44 <alt_up_pixel_buffer_dma_clear_screen>
  usleep(20000);
 802030c:	01138804 	movi	r4,20000
 8020310:	80270bc0 	call	80270bc <usleep>

  while(1){
    // wait for timeout to prevent flickering
    if(timeoutFlag == 1){
 8020314:	d0a0ff17 	ldw	r2,-31748(gp)
 8020318:	10800058 	cmpnei	r2,r2,1
 802031c:	103ffd1e 	bne	r2,zero,8020314 <__alt_data_end+0xfffe7c74>
      // calculate color to draw
      colorToDraw = colorCalc();
 8020320:	80205e00 	call	80205e0 <colorCalc>
 8020324:	d0a0fc15 	stw	r2,-31760(gp)

      // KEY1 allows quick erasing without changing SW
      if(IORD(PIO_PUSH_BASE,0) == 0b01){
 8020328:	00820134 	movhi	r2,2052
 802032c:	10841004 	addi	r2,r2,4160
 8020330:	10800037 	ldwio	r2,0(r2)
 8020334:	10800058 	cmpnei	r2,r2,1
 8020338:	1000411e 	bne	r2,zero,8020440 <main+0x1ac>
        // calculate next cursor position
        cursorMove(accel);
 802033c:	e13ffd17 	ldw	r4,-12(fp)
 8020340:	8020c180 	call	8020c18 <cursorMove>

        // move on-screen cursor if position has changed
        if((roundf(xFloat) != x) || (roundf(yFloat) != y)){
 8020344:	d0a00217 	ldw	r2,-32760(gp)
 8020348:	1009883a 	mov	r4,r2
 802034c:	80211ac0 	call	80211ac <roundf>
 8020350:	1021883a 	mov	r16,r2
 8020354:	d0a00017 	ldw	r2,-32768(gp)
 8020358:	1009883a 	mov	r4,r2
 802035c:	802485c0 	call	802485c <__floatsisf>
 8020360:	1007883a 	mov	r3,r2
 8020364:	180b883a 	mov	r5,r3
 8020368:	8009883a 	mov	r4,r16
 802036c:	8023d100 	call	8023d10 <__eqsf2>
 8020370:	10000c1e 	bne	r2,zero,80203a4 <main+0x110>
 8020374:	d0a00317 	ldw	r2,-32756(gp)
 8020378:	1009883a 	mov	r4,r2
 802037c:	80211ac0 	call	80211ac <roundf>
 8020380:	1021883a 	mov	r16,r2
 8020384:	d0a00117 	ldw	r2,-32764(gp)
 8020388:	1009883a 	mov	r4,r2
 802038c:	802485c0 	call	802485c <__floatsisf>
 8020390:	1007883a 	mov	r3,r2
 8020394:	180b883a 	mov	r5,r3
 8020398:	8009883a 	mov	r4,r16
 802039c:	8023d100 	call	8023d10 <__eqsf2>
 80203a0:	10002726 	beq	r2,zero,8020440 <main+0x1ac>
          // fill previous position with black; erase
          alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0x0000,0);
 80203a4:	d0e00017 	ldw	r3,-32768(gp)
 80203a8:	d1200117 	ldw	r4,-32764(gp)
 80203ac:	d1600017 	ldw	r5,-32768(gp)
 80203b0:	d0a00117 	ldw	r2,-32764(gp)
 80203b4:	d8000215 	stw	zero,8(sp)
 80203b8:	d8000115 	stw	zero,4(sp)
 80203bc:	d8800015 	stw	r2,0(sp)
 80203c0:	280f883a 	mov	r7,r5
 80203c4:	200d883a 	mov	r6,r4
 80203c8:	180b883a 	mov	r5,r3
 80203cc:	e13ffc17 	ldw	r4,-16(fp)
 80203d0:	802806c0 	call	802806c <alt_up_pixel_buffer_dma_draw_box>

          // adjust grid coords to follow floating coords
          x = roundf(xFloat);
 80203d4:	d0a00217 	ldw	r2,-32760(gp)
 80203d8:	1009883a 	mov	r4,r2
 80203dc:	80211ac0 	call	80211ac <roundf>
 80203e0:	1007883a 	mov	r3,r2
 80203e4:	1809883a 	mov	r4,r3
 80203e8:	80247ec0 	call	80247ec <__fixsfsi>
 80203ec:	d0a00015 	stw	r2,-32768(gp)
          y = roundf(yFloat);
 80203f0:	d0a00317 	ldw	r2,-32756(gp)
 80203f4:	1009883a 	mov	r4,r2
 80203f8:	80211ac0 	call	80211ac <roundf>
 80203fc:	1007883a 	mov	r3,r2
 8020400:	1809883a 	mov	r4,r3
 8020404:	80247ec0 	call	80247ec <__fixsfsi>
 8020408:	d0a00115 	stw	r2,-32764(gp)

          // redraw cursor
          alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 802040c:	d1200017 	ldw	r4,-32768(gp)
 8020410:	d1600117 	ldw	r5,-32764(gp)
 8020414:	d1a00017 	ldw	r6,-32768(gp)
 8020418:	d0a00117 	ldw	r2,-32764(gp)
 802041c:	d8000215 	stw	zero,8(sp)
 8020420:	00ffffd4 	movui	r3,65535
 8020424:	d8c00115 	stw	r3,4(sp)
 8020428:	d8800015 	stw	r2,0(sp)
 802042c:	300f883a 	mov	r7,r6
 8020430:	280d883a 	mov	r6,r5
 8020434:	200b883a 	mov	r5,r4
 8020438:	e13ffc17 	ldw	r4,-16(fp)
 802043c:	802806c0 	call	802806c <alt_up_pixel_buffer_dma_draw_box>
        }
      }

      // KEY0 allows drawing calculated color
      if(IORD(PIO_PUSH_BASE,0) == 0b10){
 8020440:	00820134 	movhi	r2,2052
 8020444:	10841004 	addi	r2,r2,4160
 8020448:	10800037 	ldwio	r2,0(r2)
 802044c:	10800098 	cmpnei	r2,r2,2
 8020450:	1000441e 	bne	r2,zero,8020564 <main+0x2d0>
        // calculate next cursor position
        cursorMove(accel);
 8020454:	e13ffd17 	ldw	r4,-12(fp)
 8020458:	8020c180 	call	8020c18 <cursorMove>

        // move on-screen cursor if position has changed
        if((roundf(xFloat) != x) || (roundf(yFloat) != y)){
 802045c:	d0a00217 	ldw	r2,-32760(gp)
 8020460:	1009883a 	mov	r4,r2
 8020464:	80211ac0 	call	80211ac <roundf>
 8020468:	1021883a 	mov	r16,r2
 802046c:	d0a00017 	ldw	r2,-32768(gp)
 8020470:	1009883a 	mov	r4,r2
 8020474:	802485c0 	call	802485c <__floatsisf>
 8020478:	1007883a 	mov	r3,r2
 802047c:	180b883a 	mov	r5,r3
 8020480:	8009883a 	mov	r4,r16
 8020484:	8023d100 	call	8023d10 <__eqsf2>
 8020488:	10000c1e 	bne	r2,zero,80204bc <main+0x228>
 802048c:	d0a00317 	ldw	r2,-32756(gp)
 8020490:	1009883a 	mov	r4,r2
 8020494:	80211ac0 	call	80211ac <roundf>
 8020498:	1021883a 	mov	r16,r2
 802049c:	d0a00117 	ldw	r2,-32764(gp)
 80204a0:	1009883a 	mov	r4,r2
 80204a4:	802485c0 	call	802485c <__floatsisf>
 80204a8:	1007883a 	mov	r3,r2
 80204ac:	180b883a 	mov	r5,r3
 80204b0:	8009883a 	mov	r4,r16
 80204b4:	8023d100 	call	8023d10 <__eqsf2>
 80204b8:	10002a26 	beq	r2,zero,8020564 <main+0x2d0>
          // fill previous position with color to be drawn
          alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,colorToDraw,0);
 80204bc:	d1200017 	ldw	r4,-32768(gp)
 80204c0:	d1600117 	ldw	r5,-32764(gp)
 80204c4:	d1a00017 	ldw	r6,-32768(gp)
 80204c8:	d0a00117 	ldw	r2,-32764(gp)
 80204cc:	d0e0fc17 	ldw	r3,-31760(gp)
 80204d0:	d8000215 	stw	zero,8(sp)
 80204d4:	d8c00115 	stw	r3,4(sp)
 80204d8:	d8800015 	stw	r2,0(sp)
 80204dc:	300f883a 	mov	r7,r6
 80204e0:	280d883a 	mov	r6,r5
 80204e4:	200b883a 	mov	r5,r4
 80204e8:	e13ffc17 	ldw	r4,-16(fp)
 80204ec:	802806c0 	call	802806c <alt_up_pixel_buffer_dma_draw_box>

          // adjust grid coords to follow floating coords
          x = roundf(xFloat);
 80204f0:	d0a00217 	ldw	r2,-32760(gp)
 80204f4:	1009883a 	mov	r4,r2
 80204f8:	80211ac0 	call	80211ac <roundf>
 80204fc:	1007883a 	mov	r3,r2
 8020500:	1809883a 	mov	r4,r3
 8020504:	80247ec0 	call	80247ec <__fixsfsi>
 8020508:	d0a00015 	stw	r2,-32768(gp)
          y = roundf(yFloat);
 802050c:	d0a00317 	ldw	r2,-32756(gp)
 8020510:	1009883a 	mov	r4,r2
 8020514:	80211ac0 	call	80211ac <roundf>
 8020518:	1007883a 	mov	r3,r2
 802051c:	1809883a 	mov	r4,r3
 8020520:	80247ec0 	call	80247ec <__fixsfsi>
 8020524:	d0a00115 	stw	r2,-32764(gp)

          // redraw cursor
          alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 8020528:	d1200017 	ldw	r4,-32768(gp)
 802052c:	d1600117 	ldw	r5,-32764(gp)
 8020530:	d1a00017 	ldw	r6,-32768(gp)
 8020534:	d0a00117 	ldw	r2,-32764(gp)
 8020538:	d8000215 	stw	zero,8(sp)
 802053c:	00ffffd4 	movui	r3,65535
 8020540:	d8c00115 	stw	r3,4(sp)
 8020544:	d8800015 	stw	r2,0(sp)
 8020548:	300f883a 	mov	r7,r6
 802054c:	280d883a 	mov	r6,r5
 8020550:	200b883a 	mov	r5,r4
 8020554:	e13ffc17 	ldw	r4,-16(fp)
 8020558:	802806c0 	call	802806c <alt_up_pixel_buffer_dma_draw_box>

          // set rainbow flag
          rainbowFlag = 1;
 802055c:	00800044 	movi	r2,1
 8020560:	d0a0fd15 	stw	r2,-31756(gp)
        }
      }

      // both KEYs simultaneously clears screen after holding for 2 sec
      if(IORD(PIO_PUSH_BASE,0) == 0b00){
 8020564:	00820134 	movhi	r2,2052
 8020568:	10841004 	addi	r2,r2,4160
 802056c:	10800037 	ldwio	r2,0(r2)
 8020570:	1000191e 	bne	r2,zero,80205d8 <main+0x344>
        usleep(2000000);
 8020574:	010007f4 	movhi	r4,31
 8020578:	21212004 	addi	r4,r4,-31616
 802057c:	80270bc0 	call	80270bc <usleep>
        if(IORD(PIO_PUSH_BASE,0) == 0b00){
 8020580:	00820134 	movhi	r2,2052
 8020584:	10841004 	addi	r2,r2,4160
 8020588:	10800037 	ldwio	r2,0(r2)
 802058c:	1000121e 	bne	r2,zero,80205d8 <main+0x344>
          alt_up_pixel_buffer_dma_clear_screen(pixel_buffer,0);
 8020590:	000b883a 	mov	r5,zero
 8020594:	e13ffc17 	ldw	r4,-16(fp)
 8020598:	8027f440 	call	8027f44 <alt_up_pixel_buffer_dma_clear_screen>
          usleep(20000);
 802059c:	01138804 	movi	r4,20000
 80205a0:	80270bc0 	call	80270bc <usleep>

          // redraw cursor
          alt_up_pixel_buffer_dma_draw_box(pixel_buffer,x,y,x,y,0xFFFF,0);
 80205a4:	d1200017 	ldw	r4,-32768(gp)
 80205a8:	d1600117 	ldw	r5,-32764(gp)
 80205ac:	d1a00017 	ldw	r6,-32768(gp)
 80205b0:	d0a00117 	ldw	r2,-32764(gp)
 80205b4:	d8000215 	stw	zero,8(sp)
 80205b8:	00ffffd4 	movui	r3,65535
 80205bc:	d8c00115 	stw	r3,4(sp)
 80205c0:	d8800015 	stw	r2,0(sp)
 80205c4:	300f883a 	mov	r7,r6
 80205c8:	280d883a 	mov	r6,r5
 80205cc:	200b883a 	mov	r5,r4
 80205d0:	e13ffc17 	ldw	r4,-16(fp)
 80205d4:	802806c0 	call	802806c <alt_up_pixel_buffer_dma_draw_box>
        }
      }

      // reset timer flag
      timeoutFlag = 0;
 80205d8:	d020ff15 	stw	zero,-31748(gp)
    }
  }
 80205dc:	003f4d06 	br	8020314 <__alt_data_end+0xfffe7c74>

080205e0 <colorCalc>:

//////////////////////////////////////
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
 80205e0:	defff504 	addi	sp,sp,-44
 80205e4:	dfc00a15 	stw	ra,40(sp)
 80205e8:	df000915 	stw	fp,36(sp)
 80205ec:	dc400815 	stw	r17,32(sp)
 80205f0:	dc000715 	stw	r16,28(sp)
 80205f4:	df000904 	addi	fp,sp,36
  // input color variables w/ assignment based on SW0-8
  int redIn = (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 80205f8:	00820134 	movhi	r2,2052
 80205fc:	10840c04 	addi	r2,r2,4144
 8020600:	10800037 	ldwio	r2,0(r2)
 8020604:	1080400c 	andi	r2,r2,256
 8020608:	1005d23a 	srai	r2,r2,8
 802060c:	100691fa 	slli	r3,r2,7
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
 8020610:	00820134 	movhi	r2,2052
 8020614:	10840c04 	addi	r2,r2,4144
 8020618:	10800037 	ldwio	r2,0(r2)
 802061c:	1080200c 	andi	r2,r2,128
 8020620:	1005d1fa 	srai	r2,r2,7
 8020624:	10801564 	muli	r2,r2,85
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
  // input color variables w/ assignment based on SW0-8
  int redIn = (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 8020628:	1887883a 	add	r3,r3,r2
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
 802062c:	00820134 	movhi	r2,2052
 8020630:	10840c04 	addi	r2,r2,4144
 8020634:	10800037 	ldwio	r2,0(r2)
 8020638:	1080100c 	andi	r2,r2,64
 802063c:	1005d1ba 	srai	r2,r2,6
 8020640:	10800aa4 	muli	r2,r2,42
// Calculates the next color to be drawn on the screen
//  - Displays next color to be drawn on the screen in hex using SSDs
//  - Handles rainbow color calculations
int colorCalc(){
  // input color variables w/ assignment based on SW0-8
  int redIn = (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
 8020644:	1885883a 	add	r2,r3,r2
 8020648:	e0bffb15 	stw	r2,-20(fp)
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
  int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 802064c:	00820134 	movhi	r2,2052
 8020650:	10840c04 	addi	r2,r2,4144
 8020654:	10800037 	ldwio	r2,0(r2)
 8020658:	1080080c 	andi	r2,r2,32
 802065c:	1005d17a 	srai	r2,r2,5
 8020660:	100691fa 	slli	r3,r2,7
                (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
 8020664:	00820134 	movhi	r2,2052
 8020668:	10840c04 	addi	r2,r2,4144
 802066c:	10800037 	ldwio	r2,0(r2)
 8020670:	1080040c 	andi	r2,r2,16
 8020674:	1005d13a 	srai	r2,r2,4
 8020678:	10801564 	muli	r2,r2,85
int colorCalc(){
  // input color variables w/ assignment based on SW0-8
  int redIn = (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
  int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 802067c:	1887883a 	add	r3,r3,r2
                (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
                (((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
 8020680:	00820134 	movhi	r2,2052
 8020684:	10840c04 	addi	r2,r2,4144
 8020688:	10800037 	ldwio	r2,0(r2)
 802068c:	1080020c 	andi	r2,r2,8
 8020690:	1005d0fa 	srai	r2,r2,3
 8020694:	10800aa4 	muli	r2,r2,42
int colorCalc(){
  // input color variables w/ assignment based on SW0-8
  int redIn = (((IORD(PIO_SW_BASE,0) & 0x100) >> 8)* 128) +
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
  int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
 8020698:	1885883a 	add	r2,r3,r2
 802069c:	e0bffc15 	stw	r2,-16(fp)
                (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
                (((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
  int blueIn = (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 80206a0:	00820134 	movhi	r2,2052
 80206a4:	10840c04 	addi	r2,r2,4144
 80206a8:	10800037 	ldwio	r2,0(r2)
 80206ac:	1080010c 	andi	r2,r2,4
 80206b0:	1005d0ba 	srai	r2,r2,2
 80206b4:	100691fa 	slli	r3,r2,7
               (((IORD(PIO_SW_BASE,0) & 0x002) >> 1)* 85) +
 80206b8:	00820134 	movhi	r2,2052
 80206bc:	10840c04 	addi	r2,r2,4144
 80206c0:	10800037 	ldwio	r2,0(r2)
 80206c4:	1080008c 	andi	r2,r2,2
 80206c8:	1005d07a 	srai	r2,r2,1
 80206cc:	10801564 	muli	r2,r2,85
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
  int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
                (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
                (((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
  int blueIn = (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 80206d0:	1887883a 	add	r3,r3,r2
               (((IORD(PIO_SW_BASE,0) & 0x002) >> 1)* 85) +
               (((IORD(PIO_SW_BASE,0) & 0x001)     )* 42);
 80206d4:	00820134 	movhi	r2,2052
 80206d8:	10840c04 	addi	r2,r2,4144
 80206dc:	10800037 	ldwio	r2,0(r2)
 80206e0:	1080004c 	andi	r2,r2,1
 80206e4:	10800aa4 	muli	r2,r2,42
              (((IORD(PIO_SW_BASE,0) & 0x080) >> 7)* 85) +
              (((IORD(PIO_SW_BASE,0) & 0x040) >> 6)* 42);
  int greenIn = (((IORD(PIO_SW_BASE,0) & 0x020) >> 5)* 128) +
                (((IORD(PIO_SW_BASE,0) & 0x010) >> 4)* 85) +
                (((IORD(PIO_SW_BASE,0) & 0x008) >> 3)* 42);
  int blueIn = (((IORD(PIO_SW_BASE,0) & 0x004) >> 2)* 128) +
 80206e8:	1885883a 	add	r2,r3,r2
 80206ec:	e0bffd15 	stw	r2,-12(fp)
  int red;
  int green;
  int blue;

  // rainbow color calculation
  if((IORD(PIO_SW_BASE,0) & 0x200) > 0){
 80206f0:	00820134 	movhi	r2,2052
 80206f4:	10840c04 	addi	r2,r2,4144
 80206f8:	10800037 	ldwio	r2,0(r2)
 80206fc:	1080800c 	andi	r2,r2,512
 8020700:	0081060e 	bge	zero,r2,8020b1c <colorCalc+0x53c>
    // additionally check for position change to avoid skipping colors
    if(rainbowFlag == 1){
 8020704:	d0a0fd17 	ldw	r2,-31756(gp)
 8020708:	10800058 	cmpnei	r2,r2,1
 802070c:	1001011e 	bne	r2,zero,8020b14 <colorCalc+0x534>
      red =   round(sin(0.105*tRainbow)         * ((float)redIn/2) + ((float)redIn/2));
 8020710:	d0a0fe17 	ldw	r2,-31752(gp)
 8020714:	1009883a 	mov	r4,r2
 8020718:	80264240 	call	8026424 <__floatsidf>
 802071c:	1011883a 	mov	r8,r2
 8020720:	1813883a 	mov	r9,r3
 8020724:	01ab8534 	movhi	r6,44564
 8020728:	319eb844 	addi	r6,r6,31457
 802072c:	01cfeef4 	movhi	r7,16315
 8020730:	39f851c4 	addi	r7,r7,-7865
 8020734:	4009883a 	mov	r4,r8
 8020738:	480b883a 	mov	r5,r9
 802073c:	80253900 	call	8025390 <__muldf3>
 8020740:	1009883a 	mov	r4,r2
 8020744:	180b883a 	mov	r5,r3
 8020748:	2005883a 	mov	r2,r4
 802074c:	2807883a 	mov	r3,r5
 8020750:	1009883a 	mov	r4,r2
 8020754:	180b883a 	mov	r5,r3
 8020758:	80210bc0 	call	80210bc <sin>
 802075c:	1021883a 	mov	r16,r2
 8020760:	1823883a 	mov	r17,r3
 8020764:	e13ffb17 	ldw	r4,-20(fp)
 8020768:	802485c0 	call	802485c <__floatsisf>
 802076c:	1007883a 	mov	r3,r2
 8020770:	01500034 	movhi	r5,16384
 8020774:	1809883a 	mov	r4,r3
 8020778:	80238d00 	call	80238d0 <__divsf3>
 802077c:	1007883a 	mov	r3,r2
 8020780:	1805883a 	mov	r2,r3
 8020784:	1009883a 	mov	r4,r2
 8020788:	80265000 	call	8026500 <__extendsfdf2>
 802078c:	1009883a 	mov	r4,r2
 8020790:	180b883a 	mov	r5,r3
 8020794:	200d883a 	mov	r6,r4
 8020798:	280f883a 	mov	r7,r5
 802079c:	8009883a 	mov	r4,r16
 80207a0:	880b883a 	mov	r5,r17
 80207a4:	80253900 	call	8025390 <__muldf3>
 80207a8:	1009883a 	mov	r4,r2
 80207ac:	180b883a 	mov	r5,r3
 80207b0:	2021883a 	mov	r16,r4
 80207b4:	2823883a 	mov	r17,r5
 80207b8:	e13ffb17 	ldw	r4,-20(fp)
 80207bc:	802485c0 	call	802485c <__floatsisf>
 80207c0:	1007883a 	mov	r3,r2
 80207c4:	01500034 	movhi	r5,16384
 80207c8:	1809883a 	mov	r4,r3
 80207cc:	80238d00 	call	80238d0 <__divsf3>
 80207d0:	1007883a 	mov	r3,r2
 80207d4:	1805883a 	mov	r2,r3
 80207d8:	1009883a 	mov	r4,r2
 80207dc:	80265000 	call	8026500 <__extendsfdf2>
 80207e0:	1009883a 	mov	r4,r2
 80207e4:	180b883a 	mov	r5,r3
 80207e8:	200d883a 	mov	r6,r4
 80207ec:	280f883a 	mov	r7,r5
 80207f0:	8009883a 	mov	r4,r16
 80207f4:	880b883a 	mov	r5,r17
 80207f8:	80249800 	call	8024980 <__adddf3>
 80207fc:	1009883a 	mov	r4,r2
 8020800:	180b883a 	mov	r5,r3
 8020804:	2005883a 	mov	r2,r4
 8020808:	2807883a 	mov	r3,r5
 802080c:	1009883a 	mov	r4,r2
 8020810:	180b883a 	mov	r5,r3
 8020814:	8020fbc0 	call	8020fbc <round>
 8020818:	100b883a 	mov	r5,r2
 802081c:	180d883a 	mov	r6,r3
 8020820:	2809883a 	mov	r4,r5
 8020824:	300b883a 	mov	r5,r6
 8020828:	80263a40 	call	80263a4 <__fixdfsi>
 802082c:	e0bff815 	stw	r2,-32(fp)
      green = round(sin(0.105*tRainbow + 2.094) * ((float)greenIn/2) + ((float)greenIn/2));
 8020830:	d0a0fe17 	ldw	r2,-31752(gp)
 8020834:	1009883a 	mov	r4,r2
 8020838:	80264240 	call	8026424 <__floatsidf>
 802083c:	1011883a 	mov	r8,r2
 8020840:	1813883a 	mov	r9,r3
 8020844:	01ab8534 	movhi	r6,44564
 8020848:	319eb844 	addi	r6,r6,31457
 802084c:	01cfeef4 	movhi	r7,16315
 8020850:	39f851c4 	addi	r7,r7,-7865
 8020854:	4009883a 	mov	r4,r8
 8020858:	480b883a 	mov	r5,r9
 802085c:	80253900 	call	8025390 <__muldf3>
 8020860:	1009883a 	mov	r4,r2
 8020864:	180b883a 	mov	r5,r3
 8020868:	2005883a 	mov	r2,r4
 802086c:	2807883a 	mov	r3,r5
 8020870:	01849bf4 	movhi	r6,4719
 8020874:	31a5e344 	addi	r6,r6,-26739
 8020878:	01d00074 	movhi	r7,16385
 802087c:	39f020c4 	addi	r7,r7,-16253
 8020880:	1009883a 	mov	r4,r2
 8020884:	180b883a 	mov	r5,r3
 8020888:	80249800 	call	8024980 <__adddf3>
 802088c:	1009883a 	mov	r4,r2
 8020890:	180b883a 	mov	r5,r3
 8020894:	2005883a 	mov	r2,r4
 8020898:	2807883a 	mov	r3,r5
 802089c:	1009883a 	mov	r4,r2
 80208a0:	180b883a 	mov	r5,r3
 80208a4:	80210bc0 	call	80210bc <sin>
 80208a8:	1021883a 	mov	r16,r2
 80208ac:	1823883a 	mov	r17,r3
 80208b0:	e13ffc17 	ldw	r4,-16(fp)
 80208b4:	802485c0 	call	802485c <__floatsisf>
 80208b8:	1007883a 	mov	r3,r2
 80208bc:	01500034 	movhi	r5,16384
 80208c0:	1809883a 	mov	r4,r3
 80208c4:	80238d00 	call	80238d0 <__divsf3>
 80208c8:	1007883a 	mov	r3,r2
 80208cc:	1805883a 	mov	r2,r3
 80208d0:	1009883a 	mov	r4,r2
 80208d4:	80265000 	call	8026500 <__extendsfdf2>
 80208d8:	1009883a 	mov	r4,r2
 80208dc:	180b883a 	mov	r5,r3
 80208e0:	200d883a 	mov	r6,r4
 80208e4:	280f883a 	mov	r7,r5
 80208e8:	8009883a 	mov	r4,r16
 80208ec:	880b883a 	mov	r5,r17
 80208f0:	80253900 	call	8025390 <__muldf3>
 80208f4:	1009883a 	mov	r4,r2
 80208f8:	180b883a 	mov	r5,r3
 80208fc:	2021883a 	mov	r16,r4
 8020900:	2823883a 	mov	r17,r5
 8020904:	e13ffc17 	ldw	r4,-16(fp)
 8020908:	802485c0 	call	802485c <__floatsisf>
 802090c:	1007883a 	mov	r3,r2
 8020910:	01500034 	movhi	r5,16384
 8020914:	1809883a 	mov	r4,r3
 8020918:	80238d00 	call	80238d0 <__divsf3>
 802091c:	1007883a 	mov	r3,r2
 8020920:	1805883a 	mov	r2,r3
 8020924:	1009883a 	mov	r4,r2
 8020928:	80265000 	call	8026500 <__extendsfdf2>
 802092c:	1009883a 	mov	r4,r2
 8020930:	180b883a 	mov	r5,r3
 8020934:	200d883a 	mov	r6,r4
 8020938:	280f883a 	mov	r7,r5
 802093c:	8009883a 	mov	r4,r16
 8020940:	880b883a 	mov	r5,r17
 8020944:	80249800 	call	8024980 <__adddf3>
 8020948:	1009883a 	mov	r4,r2
 802094c:	180b883a 	mov	r5,r3
 8020950:	2005883a 	mov	r2,r4
 8020954:	2807883a 	mov	r3,r5
 8020958:	1009883a 	mov	r4,r2
 802095c:	180b883a 	mov	r5,r3
 8020960:	8020fbc0 	call	8020fbc <round>
 8020964:	100b883a 	mov	r5,r2
 8020968:	180d883a 	mov	r6,r3
 802096c:	2809883a 	mov	r4,r5
 8020970:	300b883a 	mov	r5,r6
 8020974:	80263a40 	call	80263a4 <__fixdfsi>
 8020978:	e0bff915 	stw	r2,-28(fp)
      blue =  round(sin(0.105*tRainbow + 4.188) * ((float)blueIn/2) + ((float)blueIn/2));
 802097c:	d0a0fe17 	ldw	r2,-31752(gp)
 8020980:	1009883a 	mov	r4,r2
 8020984:	80264240 	call	8026424 <__floatsidf>
 8020988:	1011883a 	mov	r8,r2
 802098c:	1813883a 	mov	r9,r3
 8020990:	01ab8534 	movhi	r6,44564
 8020994:	319eb844 	addi	r6,r6,31457
 8020998:	01cfeef4 	movhi	r7,16315
 802099c:	39f851c4 	addi	r7,r7,-7865
 80209a0:	4009883a 	mov	r4,r8
 80209a4:	480b883a 	mov	r5,r9
 80209a8:	80253900 	call	8025390 <__muldf3>
 80209ac:	1009883a 	mov	r4,r2
 80209b0:	180b883a 	mov	r5,r3
 80209b4:	2005883a 	mov	r2,r4
 80209b8:	2807883a 	mov	r3,r5
 80209bc:	01849bf4 	movhi	r6,4719
 80209c0:	31a5e344 	addi	r6,r6,-26739
 80209c4:	01d00474 	movhi	r7,16401
 80209c8:	39f020c4 	addi	r7,r7,-16253
 80209cc:	1009883a 	mov	r4,r2
 80209d0:	180b883a 	mov	r5,r3
 80209d4:	80249800 	call	8024980 <__adddf3>
 80209d8:	1009883a 	mov	r4,r2
 80209dc:	180b883a 	mov	r5,r3
 80209e0:	2005883a 	mov	r2,r4
 80209e4:	2807883a 	mov	r3,r5
 80209e8:	1009883a 	mov	r4,r2
 80209ec:	180b883a 	mov	r5,r3
 80209f0:	80210bc0 	call	80210bc <sin>
 80209f4:	1021883a 	mov	r16,r2
 80209f8:	1823883a 	mov	r17,r3
 80209fc:	e13ffd17 	ldw	r4,-12(fp)
 8020a00:	802485c0 	call	802485c <__floatsisf>
 8020a04:	1007883a 	mov	r3,r2
 8020a08:	01500034 	movhi	r5,16384
 8020a0c:	1809883a 	mov	r4,r3
 8020a10:	80238d00 	call	80238d0 <__divsf3>
 8020a14:	1007883a 	mov	r3,r2
 8020a18:	1805883a 	mov	r2,r3
 8020a1c:	1009883a 	mov	r4,r2
 8020a20:	80265000 	call	8026500 <__extendsfdf2>
 8020a24:	1009883a 	mov	r4,r2
 8020a28:	180b883a 	mov	r5,r3
 8020a2c:	200d883a 	mov	r6,r4
 8020a30:	280f883a 	mov	r7,r5
 8020a34:	8009883a 	mov	r4,r16
 8020a38:	880b883a 	mov	r5,r17
 8020a3c:	80253900 	call	8025390 <__muldf3>
 8020a40:	1009883a 	mov	r4,r2
 8020a44:	180b883a 	mov	r5,r3
 8020a48:	2021883a 	mov	r16,r4
 8020a4c:	2823883a 	mov	r17,r5
 8020a50:	e13ffd17 	ldw	r4,-12(fp)
 8020a54:	802485c0 	call	802485c <__floatsisf>
 8020a58:	1007883a 	mov	r3,r2
 8020a5c:	01500034 	movhi	r5,16384
 8020a60:	1809883a 	mov	r4,r3
 8020a64:	80238d00 	call	80238d0 <__divsf3>
 8020a68:	1007883a 	mov	r3,r2
 8020a6c:	1805883a 	mov	r2,r3
 8020a70:	1009883a 	mov	r4,r2
 8020a74:	80265000 	call	8026500 <__extendsfdf2>
 8020a78:	1009883a 	mov	r4,r2
 8020a7c:	180b883a 	mov	r5,r3
 8020a80:	200d883a 	mov	r6,r4
 8020a84:	280f883a 	mov	r7,r5
 8020a88:	8009883a 	mov	r4,r16
 8020a8c:	880b883a 	mov	r5,r17
 8020a90:	80249800 	call	8024980 <__adddf3>
 8020a94:	1009883a 	mov	r4,r2
 8020a98:	180b883a 	mov	r5,r3
 8020a9c:	2005883a 	mov	r2,r4
 8020aa0:	2807883a 	mov	r3,r5
 8020aa4:	1009883a 	mov	r4,r2
 8020aa8:	180b883a 	mov	r5,r3
 8020aac:	8020fbc0 	call	8020fbc <round>
 8020ab0:	100b883a 	mov	r5,r2
 8020ab4:	180d883a 	mov	r6,r3
 8020ab8:	2809883a 	mov	r4,r5
 8020abc:	300b883a 	mov	r5,r6
 8020ac0:	80263a40 	call	80263a4 <__fixdfsi>
 8020ac4:	e0bffa15 	stw	r2,-24(fp)

      // increment and bind rainbow position
      // restricts tRainbow to a single period
      tRainbow++;
 8020ac8:	d0a0fe17 	ldw	r2,-31752(gp)
 8020acc:	10800044 	addi	r2,r2,1
 8020ad0:	d0a0fe15 	stw	r2,-31752(gp)
      if(tRainbow >= 60)
 8020ad4:	d0a0fe17 	ldw	r2,-31752(gp)
 8020ad8:	10800f10 	cmplti	r2,r2,60
 8020adc:	1000011e 	bne	r2,zero,8020ae4 <colorCalc+0x504>
        tRainbow = 0;
 8020ae0:	d020fe15 	stw	zero,-31752(gp)

      // send hex color codes to SSDs every rainbow calculation
      IOWR(PIO_HEX_BASE, 0, ((red << 16) + (green << 8) + blue));
 8020ae4:	e0bff817 	ldw	r2,-32(fp)
 8020ae8:	1006943a 	slli	r3,r2,16
 8020aec:	e0bff917 	ldw	r2,-28(fp)
 8020af0:	1004923a 	slli	r2,r2,8
 8020af4:	1887883a 	add	r3,r3,r2
 8020af8:	e0bffa17 	ldw	r2,-24(fp)
 8020afc:	1887883a 	add	r3,r3,r2
 8020b00:	00820134 	movhi	r2,2052
 8020b04:	10840804 	addi	r2,r2,4128
 8020b08:	10c00035 	stwio	r3,0(r2)

      // reset rainbow flag
      rainbowFlag = 0;
 8020b0c:	d020fd15 	stw	zero,-31756(gp)
 8020b10:	00001206 	br	8020b5c <colorCalc+0x57c>
    }
    // if no position change, keep current color
    else{
      return colorToDraw;
 8020b14:	d0a0fc17 	ldw	r2,-31760(gp)
 8020b18:	00003806 	br	8020bfc <colorCalc+0x61c>
  }


  else{
    // direct assignment without rainbow mode
    red = redIn;
 8020b1c:	e0bffb17 	ldw	r2,-20(fp)
 8020b20:	e0bff815 	stw	r2,-32(fp)
    green = greenIn;
 8020b24:	e0bffc17 	ldw	r2,-16(fp)
 8020b28:	e0bff915 	stw	r2,-28(fp)
    blue = blueIn;
 8020b2c:	e0bffd17 	ldw	r2,-12(fp)
 8020b30:	e0bffa15 	stw	r2,-24(fp)

    // send hex color codes to SSDs every frame if not in rainbow mode
    IOWR(PIO_HEX_BASE, 0, ((red << 16) + (green << 8) + blue));
 8020b34:	e0bff817 	ldw	r2,-32(fp)
 8020b38:	1006943a 	slli	r3,r2,16
 8020b3c:	e0bff917 	ldw	r2,-28(fp)
 8020b40:	1004923a 	slli	r2,r2,8
 8020b44:	1887883a 	add	r3,r3,r2
 8020b48:	e0bffa17 	ldw	r2,-24(fp)
 8020b4c:	1887883a 	add	r3,r3,r2
 8020b50:	00820134 	movhi	r2,2052
 8020b54:	10840804 	addi	r2,r2,4128
 8020b58:	10c00035 	stwio	r3,0(r2)
  }

  // map/convert hex color codes to 16 bit
  // red to 5 bits
  red = mapi(red,0,255,0,0x1F);
 8020b5c:	e13ff817 	ldw	r4,-32(fp)
 8020b60:	802485c0 	call	802485c <__floatsisf>
 8020b64:	1007883a 	mov	r3,r2
 8020b68:	00907e34 	movhi	r2,16888
 8020b6c:	d8800015 	stw	r2,0(sp)
 8020b70:	000f883a 	mov	r7,zero
 8020b74:	0190dff4 	movhi	r6,17279
 8020b78:	000b883a 	mov	r5,zero
 8020b7c:	1809883a 	mov	r4,r3
 8020b80:	8020d840 	call	8020d84 <mapi>
 8020b84:	e0bff815 	stw	r2,-32(fp)
  // green to 6 bits
  green = mapi(green,0,255,0,0x3F);
 8020b88:	e13ff917 	ldw	r4,-28(fp)
 8020b8c:	802485c0 	call	802485c <__floatsisf>
 8020b90:	1007883a 	mov	r3,r2
 8020b94:	00909f34 	movhi	r2,17020
 8020b98:	d8800015 	stw	r2,0(sp)
 8020b9c:	000f883a 	mov	r7,zero
 8020ba0:	0190dff4 	movhi	r6,17279
 8020ba4:	000b883a 	mov	r5,zero
 8020ba8:	1809883a 	mov	r4,r3
 8020bac:	8020d840 	call	8020d84 <mapi>
 8020bb0:	e0bff915 	stw	r2,-28(fp)
  // blue to 5 bits
  blue = mapi(blue,0,255,0,0x1F);
 8020bb4:	e13ffa17 	ldw	r4,-24(fp)
 8020bb8:	802485c0 	call	802485c <__floatsisf>
 8020bbc:	1007883a 	mov	r3,r2
 8020bc0:	00907e34 	movhi	r2,16888
 8020bc4:	d8800015 	stw	r2,0(sp)
 8020bc8:	000f883a 	mov	r7,zero
 8020bcc:	0190dff4 	movhi	r6,17279
 8020bd0:	000b883a 	mov	r5,zero
 8020bd4:	1809883a 	mov	r4,r3
 8020bd8:	8020d840 	call	8020d84 <mapi>
 8020bdc:	e0bffa15 	stw	r2,-24(fp)

  // return final color
  return (red << 11) + (green << 5) + blue;
 8020be0:	e0bff817 	ldw	r2,-32(fp)
 8020be4:	100692fa 	slli	r3,r2,11
 8020be8:	e0bff917 	ldw	r2,-28(fp)
 8020bec:	1004917a 	slli	r2,r2,5
 8020bf0:	1887883a 	add	r3,r3,r2
 8020bf4:	e0bffa17 	ldw	r2,-24(fp)
 8020bf8:	1885883a 	add	r2,r3,r2
}
 8020bfc:	e6fffe04 	addi	sp,fp,-8
 8020c00:	dfc00317 	ldw	ra,12(sp)
 8020c04:	df000217 	ldw	fp,8(sp)
 8020c08:	dc400117 	ldw	r17,4(sp)
 8020c0c:	dc000017 	ldw	r16,0(sp)
 8020c10:	dec00404 	addi	sp,sp,16
 8020c14:	f800283a 	ret

08020c18 <cursorMove>:

//////////////////////////////////////////////
// Moves the cursor independent of drawing colors
void cursorMove(alt_up_accelerometer_spi_dev* accel_p){
 8020c18:	defffa04 	addi	sp,sp,-24
 8020c1c:	dfc00515 	stw	ra,20(sp)
 8020c20:	df000415 	stw	fp,16(sp)
 8020c24:	df000404 	addi	fp,sp,16
 8020c28:	e13fff15 	stw	r4,-4(fp)
  // capture accelerometer input
  int xAccel;
  int yAccel;
  alt_up_accelerometer_spi_read_x_axis(accel_p, &xAccel);
 8020c2c:	e17ffd04 	addi	r5,fp,-12
 8020c30:	e13fff17 	ldw	r4,-4(fp)
 8020c34:	8027a200 	call	8027a20 <alt_up_accelerometer_spi_read_x_axis>
  alt_up_accelerometer_spi_read_y_axis(accel_p, &yAccel);
 8020c38:	e0bffe04 	addi	r2,fp,-8
 8020c3c:	100b883a 	mov	r5,r2
 8020c40:	e13fff17 	ldw	r4,-4(fp)
 8020c44:	8027aec0 	call	8027aec <alt_up_accelerometer_spi_read_y_axis>

  // change floating coords based on accelerometer input
  // max movement speed is 1 px/frame = 20 px/s
  xFloat -= mapf(xAccel,-220,220,-1,1);
 8020c48:	e0bffd17 	ldw	r2,-12(fp)
 8020c4c:	1009883a 	mov	r4,r2
 8020c50:	802485c0 	call	802485c <__floatsisf>
 8020c54:	1007883a 	mov	r3,r2
 8020c58:	008fe034 	movhi	r2,16256
 8020c5c:	d8800015 	stw	r2,0(sp)
 8020c60:	01efe034 	movhi	r7,49024
 8020c64:	0190d734 	movhi	r6,17244
 8020c68:	0170d734 	movhi	r5,50012
 8020c6c:	1809883a 	mov	r4,r3
 8020c70:	8020e800 	call	8020e80 <mapf>
 8020c74:	1007883a 	mov	r3,r2
 8020c78:	d0a00217 	ldw	r2,-32760(gp)
 8020c7c:	180b883a 	mov	r5,r3
 8020c80:	1009883a 	mov	r4,r2
 8020c84:	80243080 	call	8024308 <__subsf3>
 8020c88:	1007883a 	mov	r3,r2
 8020c8c:	1805883a 	mov	r2,r3
 8020c90:	d0a00215 	stw	r2,-32760(gp)

  yFloat += mapf(yAccel,-220,220,-1,1);
 8020c94:	e0bffe17 	ldw	r2,-8(fp)
 8020c98:	1009883a 	mov	r4,r2
 8020c9c:	802485c0 	call	802485c <__floatsisf>
 8020ca0:	1007883a 	mov	r3,r2
 8020ca4:	008fe034 	movhi	r2,16256
 8020ca8:	d8800015 	stw	r2,0(sp)
 8020cac:	01efe034 	movhi	r7,49024
 8020cb0:	0190d734 	movhi	r6,17244
 8020cb4:	0170d734 	movhi	r5,50012
 8020cb8:	1809883a 	mov	r4,r3
 8020cbc:	8020e800 	call	8020e80 <mapf>
 8020cc0:	1007883a 	mov	r3,r2
 8020cc4:	d0a00317 	ldw	r2,-32756(gp)
 8020cc8:	100b883a 	mov	r5,r2
 8020ccc:	1809883a 	mov	r4,r3
 8020cd0:	80234080 	call	8023408 <__addsf3>
 8020cd4:	1007883a 	mov	r3,r2
 8020cd8:	1805883a 	mov	r2,r3
 8020cdc:	d0a00315 	stw	r2,-32756(gp)



  // set floating coord boundaries
  if(xFloat <= -0.5)
 8020ce0:	d0a00217 	ldw	r2,-32760(gp)
 8020ce4:	016fc034 	movhi	r5,48896
 8020ce8:	1009883a 	mov	r4,r2
 8020cec:	8023e440 	call	8023e44 <__lesf2>
 8020cf0:	00800316 	blt	zero,r2,8020d00 <cursorMove+0xe8>
    xFloat = -0.49;
 8020cf4:	00afbef4 	movhi	r2,48891
 8020cf8:	10b85204 	addi	r2,r2,-7864
 8020cfc:	d0a00215 	stw	r2,-32760(gp)
  if(xFloat >= 319.5)
 8020d00:	d0a00217 	ldw	r2,-32760(gp)
 8020d04:	0150e834 	movhi	r5,17312
 8020d08:	29700004 	addi	r5,r5,-16384
 8020d0c:	1009883a 	mov	r4,r2
 8020d10:	8023d880 	call	8023d88 <__gesf2>
 8020d14:	10000316 	blt	r2,zero,8020d24 <cursorMove+0x10c>
    xFloat = 319.49;
 8020d18:	0090e834 	movhi	r2,17312
 8020d1c:	10afae04 	addi	r2,r2,-16712
 8020d20:	d0a00215 	stw	r2,-32760(gp)

  if(yFloat <= -0.5)
 8020d24:	d0a00317 	ldw	r2,-32756(gp)
 8020d28:	016fc034 	movhi	r5,48896
 8020d2c:	1009883a 	mov	r4,r2
 8020d30:	8023e440 	call	8023e44 <__lesf2>
 8020d34:	00800316 	blt	zero,r2,8020d44 <cursorMove+0x12c>
    yFloat = -0.49;
 8020d38:	00afbef4 	movhi	r2,48891
 8020d3c:	10b85204 	addi	r2,r2,-7864
 8020d40:	d0a00315 	stw	r2,-32756(gp)
  if(yFloat >= 238.5)
 8020d44:	d0a00317 	ldw	r2,-32756(gp)
 8020d48:	0150dbf4 	movhi	r5,17263
 8020d4c:	29600004 	addi	r5,r5,-32768
 8020d50:	1009883a 	mov	r4,r2
 8020d54:	8023d880 	call	8023d88 <__gesf2>
 8020d58:	1000010e 	bge	r2,zero,8020d60 <cursorMove+0x148>
    yFloat = 238.49;
}
 8020d5c:	00000306 	br	8020d6c <cursorMove+0x154>
    xFloat = 319.49;

  if(yFloat <= -0.5)
    yFloat = -0.49;
  if(yFloat >= 238.5)
    yFloat = 238.49;
 8020d60:	0090dbb4 	movhi	r2,17262
 8020d64:	109f5c44 	addi	r2,r2,32113
 8020d68:	d0a00315 	stw	r2,-32756(gp)
}
 8020d6c:	0001883a 	nop
 8020d70:	e037883a 	mov	sp,fp
 8020d74:	dfc00117 	ldw	ra,4(sp)
 8020d78:	df000017 	ldw	fp,0(sp)
 8020d7c:	dec00204 	addi	sp,sp,8
 8020d80:	f800283a 	ret

08020d84 <mapi>:

/////////////////////////////////////////////
// Maps a number to an integer range
int mapi(float input, float inMin, float inMax, float outMin, float outMax){
 8020d84:	defff804 	addi	sp,sp,-32
 8020d88:	dfc00715 	stw	ra,28(sp)
 8020d8c:	df000615 	stw	fp,24(sp)
 8020d90:	dc000515 	stw	r16,20(sp)
 8020d94:	df000604 	addi	fp,sp,24
 8020d98:	e13ffb15 	stw	r4,-20(fp)
 8020d9c:	e17ffc15 	stw	r5,-16(fp)
 8020da0:	e1bffd15 	stw	r6,-12(fp)
 8020da4:	e1fffe15 	stw	r7,-8(fp)
  // bind input
  if(input < inMin)
 8020da8:	e17ffc17 	ldw	r5,-16(fp)
 8020dac:	e13ffb17 	ldw	r4,-20(fp)
 8020db0:	8023e440 	call	8023e44 <__lesf2>
 8020db4:	1000030e 	bge	r2,zero,8020dc4 <mapi+0x40>
    input = inMin;
 8020db8:	e0bffc17 	ldw	r2,-16(fp)
 8020dbc:	e0bffb15 	stw	r2,-20(fp)
 8020dc0:	00000606 	br	8020ddc <mapi+0x58>
  else if(input > inMax)
 8020dc4:	e17ffd17 	ldw	r5,-12(fp)
 8020dc8:	e13ffb17 	ldw	r4,-20(fp)
 8020dcc:	8023d880 	call	8023d88 <__gesf2>
 8020dd0:	0080020e 	bge	zero,r2,8020ddc <mapi+0x58>
    input = inMax;
 8020dd4:	e0bffd17 	ldw	r2,-12(fp)
 8020dd8:	e0bffb15 	stw	r2,-20(fp)

  // mapping function
  float mapped = outMin + ((outMax - outMin) / (inMax - inMin)) * (input - inMin);
 8020ddc:	e17ffe17 	ldw	r5,-8(fp)
 8020de0:	e1000217 	ldw	r4,8(fp)
 8020de4:	80243080 	call	8024308 <__subsf3>
 8020de8:	1007883a 	mov	r3,r2
 8020dec:	1821883a 	mov	r16,r3
 8020df0:	e17ffc17 	ldw	r5,-16(fp)
 8020df4:	e13ffd17 	ldw	r4,-12(fp)
 8020df8:	80243080 	call	8024308 <__subsf3>
 8020dfc:	1007883a 	mov	r3,r2
 8020e00:	1805883a 	mov	r2,r3
 8020e04:	100b883a 	mov	r5,r2
 8020e08:	8009883a 	mov	r4,r16
 8020e0c:	80238d00 	call	80238d0 <__divsf3>
 8020e10:	1007883a 	mov	r3,r2
 8020e14:	1821883a 	mov	r16,r3
 8020e18:	e17ffc17 	ldw	r5,-16(fp)
 8020e1c:	e13ffb17 	ldw	r4,-20(fp)
 8020e20:	80243080 	call	8024308 <__subsf3>
 8020e24:	1007883a 	mov	r3,r2
 8020e28:	1805883a 	mov	r2,r3
 8020e2c:	100b883a 	mov	r5,r2
 8020e30:	8009883a 	mov	r4,r16
 8020e34:	8023f0c0 	call	8023f0c <__mulsf3>
 8020e38:	1007883a 	mov	r3,r2
 8020e3c:	1805883a 	mov	r2,r3
 8020e40:	e17ffe17 	ldw	r5,-8(fp)
 8020e44:	1009883a 	mov	r4,r2
 8020e48:	80234080 	call	8023408 <__addsf3>
 8020e4c:	1007883a 	mov	r3,r2
 8020e50:	e0fffa15 	stw	r3,-24(fp)

  // return rounded int
  return (int) roundf(mapped);
 8020e54:	e13ffa17 	ldw	r4,-24(fp)
 8020e58:	80211ac0 	call	80211ac <roundf>
 8020e5c:	1007883a 	mov	r3,r2
 8020e60:	1809883a 	mov	r4,r3
 8020e64:	80247ec0 	call	80247ec <__fixsfsi>
}
 8020e68:	e6ffff04 	addi	sp,fp,-4
 8020e6c:	dfc00217 	ldw	ra,8(sp)
 8020e70:	df000117 	ldw	fp,4(sp)
 8020e74:	dc000017 	ldw	r16,0(sp)
 8020e78:	dec00304 	addi	sp,sp,12
 8020e7c:	f800283a 	ret

08020e80 <mapf>:

/////////////////////////////////////////////
// Maps a number to a floating point number range
float mapf(float input, float inMin, float inMax, float outMin, float outMax){
 8020e80:	defff804 	addi	sp,sp,-32
 8020e84:	dfc00715 	stw	ra,28(sp)
 8020e88:	df000615 	stw	fp,24(sp)
 8020e8c:	dc000515 	stw	r16,20(sp)
 8020e90:	df000604 	addi	fp,sp,24
 8020e94:	e13ffb15 	stw	r4,-20(fp)
 8020e98:	e17ffc15 	stw	r5,-16(fp)
 8020e9c:	e1bffd15 	stw	r6,-12(fp)
 8020ea0:	e1fffe15 	stw	r7,-8(fp)
  // bind input
  if(input < inMin)
 8020ea4:	e17ffc17 	ldw	r5,-16(fp)
 8020ea8:	e13ffb17 	ldw	r4,-20(fp)
 8020eac:	8023e440 	call	8023e44 <__lesf2>
 8020eb0:	1000030e 	bge	r2,zero,8020ec0 <mapf+0x40>
    input = inMin;
 8020eb4:	e0bffc17 	ldw	r2,-16(fp)
 8020eb8:	e0bffb15 	stw	r2,-20(fp)
 8020ebc:	00000606 	br	8020ed8 <mapf+0x58>
  else if(input > inMax)
 8020ec0:	e17ffd17 	ldw	r5,-12(fp)
 8020ec4:	e13ffb17 	ldw	r4,-20(fp)
 8020ec8:	8023d880 	call	8023d88 <__gesf2>
 8020ecc:	0080020e 	bge	zero,r2,8020ed8 <mapf+0x58>
    input = inMax;
 8020ed0:	e0bffd17 	ldw	r2,-12(fp)
 8020ed4:	e0bffb15 	stw	r2,-20(fp)

  // mapping function
  float mapped = outMin + ((outMax - outMin) / (inMax - inMin)) * (input - inMin);
 8020ed8:	e17ffe17 	ldw	r5,-8(fp)
 8020edc:	e1000217 	ldw	r4,8(fp)
 8020ee0:	80243080 	call	8024308 <__subsf3>
 8020ee4:	1007883a 	mov	r3,r2
 8020ee8:	1821883a 	mov	r16,r3
 8020eec:	e17ffc17 	ldw	r5,-16(fp)
 8020ef0:	e13ffd17 	ldw	r4,-12(fp)
 8020ef4:	80243080 	call	8024308 <__subsf3>
 8020ef8:	1007883a 	mov	r3,r2
 8020efc:	1805883a 	mov	r2,r3
 8020f00:	100b883a 	mov	r5,r2
 8020f04:	8009883a 	mov	r4,r16
 8020f08:	80238d00 	call	80238d0 <__divsf3>
 8020f0c:	1007883a 	mov	r3,r2
 8020f10:	1821883a 	mov	r16,r3
 8020f14:	e17ffc17 	ldw	r5,-16(fp)
 8020f18:	e13ffb17 	ldw	r4,-20(fp)
 8020f1c:	80243080 	call	8024308 <__subsf3>
 8020f20:	1007883a 	mov	r3,r2
 8020f24:	1805883a 	mov	r2,r3
 8020f28:	100b883a 	mov	r5,r2
 8020f2c:	8009883a 	mov	r4,r16
 8020f30:	8023f0c0 	call	8023f0c <__mulsf3>
 8020f34:	1007883a 	mov	r3,r2
 8020f38:	1805883a 	mov	r2,r3
 8020f3c:	e17ffe17 	ldw	r5,-8(fp)
 8020f40:	1009883a 	mov	r4,r2
 8020f44:	80234080 	call	8023408 <__addsf3>
 8020f48:	1007883a 	mov	r3,r2
 8020f4c:	e0fffa15 	stw	r3,-24(fp)

  // return float
  return mapped;
 8020f50:	e0bffa17 	ldw	r2,-24(fp)
 8020f54:	1007883a 	mov	r3,r2
}
 8020f58:	1805883a 	mov	r2,r3
 8020f5c:	e6ffff04 	addi	sp,fp,-4
 8020f60:	dfc00217 	ldw	ra,8(sp)
 8020f64:	df000117 	ldw	fp,4(sp)
 8020f68:	dc000017 	ldw	r16,0(sp)
 8020f6c:	dec00304 	addi	sp,sp,12
 8020f70:	f800283a 	ret

08020f74 <timer_0_isr>:
/////////////////////////////////////////////
// Timer interrupt
//  Activates every 50 ms = 3 frames
//  Creates effective 20 fps
void timer_0_isr(void* context){
 8020f74:	defffd04 	addi	sp,sp,-12
 8020f78:	df000215 	stw	fp,8(sp)
 8020f7c:	df000204 	addi	fp,sp,8
 8020f80:	e13fff15 	stw	r4,-4(fp)
  // set timeout flag
  volatile int* timeoutFlag_ptr = (volatile int*) context;
 8020f84:	e0bfff17 	ldw	r2,-4(fp)
 8020f88:	e0bffe15 	stw	r2,-8(fp)
  *timeoutFlag_ptr = 1;
 8020f8c:	e0bffe17 	ldw	r2,-8(fp)
 8020f90:	00c00044 	movi	r3,1
 8020f94:	10c00015 	stw	r3,0(r2)

  // clear interrupt
  IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE, 0);
 8020f98:	0007883a 	mov	r3,zero
 8020f9c:	00820134 	movhi	r2,2052
 8020fa0:	10840004 	addi	r2,r2,4096
 8020fa4:	10c00035 	stwio	r3,0(r2)
}
 8020fa8:	0001883a 	nop
 8020fac:	e037883a 	mov	sp,fp
 8020fb0:	df000017 	ldw	fp,0(sp)
 8020fb4:	dec00104 	addi	sp,sp,4
 8020fb8:	f800283a 	ret

08020fbc <round>:
 8020fbc:	289ffc2c 	andhi	r2,r5,32752
 8020fc0:	1005d53a 	srai	r2,r2,20
 8020fc4:	024004c4 	movi	r9,19
 8020fc8:	2807883a 	mov	r3,r5
 8020fcc:	123f0044 	addi	r8,r2,-1023
 8020fd0:	200d883a 	mov	r6,r4
 8020fd4:	280f883a 	mov	r7,r5
 8020fd8:	4a000916 	blt	r9,r8,8021000 <round+0x44>
 8020fdc:	40002516 	blt	r8,zero,8021074 <round+0xb8>
 8020fe0:	00800434 	movhi	r2,16
 8020fe4:	10bfffc4 	addi	r2,r2,-1
 8020fe8:	1205d83a 	sra	r2,r2,r8
 8020fec:	2888703a 	and	r4,r5,r2
 8020ff0:	2000181e 	bne	r4,zero,8021054 <round+0x98>
 8020ff4:	3000171e 	bne	r6,zero,8021054 <round+0x98>
 8020ff8:	0005883a 	mov	r2,zero
 8020ffc:	f800283a 	ret
 8021000:	02400cc4 	movi	r9,51
 8021004:	4a00040e 	bge	r9,r8,8021018 <round+0x5c>
 8021008:	00810004 	movi	r2,1024
 802100c:	40802126 	beq	r8,r2,8021094 <round+0xd8>
 8021010:	3005883a 	mov	r2,r6
 8021014:	f800283a 	ret
 8021018:	013fffc4 	movi	r4,-1
 802101c:	10befb44 	addi	r2,r2,-1043
 8021020:	2084d83a 	srl	r2,r4,r2
 8021024:	3088703a 	and	r4,r6,r2
 8021028:	20001726 	beq	r4,zero,8021088 <round+0xcc>
 802102c:	4a11c83a 	sub	r8,r9,r8
 8021030:	02400044 	movi	r9,1
 8021034:	4a10983a 	sll	r8,r9,r8
 8021038:	4191883a 	add	r8,r8,r6
 802103c:	4180012e 	bgeu	r8,r6,8021044 <round+0x88>
 8021040:	2a47883a 	add	r3,r5,r9
 8021044:	0084303a 	nor	r2,zero,r2
 8021048:	120c703a 	and	r6,r2,r8
 802104c:	3005883a 	mov	r2,r6
 8021050:	f800283a 	ret
 8021054:	00c00234 	movhi	r3,8
 8021058:	1a07d83a 	sra	r3,r3,r8
 802105c:	0084303a 	nor	r2,zero,r2
 8021060:	000d883a 	mov	r6,zero
 8021064:	19c7883a 	add	r3,r3,r7
 8021068:	1886703a 	and	r3,r3,r2
 802106c:	3005883a 	mov	r2,r6
 8021070:	f800283a 	ret
 8021074:	00bfffc4 	movi	r2,-1
 8021078:	28e0002c 	andhi	r3,r5,32768
 802107c:	40800c26 	beq	r8,r2,80210b0 <round+0xf4>
 8021080:	000d883a 	mov	r6,zero
 8021084:	003fe206 	br	8021010 <__alt_data_end+0xfffe8970>
 8021088:	3005883a 	mov	r2,r6
 802108c:	2807883a 	mov	r3,r5
 8021090:	f800283a 	ret
 8021094:	deffff04 	addi	sp,sp,-4
 8021098:	280f883a 	mov	r7,r5
 802109c:	dfc00015 	stw	ra,0(sp)
 80210a0:	80249800 	call	8024980 <__adddf3>
 80210a4:	dfc00017 	ldw	ra,0(sp)
 80210a8:	dec00104 	addi	sp,sp,4
 80210ac:	f800283a 	ret
 80210b0:	18cffc34 	orhi	r3,r3,16368
 80210b4:	000d883a 	mov	r6,zero
 80210b8:	003fd506 	br	8021010 <__alt_data_end+0xfffe8970>

080210bc <sin>:
 80210bc:	00a00034 	movhi	r2,32768
 80210c0:	defffa04 	addi	sp,sp,-24
 80210c4:	10bfffc4 	addi	r2,r2,-1
 80210c8:	00cffa74 	movhi	r3,16361
 80210cc:	dfc00515 	stw	ra,20(sp)
 80210d0:	2884703a 	and	r2,r5,r2
 80210d4:	18c87ec4 	addi	r3,r3,8699
 80210d8:	1880180e 	bge	r3,r2,802113c <sin+0x80>
 80210dc:	00dffc34 	movhi	r3,32752
 80210e0:	18ffffc4 	addi	r3,r3,-1
 80210e4:	1880060e 	bge	r3,r2,8021100 <sin+0x44>
 80210e8:	280f883a 	mov	r7,r5
 80210ec:	200d883a 	mov	r6,r4
 80210f0:	8025aa80 	call	8025aa8 <__subdf3>
 80210f4:	dfc00517 	ldw	ra,20(sp)
 80210f8:	dec00604 	addi	sp,sp,24
 80210fc:	f800283a 	ret
 8021100:	d9800104 	addi	r6,sp,4
 8021104:	80212300 	call	8021230 <__ieee754_rem_pio2>
 8021108:	108000cc 	andi	r2,r2,3
 802110c:	00c00044 	movi	r3,1
 8021110:	10c01926 	beq	r2,r3,8021178 <sin+0xbc>
 8021114:	01000084 	movi	r4,2
 8021118:	11000f26 	beq	r2,r4,8021158 <sin+0x9c>
 802111c:	10001c26 	beq	r2,zero,8021190 <sin+0xd4>
 8021120:	d9800317 	ldw	r6,12(sp)
 8021124:	d9c00417 	ldw	r7,16(sp)
 8021128:	d9000117 	ldw	r4,4(sp)
 802112c:	d9400217 	ldw	r5,8(sp)
 8021130:	802199c0 	call	802199c <__kernel_cos>
 8021134:	18e0003c 	xorhi	r3,r3,32768
 8021138:	003fee06 	br	80210f4 <__alt_data_end+0xfffe8a54>
 802113c:	d8000015 	stw	zero,0(sp)
 8021140:	000d883a 	mov	r6,zero
 8021144:	000f883a 	mov	r7,zero
 8021148:	8022bd00 	call	8022bd0 <__kernel_sin>
 802114c:	dfc00517 	ldw	ra,20(sp)
 8021150:	dec00604 	addi	sp,sp,24
 8021154:	f800283a 	ret
 8021158:	d9800317 	ldw	r6,12(sp)
 802115c:	d9c00417 	ldw	r7,16(sp)
 8021160:	d9000117 	ldw	r4,4(sp)
 8021164:	d9400217 	ldw	r5,8(sp)
 8021168:	d8c00015 	stw	r3,0(sp)
 802116c:	8022bd00 	call	8022bd0 <__kernel_sin>
 8021170:	18e0003c 	xorhi	r3,r3,32768
 8021174:	003fdf06 	br	80210f4 <__alt_data_end+0xfffe8a54>
 8021178:	d9800317 	ldw	r6,12(sp)
 802117c:	d9c00417 	ldw	r7,16(sp)
 8021180:	d9000117 	ldw	r4,4(sp)
 8021184:	d9400217 	ldw	r5,8(sp)
 8021188:	802199c0 	call	802199c <__kernel_cos>
 802118c:	003fd906 	br	80210f4 <__alt_data_end+0xfffe8a54>
 8021190:	d9800317 	ldw	r6,12(sp)
 8021194:	d9c00417 	ldw	r7,16(sp)
 8021198:	d9000117 	ldw	r4,4(sp)
 802119c:	d9400217 	ldw	r5,8(sp)
 80211a0:	d8c00015 	stw	r3,0(sp)
 80211a4:	8022bd00 	call	8022bd0 <__kernel_sin>
 80211a8:	003fd206 	br	80210f4 <__alt_data_end+0xfffe8a54>

080211ac <roundf>:
 80211ac:	20dfe02c 	andhi	r3,r4,32640
 80211b0:	1806d5fa 	srli	r3,r3,23
 80211b4:	01400584 	movi	r5,22
 80211b8:	2005883a 	mov	r2,r4
 80211bc:	18ffe044 	addi	r3,r3,-127
 80211c0:	28c00c16 	blt	r5,r3,80211f4 <roundf+0x48>
 80211c4:	18001516 	blt	r3,zero,802121c <roundf+0x70>
 80211c8:	01002034 	movhi	r4,128
 80211cc:	213fffc4 	addi	r4,r4,-1
 80211d0:	20c9d83a 	sra	r4,r4,r3
 80211d4:	208a703a 	and	r5,r4,r2
 80211d8:	28000826 	beq	r5,zero,80211fc <roundf+0x50>
 80211dc:	01401034 	movhi	r5,64
 80211e0:	28c7d83a 	sra	r3,r5,r3
 80211e4:	0108303a 	nor	r4,zero,r4
 80211e8:	1885883a 	add	r2,r3,r2
 80211ec:	2084703a 	and	r2,r4,r2
 80211f0:	f800283a 	ret
 80211f4:	01402004 	movi	r5,128
 80211f8:	19400126 	beq	r3,r5,8021200 <roundf+0x54>
 80211fc:	f800283a 	ret
 8021200:	deffff04 	addi	sp,sp,-4
 8021204:	200b883a 	mov	r5,r4
 8021208:	dfc00015 	stw	ra,0(sp)
 802120c:	80234080 	call	8023408 <__addsf3>
 8021210:	dfc00017 	ldw	ra,0(sp)
 8021214:	dec00104 	addi	sp,sp,4
 8021218:	f800283a 	ret
 802121c:	20a0002c 	andhi	r2,r4,32768
 8021220:	013fffc4 	movi	r4,-1
 8021224:	193ff51e 	bne	r3,r4,80211fc <__alt_data_end+0xfffe8b5c>
 8021228:	108fe034 	orhi	r2,r2,16256
 802122c:	f800283a 	ret

08021230 <__ieee754_rem_pio2>:
 8021230:	02200034 	movhi	r8,32768
 8021234:	deffea04 	addi	sp,sp,-88
 8021238:	423fffc4 	addi	r8,r8,-1
 802123c:	00cffa74 	movhi	r3,16361
 8021240:	ddc01315 	stw	r23,76(sp)
 8021244:	dc400d15 	stw	r17,52(sp)
 8021248:	dfc01515 	stw	ra,84(sp)
 802124c:	df001415 	stw	fp,80(sp)
 8021250:	dd801215 	stw	r22,72(sp)
 8021254:	dd401115 	stw	r21,68(sp)
 8021258:	dd001015 	stw	r20,64(sp)
 802125c:	dcc00f15 	stw	r19,60(sp)
 8021260:	dc800e15 	stw	r18,56(sp)
 8021264:	dc000c15 	stw	r16,48(sp)
 8021268:	2a2e703a 	and	r23,r5,r8
 802126c:	18c87ec4 	addi	r3,r3,8699
 8021270:	2823883a 	mov	r17,r5
 8021274:	1dc0790e 	bge	r3,r23,802145c <__ieee754_rem_pio2+0x22c>
 8021278:	009000f4 	movhi	r2,16387
 802127c:	10b65ec4 	addi	r2,r2,-9861
 8021280:	3021883a 	mov	r16,r6
 8021284:	2027883a 	mov	r19,r4
 8021288:	15c02316 	blt	r2,r23,8021318 <__ieee754_rem_pio2+0xe8>
 802128c:	01cffe74 	movhi	r7,16377
 8021290:	39c87ec4 	addi	r7,r7,8699
 8021294:	01951034 	movhi	r6,21568
 8021298:	01417a0e 	bge	zero,r5,8021884 <__ieee754_rem_pio2+0x654>
 802129c:	8025aa80 	call	8025aa8 <__subdf3>
 80212a0:	1025883a 	mov	r18,r2
 80212a4:	008ffe74 	movhi	r2,16377
 80212a8:	10887ec4 	addi	r2,r2,8699
 80212ac:	1823883a 	mov	r17,r3
 80212b0:	b8808426 	beq	r23,r2,80214c4 <__ieee754_rem_pio2+0x294>
 80212b4:	018698b4 	movhi	r6,6754
 80212b8:	01cf7474 	movhi	r7,15825
 80212bc:	3198cc44 	addi	r6,r6,25393
 80212c0:	39ed1844 	addi	r7,r7,-19359
 80212c4:	9009883a 	mov	r4,r18
 80212c8:	180b883a 	mov	r5,r3
 80212cc:	8025aa80 	call	8025aa8 <__subdf3>
 80212d0:	100d883a 	mov	r6,r2
 80212d4:	180f883a 	mov	r7,r3
 80212d8:	9009883a 	mov	r4,r18
 80212dc:	880b883a 	mov	r5,r17
 80212e0:	80800015 	stw	r2,0(r16)
 80212e4:	80c00115 	stw	r3,4(r16)
 80212e8:	8025aa80 	call	8025aa8 <__subdf3>
 80212ec:	018698b4 	movhi	r6,6754
 80212f0:	01cf7474 	movhi	r7,15825
 80212f4:	3198cc44 	addi	r6,r6,25393
 80212f8:	39ed1844 	addi	r7,r7,-19359
 80212fc:	1009883a 	mov	r4,r2
 8021300:	180b883a 	mov	r5,r3
 8021304:	8025aa80 	call	8025aa8 <__subdf3>
 8021308:	80800215 	stw	r2,8(r16)
 802130c:	80c00315 	stw	r3,12(r16)
 8021310:	00800044 	movi	r2,1
 8021314:	00005606 	br	8021470 <__ieee754_rem_pio2+0x240>
 8021318:	00904e74 	movhi	r2,16697
 802131c:	10887ec4 	addi	r2,r2,8699
 8021320:	15c0830e 	bge	r2,r23,8021530 <__ieee754_rem_pio2+0x300>
 8021324:	009ffc34 	movhi	r2,32752
 8021328:	10bfffc4 	addi	r2,r2,-1
 802132c:	15c05c16 	blt	r2,r23,80214a0 <__ieee754_rem_pio2+0x270>
 8021330:	b829d53a 	srai	r20,r23,20
 8021334:	a53efa84 	addi	r20,r20,-1046
 8021338:	a024953a 	slli	r18,r20,20
 802133c:	bca5c83a 	sub	r18,r23,r18
 8021340:	900b883a 	mov	r5,r18
 8021344:	80263a40 	call	80263a4 <__fixdfsi>
 8021348:	1009883a 	mov	r4,r2
 802134c:	80264240 	call	8026424 <__floatsidf>
 8021350:	9809883a 	mov	r4,r19
 8021354:	900b883a 	mov	r5,r18
 8021358:	100d883a 	mov	r6,r2
 802135c:	180f883a 	mov	r7,r3
 8021360:	d8800215 	stw	r2,8(sp)
 8021364:	d8c00315 	stw	r3,12(sp)
 8021368:	8025aa80 	call	8025aa8 <__subdf3>
 802136c:	000d883a 	mov	r6,zero
 8021370:	01d05c34 	movhi	r7,16752
 8021374:	1009883a 	mov	r4,r2
 8021378:	180b883a 	mov	r5,r3
 802137c:	80253900 	call	8025390 <__muldf3>
 8021380:	180b883a 	mov	r5,r3
 8021384:	1009883a 	mov	r4,r2
 8021388:	182b883a 	mov	r21,r3
 802138c:	102d883a 	mov	r22,r2
 8021390:	80263a40 	call	80263a4 <__fixdfsi>
 8021394:	1009883a 	mov	r4,r2
 8021398:	80264240 	call	8026424 <__floatsidf>
 802139c:	100d883a 	mov	r6,r2
 80213a0:	180f883a 	mov	r7,r3
 80213a4:	b009883a 	mov	r4,r22
 80213a8:	a80b883a 	mov	r5,r21
 80213ac:	1027883a 	mov	r19,r2
 80213b0:	1825883a 	mov	r18,r3
 80213b4:	d8800415 	stw	r2,16(sp)
 80213b8:	d8c00515 	stw	r3,20(sp)
 80213bc:	8025aa80 	call	8025aa8 <__subdf3>
 80213c0:	000d883a 	mov	r6,zero
 80213c4:	01d05c34 	movhi	r7,16752
 80213c8:	1009883a 	mov	r4,r2
 80213cc:	180b883a 	mov	r5,r3
 80213d0:	80253900 	call	8025390 <__muldf3>
 80213d4:	000d883a 	mov	r6,zero
 80213d8:	000f883a 	mov	r7,zero
 80213dc:	1009883a 	mov	r4,r2
 80213e0:	180b883a 	mov	r5,r3
 80213e4:	d8800615 	stw	r2,24(sp)
 80213e8:	d8c00715 	stw	r3,28(sp)
 80213ec:	802522c0 	call	802522c <__eqdf2>
 80213f0:	1001431e 	bne	r2,zero,8021900 <__ieee754_rem_pio2+0x6d0>
 80213f4:	000f883a 	mov	r7,zero
 80213f8:	000d883a 	mov	r6,zero
 80213fc:	9809883a 	mov	r4,r19
 8021400:	900b883a 	mov	r5,r18
 8021404:	802522c0 	call	802522c <__eqdf2>
 8021408:	100f003a 	cmpeq	r7,r2,zero
 802140c:	00800084 	movi	r2,2
 8021410:	11cfc83a 	sub	r7,r2,r7
 8021414:	00800084 	movi	r2,2
 8021418:	d8800015 	stw	r2,0(sp)
 802141c:	008200f4 	movhi	r2,2051
 8021420:	10a75604 	addi	r2,r2,-25256
 8021424:	d8800115 	stw	r2,4(sp)
 8021428:	a00d883a 	mov	r6,r20
 802142c:	800b883a 	mov	r5,r16
 8021430:	d9000204 	addi	r4,sp,8
 8021434:	8021e400 	call	8021e40 <__kernel_rem_pio2>
 8021438:	88000d0e 	bge	r17,zero,8021470 <__ieee754_rem_pio2+0x240>
 802143c:	81000117 	ldw	r4,4(r16)
 8021440:	80c00317 	ldw	r3,12(r16)
 8021444:	0085c83a 	sub	r2,zero,r2
 8021448:	2120003c 	xorhi	r4,r4,32768
 802144c:	18e0003c 	xorhi	r3,r3,32768
 8021450:	81000115 	stw	r4,4(r16)
 8021454:	80c00315 	stw	r3,12(r16)
 8021458:	00000506 	br	8021470 <__ieee754_rem_pio2+0x240>
 802145c:	31000015 	stw	r4,0(r6)
 8021460:	31400115 	stw	r5,4(r6)
 8021464:	30000215 	stw	zero,8(r6)
 8021468:	30000315 	stw	zero,12(r6)
 802146c:	0005883a 	mov	r2,zero
 8021470:	dfc01517 	ldw	ra,84(sp)
 8021474:	df001417 	ldw	fp,80(sp)
 8021478:	ddc01317 	ldw	r23,76(sp)
 802147c:	dd801217 	ldw	r22,72(sp)
 8021480:	dd401117 	ldw	r21,68(sp)
 8021484:	dd001017 	ldw	r20,64(sp)
 8021488:	dcc00f17 	ldw	r19,60(sp)
 802148c:	dc800e17 	ldw	r18,56(sp)
 8021490:	dc400d17 	ldw	r17,52(sp)
 8021494:	dc000c17 	ldw	r16,48(sp)
 8021498:	dec01604 	addi	sp,sp,88
 802149c:	f800283a 	ret
 80214a0:	200d883a 	mov	r6,r4
 80214a4:	280f883a 	mov	r7,r5
 80214a8:	8025aa80 	call	8025aa8 <__subdf3>
 80214ac:	80800215 	stw	r2,8(r16)
 80214b0:	80800015 	stw	r2,0(r16)
 80214b4:	80c00315 	stw	r3,12(r16)
 80214b8:	80c00115 	stw	r3,4(r16)
 80214bc:	0005883a 	mov	r2,zero
 80214c0:	003feb06 	br	8021470 <__alt_data_end+0xfffe8dd0>
 80214c4:	01cf7474 	movhi	r7,15825
 80214c8:	9009883a 	mov	r4,r18
 80214cc:	39ed1844 	addi	r7,r7,-19359
 80214d0:	01869834 	movhi	r6,6752
 80214d4:	180b883a 	mov	r5,r3
 80214d8:	8025aa80 	call	8025aa8 <__subdf3>
 80214dc:	018b80f4 	movhi	r6,11779
 80214e0:	01cee8f4 	movhi	r7,15267
 80214e4:	319c1cc4 	addi	r6,r6,28787
 80214e8:	39c66284 	addi	r7,r7,6538
 80214ec:	1009883a 	mov	r4,r2
 80214f0:	180b883a 	mov	r5,r3
 80214f4:	1025883a 	mov	r18,r2
 80214f8:	1823883a 	mov	r17,r3
 80214fc:	8025aa80 	call	8025aa8 <__subdf3>
 8021500:	100d883a 	mov	r6,r2
 8021504:	180f883a 	mov	r7,r3
 8021508:	9009883a 	mov	r4,r18
 802150c:	880b883a 	mov	r5,r17
 8021510:	80800015 	stw	r2,0(r16)
 8021514:	80c00115 	stw	r3,4(r16)
 8021518:	8025aa80 	call	8025aa8 <__subdf3>
 802151c:	018b80f4 	movhi	r6,11779
 8021520:	01cee8f4 	movhi	r7,15267
 8021524:	319c1cc4 	addi	r6,r6,28787
 8021528:	39c66284 	addi	r7,r7,6538
 802152c:	003f7306 	br	80212fc <__alt_data_end+0xfffe8c5c>
 8021530:	8022e9c0 	call	8022e9c <fabs>
 8021534:	019b72b4 	movhi	r6,28106
 8021538:	01cff934 	movhi	r7,16356
 802153c:	31b220c4 	addi	r6,r6,-14205
 8021540:	39d7cc04 	addi	r7,r7,24368
 8021544:	1009883a 	mov	r4,r2
 8021548:	180b883a 	mov	r5,r3
 802154c:	102d883a 	mov	r22,r2
 8021550:	182b883a 	mov	r21,r3
 8021554:	80253900 	call	8025390 <__muldf3>
 8021558:	000d883a 	mov	r6,zero
 802155c:	01cff834 	movhi	r7,16352
 8021560:	1009883a 	mov	r4,r2
 8021564:	180b883a 	mov	r5,r3
 8021568:	80249800 	call	8024980 <__adddf3>
 802156c:	180b883a 	mov	r5,r3
 8021570:	1009883a 	mov	r4,r2
 8021574:	80263a40 	call	80263a4 <__fixdfsi>
 8021578:	1009883a 	mov	r4,r2
 802157c:	1025883a 	mov	r18,r2
 8021580:	80264240 	call	8026424 <__floatsidf>
 8021584:	01cffe74 	movhi	r7,16377
 8021588:	39c87ec4 	addi	r7,r7,8699
 802158c:	01951034 	movhi	r6,21568
 8021590:	1009883a 	mov	r4,r2
 8021594:	180b883a 	mov	r5,r3
 8021598:	1029883a 	mov	r20,r2
 802159c:	1827883a 	mov	r19,r3
 80215a0:	80253900 	call	8025390 <__muldf3>
 80215a4:	b009883a 	mov	r4,r22
 80215a8:	a80b883a 	mov	r5,r21
 80215ac:	100d883a 	mov	r6,r2
 80215b0:	180f883a 	mov	r7,r3
 80215b4:	8025aa80 	call	8025aa8 <__subdf3>
 80215b8:	018698b4 	movhi	r6,6754
 80215bc:	01cf7474 	movhi	r7,15825
 80215c0:	a009883a 	mov	r4,r20
 80215c4:	3198cc44 	addi	r6,r6,25393
 80215c8:	39ed1844 	addi	r7,r7,-19359
 80215cc:	980b883a 	mov	r5,r19
 80215d0:	1039883a 	mov	fp,r2
 80215d4:	d8c00815 	stw	r3,32(sp)
 80215d8:	80253900 	call	8025390 <__muldf3>
 80215dc:	010007c4 	movi	r4,31
 80215e0:	e017883a 	mov	r11,fp
 80215e4:	da800817 	ldw	r10,32(sp)
 80215e8:	102d883a 	mov	r22,r2
 80215ec:	182b883a 	mov	r21,r3
 80215f0:	24802816 	blt	r4,r18,8021694 <__ieee754_rem_pio2+0x464>
 80215f4:	913fffc4 	addi	r4,r18,-1
 80215f8:	2109883a 	add	r4,r4,r4
 80215fc:	014200f4 	movhi	r5,2051
 8021600:	2109883a 	add	r4,r4,r4
 8021604:	29673604 	addi	r5,r5,-25384
 8021608:	2909883a 	add	r4,r5,r4
 802160c:	21000017 	ldw	r4,0(r4)
 8021610:	b9002026 	beq	r23,r4,8021694 <__ieee754_rem_pio2+0x464>
 8021614:	100d883a 	mov	r6,r2
 8021618:	180f883a 	mov	r7,r3
 802161c:	e009883a 	mov	r4,fp
 8021620:	500b883a 	mov	r5,r10
 8021624:	da800b15 	stw	r10,44(sp)
 8021628:	df000a15 	stw	fp,40(sp)
 802162c:	8025aa80 	call	8025aa8 <__subdf3>
 8021630:	da800b17 	ldw	r10,44(sp)
 8021634:	dac00a17 	ldw	r11,40(sp)
 8021638:	1019883a 	mov	r12,r2
 802163c:	1813883a 	mov	r9,r3
 8021640:	80800015 	stw	r2,0(r16)
 8021644:	80c00115 	stw	r3,4(r16)
 8021648:	600d883a 	mov	r6,r12
 802164c:	480f883a 	mov	r7,r9
 8021650:	5809883a 	mov	r4,r11
 8021654:	500b883a 	mov	r5,r10
 8021658:	da400b15 	stw	r9,44(sp)
 802165c:	db000a15 	stw	r12,40(sp)
 8021660:	8025aa80 	call	8025aa8 <__subdf3>
 8021664:	b00d883a 	mov	r6,r22
 8021668:	a80f883a 	mov	r7,r21
 802166c:	1009883a 	mov	r4,r2
 8021670:	180b883a 	mov	r5,r3
 8021674:	8025aa80 	call	8025aa8 <__subdf3>
 8021678:	80800215 	stw	r2,8(r16)
 802167c:	80c00315 	stw	r3,12(r16)
 8021680:	da400b17 	ldw	r9,44(sp)
 8021684:	db000a17 	ldw	r12,40(sp)
 8021688:	88009f16 	blt	r17,zero,8021908 <__ieee754_rem_pio2+0x6d8>
 802168c:	9005883a 	mov	r2,r18
 8021690:	003f7706 	br	8021470 <__alt_data_end+0xfffe8dd0>
 8021694:	d9400817 	ldw	r5,32(sp)
 8021698:	100d883a 	mov	r6,r2
 802169c:	180f883a 	mov	r7,r3
 80216a0:	e009883a 	mov	r4,fp
 80216a4:	da800b15 	stw	r10,44(sp)
 80216a8:	dac00a15 	stw	r11,40(sp)
 80216ac:	8025aa80 	call	8025aa8 <__subdf3>
 80216b0:	1019883a 	mov	r12,r2
 80216b4:	1804d53a 	srli	r2,r3,20
 80216b8:	b811d53a 	srai	r8,r23,20
 80216bc:	1813883a 	mov	r9,r3
 80216c0:	1081ffcc 	andi	r2,r2,2047
 80216c4:	80c00115 	stw	r3,4(r16)
 80216c8:	83000015 	stw	r12,0(r16)
 80216cc:	4085c83a 	sub	r2,r8,r2
 80216d0:	00c00404 	movi	r3,16
 80216d4:	da800b17 	ldw	r10,44(sp)
 80216d8:	dac00a17 	ldw	r11,40(sp)
 80216dc:	18bfda0e 	bge	r3,r2,8021648 <__alt_data_end+0xfffe8fa8>
 80216e0:	01cf7474 	movhi	r7,15825
 80216e4:	39ed1844 	addi	r7,r7,-19359
 80216e8:	01869834 	movhi	r6,6752
 80216ec:	a009883a 	mov	r4,r20
 80216f0:	980b883a 	mov	r5,r19
 80216f4:	da000a15 	stw	r8,40(sp)
 80216f8:	80253900 	call	8025390 <__muldf3>
 80216fc:	d9400817 	ldw	r5,32(sp)
 8021700:	100d883a 	mov	r6,r2
 8021704:	180f883a 	mov	r7,r3
 8021708:	e009883a 	mov	r4,fp
 802170c:	102d883a 	mov	r22,r2
 8021710:	182b883a 	mov	r21,r3
 8021714:	8025aa80 	call	8025aa8 <__subdf3>
 8021718:	d9400817 	ldw	r5,32(sp)
 802171c:	100d883a 	mov	r6,r2
 8021720:	180f883a 	mov	r7,r3
 8021724:	e009883a 	mov	r4,fp
 8021728:	182f883a 	mov	r23,r3
 802172c:	d8800915 	stw	r2,36(sp)
 8021730:	8025aa80 	call	8025aa8 <__subdf3>
 8021734:	b00d883a 	mov	r6,r22
 8021738:	a80f883a 	mov	r7,r21
 802173c:	1009883a 	mov	r4,r2
 8021740:	180b883a 	mov	r5,r3
 8021744:	8025aa80 	call	8025aa8 <__subdf3>
 8021748:	018b80f4 	movhi	r6,11779
 802174c:	01cee8f4 	movhi	r7,15267
 8021750:	319c1cc4 	addi	r6,r6,28787
 8021754:	39c66284 	addi	r7,r7,6538
 8021758:	a009883a 	mov	r4,r20
 802175c:	980b883a 	mov	r5,r19
 8021760:	102d883a 	mov	r22,r2
 8021764:	182b883a 	mov	r21,r3
 8021768:	80253900 	call	8025390 <__muldf3>
 802176c:	b00d883a 	mov	r6,r22
 8021770:	a80f883a 	mov	r7,r21
 8021774:	1009883a 	mov	r4,r2
 8021778:	180b883a 	mov	r5,r3
 802177c:	8025aa80 	call	8025aa8 <__subdf3>
 8021780:	d9000917 	ldw	r4,36(sp)
 8021784:	100d883a 	mov	r6,r2
 8021788:	180f883a 	mov	r7,r3
 802178c:	b80b883a 	mov	r5,r23
 8021790:	102d883a 	mov	r22,r2
 8021794:	182b883a 	mov	r21,r3
 8021798:	8025aa80 	call	8025aa8 <__subdf3>
 802179c:	1019883a 	mov	r12,r2
 80217a0:	1804d53a 	srli	r2,r3,20
 80217a4:	da000a17 	ldw	r8,40(sp)
 80217a8:	83000015 	stw	r12,0(r16)
 80217ac:	1081ffcc 	andi	r2,r2,2047
 80217b0:	4091c83a 	sub	r8,r8,r2
 80217b4:	80c00115 	stw	r3,4(r16)
 80217b8:	00800c44 	movi	r2,49
 80217bc:	1813883a 	mov	r9,r3
 80217c0:	1200730e 	bge	r2,r8,8021990 <__ieee754_rem_pio2+0x760>
 80217c4:	01cee8f4 	movhi	r7,15267
 80217c8:	39c66284 	addi	r7,r7,6538
 80217cc:	018b8034 	movhi	r6,11776
 80217d0:	a009883a 	mov	r4,r20
 80217d4:	980b883a 	mov	r5,r19
 80217d8:	80253900 	call	8025390 <__muldf3>
 80217dc:	d9000917 	ldw	r4,36(sp)
 80217e0:	100d883a 	mov	r6,r2
 80217e4:	180f883a 	mov	r7,r3
 80217e8:	b80b883a 	mov	r5,r23
 80217ec:	102d883a 	mov	r22,r2
 80217f0:	182b883a 	mov	r21,r3
 80217f4:	8025aa80 	call	8025aa8 <__subdf3>
 80217f8:	d9000917 	ldw	r4,36(sp)
 80217fc:	100d883a 	mov	r6,r2
 8021800:	180f883a 	mov	r7,r3
 8021804:	b80b883a 	mov	r5,r23
 8021808:	d8c00b15 	stw	r3,44(sp)
 802180c:	d8800a15 	stw	r2,40(sp)
 8021810:	8025aa80 	call	8025aa8 <__subdf3>
 8021814:	b00d883a 	mov	r6,r22
 8021818:	a80f883a 	mov	r7,r21
 802181c:	1009883a 	mov	r4,r2
 8021820:	180b883a 	mov	r5,r3
 8021824:	8025aa80 	call	8025aa8 <__subdf3>
 8021828:	01894834 	movhi	r6,9504
 802182c:	01ce5f34 	movhi	r7,14716
 8021830:	31927044 	addi	r6,r6,18881
 8021834:	39e0e684 	addi	r7,r7,-31846
 8021838:	a009883a 	mov	r4,r20
 802183c:	980b883a 	mov	r5,r19
 8021840:	102d883a 	mov	r22,r2
 8021844:	182b883a 	mov	r21,r3
 8021848:	80253900 	call	8025390 <__muldf3>
 802184c:	b00d883a 	mov	r6,r22
 8021850:	a80f883a 	mov	r7,r21
 8021854:	1009883a 	mov	r4,r2
 8021858:	180b883a 	mov	r5,r3
 802185c:	8025aa80 	call	8025aa8 <__subdf3>
 8021860:	dac00a17 	ldw	r11,40(sp)
 8021864:	da800b17 	ldw	r10,44(sp)
 8021868:	102d883a 	mov	r22,r2
 802186c:	182b883a 	mov	r21,r3
 8021870:	100d883a 	mov	r6,r2
 8021874:	180f883a 	mov	r7,r3
 8021878:	5809883a 	mov	r4,r11
 802187c:	500b883a 	mov	r5,r10
 8021880:	003f6a06 	br	802162c <__alt_data_end+0xfffe8f8c>
 8021884:	80249800 	call	8024980 <__adddf3>
 8021888:	1025883a 	mov	r18,r2
 802188c:	008ffe74 	movhi	r2,16377
 8021890:	10887ec4 	addi	r2,r2,8699
 8021894:	1823883a 	mov	r17,r3
 8021898:	b8802226 	beq	r23,r2,8021924 <__ieee754_rem_pio2+0x6f4>
 802189c:	018698b4 	movhi	r6,6754
 80218a0:	01cf7474 	movhi	r7,15825
 80218a4:	3198cc44 	addi	r6,r6,25393
 80218a8:	39ed1844 	addi	r7,r7,-19359
 80218ac:	9009883a 	mov	r4,r18
 80218b0:	180b883a 	mov	r5,r3
 80218b4:	80249800 	call	8024980 <__adddf3>
 80218b8:	100d883a 	mov	r6,r2
 80218bc:	180f883a 	mov	r7,r3
 80218c0:	9009883a 	mov	r4,r18
 80218c4:	880b883a 	mov	r5,r17
 80218c8:	80800015 	stw	r2,0(r16)
 80218cc:	80c00115 	stw	r3,4(r16)
 80218d0:	8025aa80 	call	8025aa8 <__subdf3>
 80218d4:	018698b4 	movhi	r6,6754
 80218d8:	01cf7474 	movhi	r7,15825
 80218dc:	3198cc44 	addi	r6,r6,25393
 80218e0:	39ed1844 	addi	r7,r7,-19359
 80218e4:	1009883a 	mov	r4,r2
 80218e8:	180b883a 	mov	r5,r3
 80218ec:	80249800 	call	8024980 <__adddf3>
 80218f0:	80800215 	stw	r2,8(r16)
 80218f4:	80c00315 	stw	r3,12(r16)
 80218f8:	00bfffc4 	movi	r2,-1
 80218fc:	003edc06 	br	8021470 <__alt_data_end+0xfffe8dd0>
 8021900:	01c000c4 	movi	r7,3
 8021904:	003ec306 	br	8021414 <__alt_data_end+0xfffe8d74>
 8021908:	4a60003c 	xorhi	r9,r9,32768
 802190c:	18e0003c 	xorhi	r3,r3,32768
 8021910:	83000015 	stw	r12,0(r16)
 8021914:	82400115 	stw	r9,4(r16)
 8021918:	80c00315 	stw	r3,12(r16)
 802191c:	0485c83a 	sub	r2,zero,r18
 8021920:	003ed306 	br	8021470 <__alt_data_end+0xfffe8dd0>
 8021924:	01cf7474 	movhi	r7,15825
 8021928:	9009883a 	mov	r4,r18
 802192c:	39ed1844 	addi	r7,r7,-19359
 8021930:	01869834 	movhi	r6,6752
 8021934:	180b883a 	mov	r5,r3
 8021938:	80249800 	call	8024980 <__adddf3>
 802193c:	018b80f4 	movhi	r6,11779
 8021940:	01cee8f4 	movhi	r7,15267
 8021944:	319c1cc4 	addi	r6,r6,28787
 8021948:	39c66284 	addi	r7,r7,6538
 802194c:	1009883a 	mov	r4,r2
 8021950:	180b883a 	mov	r5,r3
 8021954:	1025883a 	mov	r18,r2
 8021958:	1823883a 	mov	r17,r3
 802195c:	80249800 	call	8024980 <__adddf3>
 8021960:	100d883a 	mov	r6,r2
 8021964:	180f883a 	mov	r7,r3
 8021968:	9009883a 	mov	r4,r18
 802196c:	880b883a 	mov	r5,r17
 8021970:	80800015 	stw	r2,0(r16)
 8021974:	80c00115 	stw	r3,4(r16)
 8021978:	8025aa80 	call	8025aa8 <__subdf3>
 802197c:	018b80f4 	movhi	r6,11779
 8021980:	01cee8f4 	movhi	r7,15267
 8021984:	319c1cc4 	addi	r6,r6,28787
 8021988:	39c66284 	addi	r7,r7,6538
 802198c:	003fd506 	br	80218e4 <__alt_data_end+0xfffe9244>
 8021990:	dac00917 	ldw	r11,36(sp)
 8021994:	b815883a 	mov	r10,r23
 8021998:	003f2b06 	br	8021648 <__alt_data_end+0xfffe8fa8>

0802199c <__kernel_cos>:
 802199c:	defff304 	addi	sp,sp,-52
 80219a0:	dc000315 	stw	r16,12(sp)
 80219a4:	04200034 	movhi	r16,32768
 80219a8:	843fffc4 	addi	r16,r16,-1
 80219ac:	008f9034 	movhi	r2,15936
 80219b0:	df000b15 	stw	fp,44(sp)
 80219b4:	ddc00a15 	stw	r23,40(sp)
 80219b8:	dd800915 	stw	r22,36(sp)
 80219bc:	dcc00615 	stw	r19,24(sp)
 80219c0:	dfc00c15 	stw	ra,48(sp)
 80219c4:	dd400815 	stw	r21,32(sp)
 80219c8:	dd000715 	stw	r20,28(sp)
 80219cc:	dc800515 	stw	r18,20(sp)
 80219d0:	dc400415 	stw	r17,16(sp)
 80219d4:	2c20703a 	and	r16,r5,r16
 80219d8:	10bfffc4 	addi	r2,r2,-1
 80219dc:	2827883a 	mov	r19,r5
 80219e0:	202d883a 	mov	r22,r4
 80219e4:	302f883a 	mov	r23,r6
 80219e8:	3839883a 	mov	fp,r7
 80219ec:	14007516 	blt	r2,r16,8021bc4 <__kernel_cos+0x228>
 80219f0:	80263a40 	call	80263a4 <__fixdfsi>
 80219f4:	10010f26 	beq	r2,zero,8021e34 <__kernel_cos+0x498>
 80219f8:	b00d883a 	mov	r6,r22
 80219fc:	980f883a 	mov	r7,r19
 8021a00:	b009883a 	mov	r4,r22
 8021a04:	980b883a 	mov	r5,r19
 8021a08:	80253900 	call	8025390 <__muldf3>
 8021a0c:	01afa234 	movhi	r6,48776
 8021a10:	01ef6a74 	movhi	r7,48553
 8021a14:	318e3504 	addi	r6,r6,14548
 8021a18:	39feba44 	addi	r7,r7,-1303
 8021a1c:	1009883a 	mov	r4,r2
 8021a20:	180b883a 	mov	r5,r3
 8021a24:	102b883a 	mov	r21,r2
 8021a28:	1829883a 	mov	r20,r3
 8021a2c:	80253900 	call	8025390 <__muldf3>
 8021a30:	01af6d74 	movhi	r6,48565
 8021a34:	01cf88b4 	movhi	r7,15906
 8021a38:	31ac7104 	addi	r6,r6,-20028
 8021a3c:	39fba784 	addi	r7,r7,-4450
 8021a40:	1009883a 	mov	r4,r2
 8021a44:	180b883a 	mov	r5,r3
 8021a48:	80249800 	call	8024980 <__adddf3>
 8021a4c:	a80d883a 	mov	r6,r21
 8021a50:	a00f883a 	mov	r7,r20
 8021a54:	1009883a 	mov	r4,r2
 8021a58:	180b883a 	mov	r5,r3
 8021a5c:	80253900 	call	8025390 <__muldf3>
 8021a60:	01a02734 	movhi	r6,32924
 8021a64:	01cfa4b4 	movhi	r7,16018
 8021a68:	3194ab44 	addi	r6,r6,21165
 8021a6c:	39df93c4 	addi	r7,r7,32335
 8021a70:	1009883a 	mov	r4,r2
 8021a74:	180b883a 	mov	r5,r3
 8021a78:	8025aa80 	call	8025aa8 <__subdf3>
 8021a7c:	a80d883a 	mov	r6,r21
 8021a80:	a00f883a 	mov	r7,r20
 8021a84:	1009883a 	mov	r4,r2
 8021a88:	180b883a 	mov	r5,r3
 8021a8c:	80253900 	call	8025390 <__muldf3>
 8021a90:	018672f4 	movhi	r6,6603
 8021a94:	01cfbeb4 	movhi	r7,16122
 8021a98:	31856404 	addi	r6,r6,5520
 8021a9c:	39c06804 	addi	r7,r7,416
 8021aa0:	1009883a 	mov	r4,r2
 8021aa4:	180b883a 	mov	r5,r3
 8021aa8:	80249800 	call	8024980 <__adddf3>
 8021aac:	a80d883a 	mov	r6,r21
 8021ab0:	a00f883a 	mov	r7,r20
 8021ab4:	1009883a 	mov	r4,r2
 8021ab8:	180b883a 	mov	r5,r3
 8021abc:	80253900 	call	8025390 <__muldf3>
 8021ac0:	0185b074 	movhi	r6,5825
 8021ac4:	01cfd5f4 	movhi	r7,16215
 8021ac8:	31945dc4 	addi	r6,r6,20855
 8021acc:	39f05b04 	addi	r7,r7,-16020
 8021ad0:	1009883a 	mov	r4,r2
 8021ad4:	180b883a 	mov	r5,r3
 8021ad8:	8025aa80 	call	8025aa8 <__subdf3>
 8021adc:	a80d883a 	mov	r6,r21
 8021ae0:	a00f883a 	mov	r7,r20
 8021ae4:	1009883a 	mov	r4,r2
 8021ae8:	180b883a 	mov	r5,r3
 8021aec:	80253900 	call	8025390 <__muldf3>
 8021af0:	01955574 	movhi	r6,21845
 8021af4:	01cfe974 	movhi	r7,16293
 8021af8:	31955304 	addi	r6,r6,21836
 8021afc:	39d55544 	addi	r7,r7,21845
 8021b00:	1009883a 	mov	r4,r2
 8021b04:	180b883a 	mov	r5,r3
 8021b08:	80249800 	call	8024980 <__adddf3>
 8021b0c:	a80d883a 	mov	r6,r21
 8021b10:	a00f883a 	mov	r7,r20
 8021b14:	1009883a 	mov	r4,r2
 8021b18:	180b883a 	mov	r5,r3
 8021b1c:	80253900 	call	8025390 <__muldf3>
 8021b20:	1017883a 	mov	r11,r2
 8021b24:	1815883a 	mov	r10,r3
 8021b28:	a809883a 	mov	r4,r21
 8021b2c:	a00b883a 	mov	r5,r20
 8021b30:	000d883a 	mov	r6,zero
 8021b34:	01cff834 	movhi	r7,16352
 8021b38:	da800215 	stw	r10,8(sp)
 8021b3c:	dac00115 	stw	r11,4(sp)
 8021b40:	80253900 	call	8025390 <__muldf3>
 8021b44:	dac00117 	ldw	r11,4(sp)
 8021b48:	da800217 	ldw	r10,8(sp)
 8021b4c:	a809883a 	mov	r4,r21
 8021b50:	580d883a 	mov	r6,r11
 8021b54:	500f883a 	mov	r7,r10
 8021b58:	a00b883a 	mov	r5,r20
 8021b5c:	1023883a 	mov	r17,r2
 8021b60:	1821883a 	mov	r16,r3
 8021b64:	80253900 	call	8025390 <__muldf3>
 8021b68:	b80d883a 	mov	r6,r23
 8021b6c:	e00f883a 	mov	r7,fp
 8021b70:	b009883a 	mov	r4,r22
 8021b74:	980b883a 	mov	r5,r19
 8021b78:	1029883a 	mov	r20,r2
 8021b7c:	1825883a 	mov	r18,r3
 8021b80:	80253900 	call	8025390 <__muldf3>
 8021b84:	a009883a 	mov	r4,r20
 8021b88:	900b883a 	mov	r5,r18
 8021b8c:	100d883a 	mov	r6,r2
 8021b90:	180f883a 	mov	r7,r3
 8021b94:	8025aa80 	call	8025aa8 <__subdf3>
 8021b98:	8809883a 	mov	r4,r17
 8021b9c:	800b883a 	mov	r5,r16
 8021ba0:	100d883a 	mov	r6,r2
 8021ba4:	180f883a 	mov	r7,r3
 8021ba8:	8025aa80 	call	8025aa8 <__subdf3>
 8021bac:	100d883a 	mov	r6,r2
 8021bb0:	180f883a 	mov	r7,r3
 8021bb4:	0009883a 	mov	r4,zero
 8021bb8:	014ffc34 	movhi	r5,16368
 8021bbc:	8025aa80 	call	8025aa8 <__subdf3>
 8021bc0:	00008b06 	br	8021df0 <__kernel_cos+0x454>
 8021bc4:	200d883a 	mov	r6,r4
 8021bc8:	280f883a 	mov	r7,r5
 8021bcc:	80253900 	call	8025390 <__muldf3>
 8021bd0:	01afa234 	movhi	r6,48776
 8021bd4:	01ef6a74 	movhi	r7,48553
 8021bd8:	318e3504 	addi	r6,r6,14548
 8021bdc:	39feba44 	addi	r7,r7,-1303
 8021be0:	1009883a 	mov	r4,r2
 8021be4:	180b883a 	mov	r5,r3
 8021be8:	1025883a 	mov	r18,r2
 8021bec:	1823883a 	mov	r17,r3
 8021bf0:	80253900 	call	8025390 <__muldf3>
 8021bf4:	01af6d74 	movhi	r6,48565
 8021bf8:	01cf88b4 	movhi	r7,15906
 8021bfc:	31ac7104 	addi	r6,r6,-20028
 8021c00:	39fba784 	addi	r7,r7,-4450
 8021c04:	1009883a 	mov	r4,r2
 8021c08:	180b883a 	mov	r5,r3
 8021c0c:	80249800 	call	8024980 <__adddf3>
 8021c10:	900d883a 	mov	r6,r18
 8021c14:	880f883a 	mov	r7,r17
 8021c18:	1009883a 	mov	r4,r2
 8021c1c:	180b883a 	mov	r5,r3
 8021c20:	80253900 	call	8025390 <__muldf3>
 8021c24:	01a02734 	movhi	r6,32924
 8021c28:	01cfa4b4 	movhi	r7,16018
 8021c2c:	3194ab44 	addi	r6,r6,21165
 8021c30:	39df93c4 	addi	r7,r7,32335
 8021c34:	1009883a 	mov	r4,r2
 8021c38:	180b883a 	mov	r5,r3
 8021c3c:	8025aa80 	call	8025aa8 <__subdf3>
 8021c40:	900d883a 	mov	r6,r18
 8021c44:	880f883a 	mov	r7,r17
 8021c48:	1009883a 	mov	r4,r2
 8021c4c:	180b883a 	mov	r5,r3
 8021c50:	80253900 	call	8025390 <__muldf3>
 8021c54:	018672f4 	movhi	r6,6603
 8021c58:	01cfbeb4 	movhi	r7,16122
 8021c5c:	31856404 	addi	r6,r6,5520
 8021c60:	39c06804 	addi	r7,r7,416
 8021c64:	1009883a 	mov	r4,r2
 8021c68:	180b883a 	mov	r5,r3
 8021c6c:	80249800 	call	8024980 <__adddf3>
 8021c70:	900d883a 	mov	r6,r18
 8021c74:	880f883a 	mov	r7,r17
 8021c78:	1009883a 	mov	r4,r2
 8021c7c:	180b883a 	mov	r5,r3
 8021c80:	80253900 	call	8025390 <__muldf3>
 8021c84:	0185b074 	movhi	r6,5825
 8021c88:	01cfd5f4 	movhi	r7,16215
 8021c8c:	31945dc4 	addi	r6,r6,20855
 8021c90:	39f05b04 	addi	r7,r7,-16020
 8021c94:	1009883a 	mov	r4,r2
 8021c98:	180b883a 	mov	r5,r3
 8021c9c:	8025aa80 	call	8025aa8 <__subdf3>
 8021ca0:	900d883a 	mov	r6,r18
 8021ca4:	880f883a 	mov	r7,r17
 8021ca8:	1009883a 	mov	r4,r2
 8021cac:	180b883a 	mov	r5,r3
 8021cb0:	80253900 	call	8025390 <__muldf3>
 8021cb4:	01955574 	movhi	r6,21845
 8021cb8:	01cfe974 	movhi	r7,16293
 8021cbc:	31955304 	addi	r6,r6,21836
 8021cc0:	39d55544 	addi	r7,r7,21845
 8021cc4:	1009883a 	mov	r4,r2
 8021cc8:	180b883a 	mov	r5,r3
 8021ccc:	80249800 	call	8024980 <__adddf3>
 8021cd0:	900d883a 	mov	r6,r18
 8021cd4:	880f883a 	mov	r7,r17
 8021cd8:	1009883a 	mov	r4,r2
 8021cdc:	180b883a 	mov	r5,r3
 8021ce0:	80253900 	call	8025390 <__muldf3>
 8021ce4:	1013883a 	mov	r9,r2
 8021ce8:	1017883a 	mov	r11,r2
 8021cec:	008ff4f4 	movhi	r2,16339
 8021cf0:	108ccc84 	addi	r2,r2,13106
 8021cf4:	1811883a 	mov	r8,r3
 8021cf8:	902b883a 	mov	r21,r18
 8021cfc:	8829883a 	mov	r20,r17
 8021d00:	1815883a 	mov	r10,r3
 8021d04:	143f880e 	bge	r2,r16,8021b28 <__alt_data_end+0xfffe9488>
 8021d08:	008ffa74 	movhi	r2,16361
 8021d0c:	14004416 	blt	r2,r16,8021e20 <__kernel_cos+0x484>
 8021d10:	00bff834 	movhi	r2,65504
 8021d14:	80a1883a 	add	r16,r16,r2
 8021d18:	000d883a 	mov	r6,zero
 8021d1c:	800f883a 	mov	r7,r16
 8021d20:	0009883a 	mov	r4,zero
 8021d24:	014ffc34 	movhi	r5,16368
 8021d28:	da400115 	stw	r9,4(sp)
 8021d2c:	d8c00215 	stw	r3,8(sp)
 8021d30:	8025aa80 	call	8025aa8 <__subdf3>
 8021d34:	da000217 	ldw	r8,8(sp)
 8021d38:	da400117 	ldw	r9,4(sp)
 8021d3c:	102b883a 	mov	r21,r2
 8021d40:	d8c00015 	stw	r3,0(sp)
 8021d44:	9009883a 	mov	r4,r18
 8021d48:	880b883a 	mov	r5,r17
 8021d4c:	000d883a 	mov	r6,zero
 8021d50:	01cff834 	movhi	r7,16352
 8021d54:	da000215 	stw	r8,8(sp)
 8021d58:	da400115 	stw	r9,4(sp)
 8021d5c:	80253900 	call	8025390 <__muldf3>
 8021d60:	800f883a 	mov	r7,r16
 8021d64:	000d883a 	mov	r6,zero
 8021d68:	1009883a 	mov	r4,r2
 8021d6c:	180b883a 	mov	r5,r3
 8021d70:	8025aa80 	call	8025aa8 <__subdf3>
 8021d74:	da400117 	ldw	r9,4(sp)
 8021d78:	da000217 	ldw	r8,8(sp)
 8021d7c:	9009883a 	mov	r4,r18
 8021d80:	480d883a 	mov	r6,r9
 8021d84:	400f883a 	mov	r7,r8
 8021d88:	880b883a 	mov	r5,r17
 8021d8c:	1029883a 	mov	r20,r2
 8021d90:	1821883a 	mov	r16,r3
 8021d94:	80253900 	call	8025390 <__muldf3>
 8021d98:	b80d883a 	mov	r6,r23
 8021d9c:	e00f883a 	mov	r7,fp
 8021da0:	b009883a 	mov	r4,r22
 8021da4:	980b883a 	mov	r5,r19
 8021da8:	1025883a 	mov	r18,r2
 8021dac:	1823883a 	mov	r17,r3
 8021db0:	80253900 	call	8025390 <__muldf3>
 8021db4:	100d883a 	mov	r6,r2
 8021db8:	180f883a 	mov	r7,r3
 8021dbc:	9009883a 	mov	r4,r18
 8021dc0:	880b883a 	mov	r5,r17
 8021dc4:	8025aa80 	call	8025aa8 <__subdf3>
 8021dc8:	100d883a 	mov	r6,r2
 8021dcc:	180f883a 	mov	r7,r3
 8021dd0:	a009883a 	mov	r4,r20
 8021dd4:	800b883a 	mov	r5,r16
 8021dd8:	8025aa80 	call	8025aa8 <__subdf3>
 8021ddc:	d9400017 	ldw	r5,0(sp)
 8021de0:	100d883a 	mov	r6,r2
 8021de4:	180f883a 	mov	r7,r3
 8021de8:	a809883a 	mov	r4,r21
 8021dec:	8025aa80 	call	8025aa8 <__subdf3>
 8021df0:	dfc00c17 	ldw	ra,48(sp)
 8021df4:	df000b17 	ldw	fp,44(sp)
 8021df8:	ddc00a17 	ldw	r23,40(sp)
 8021dfc:	dd800917 	ldw	r22,36(sp)
 8021e00:	dd400817 	ldw	r21,32(sp)
 8021e04:	dd000717 	ldw	r20,28(sp)
 8021e08:	dcc00617 	ldw	r19,24(sp)
 8021e0c:	dc800517 	ldw	r18,20(sp)
 8021e10:	dc400417 	ldw	r17,16(sp)
 8021e14:	dc000317 	ldw	r16,12(sp)
 8021e18:	dec00d04 	addi	sp,sp,52
 8021e1c:	f800283a 	ret
 8021e20:	008ff9f4 	movhi	r2,16359
 8021e24:	002b883a 	mov	r21,zero
 8021e28:	d8800015 	stw	r2,0(sp)
 8021e2c:	040ff4b4 	movhi	r16,16338
 8021e30:	003fc406 	br	8021d44 <__alt_data_end+0xfffe96a4>
 8021e34:	0005883a 	mov	r2,zero
 8021e38:	00cffc34 	movhi	r3,16368
 8021e3c:	003fec06 	br	8021df0 <__alt_data_end+0xfffe9750>

08021e40 <__kernel_rem_pio2>:
 8021e40:	deff5a04 	addi	sp,sp,-664
 8021e44:	da00a617 	ldw	r8,664(sp)
 8021e48:	00c200f4 	movhi	r3,2051
 8021e4c:	18e7a804 	addi	r3,r3,-24928
 8021e50:	4205883a 	add	r2,r8,r8
 8021e54:	1085883a 	add	r2,r2,r2
 8021e58:	1885883a 	add	r2,r3,r2
 8021e5c:	d9008e15 	stw	r4,568(sp)
 8021e60:	d9408f15 	stw	r5,572(sp)
 8021e64:	313fff44 	addi	r4,r6,-3
 8021e68:	01400604 	movi	r5,24
 8021e6c:	dd80a215 	stw	r22,648(sp)
 8021e70:	dc009c15 	stw	r16,624(sp)
 8021e74:	dfc0a515 	stw	ra,660(sp)
 8021e78:	df00a415 	stw	fp,656(sp)
 8021e7c:	ddc0a315 	stw	r23,652(sp)
 8021e80:	dd40a115 	stw	r21,644(sp)
 8021e84:	dd00a015 	stw	r20,640(sp)
 8021e88:	dcc09f15 	stw	r19,636(sp)
 8021e8c:	dc809e15 	stw	r18,632(sp)
 8021e90:	dc409d15 	stw	r17,628(sp)
 8021e94:	3021883a 	mov	r16,r6
 8021e98:	d9c09315 	stw	r7,588(sp)
 8021e9c:	15800017 	ldw	r22,0(r2)
 8021ea0:	80232540 	call	8023254 <__divsi3>
 8021ea4:	da009317 	ldw	r8,588(sp)
 8021ea8:	d8809215 	stw	r2,584(sp)
 8021eac:	423fffc4 	addi	r8,r8,-1
 8021eb0:	da008d15 	stw	r8,564(sp)
 8021eb4:	10033b16 	blt	r2,zero,8022ba4 <__kernel_rem_pio2+0xd64>
 8021eb8:	da009217 	ldw	r8,584(sp)
 8021ebc:	d9009217 	ldw	r4,584(sp)
 8021ec0:	42000044 	addi	r8,r8,1
 8021ec4:	40fffa24 	muli	r3,r8,-24
 8021ec8:	da009515 	stw	r8,596(sp)
 8021ecc:	da008d17 	ldw	r8,564(sp)
 8021ed0:	1c07883a 	add	r3,r3,r16
 8021ed4:	d8c09015 	stw	r3,576(sp)
 8021ed8:	b205883a 	add	r2,r22,r8
 8021edc:	2223c83a 	sub	r17,r4,r8
 8021ee0:	10001016 	blt	r2,zero,8021f24 <__kernel_rem_pio2+0xe4>
 8021ee4:	da00a717 	ldw	r8,668(sp)
 8021ee8:	8c65883a 	add	r18,r17,r17
 8021eec:	94a5883a 	add	r18,r18,r18
 8021ef0:	1445883a 	add	r2,r2,r17
 8021ef4:	dcc05004 	addi	r19,sp,320
 8021ef8:	44a5883a 	add	r18,r8,r18
 8021efc:	14000044 	addi	r16,r2,1
 8021f00:	88015316 	blt	r17,zero,8022450 <__kernel_rem_pio2+0x610>
 8021f04:	91000017 	ldw	r4,0(r18)
 8021f08:	80264240 	call	8026424 <__floatsidf>
 8021f0c:	98800015 	stw	r2,0(r19)
 8021f10:	98c00115 	stw	r3,4(r19)
 8021f14:	8c400044 	addi	r17,r17,1
 8021f18:	9cc00204 	addi	r19,r19,8
 8021f1c:	94800104 	addi	r18,r18,4
 8021f20:	8c3ff71e 	bne	r17,r16,8021f00 <__alt_data_end+0xfffe9860>
 8021f24:	b0002816 	blt	r22,zero,8021fc8 <__kernel_rem_pio2+0x188>
 8021f28:	da008d17 	ldw	r8,564(sp)
 8021f2c:	b4c00044 	addi	r19,r22,1
 8021f30:	982690fa 	slli	r19,r19,3
 8021f34:	402490fa 	slli	r18,r8,3
 8021f38:	da008e17 	ldw	r8,568(sp)
 8021f3c:	d8805004 	addi	r2,sp,320
 8021f40:	94000204 	addi	r16,r18,8
 8021f44:	d823883a 	mov	r17,sp
 8021f48:	14a5883a 	add	r18,r2,r18
 8021f4c:	dcef883a 	add	r23,sp,r19
 8021f50:	4421883a 	add	r16,r8,r16
 8021f54:	dd809115 	stw	r22,580(sp)
 8021f58:	4039883a 	mov	fp,r8
 8021f5c:	da008d17 	ldw	r8,564(sp)
 8021f60:	40016016 	blt	r8,zero,80224e4 <__kernel_rem_pio2+0x6a4>
 8021f64:	e027883a 	mov	r19,fp
 8021f68:	9029883a 	mov	r20,r18
 8021f6c:	002d883a 	mov	r22,zero
 8021f70:	002b883a 	mov	r21,zero
 8021f74:	a1800017 	ldw	r6,0(r20)
 8021f78:	a1c00117 	ldw	r7,4(r20)
 8021f7c:	99000017 	ldw	r4,0(r19)
 8021f80:	99400117 	ldw	r5,4(r19)
 8021f84:	9cc00204 	addi	r19,r19,8
 8021f88:	a53ffe04 	addi	r20,r20,-8
 8021f8c:	80253900 	call	8025390 <__muldf3>
 8021f90:	b009883a 	mov	r4,r22
 8021f94:	a80b883a 	mov	r5,r21
 8021f98:	100d883a 	mov	r6,r2
 8021f9c:	180f883a 	mov	r7,r3
 8021fa0:	80249800 	call	8024980 <__adddf3>
 8021fa4:	102d883a 	mov	r22,r2
 8021fa8:	182b883a 	mov	r21,r3
 8021fac:	9c3ff11e 	bne	r19,r16,8021f74 <__alt_data_end+0xfffe98d4>
 8021fb0:	8d800015 	stw	r22,0(r17)
 8021fb4:	8d400115 	stw	r21,4(r17)
 8021fb8:	8c400204 	addi	r17,r17,8
 8021fbc:	94800204 	addi	r18,r18,8
 8021fc0:	8dffe61e 	bne	r17,r23,8021f5c <__alt_data_end+0xfffe98bc>
 8021fc4:	dd809117 	ldw	r22,580(sp)
 8021fc8:	00d00034 	movhi	r3,16384
 8021fcc:	da009317 	ldw	r8,588(sp)
 8021fd0:	18ffff84 	addi	r3,r3,-2
 8021fd4:	b0c7883a 	add	r3,r22,r3
 8021fd8:	18c7883a 	add	r3,r3,r3
 8021fdc:	402090fa 	slli	r16,r8,3
 8021fe0:	18c7883a 	add	r3,r3,r3
 8021fe4:	da007804 	addi	r8,sp,480
 8021fe8:	40d1883a 	add	r8,r8,r3
 8021fec:	b0bfffc4 	addi	r2,r22,-1
 8021ff0:	da009615 	stw	r8,600(sp)
 8021ff4:	da008e17 	ldw	r8,568(sp)
 8021ff8:	1085883a 	add	r2,r2,r2
 8021ffc:	1085883a 	add	r2,r2,r2
 8022000:	19000104 	addi	r4,r3,4
 8022004:	d885883a 	add	r2,sp,r2
 8022008:	4421883a 	add	r16,r8,r16
 802200c:	da007804 	addi	r8,sp,480
 8022010:	4111883a 	add	r8,r8,r4
 8022014:	10807804 	addi	r2,r2,480
 8022018:	da009715 	stw	r8,604(sp)
 802201c:	b025883a 	mov	r18,r22
 8022020:	d8809815 	stw	r2,608(sp)
 8022024:	dd809415 	stw	r22,592(sp)
 8022028:	900490fa 	slli	r2,r18,3
 802202c:	d885883a 	add	r2,sp,r2
 8022030:	17000017 	ldw	fp,0(r2)
 8022034:	15400117 	ldw	r21,4(r2)
 8022038:	04802b0e 	bge	zero,r18,80220e8 <__kernel_rem_pio2+0x2a8>
 802203c:	00880034 	movhi	r2,8192
 8022040:	10bfffc4 	addi	r2,r2,-1
 8022044:	90a9883a 	add	r20,r18,r2
 8022048:	a02890fa 	slli	r20,r20,3
 802204c:	dc407804 	addi	r17,sp,480
 8022050:	dcfffe04 	addi	r19,sp,-8
 8022054:	dd29883a 	add	r20,sp,r20
 8022058:	000d883a 	mov	r6,zero
 802205c:	01cf9c34 	movhi	r7,15984
 8022060:	e009883a 	mov	r4,fp
 8022064:	a80b883a 	mov	r5,r21
 8022068:	80253900 	call	8025390 <__muldf3>
 802206c:	180b883a 	mov	r5,r3
 8022070:	1009883a 	mov	r4,r2
 8022074:	80263a40 	call	80263a4 <__fixdfsi>
 8022078:	1009883a 	mov	r4,r2
 802207c:	80264240 	call	8026424 <__floatsidf>
 8022080:	000d883a 	mov	r6,zero
 8022084:	01d05c34 	movhi	r7,16752
 8022088:	1009883a 	mov	r4,r2
 802208c:	180b883a 	mov	r5,r3
 8022090:	102f883a 	mov	r23,r2
 8022094:	182d883a 	mov	r22,r3
 8022098:	80253900 	call	8025390 <__muldf3>
 802209c:	100d883a 	mov	r6,r2
 80220a0:	180f883a 	mov	r7,r3
 80220a4:	e009883a 	mov	r4,fp
 80220a8:	a80b883a 	mov	r5,r21
 80220ac:	8025aa80 	call	8025aa8 <__subdf3>
 80220b0:	180b883a 	mov	r5,r3
 80220b4:	1009883a 	mov	r4,r2
 80220b8:	80263a40 	call	80263a4 <__fixdfsi>
 80220bc:	a1800017 	ldw	r6,0(r20)
 80220c0:	a1c00117 	ldw	r7,4(r20)
 80220c4:	88800015 	stw	r2,0(r17)
 80220c8:	b809883a 	mov	r4,r23
 80220cc:	b00b883a 	mov	r5,r22
 80220d0:	80249800 	call	8024980 <__adddf3>
 80220d4:	a53ffe04 	addi	r20,r20,-8
 80220d8:	1039883a 	mov	fp,r2
 80220dc:	182b883a 	mov	r21,r3
 80220e0:	8c400104 	addi	r17,r17,4
 80220e4:	a4ffdc1e 	bne	r20,r19,8022058 <__alt_data_end+0xfffe99b8>
 80220e8:	d9809017 	ldw	r6,576(sp)
 80220ec:	a80b883a 	mov	r5,r21
 80220f0:	e009883a 	mov	r4,fp
 80220f4:	802309c0 	call	802309c <scalbn>
 80220f8:	000d883a 	mov	r6,zero
 80220fc:	01cff034 	movhi	r7,16320
 8022100:	1009883a 	mov	r4,r2
 8022104:	180b883a 	mov	r5,r3
 8022108:	1027883a 	mov	r19,r2
 802210c:	1823883a 	mov	r17,r3
 8022110:	80253900 	call	8025390 <__muldf3>
 8022114:	1009883a 	mov	r4,r2
 8022118:	180b883a 	mov	r5,r3
 802211c:	8022eb00 	call	8022eb0 <floor>
 8022120:	000d883a 	mov	r6,zero
 8022124:	01d00834 	movhi	r7,16416
 8022128:	1009883a 	mov	r4,r2
 802212c:	180b883a 	mov	r5,r3
 8022130:	80253900 	call	8025390 <__muldf3>
 8022134:	100d883a 	mov	r6,r2
 8022138:	180f883a 	mov	r7,r3
 802213c:	9809883a 	mov	r4,r19
 8022140:	880b883a 	mov	r5,r17
 8022144:	8025aa80 	call	8025aa8 <__subdf3>
 8022148:	180b883a 	mov	r5,r3
 802214c:	1009883a 	mov	r4,r2
 8022150:	1827883a 	mov	r19,r3
 8022154:	1029883a 	mov	r20,r2
 8022158:	80263a40 	call	80263a4 <__fixdfsi>
 802215c:	1009883a 	mov	r4,r2
 8022160:	1023883a 	mov	r17,r2
 8022164:	80264240 	call	8026424 <__floatsidf>
 8022168:	a009883a 	mov	r4,r20
 802216c:	100d883a 	mov	r6,r2
 8022170:	180f883a 	mov	r7,r3
 8022174:	980b883a 	mov	r5,r19
 8022178:	8025aa80 	call	8025aa8 <__subdf3>
 802217c:	d9009017 	ldw	r4,576(sp)
 8022180:	1013883a 	mov	r9,r2
 8022184:	102b883a 	mov	r21,r2
 8022188:	1811883a 	mov	r8,r3
 802218c:	0100b30e 	bge	zero,r4,802245c <__kernel_rem_pio2+0x61c>
 8022190:	90bfffc4 	addi	r2,r18,-1
 8022194:	1085883a 	add	r2,r2,r2
 8022198:	1085883a 	add	r2,r2,r2
 802219c:	d885883a 	add	r2,sp,r2
 80221a0:	10807804 	addi	r2,r2,480
 80221a4:	d9809017 	ldw	r6,576(sp)
 80221a8:	11400017 	ldw	r5,0(r2)
 80221ac:	01000604 	movi	r4,24
 80221b0:	2189c83a 	sub	r4,r4,r6
 80221b4:	290dd83a 	sra	r6,r5,r4
 80221b8:	d9c09017 	ldw	r7,576(sp)
 80221bc:	04c005c4 	movi	r19,23
 80221c0:	3108983a 	sll	r4,r6,r4
 80221c4:	99e7c83a 	sub	r19,r19,r7
 80221c8:	89a3883a 	add	r17,r17,r6
 80221cc:	2909c83a 	sub	r4,r5,r4
 80221d0:	24e7d83a 	sra	r19,r4,r19
 80221d4:	11000015 	stw	r4,0(r2)
 80221d8:	04c02a0e 	bge	zero,r19,8022284 <__kernel_rem_pio2+0x444>
 80221dc:	8c400044 	addi	r17,r17,1
 80221e0:	0481570e 	bge	zero,r18,8022740 <__kernel_rem_pio2+0x900>
 80221e4:	02804034 	movhi	r10,256
 80221e8:	52bfffc4 	addi	r10,r10,-1
 80221ec:	d8807804 	addi	r2,sp,480
 80221f0:	000b883a 	mov	r5,zero
 80221f4:	0029883a 	mov	r20,zero
 80221f8:	01c04034 	movhi	r7,256
 80221fc:	00000706 	br	802221c <__kernel_rem_pio2+0x3dc>
 8022200:	390dc83a 	sub	r6,r7,r4
 8022204:	20000226 	beq	r4,zero,8022210 <__kernel_rem_pio2+0x3d0>
 8022208:	11800015 	stw	r6,0(r2)
 802220c:	05000044 	movi	r20,1
 8022210:	29400044 	addi	r5,r5,1
 8022214:	10800104 	addi	r2,r2,4
 8022218:	2c80080e 	bge	r5,r18,802223c <__kernel_rem_pio2+0x3fc>
 802221c:	11000017 	ldw	r4,0(r2)
 8022220:	a03ff726 	beq	r20,zero,8022200 <__alt_data_end+0xfffe9b60>
 8022224:	5109c83a 	sub	r4,r10,r4
 8022228:	11000015 	stw	r4,0(r2)
 802222c:	29400044 	addi	r5,r5,1
 8022230:	05000044 	movi	r20,1
 8022234:	10800104 	addi	r2,r2,4
 8022238:	2cbff816 	blt	r5,r18,802221c <__alt_data_end+0xfffe9b7c>
 802223c:	d9009017 	ldw	r4,576(sp)
 8022240:	01000e0e 	bge	zero,r4,802227c <__kernel_rem_pio2+0x43c>
 8022244:	00800044 	movi	r2,1
 8022248:	20808d26 	beq	r4,r2,8022480 <__kernel_rem_pio2+0x640>
 802224c:	00800084 	movi	r2,2
 8022250:	20800a1e 	bne	r4,r2,802227c <__kernel_rem_pio2+0x43c>
 8022254:	90bfffc4 	addi	r2,r18,-1
 8022258:	1085883a 	add	r2,r2,r2
 802225c:	1085883a 	add	r2,r2,r2
 8022260:	d885883a 	add	r2,sp,r2
 8022264:	10807804 	addi	r2,r2,480
 8022268:	11400017 	ldw	r5,0(r2)
 802226c:	01001034 	movhi	r4,64
 8022270:	213fffc4 	addi	r4,r4,-1
 8022274:	2908703a 	and	r4,r5,r4
 8022278:	11000015 	stw	r4,0(r2)
 802227c:	00800084 	movi	r2,2
 8022280:	98805d26 	beq	r19,r2,80223f8 <__kernel_rem_pio2+0x5b8>
 8022284:	400b883a 	mov	r5,r8
 8022288:	000d883a 	mov	r6,zero
 802228c:	000f883a 	mov	r7,zero
 8022290:	a809883a 	mov	r4,r21
 8022294:	da009b15 	stw	r8,620(sp)
 8022298:	802522c0 	call	802522c <__eqdf2>
 802229c:	da009b17 	ldw	r8,620(sp)
 80222a0:	10012b1e 	bne	r2,zero,8022750 <__kernel_rem_pio2+0x910>
 80222a4:	da009417 	ldw	r8,592(sp)
 80222a8:	917fffc4 	addi	r5,r18,-1
 80222ac:	2a000e16 	blt	r5,r8,80222e8 <__kernel_rem_pio2+0x4a8>
 80222b0:	00900034 	movhi	r2,16384
 80222b4:	10bfffc4 	addi	r2,r2,-1
 80222b8:	9085883a 	add	r2,r18,r2
 80222bc:	1085883a 	add	r2,r2,r2
 80222c0:	d9809717 	ldw	r6,604(sp)
 80222c4:	1085883a 	add	r2,r2,r2
 80222c8:	d9007804 	addi	r4,sp,480
 80222cc:	0007883a 	mov	r3,zero
 80222d0:	2085883a 	add	r2,r4,r2
 80222d4:	11000017 	ldw	r4,0(r2)
 80222d8:	10bfff04 	addi	r2,r2,-4
 80222dc:	1906b03a 	or	r3,r3,r4
 80222e0:	11bffc1e 	bne	r2,r6,80222d4 <__alt_data_end+0xfffe9c34>
 80222e4:	1800821e 	bne	r3,zero,80224f0 <__kernel_rem_pio2+0x6b0>
 80222e8:	da009817 	ldw	r8,608(sp)
 80222ec:	40800017 	ldw	r2,0(r8)
 80222f0:	1001151e 	bne	r2,zero,8022748 <__kernel_rem_pio2+0x908>
 80222f4:	d8809617 	ldw	r2,600(sp)
 80222f8:	05000044 	movi	r20,1
 80222fc:	10bfff04 	addi	r2,r2,-4
 8022300:	10c00117 	ldw	r3,4(r2)
 8022304:	a5000044 	addi	r20,r20,1
 8022308:	183ffc26 	beq	r3,zero,80222fc <__alt_data_end+0xfffe9c5c>
 802230c:	9529883a 	add	r20,r18,r20
 8022310:	90800044 	addi	r2,r18,1
 8022314:	dd009115 	stw	r20,580(sp)
 8022318:	a0803216 	blt	r20,r2,80223e4 <__kernel_rem_pio2+0x5a4>
 802231c:	da009317 	ldw	r8,588(sp)
 8022320:	d8c09117 	ldw	r3,580(sp)
 8022324:	44a3883a 	add	r17,r8,r18
 8022328:	da009217 	ldw	r8,584(sp)
 802232c:	882290fa 	slli	r17,r17,3
 8022330:	40a5883a 	add	r18,r8,r2
 8022334:	da009517 	ldw	r8,596(sp)
 8022338:	100490fa 	slli	r2,r2,3
 802233c:	94a5883a 	add	r18,r18,r18
 8022340:	40eb883a 	add	r21,r8,r3
 8022344:	da00a717 	ldw	r8,668(sp)
 8022348:	ad6b883a 	add	r21,r21,r21
 802234c:	94a5883a 	add	r18,r18,r18
 8022350:	ad6b883a 	add	r21,r21,r21
 8022354:	d8c05004 	addi	r3,sp,320
 8022358:	44a5883a 	add	r18,r8,r18
 802235c:	1c63883a 	add	r17,r3,r17
 8022360:	d8a7883a 	add	r19,sp,r2
 8022364:	456b883a 	add	r21,r8,r21
 8022368:	91000017 	ldw	r4,0(r18)
 802236c:	80264240 	call	8026424 <__floatsidf>
 8022370:	da008d17 	ldw	r8,564(sp)
 8022374:	88800015 	stw	r2,0(r17)
 8022378:	88c00115 	stw	r3,4(r17)
 802237c:	40001b16 	blt	r8,zero,80223ec <__kernel_rem_pio2+0x5ac>
 8022380:	dd008e17 	ldw	r20,568(sp)
 8022384:	882d883a 	mov	r22,r17
 8022388:	002f883a 	mov	r23,zero
 802238c:	0039883a 	mov	fp,zero
 8022390:	b1800017 	ldw	r6,0(r22)
 8022394:	b1c00117 	ldw	r7,4(r22)
 8022398:	a1000017 	ldw	r4,0(r20)
 802239c:	a1400117 	ldw	r5,4(r20)
 80223a0:	a5000204 	addi	r20,r20,8
 80223a4:	b5bffe04 	addi	r22,r22,-8
 80223a8:	80253900 	call	8025390 <__muldf3>
 80223ac:	b809883a 	mov	r4,r23
 80223b0:	e00b883a 	mov	r5,fp
 80223b4:	100d883a 	mov	r6,r2
 80223b8:	180f883a 	mov	r7,r3
 80223bc:	80249800 	call	8024980 <__adddf3>
 80223c0:	102f883a 	mov	r23,r2
 80223c4:	1839883a 	mov	fp,r3
 80223c8:	a43ff11e 	bne	r20,r16,8022390 <__alt_data_end+0xfffe9cf0>
 80223cc:	9dc00015 	stw	r23,0(r19)
 80223d0:	9f000115 	stw	fp,4(r19)
 80223d4:	94800104 	addi	r18,r18,4
 80223d8:	8c400204 	addi	r17,r17,8
 80223dc:	9cc00204 	addi	r19,r19,8
 80223e0:	957fe11e 	bne	r18,r21,8022368 <__alt_data_end+0xfffe9cc8>
 80223e4:	dc809117 	ldw	r18,580(sp)
 80223e8:	003f0f06 	br	8022028 <__alt_data_end+0xfffe9988>
 80223ec:	002f883a 	mov	r23,zero
 80223f0:	0039883a 	mov	fp,zero
 80223f4:	003ff506 	br	80223cc <__alt_data_end+0xfffe9d2c>
 80223f8:	480d883a 	mov	r6,r9
 80223fc:	180f883a 	mov	r7,r3
 8022400:	0009883a 	mov	r4,zero
 8022404:	014ffc34 	movhi	r5,16368
 8022408:	8025aa80 	call	8025aa8 <__subdf3>
 802240c:	102b883a 	mov	r21,r2
 8022410:	1811883a 	mov	r8,r3
 8022414:	a03f9b26 	beq	r20,zero,8022284 <__alt_data_end+0xfffe9be4>
 8022418:	d9809017 	ldw	r6,576(sp)
 802241c:	0009883a 	mov	r4,zero
 8022420:	014ffc34 	movhi	r5,16368
 8022424:	d8c09b15 	stw	r3,620(sp)
 8022428:	802309c0 	call	802309c <scalbn>
 802242c:	da009b17 	ldw	r8,620(sp)
 8022430:	a809883a 	mov	r4,r21
 8022434:	100d883a 	mov	r6,r2
 8022438:	400b883a 	mov	r5,r8
 802243c:	180f883a 	mov	r7,r3
 8022440:	8025aa80 	call	8025aa8 <__subdf3>
 8022444:	102b883a 	mov	r21,r2
 8022448:	1811883a 	mov	r8,r3
 802244c:	003f8d06 	br	8022284 <__alt_data_end+0xfffe9be4>
 8022450:	0005883a 	mov	r2,zero
 8022454:	0007883a 	mov	r3,zero
 8022458:	003eac06 	br	8021f0c <__alt_data_end+0xfffe986c>
 802245c:	d8809017 	ldw	r2,576(sp)
 8022460:	1000121e 	bne	r2,zero,80224ac <__kernel_rem_pio2+0x66c>
 8022464:	90bfffc4 	addi	r2,r18,-1
 8022468:	1085883a 	add	r2,r2,r2
 802246c:	1085883a 	add	r2,r2,r2
 8022470:	d885883a 	add	r2,sp,r2
 8022474:	14c07817 	ldw	r19,480(r2)
 8022478:	9827d5fa 	srai	r19,r19,23
 802247c:	003f5606 	br	80221d8 <__alt_data_end+0xfffe9b38>
 8022480:	90bfffc4 	addi	r2,r18,-1
 8022484:	1085883a 	add	r2,r2,r2
 8022488:	1085883a 	add	r2,r2,r2
 802248c:	d885883a 	add	r2,sp,r2
 8022490:	10807804 	addi	r2,r2,480
 8022494:	11000017 	ldw	r4,0(r2)
 8022498:	01402034 	movhi	r5,128
 802249c:	297fffc4 	addi	r5,r5,-1
 80224a0:	2148703a 	and	r4,r4,r5
 80224a4:	11000015 	stw	r4,0(r2)
 80224a8:	003f7406 	br	802227c <__alt_data_end+0xfffe9bdc>
 80224ac:	4809883a 	mov	r4,r9
 80224b0:	180b883a 	mov	r5,r3
 80224b4:	000d883a 	mov	r6,zero
 80224b8:	01cff834 	movhi	r7,16352
 80224bc:	d8c09a15 	stw	r3,616(sp)
 80224c0:	d8c09b15 	stw	r3,620(sp)
 80224c4:	da409915 	stw	r9,612(sp)
 80224c8:	80252b40 	call	80252b4 <__gedf2>
 80224cc:	d8c09a17 	ldw	r3,616(sp)
 80224d0:	da009b17 	ldw	r8,620(sp)
 80224d4:	da409917 	ldw	r9,612(sp)
 80224d8:	1000920e 	bge	r2,zero,8022724 <__kernel_rem_pio2+0x8e4>
 80224dc:	0027883a 	mov	r19,zero
 80224e0:	003f6806 	br	8022284 <__alt_data_end+0xfffe9be4>
 80224e4:	002d883a 	mov	r22,zero
 80224e8:	002b883a 	mov	r21,zero
 80224ec:	003eb006 	br	8021fb0 <__alt_data_end+0xfffe9910>
 80224f0:	2945883a 	add	r2,r5,r5
 80224f4:	da009017 	ldw	r8,576(sp)
 80224f8:	1085883a 	add	r2,r2,r2
 80224fc:	d885883a 	add	r2,sp,r2
 8022500:	10807817 	ldw	r2,480(r2)
 8022504:	423ffa04 	addi	r8,r8,-24
 8022508:	dc409115 	stw	r17,580(sp)
 802250c:	dcc08d15 	stw	r19,564(sp)
 8022510:	da009015 	stw	r8,576(sp)
 8022514:	dd809417 	ldw	r22,592(sp)
 8022518:	2823883a 	mov	r17,r5
 802251c:	10000e1e 	bne	r2,zero,8022558 <__kernel_rem_pio2+0x718>
 8022520:	00900034 	movhi	r2,16384
 8022524:	10bfffc4 	addi	r2,r2,-1
 8022528:	2885883a 	add	r2,r5,r2
 802252c:	1085883a 	add	r2,r2,r2
 8022530:	d8c07804 	addi	r3,sp,480
 8022534:	1085883a 	add	r2,r2,r2
 8022538:	1885883a 	add	r2,r3,r2
 802253c:	4007883a 	mov	r3,r8
 8022540:	10bfff04 	addi	r2,r2,-4
 8022544:	11000117 	ldw	r4,4(r2)
 8022548:	8c7fffc4 	addi	r17,r17,-1
 802254c:	18fffa04 	addi	r3,r3,-24
 8022550:	203ffb26 	beq	r4,zero,8022540 <__alt_data_end+0xfffe9ea0>
 8022554:	d8c09015 	stw	r3,576(sp)
 8022558:	d9809017 	ldw	r6,576(sp)
 802255c:	0009883a 	mov	r4,zero
 8022560:	014ffc34 	movhi	r5,16368
 8022564:	802309c0 	call	802309c <scalbn>
 8022568:	1029883a 	mov	r20,r2
 802256c:	182b883a 	mov	r21,r3
 8022570:	88018416 	blt	r17,zero,8022b84 <__kernel_rem_pio2+0xd44>
 8022574:	881090fa 	slli	r8,r17,3
 8022578:	d8c07804 	addi	r3,sp,480
 802257c:	da008e15 	stw	r8,568(sp)
 8022580:	d8808e17 	ldw	r2,568(sp)
 8022584:	8c51883a 	add	r8,r17,r17
 8022588:	4211883a 	add	r8,r8,r8
 802258c:	d8a1883a 	add	r16,sp,r2
 8022590:	1a25883a 	add	r18,r3,r8
 8022594:	da3ffe04 	addi	r8,sp,-8
 8022598:	da008c15 	stw	r8,560(sp)
 802259c:	8039883a 	mov	fp,r16
 80225a0:	91000017 	ldw	r4,0(r18)
 80225a4:	e73ffe04 	addi	fp,fp,-8
 80225a8:	94bfff04 	addi	r18,r18,-4
 80225ac:	80264240 	call	8026424 <__floatsidf>
 80225b0:	a00d883a 	mov	r6,r20
 80225b4:	a80f883a 	mov	r7,r21
 80225b8:	1009883a 	mov	r4,r2
 80225bc:	180b883a 	mov	r5,r3
 80225c0:	80253900 	call	8025390 <__muldf3>
 80225c4:	a009883a 	mov	r4,r20
 80225c8:	a80b883a 	mov	r5,r21
 80225cc:	e0800215 	stw	r2,8(fp)
 80225d0:	e0c00315 	stw	r3,12(fp)
 80225d4:	000d883a 	mov	r6,zero
 80225d8:	01cf9c34 	movhi	r7,15984
 80225dc:	80253900 	call	8025390 <__muldf3>
 80225e0:	da008c17 	ldw	r8,560(sp)
 80225e4:	1029883a 	mov	r20,r2
 80225e8:	182b883a 	mov	r21,r3
 80225ec:	e23fec1e 	bne	fp,r8,80225a0 <__alt_data_end+0xfffe9f00>
 80225f0:	0029883a 	mov	r20,zero
 80225f4:	b0004f16 	blt	r22,zero,8022734 <__kernel_rem_pio2+0x8f4>
 80225f8:	054200f4 	movhi	r21,2051
 80225fc:	014ffe74 	movhi	r5,16377
 8022600:	ad679a04 	addi	r21,r21,-24984
 8022604:	8027883a 	mov	r19,r16
 8022608:	01100034 	movhi	r4,16384
 802260c:	29487ec4 	addi	r5,r5,8699
 8022610:	0039883a 	mov	fp,zero
 8022614:	002f883a 	mov	r23,zero
 8022618:	0025883a 	mov	r18,zero
 802261c:	00000506 	br	8022634 <__kernel_rem_pio2+0x7f4>
 8022620:	9cc00204 	addi	r19,r19,8
 8022624:	a4800f16 	blt	r20,r18,8022664 <__kernel_rem_pio2+0x824>
 8022628:	a9000017 	ldw	r4,0(r21)
 802262c:	a9400117 	ldw	r5,4(r21)
 8022630:	ad400204 	addi	r21,r21,8
 8022634:	99800017 	ldw	r6,0(r19)
 8022638:	99c00117 	ldw	r7,4(r19)
 802263c:	94800044 	addi	r18,r18,1
 8022640:	80253900 	call	8025390 <__muldf3>
 8022644:	e009883a 	mov	r4,fp
 8022648:	b80b883a 	mov	r5,r23
 802264c:	100d883a 	mov	r6,r2
 8022650:	180f883a 	mov	r7,r3
 8022654:	80249800 	call	8024980 <__adddf3>
 8022658:	1039883a 	mov	fp,r2
 802265c:	182f883a 	mov	r23,r3
 8022660:	b4bfef0e 	bge	r22,r18,8022620 <__alt_data_end+0xfffe9f80>
 8022664:	a00490fa 	slli	r2,r20,3
 8022668:	da008c17 	ldw	r8,560(sp)
 802266c:	843ffe04 	addi	r16,r16,-8
 8022670:	d885883a 	add	r2,sp,r2
 8022674:	10802804 	addi	r2,r2,160
 8022678:	17000015 	stw	fp,0(r2)
 802267c:	15c00115 	stw	r23,4(r2)
 8022680:	a5000044 	addi	r20,r20,1
 8022684:	823fdb1e 	bne	r16,r8,80225f4 <__alt_data_end+0xfffe9f54>
 8022688:	da00a617 	ldw	r8,664(sp)
 802268c:	00800084 	movi	r2,2
 8022690:	12006616 	blt	r2,r8,802282c <__kernel_rem_pio2+0x9ec>
 8022694:	0200de16 	blt	zero,r8,8022a10 <__kernel_rem_pio2+0xbd0>
 8022698:	4000141e 	bne	r8,zero,80226ec <__kernel_rem_pio2+0x8ac>
 802269c:	da008e17 	ldw	r8,568(sp)
 80226a0:	d8802804 	addi	r2,sp,160
 80226a4:	0007883a 	mov	r3,zero
 80226a8:	1225883a 	add	r18,r2,r8
 80226ac:	043fffc4 	movi	r16,-1
 80226b0:	0005883a 	mov	r2,zero
 80226b4:	91800017 	ldw	r6,0(r18)
 80226b8:	91c00117 	ldw	r7,4(r18)
 80226bc:	1009883a 	mov	r4,r2
 80226c0:	180b883a 	mov	r5,r3
 80226c4:	8c7fffc4 	addi	r17,r17,-1
 80226c8:	80249800 	call	8024980 <__adddf3>
 80226cc:	94bffe04 	addi	r18,r18,-8
 80226d0:	8c3ff81e 	bne	r17,r16,80226b4 <__alt_data_end+0xfffea014>
 80226d4:	da008d17 	ldw	r8,564(sp)
 80226d8:	40000126 	beq	r8,zero,80226e0 <__kernel_rem_pio2+0x8a0>
 80226dc:	18e0003c 	xorhi	r3,r3,32768
 80226e0:	da008f17 	ldw	r8,572(sp)
 80226e4:	40800015 	stw	r2,0(r8)
 80226e8:	40c00115 	stw	r3,4(r8)
 80226ec:	da009117 	ldw	r8,580(sp)
 80226f0:	408001cc 	andi	r2,r8,7
 80226f4:	dfc0a517 	ldw	ra,660(sp)
 80226f8:	df00a417 	ldw	fp,656(sp)
 80226fc:	ddc0a317 	ldw	r23,652(sp)
 8022700:	dd80a217 	ldw	r22,648(sp)
 8022704:	dd40a117 	ldw	r21,644(sp)
 8022708:	dd00a017 	ldw	r20,640(sp)
 802270c:	dcc09f17 	ldw	r19,636(sp)
 8022710:	dc809e17 	ldw	r18,632(sp)
 8022714:	dc409d17 	ldw	r17,628(sp)
 8022718:	dc009c17 	ldw	r16,624(sp)
 802271c:	dec0a604 	addi	sp,sp,664
 8022720:	f800283a 	ret
 8022724:	8c400044 	addi	r17,r17,1
 8022728:	04810d0e 	bge	zero,r18,8022b60 <__kernel_rem_pio2+0xd20>
 802272c:	04c00084 	movi	r19,2
 8022730:	003eac06 	br	80221e4 <__alt_data_end+0xfffe9b44>
 8022734:	0039883a 	mov	fp,zero
 8022738:	002f883a 	mov	r23,zero
 802273c:	003fc906 	br	8022664 <__alt_data_end+0xfffe9fc4>
 8022740:	0029883a 	mov	r20,zero
 8022744:	003ebd06 	br	802223c <__alt_data_end+0xfffe9b9c>
 8022748:	05000044 	movi	r20,1
 802274c:	003eef06 	br	802230c <__alt_data_end+0xfffe9c6c>
 8022750:	4029883a 	mov	r20,r8
 8022754:	da009017 	ldw	r8,576(sp)
 8022758:	a809883a 	mov	r4,r21
 802275c:	a00b883a 	mov	r5,r20
 8022760:	020dc83a 	sub	r6,zero,r8
 8022764:	dc409115 	stw	r17,580(sp)
 8022768:	dd809417 	ldw	r22,592(sp)
 802276c:	dcc08d15 	stw	r19,564(sp)
 8022770:	802309c0 	call	802309c <scalbn>
 8022774:	000d883a 	mov	r6,zero
 8022778:	01d05c34 	movhi	r7,16752
 802277c:	1009883a 	mov	r4,r2
 8022780:	180b883a 	mov	r5,r3
 8022784:	102b883a 	mov	r21,r2
 8022788:	1823883a 	mov	r17,r3
 802278c:	80252b40 	call	80252b4 <__gedf2>
 8022790:	1000e916 	blt	r2,zero,8022b38 <__kernel_rem_pio2+0xcf8>
 8022794:	000d883a 	mov	r6,zero
 8022798:	01cf9c34 	movhi	r7,15984
 802279c:	880b883a 	mov	r5,r17
 80227a0:	a809883a 	mov	r4,r21
 80227a4:	80253900 	call	8025390 <__muldf3>
 80227a8:	180b883a 	mov	r5,r3
 80227ac:	1009883a 	mov	r4,r2
 80227b0:	80263a40 	call	80263a4 <__fixdfsi>
 80227b4:	1029883a 	mov	r20,r2
 80227b8:	9485883a 	add	r2,r18,r18
 80227bc:	1085883a 	add	r2,r2,r2
 80227c0:	a009883a 	mov	r4,r20
 80227c4:	d8a1883a 	add	r16,sp,r2
 80227c8:	80264240 	call	8026424 <__floatsidf>
 80227cc:	000d883a 	mov	r6,zero
 80227d0:	01d05c34 	movhi	r7,16752
 80227d4:	1009883a 	mov	r4,r2
 80227d8:	180b883a 	mov	r5,r3
 80227dc:	80253900 	call	8025390 <__muldf3>
 80227e0:	880b883a 	mov	r5,r17
 80227e4:	100d883a 	mov	r6,r2
 80227e8:	180f883a 	mov	r7,r3
 80227ec:	a809883a 	mov	r4,r21
 80227f0:	8025aa80 	call	8025aa8 <__subdf3>
 80227f4:	180b883a 	mov	r5,r3
 80227f8:	1009883a 	mov	r4,r2
 80227fc:	80263a40 	call	80263a4 <__fixdfsi>
 8022800:	da009017 	ldw	r8,576(sp)
 8022804:	94400044 	addi	r17,r18,1
 8022808:	8c47883a 	add	r3,r17,r17
 802280c:	84007804 	addi	r16,r16,480
 8022810:	18c7883a 	add	r3,r3,r3
 8022814:	80800015 	stw	r2,0(r16)
 8022818:	d8c7883a 	add	r3,sp,r3
 802281c:	42000604 	addi	r8,r8,24
 8022820:	da009015 	stw	r8,576(sp)
 8022824:	1d007815 	stw	r20,480(r3)
 8022828:	003f4b06 	br	8022558 <__alt_data_end+0xfffe9eb8>
 802282c:	da00a617 	ldw	r8,664(sp)
 8022830:	008000c4 	movi	r2,3
 8022834:	40bfad1e 	bne	r8,r2,80226ec <__alt_data_end+0xfffea04c>
 8022838:	0440bc0e 	bge	zero,r17,8022b2c <__kernel_rem_pio2+0xcec>
 802283c:	da008e17 	ldw	r8,568(sp)
 8022840:	882090fa 	slli	r16,r17,3
 8022844:	dd402804 	addi	r21,sp,160
 8022848:	da05883a 	add	r2,sp,r8
 802284c:	10802804 	addi	r2,r2,160
 8022850:	15c00017 	ldw	r23,0(r2)
 8022854:	15800117 	ldw	r22,4(r2)
 8022858:	8029883a 	mov	r20,r16
 802285c:	843ffe04 	addi	r16,r16,-8
 8022860:	ac21883a 	add	r16,r21,r16
 8022864:	ad29883a 	add	r20,r21,r20
 8022868:	dac02604 	addi	r11,sp,152
 802286c:	8811883a 	mov	r8,r17
 8022870:	84400017 	ldw	r17,0(r16)
 8022874:	87000117 	ldw	fp,4(r16)
 8022878:	b80d883a 	mov	r6,r23
 802287c:	b00f883a 	mov	r7,r22
 8022880:	8809883a 	mov	r4,r17
 8022884:	e00b883a 	mov	r5,fp
 8022888:	da009b15 	stw	r8,620(sp)
 802288c:	dac09915 	stw	r11,612(sp)
 8022890:	80249800 	call	8024980 <__adddf3>
 8022894:	100d883a 	mov	r6,r2
 8022898:	180f883a 	mov	r7,r3
 802289c:	8809883a 	mov	r4,r17
 80228a0:	e00b883a 	mov	r5,fp
 80228a4:	1027883a 	mov	r19,r2
 80228a8:	1825883a 	mov	r18,r3
 80228ac:	8025aa80 	call	8025aa8 <__subdf3>
 80228b0:	b80d883a 	mov	r6,r23
 80228b4:	b00f883a 	mov	r7,r22
 80228b8:	1009883a 	mov	r4,r2
 80228bc:	180b883a 	mov	r5,r3
 80228c0:	80249800 	call	8024980 <__adddf3>
 80228c4:	dac09917 	ldw	r11,612(sp)
 80228c8:	a0800015 	stw	r2,0(r20)
 80228cc:	a0c00115 	stw	r3,4(r20)
 80228d0:	84c00015 	stw	r19,0(r16)
 80228d4:	84800115 	stw	r18,4(r16)
 80228d8:	843ffe04 	addi	r16,r16,-8
 80228dc:	a53ffe04 	addi	r20,r20,-8
 80228e0:	982f883a 	mov	r23,r19
 80228e4:	902d883a 	mov	r22,r18
 80228e8:	da009b17 	ldw	r8,620(sp)
 80228ec:	5c3fe01e 	bne	r11,r16,8022870 <__alt_data_end+0xfffea1d0>
 80228f0:	00800044 	movi	r2,1
 80228f4:	12008d0e 	bge	r2,r8,8022b2c <__kernel_rem_pio2+0xcec>
 80228f8:	402090fa 	slli	r16,r8,3
 80228fc:	da008e17 	ldw	r8,568(sp)
 8022900:	8023883a 	mov	r17,r16
 8022904:	da05883a 	add	r2,sp,r8
 8022908:	10802804 	addi	r2,r2,160
 802290c:	15800017 	ldw	r22,0(r2)
 8022910:	15000117 	ldw	r20,4(r2)
 8022914:	ac63883a 	add	r17,r21,r17
 8022918:	843ffe04 	addi	r16,r16,-8
 802291c:	ac21883a 	add	r16,r21,r16
 8022920:	8825883a 	mov	r18,r17
 8022924:	8811883a 	mov	r8,r17
 8022928:	84400017 	ldw	r17,0(r16)
 802292c:	87000117 	ldw	fp,4(r16)
 8022930:	b009883a 	mov	r4,r22
 8022934:	a00b883a 	mov	r5,r20
 8022938:	880d883a 	mov	r6,r17
 802293c:	e00f883a 	mov	r7,fp
 8022940:	da009b15 	stw	r8,620(sp)
 8022944:	80249800 	call	8024980 <__adddf3>
 8022948:	100d883a 	mov	r6,r2
 802294c:	180f883a 	mov	r7,r3
 8022950:	8809883a 	mov	r4,r17
 8022954:	e00b883a 	mov	r5,fp
 8022958:	102f883a 	mov	r23,r2
 802295c:	1827883a 	mov	r19,r3
 8022960:	8025aa80 	call	8025aa8 <__subdf3>
 8022964:	b00d883a 	mov	r6,r22
 8022968:	a00f883a 	mov	r7,r20
 802296c:	1009883a 	mov	r4,r2
 8022970:	180b883a 	mov	r5,r3
 8022974:	80249800 	call	8024980 <__adddf3>
 8022978:	90800015 	stw	r2,0(r18)
 802297c:	90c00115 	stw	r3,4(r18)
 8022980:	85c00015 	stw	r23,0(r16)
 8022984:	84c00115 	stw	r19,4(r16)
 8022988:	843ffe04 	addi	r16,r16,-8
 802298c:	94bffe04 	addi	r18,r18,-8
 8022990:	b82d883a 	mov	r22,r23
 8022994:	9829883a 	mov	r20,r19
 8022998:	da009b17 	ldw	r8,620(sp)
 802299c:	ac3fe21e 	bne	r21,r16,8022928 <__alt_data_end+0xfffea288>
 80229a0:	4023883a 	mov	r17,r8
 80229a4:	dc002a04 	addi	r16,sp,168
 80229a8:	0005883a 	mov	r2,zero
 80229ac:	0007883a 	mov	r3,zero
 80229b0:	89800017 	ldw	r6,0(r17)
 80229b4:	89c00117 	ldw	r7,4(r17)
 80229b8:	1009883a 	mov	r4,r2
 80229bc:	8c7ffe04 	addi	r17,r17,-8
 80229c0:	180b883a 	mov	r5,r3
 80229c4:	80249800 	call	8024980 <__adddf3>
 80229c8:	847ff91e 	bne	r16,r17,80229b0 <__alt_data_end+0xfffea310>
 80229cc:	da008d17 	ldw	r8,564(sp)
 80229d0:	40004726 	beq	r8,zero,8022af0 <__kernel_rem_pio2+0xcb0>
 80229d4:	d9002b17 	ldw	r4,172(sp)
 80229d8:	d9402917 	ldw	r5,164(sp)
 80229dc:	d9802a17 	ldw	r6,168(sp)
 80229e0:	da008f17 	ldw	r8,572(sp)
 80229e4:	d9c02817 	ldw	r7,160(sp)
 80229e8:	2960003c 	xorhi	r5,r5,32768
 80229ec:	2120003c 	xorhi	r4,r4,32768
 80229f0:	18e0003c 	xorhi	r3,r3,32768
 80229f4:	41c00015 	stw	r7,0(r8)
 80229f8:	41400115 	stw	r5,4(r8)
 80229fc:	41800215 	stw	r6,8(r8)
 8022a00:	41000315 	stw	r4,12(r8)
 8022a04:	40800415 	stw	r2,16(r8)
 8022a08:	40c00515 	stw	r3,20(r8)
 8022a0c:	003f3706 	br	80226ec <__alt_data_end+0xfffea04c>
 8022a10:	da008e17 	ldw	r8,568(sp)
 8022a14:	d8802804 	addi	r2,sp,160
 8022a18:	dc002604 	addi	r16,sp,152
 8022a1c:	1225883a 	add	r18,r2,r8
 8022a20:	0007883a 	mov	r3,zero
 8022a24:	0005883a 	mov	r2,zero
 8022a28:	91800017 	ldw	r6,0(r18)
 8022a2c:	91c00117 	ldw	r7,4(r18)
 8022a30:	1009883a 	mov	r4,r2
 8022a34:	94bffe04 	addi	r18,r18,-8
 8022a38:	180b883a 	mov	r5,r3
 8022a3c:	80249800 	call	8024980 <__adddf3>
 8022a40:	943ff91e 	bne	r18,r16,8022a28 <__alt_data_end+0xfffea388>
 8022a44:	da008d17 	ldw	r8,564(sp)
 8022a48:	d9002817 	ldw	r4,160(sp)
 8022a4c:	d9402917 	ldw	r5,164(sp)
 8022a50:	40001a26 	beq	r8,zero,8022abc <__kernel_rem_pio2+0xc7c>
 8022a54:	da008f17 	ldw	r8,572(sp)
 8022a58:	19a0003c 	xorhi	r6,r3,32768
 8022a5c:	180f883a 	mov	r7,r3
 8022a60:	41800115 	stw	r6,4(r8)
 8022a64:	40800015 	stw	r2,0(r8)
 8022a68:	100d883a 	mov	r6,r2
 8022a6c:	8025aa80 	call	8025aa8 <__subdf3>
 8022a70:	04400c0e 	bge	zero,r17,8022aa4 <__kernel_rem_pio2+0xc64>
 8022a74:	dc002a04 	addi	r16,sp,168
 8022a78:	04800044 	movi	r18,1
 8022a7c:	81800017 	ldw	r6,0(r16)
 8022a80:	81c00117 	ldw	r7,4(r16)
 8022a84:	1009883a 	mov	r4,r2
 8022a88:	180b883a 	mov	r5,r3
 8022a8c:	94800044 	addi	r18,r18,1
 8022a90:	80249800 	call	8024980 <__adddf3>
 8022a94:	84000204 	addi	r16,r16,8
 8022a98:	8cbff80e 	bge	r17,r18,8022a7c <__alt_data_end+0xfffea3dc>
 8022a9c:	da008d17 	ldw	r8,564(sp)
 8022aa0:	40004226 	beq	r8,zero,8022bac <__kernel_rem_pio2+0xd6c>
 8022aa4:	da008f17 	ldw	r8,572(sp)
 8022aa8:	1009883a 	mov	r4,r2
 8022aac:	18a0003c 	xorhi	r2,r3,32768
 8022ab0:	41000215 	stw	r4,8(r8)
 8022ab4:	40800315 	stw	r2,12(r8)
 8022ab8:	003f0c06 	br	80226ec <__alt_data_end+0xfffea04c>
 8022abc:	da008f17 	ldw	r8,572(sp)
 8022ac0:	100d883a 	mov	r6,r2
 8022ac4:	180f883a 	mov	r7,r3
 8022ac8:	40800015 	stw	r2,0(r8)
 8022acc:	40c00115 	stw	r3,4(r8)
 8022ad0:	8025aa80 	call	8025aa8 <__subdf3>
 8022ad4:	047fe716 	blt	zero,r17,8022a74 <__alt_data_end+0xfffea3d4>
 8022ad8:	da008f17 	ldw	r8,572(sp)
 8022adc:	1009883a 	mov	r4,r2
 8022ae0:	1805883a 	mov	r2,r3
 8022ae4:	41000215 	stw	r4,8(r8)
 8022ae8:	40800315 	stw	r2,12(r8)
 8022aec:	003eff06 	br	80226ec <__alt_data_end+0xfffea04c>
 8022af0:	da008f17 	ldw	r8,572(sp)
 8022af4:	d9802817 	ldw	r6,160(sp)
 8022af8:	d9402a17 	ldw	r5,168(sp)
 8022afc:	d9002b17 	ldw	r4,172(sp)
 8022b00:	41800015 	stw	r6,0(r8)
 8022b04:	d9802917 	ldw	r6,164(sp)
 8022b08:	41400215 	stw	r5,8(r8)
 8022b0c:	41000315 	stw	r4,12(r8)
 8022b10:	41800115 	stw	r6,4(r8)
 8022b14:	40800415 	stw	r2,16(r8)
 8022b18:	40c00515 	stw	r3,20(r8)
 8022b1c:	003ef306 	br	80226ec <__alt_data_end+0xfffea04c>
 8022b20:	da00a617 	ldw	r8,664(sp)
 8022b24:	008000c4 	movi	r2,3
 8022b28:	40bef01e 	bne	r8,r2,80226ec <__alt_data_end+0xfffea04c>
 8022b2c:	0005883a 	mov	r2,zero
 8022b30:	0007883a 	mov	r3,zero
 8022b34:	003fa506 	br	80229cc <__alt_data_end+0xfffea32c>
 8022b38:	9485883a 	add	r2,r18,r18
 8022b3c:	1085883a 	add	r2,r2,r2
 8022b40:	d8a1883a 	add	r16,sp,r2
 8022b44:	880b883a 	mov	r5,r17
 8022b48:	a809883a 	mov	r4,r21
 8022b4c:	84007804 	addi	r16,r16,480
 8022b50:	80263a40 	call	80263a4 <__fixdfsi>
 8022b54:	80800015 	stw	r2,0(r16)
 8022b58:	9023883a 	mov	r17,r18
 8022b5c:	003e7e06 	br	8022558 <__alt_data_end+0xfffe9eb8>
 8022b60:	a80d883a 	mov	r6,r21
 8022b64:	400f883a 	mov	r7,r8
 8022b68:	0009883a 	mov	r4,zero
 8022b6c:	014ffc34 	movhi	r5,16368
 8022b70:	8025aa80 	call	8025aa8 <__subdf3>
 8022b74:	102b883a 	mov	r21,r2
 8022b78:	1811883a 	mov	r8,r3
 8022b7c:	04c00084 	movi	r19,2
 8022b80:	003dc006 	br	8022284 <__alt_data_end+0xfffe9be4>
 8022b84:	da00a617 	ldw	r8,664(sp)
 8022b88:	00800084 	movi	r2,2
 8022b8c:	123fe416 	blt	r2,r8,8022b20 <__alt_data_end+0xfffea480>
 8022b90:	02000c16 	blt	zero,r8,8022bc4 <__kernel_rem_pio2+0xd84>
 8022b94:	403ed51e 	bne	r8,zero,80226ec <__alt_data_end+0xfffea04c>
 8022b98:	0005883a 	mov	r2,zero
 8022b9c:	0007883a 	mov	r3,zero
 8022ba0:	003ecc06 	br	80226d4 <__alt_data_end+0xfffea034>
 8022ba4:	d8009215 	stw	zero,584(sp)
 8022ba8:	003cc306 	br	8021eb8 <__alt_data_end+0xfffe9818>
 8022bac:	da008f17 	ldw	r8,572(sp)
 8022bb0:	1009883a 	mov	r4,r2
 8022bb4:	1805883a 	mov	r2,r3
 8022bb8:	41000215 	stw	r4,8(r8)
 8022bbc:	40800315 	stw	r2,12(r8)
 8022bc0:	003eca06 	br	80226ec <__alt_data_end+0xfffea04c>
 8022bc4:	0005883a 	mov	r2,zero
 8022bc8:	0007883a 	mov	r3,zero
 8022bcc:	003f9d06 	br	8022a44 <__alt_data_end+0xfffea3a4>

08022bd0 <__kernel_sin>:
 8022bd0:	00a00034 	movhi	r2,32768
 8022bd4:	defff404 	addi	sp,sp,-48
 8022bd8:	10bfffc4 	addi	r2,r2,-1
 8022bdc:	00cf9034 	movhi	r3,15936
 8022be0:	ddc00915 	stw	r23,36(sp)
 8022be4:	dd800815 	stw	r22,32(sp)
 8022be8:	dc400315 	stw	r17,12(sp)
 8022bec:	dc000215 	stw	r16,8(sp)
 8022bf0:	dfc00b15 	stw	ra,44(sp)
 8022bf4:	df000a15 	stw	fp,40(sp)
 8022bf8:	dd400715 	stw	r21,28(sp)
 8022bfc:	dd000615 	stw	r20,24(sp)
 8022c00:	dcc00515 	stw	r19,20(sp)
 8022c04:	dc800415 	stw	r18,16(sp)
 8022c08:	2884703a 	and	r2,r5,r2
 8022c0c:	18ffffc4 	addi	r3,r3,-1
 8022c10:	2821883a 	mov	r16,r5
 8022c14:	2023883a 	mov	r17,r4
 8022c18:	302f883a 	mov	r23,r6
 8022c1c:	382d883a 	mov	r22,r7
 8022c20:	18800216 	blt	r3,r2,8022c2c <__kernel_sin+0x5c>
 8022c24:	80263a40 	call	80263a4 <__fixdfsi>
 8022c28:	10009926 	beq	r2,zero,8022e90 <__kernel_sin+0x2c0>
 8022c2c:	880d883a 	mov	r6,r17
 8022c30:	800f883a 	mov	r7,r16
 8022c34:	8809883a 	mov	r4,r17
 8022c38:	800b883a 	mov	r5,r16
 8022c3c:	80253900 	call	8025390 <__muldf3>
 8022c40:	100d883a 	mov	r6,r2
 8022c44:	180f883a 	mov	r7,r3
 8022c48:	8809883a 	mov	r4,r17
 8022c4c:	800b883a 	mov	r5,r16
 8022c50:	1027883a 	mov	r19,r2
 8022c54:	1825883a 	mov	r18,r3
 8022c58:	80253900 	call	8025390 <__muldf3>
 8022c5c:	0196b434 	movhi	r6,23248
 8022c60:	01cf79b4 	movhi	r7,15846
 8022c64:	31b55f04 	addi	r6,r6,-10884
 8022c68:	39f64e84 	addi	r7,r7,-9926
 8022c6c:	9809883a 	mov	r4,r19
 8022c70:	900b883a 	mov	r5,r18
 8022c74:	102b883a 	mov	r21,r2
 8022c78:	1829883a 	mov	r20,r3
 8022c7c:	80253900 	call	8025390 <__muldf3>
 8022c80:	01a28b34 	movhi	r6,35372
 8022c84:	01cf96f4 	movhi	r7,15963
 8022c88:	31a73ac4 	addi	r6,r6,-25365
 8022c8c:	39f97984 	addi	r7,r7,-6682
 8022c90:	1009883a 	mov	r4,r2
 8022c94:	180b883a 	mov	r5,r3
 8022c98:	8025aa80 	call	8025aa8 <__subdf3>
 8022c9c:	980d883a 	mov	r6,r19
 8022ca0:	900f883a 	mov	r7,r18
 8022ca4:	1009883a 	mov	r4,r2
 8022ca8:	180b883a 	mov	r5,r3
 8022cac:	80253900 	call	8025390 <__muldf3>
 8022cb0:	0195ecb4 	movhi	r6,22450
 8022cb4:	01cfb1f4 	movhi	r7,16071
 8022cb8:	31bf9f44 	addi	r6,r6,-387
 8022cbc:	39c778c4 	addi	r7,r7,7651
 8022cc0:	1009883a 	mov	r4,r2
 8022cc4:	180b883a 	mov	r5,r3
 8022cc8:	80249800 	call	8024980 <__adddf3>
 8022ccc:	980d883a 	mov	r6,r19
 8022cd0:	900f883a 	mov	r7,r18
 8022cd4:	1009883a 	mov	r4,r2
 8022cd8:	180b883a 	mov	r5,r3
 8022cdc:	80253900 	call	8025390 <__muldf3>
 8022ce0:	01867074 	movhi	r6,6593
 8022ce4:	01cfcab4 	movhi	r7,16170
 8022ce8:	31987544 	addi	r6,r6,25045
 8022cec:	39c06804 	addi	r7,r7,416
 8022cf0:	1009883a 	mov	r4,r2
 8022cf4:	180b883a 	mov	r5,r3
 8022cf8:	8025aa80 	call	8025aa8 <__subdf3>
 8022cfc:	980d883a 	mov	r6,r19
 8022d00:	900f883a 	mov	r7,r18
 8022d04:	1009883a 	mov	r4,r2
 8022d08:	180b883a 	mov	r5,r3
 8022d0c:	80253900 	call	8025390 <__muldf3>
 8022d10:	01844474 	movhi	r6,4369
 8022d14:	01cfe074 	movhi	r7,16257
 8022d18:	31be2984 	addi	r6,r6,-1882
 8022d1c:	39c44444 	addi	r7,r7,4369
 8022d20:	1009883a 	mov	r4,r2
 8022d24:	180b883a 	mov	r5,r3
 8022d28:	80249800 	call	8024980 <__adddf3>
 8022d2c:	1011883a 	mov	r8,r2
 8022d30:	d8800c17 	ldw	r2,48(sp)
 8022d34:	1839883a 	mov	fp,r3
 8022d38:	10003e26 	beq	r2,zero,8022e34 <__kernel_sin+0x264>
 8022d3c:	000d883a 	mov	r6,zero
 8022d40:	01cff834 	movhi	r7,16352
 8022d44:	b809883a 	mov	r4,r23
 8022d48:	b00b883a 	mov	r5,r22
 8022d4c:	da000015 	stw	r8,0(sp)
 8022d50:	80253900 	call	8025390 <__muldf3>
 8022d54:	da000017 	ldw	r8,0(sp)
 8022d58:	e00f883a 	mov	r7,fp
 8022d5c:	a809883a 	mov	r4,r21
 8022d60:	400d883a 	mov	r6,r8
 8022d64:	a00b883a 	mov	r5,r20
 8022d68:	d8c00115 	stw	r3,4(sp)
 8022d6c:	d8800015 	stw	r2,0(sp)
 8022d70:	80253900 	call	8025390 <__muldf3>
 8022d74:	da800017 	ldw	r10,0(sp)
 8022d78:	da400117 	ldw	r9,4(sp)
 8022d7c:	100d883a 	mov	r6,r2
 8022d80:	5009883a 	mov	r4,r10
 8022d84:	480b883a 	mov	r5,r9
 8022d88:	180f883a 	mov	r7,r3
 8022d8c:	8025aa80 	call	8025aa8 <__subdf3>
 8022d90:	980d883a 	mov	r6,r19
 8022d94:	900f883a 	mov	r7,r18
 8022d98:	1009883a 	mov	r4,r2
 8022d9c:	180b883a 	mov	r5,r3
 8022da0:	80253900 	call	8025390 <__muldf3>
 8022da4:	b80d883a 	mov	r6,r23
 8022da8:	b00f883a 	mov	r7,r22
 8022dac:	1009883a 	mov	r4,r2
 8022db0:	180b883a 	mov	r5,r3
 8022db4:	8025aa80 	call	8025aa8 <__subdf3>
 8022db8:	01955574 	movhi	r6,21845
 8022dbc:	01cff174 	movhi	r7,16325
 8022dc0:	31955244 	addi	r6,r6,21833
 8022dc4:	39d55544 	addi	r7,r7,21845
 8022dc8:	a809883a 	mov	r4,r21
 8022dcc:	a00b883a 	mov	r5,r20
 8022dd0:	1027883a 	mov	r19,r2
 8022dd4:	1825883a 	mov	r18,r3
 8022dd8:	80253900 	call	8025390 <__muldf3>
 8022ddc:	100d883a 	mov	r6,r2
 8022de0:	180f883a 	mov	r7,r3
 8022de4:	9809883a 	mov	r4,r19
 8022de8:	900b883a 	mov	r5,r18
 8022dec:	80249800 	call	8024980 <__adddf3>
 8022df0:	100d883a 	mov	r6,r2
 8022df4:	180f883a 	mov	r7,r3
 8022df8:	8809883a 	mov	r4,r17
 8022dfc:	800b883a 	mov	r5,r16
 8022e00:	8025aa80 	call	8025aa8 <__subdf3>
 8022e04:	dfc00b17 	ldw	ra,44(sp)
 8022e08:	df000a17 	ldw	fp,40(sp)
 8022e0c:	ddc00917 	ldw	r23,36(sp)
 8022e10:	dd800817 	ldw	r22,32(sp)
 8022e14:	dd400717 	ldw	r21,28(sp)
 8022e18:	dd000617 	ldw	r20,24(sp)
 8022e1c:	dcc00517 	ldw	r19,20(sp)
 8022e20:	dc800417 	ldw	r18,16(sp)
 8022e24:	dc400317 	ldw	r17,12(sp)
 8022e28:	dc000217 	ldw	r16,8(sp)
 8022e2c:	dec00c04 	addi	sp,sp,48
 8022e30:	f800283a 	ret
 8022e34:	400d883a 	mov	r6,r8
 8022e38:	9809883a 	mov	r4,r19
 8022e3c:	900b883a 	mov	r5,r18
 8022e40:	180f883a 	mov	r7,r3
 8022e44:	80253900 	call	8025390 <__muldf3>
 8022e48:	01955574 	movhi	r6,21845
 8022e4c:	01cff174 	movhi	r7,16325
 8022e50:	31955244 	addi	r6,r6,21833
 8022e54:	39d55544 	addi	r7,r7,21845
 8022e58:	1009883a 	mov	r4,r2
 8022e5c:	180b883a 	mov	r5,r3
 8022e60:	8025aa80 	call	8025aa8 <__subdf3>
 8022e64:	a80d883a 	mov	r6,r21
 8022e68:	a00f883a 	mov	r7,r20
 8022e6c:	1009883a 	mov	r4,r2
 8022e70:	180b883a 	mov	r5,r3
 8022e74:	80253900 	call	8025390 <__muldf3>
 8022e78:	880d883a 	mov	r6,r17
 8022e7c:	800f883a 	mov	r7,r16
 8022e80:	1009883a 	mov	r4,r2
 8022e84:	180b883a 	mov	r5,r3
 8022e88:	80249800 	call	8024980 <__adddf3>
 8022e8c:	003fdd06 	br	8022e04 <__alt_data_end+0xfffea764>
 8022e90:	8805883a 	mov	r2,r17
 8022e94:	8007883a 	mov	r3,r16
 8022e98:	003fda06 	br	8022e04 <__alt_data_end+0xfffea764>

08022e9c <fabs>:
 8022e9c:	00e00034 	movhi	r3,32768
 8022ea0:	18ffffc4 	addi	r3,r3,-1
 8022ea4:	2005883a 	mov	r2,r4
 8022ea8:	28c6703a 	and	r3,r5,r3
 8022eac:	f800283a 	ret

08022eb0 <floor>:
 8022eb0:	2811d53a 	srai	r8,r5,20
 8022eb4:	defffa04 	addi	sp,sp,-24
 8022eb8:	dcc00315 	stw	r19,12(sp)
 8022ebc:	4201ffcc 	andi	r8,r8,2047
 8022ec0:	dc800215 	stw	r18,8(sp)
 8022ec4:	dc400115 	stw	r17,4(sp)
 8022ec8:	dc000015 	stw	r16,0(sp)
 8022ecc:	dfc00515 	stw	ra,20(sp)
 8022ed0:	dd000415 	stw	r20,16(sp)
 8022ed4:	44bf0044 	addi	r18,r8,-1023
 8022ed8:	018004c4 	movi	r6,19
 8022edc:	2821883a 	mov	r16,r5
 8022ee0:	2005883a 	mov	r2,r4
 8022ee4:	280f883a 	mov	r7,r5
 8022ee8:	2827883a 	mov	r19,r5
 8022eec:	2023883a 	mov	r17,r4
 8022ef0:	34801916 	blt	r6,r18,8022f58 <floor+0xa8>
 8022ef4:	90003c16 	blt	r18,zero,8022fe8 <floor+0x138>
 8022ef8:	05000434 	movhi	r20,16
 8022efc:	a53fffc4 	addi	r20,r20,-1
 8022f00:	a4a9d83a 	sra	r20,r20,r18
 8022f04:	2d0c703a 	and	r6,r5,r20
 8022f08:	310cb03a 	or	r6,r6,r4
 8022f0c:	30001626 	beq	r6,zero,8022f68 <floor+0xb8>
 8022f10:	01a20034 	movhi	r6,34816
 8022f14:	01df8e34 	movhi	r7,32312
 8022f18:	319d6704 	addi	r6,r6,30108
 8022f1c:	39f90f04 	addi	r7,r7,-7108
 8022f20:	80249800 	call	8024980 <__adddf3>
 8022f24:	000d883a 	mov	r6,zero
 8022f28:	000f883a 	mov	r7,zero
 8022f2c:	1009883a 	mov	r4,r2
 8022f30:	180b883a 	mov	r5,r3
 8022f34:	80252b40 	call	80252b4 <__gedf2>
 8022f38:	0080040e 	bge	zero,r2,8022f4c <floor+0x9c>
 8022f3c:	80003c16 	blt	r16,zero,8023030 <floor+0x180>
 8022f40:	0520303a 	nor	r16,zero,r20
 8022f44:	84e0703a 	and	r16,r16,r19
 8022f48:	0023883a 	mov	r17,zero
 8022f4c:	8805883a 	mov	r2,r17
 8022f50:	8007883a 	mov	r3,r16
 8022f54:	00000506 	br	8022f6c <floor+0xbc>
 8022f58:	01800cc4 	movi	r6,51
 8022f5c:	34800b0e 	bge	r6,r18,8022f8c <floor+0xdc>
 8022f60:	01810004 	movi	r6,1024
 8022f64:	91802f26 	beq	r18,r6,8023024 <floor+0x174>
 8022f68:	3807883a 	mov	r3,r7
 8022f6c:	dfc00517 	ldw	ra,20(sp)
 8022f70:	dd000417 	ldw	r20,16(sp)
 8022f74:	dcc00317 	ldw	r19,12(sp)
 8022f78:	dc800217 	ldw	r18,8(sp)
 8022f7c:	dc400117 	ldw	r17,4(sp)
 8022f80:	dc000017 	ldw	r16,0(sp)
 8022f84:	dec00604 	addi	sp,sp,24
 8022f88:	f800283a 	ret
 8022f8c:	423efb44 	addi	r8,r8,-1043
 8022f90:	053fffc4 	movi	r20,-1
 8022f94:	a228d83a 	srl	r20,r20,r8
 8022f98:	250c703a 	and	r6,r4,r20
 8022f9c:	303ff226 	beq	r6,zero,8022f68 <__alt_data_end+0xfffea8c8>
 8022fa0:	01a20034 	movhi	r6,34816
 8022fa4:	01df8e34 	movhi	r7,32312
 8022fa8:	319d6704 	addi	r6,r6,30108
 8022fac:	39f90f04 	addi	r7,r7,-7108
 8022fb0:	80249800 	call	8024980 <__adddf3>
 8022fb4:	000d883a 	mov	r6,zero
 8022fb8:	000f883a 	mov	r7,zero
 8022fbc:	1009883a 	mov	r4,r2
 8022fc0:	180b883a 	mov	r5,r3
 8022fc4:	80252b40 	call	80252b4 <__gedf2>
 8022fc8:	00bfe00e 	bge	zero,r2,8022f4c <__alt_data_end+0xfffea8ac>
 8022fcc:	80001c16 	blt	r16,zero,8023040 <floor+0x190>
 8022fd0:	0510303a 	nor	r8,zero,r20
 8022fd4:	9821883a 	mov	r16,r19
 8022fd8:	8a22703a 	and	r17,r17,r8
 8022fdc:	8805883a 	mov	r2,r17
 8022fe0:	8007883a 	mov	r3,r16
 8022fe4:	003fe106 	br	8022f6c <__alt_data_end+0xfffea8cc>
 8022fe8:	01a20034 	movhi	r6,34816
 8022fec:	01df8e34 	movhi	r7,32312
 8022ff0:	319d6704 	addi	r6,r6,30108
 8022ff4:	39f90f04 	addi	r7,r7,-7108
 8022ff8:	80249800 	call	8024980 <__adddf3>
 8022ffc:	000d883a 	mov	r6,zero
 8023000:	000f883a 	mov	r7,zero
 8023004:	1009883a 	mov	r4,r2
 8023008:	180b883a 	mov	r5,r3
 802300c:	80252b40 	call	80252b4 <__gedf2>
 8023010:	00bfce0e 	bge	zero,r2,8022f4c <__alt_data_end+0xfffea8ac>
 8023014:	80001516 	blt	r16,zero,802306c <floor+0x1bc>
 8023018:	0023883a 	mov	r17,zero
 802301c:	0021883a 	mov	r16,zero
 8023020:	003fca06 	br	8022f4c <__alt_data_end+0xfffea8ac>
 8023024:	200d883a 	mov	r6,r4
 8023028:	80249800 	call	8024980 <__adddf3>
 802302c:	003fcf06 	br	8022f6c <__alt_data_end+0xfffea8cc>
 8023030:	00800434 	movhi	r2,16
 8023034:	14a5d83a 	sra	r18,r2,r18
 8023038:	84a7883a 	add	r19,r16,r18
 802303c:	003fc006 	br	8022f40 <__alt_data_end+0xfffea8a0>
 8023040:	00800504 	movi	r2,20
 8023044:	90801326 	beq	r18,r2,8023094 <floor+0x1e4>
 8023048:	00800d04 	movi	r2,52
 802304c:	14a5c83a 	sub	r18,r2,r18
 8023050:	00800044 	movi	r2,1
 8023054:	1484983a 	sll	r2,r2,r18
 8023058:	1445883a 	add	r2,r2,r17
 802305c:	14400b2e 	bgeu	r2,r17,802308c <floor+0x1dc>
 8023060:	84c00044 	addi	r19,r16,1
 8023064:	1023883a 	mov	r17,r2
 8023068:	003fd906 	br	8022fd0 <__alt_data_end+0xfffea930>
 802306c:	00a00034 	movhi	r2,32768
 8023070:	10bfffc4 	addi	r2,r2,-1
 8023074:	8084703a 	and	r2,r16,r2
 8023078:	1462b03a 	or	r17,r2,r17
 802307c:	883fb326 	beq	r17,zero,8022f4c <__alt_data_end+0xfffea8ac>
 8023080:	0023883a 	mov	r17,zero
 8023084:	042ffc34 	movhi	r16,49136
 8023088:	003fb006 	br	8022f4c <__alt_data_end+0xfffea8ac>
 802308c:	1023883a 	mov	r17,r2
 8023090:	003fcf06 	br	8022fd0 <__alt_data_end+0xfffea930>
 8023094:	84c00044 	addi	r19,r16,1
 8023098:	003fcd06 	br	8022fd0 <__alt_data_end+0xfffea930>

0802309c <scalbn>:
 802309c:	2a1ffc2c 	andhi	r8,r5,32752
 80230a0:	4011d53a 	srai	r8,r8,20
 80230a4:	defffe04 	addi	sp,sp,-8
 80230a8:	dc000015 	stw	r16,0(sp)
 80230ac:	dfc00115 	stw	ra,4(sp)
 80230b0:	280f883a 	mov	r7,r5
 80230b4:	2015883a 	mov	r10,r4
 80230b8:	3021883a 	mov	r16,r6
 80230bc:	40001e1e 	bne	r8,zero,8023138 <scalbn+0x9c>
 80230c0:	00a00034 	movhi	r2,32768
 80230c4:	10bfffc4 	addi	r2,r2,-1
 80230c8:	2884703a 	and	r2,r5,r2
 80230cc:	1104b03a 	or	r2,r2,r4
 80230d0:	10002226 	beq	r2,zero,802315c <scalbn+0xc0>
 80230d4:	01d0d434 	movhi	r7,17232
 80230d8:	000d883a 	mov	r6,zero
 80230dc:	80253900 	call	8025390 <__muldf3>
 80230e0:	013ffff4 	movhi	r4,65535
 80230e4:	210f2c04 	addi	r4,r4,15536
 80230e8:	1015883a 	mov	r10,r2
 80230ec:	180f883a 	mov	r7,r3
 80230f0:	81002a16 	blt	r16,r4,802319c <scalbn+0x100>
 80230f4:	191ffc2c 	andhi	r4,r3,32752
 80230f8:	2009d53a 	srai	r4,r4,20
 80230fc:	223ff284 	addi	r8,r4,-54
 8023100:	8211883a 	add	r8,r16,r8
 8023104:	0081ff84 	movi	r2,2046
 8023108:	12002f16 	blt	r2,r8,80231c8 <scalbn+0x12c>
 802310c:	0200190e 	bge	zero,r8,8023174 <scalbn+0xd8>
 8023110:	4010953a 	slli	r8,r8,20
 8023114:	01600434 	movhi	r5,32784
 8023118:	297fffc4 	addi	r5,r5,-1
 802311c:	194e703a 	and	r7,r3,r5
 8023120:	5005883a 	mov	r2,r10
 8023124:	3a06b03a 	or	r3,r7,r8
 8023128:	dfc00117 	ldw	ra,4(sp)
 802312c:	dc000017 	ldw	r16,0(sp)
 8023130:	dec00204 	addi	sp,sp,8
 8023134:	f800283a 	ret
 8023138:	0081ffc4 	movi	r2,2047
 802313c:	2807883a 	mov	r3,r5
 8023140:	40bfef1e 	bne	r8,r2,8023100 <__alt_data_end+0xfffeaa60>
 8023144:	200d883a 	mov	r6,r4
 8023148:	80249800 	call	8024980 <__adddf3>
 802314c:	dfc00117 	ldw	ra,4(sp)
 8023150:	dc000017 	ldw	r16,0(sp)
 8023154:	dec00204 	addi	sp,sp,8
 8023158:	f800283a 	ret
 802315c:	2005883a 	mov	r2,r4
 8023160:	2807883a 	mov	r3,r5
 8023164:	dfc00117 	ldw	ra,4(sp)
 8023168:	dc000017 	ldw	r16,0(sp)
 802316c:	dec00204 	addi	sp,sp,8
 8023170:	f800283a 	ret
 8023174:	00bff2c4 	movi	r2,-53
 8023178:	4080240e 	bge	r8,r2,802320c <scalbn+0x170>
 802317c:	00b0d414 	movui	r2,50000
 8023180:	14001116 	blt	r2,r16,80231c8 <scalbn+0x12c>
 8023184:	0130be74 	movhi	r4,49913
 8023188:	01406974 	movhi	r5,421
 802318c:	213cd644 	addi	r4,r4,-3239
 8023190:	295b87c4 	addi	r5,r5,28191
 8023194:	500d883a 	mov	r6,r10
 8023198:	80232380 	call	8023238 <copysign>
 802319c:	01b0be74 	movhi	r6,49913
 80231a0:	01c06974 	movhi	r7,421
 80231a4:	31bcd644 	addi	r6,r6,-3239
 80231a8:	39db87c4 	addi	r7,r7,28191
 80231ac:	1009883a 	mov	r4,r2
 80231b0:	180b883a 	mov	r5,r3
 80231b4:	80253900 	call	8025390 <__muldf3>
 80231b8:	dfc00117 	ldw	ra,4(sp)
 80231bc:	dc000017 	ldw	r16,0(sp)
 80231c0:	dec00204 	addi	sp,sp,8
 80231c4:	f800283a 	ret
 80231c8:	01220034 	movhi	r4,34816
 80231cc:	015f8e34 	movhi	r5,32312
 80231d0:	500d883a 	mov	r6,r10
 80231d4:	211d6704 	addi	r4,r4,30108
 80231d8:	29790f04 	addi	r5,r5,-7108
 80231dc:	80232380 	call	8023238 <copysign>
 80231e0:	01a20034 	movhi	r6,34816
 80231e4:	01df8e34 	movhi	r7,32312
 80231e8:	319d6704 	addi	r6,r6,30108
 80231ec:	39f90f04 	addi	r7,r7,-7108
 80231f0:	1009883a 	mov	r4,r2
 80231f4:	180b883a 	mov	r5,r3
 80231f8:	80253900 	call	8025390 <__muldf3>
 80231fc:	dfc00117 	ldw	ra,4(sp)
 8023200:	dc000017 	ldw	r16,0(sp)
 8023204:	dec00204 	addi	sp,sp,8
 8023208:	f800283a 	ret
 802320c:	42000d84 	addi	r8,r8,54
 8023210:	4012953a 	slli	r9,r8,20
 8023214:	01e00434 	movhi	r7,32784
 8023218:	39ffffc4 	addi	r7,r7,-1
 802321c:	19ca703a 	and	r5,r3,r7
 8023220:	000d883a 	mov	r6,zero
 8023224:	01cf2434 	movhi	r7,15504
 8023228:	5009883a 	mov	r4,r10
 802322c:	494ab03a 	or	r5,r9,r5
 8023230:	80253900 	call	8025390 <__muldf3>
 8023234:	003fbc06 	br	8023128 <__alt_data_end+0xfffeaa88>

08023238 <copysign>:
 8023238:	2005883a 	mov	r2,r4
 802323c:	01200034 	movhi	r4,32768
 8023240:	213fffc4 	addi	r4,r4,-1
 8023244:	38e0002c 	andhi	r3,r7,32768
 8023248:	290a703a 	and	r5,r5,r4
 802324c:	28c6b03a 	or	r3,r5,r3
 8023250:	f800283a 	ret

08023254 <__divsi3>:
 8023254:	20001b16 	blt	r4,zero,80232c4 <__divsi3+0x70>
 8023258:	000f883a 	mov	r7,zero
 802325c:	28001616 	blt	r5,zero,80232b8 <__divsi3+0x64>
 8023260:	200d883a 	mov	r6,r4
 8023264:	29001a2e 	bgeu	r5,r4,80232d0 <__divsi3+0x7c>
 8023268:	00800804 	movi	r2,32
 802326c:	00c00044 	movi	r3,1
 8023270:	00000106 	br	8023278 <__divsi3+0x24>
 8023274:	10000d26 	beq	r2,zero,80232ac <__divsi3+0x58>
 8023278:	294b883a 	add	r5,r5,r5
 802327c:	10bfffc4 	addi	r2,r2,-1
 8023280:	18c7883a 	add	r3,r3,r3
 8023284:	293ffb36 	bltu	r5,r4,8023274 <__alt_data_end+0xfffeabd4>
 8023288:	0005883a 	mov	r2,zero
 802328c:	18000726 	beq	r3,zero,80232ac <__divsi3+0x58>
 8023290:	0005883a 	mov	r2,zero
 8023294:	31400236 	bltu	r6,r5,80232a0 <__divsi3+0x4c>
 8023298:	314dc83a 	sub	r6,r6,r5
 802329c:	10c4b03a 	or	r2,r2,r3
 80232a0:	1806d07a 	srli	r3,r3,1
 80232a4:	280ad07a 	srli	r5,r5,1
 80232a8:	183ffa1e 	bne	r3,zero,8023294 <__alt_data_end+0xfffeabf4>
 80232ac:	38000126 	beq	r7,zero,80232b4 <__divsi3+0x60>
 80232b0:	0085c83a 	sub	r2,zero,r2
 80232b4:	f800283a 	ret
 80232b8:	014bc83a 	sub	r5,zero,r5
 80232bc:	39c0005c 	xori	r7,r7,1
 80232c0:	003fe706 	br	8023260 <__alt_data_end+0xfffeabc0>
 80232c4:	0109c83a 	sub	r4,zero,r4
 80232c8:	01c00044 	movi	r7,1
 80232cc:	003fe306 	br	802325c <__alt_data_end+0xfffeabbc>
 80232d0:	00c00044 	movi	r3,1
 80232d4:	003fee06 	br	8023290 <__alt_data_end+0xfffeabf0>

080232d8 <__modsi3>:
 80232d8:	20001716 	blt	r4,zero,8023338 <__modsi3+0x60>
 80232dc:	000f883a 	mov	r7,zero
 80232e0:	2005883a 	mov	r2,r4
 80232e4:	28001216 	blt	r5,zero,8023330 <__modsi3+0x58>
 80232e8:	2900162e 	bgeu	r5,r4,8023344 <__modsi3+0x6c>
 80232ec:	01800804 	movi	r6,32
 80232f0:	00c00044 	movi	r3,1
 80232f4:	00000106 	br	80232fc <__modsi3+0x24>
 80232f8:	30000a26 	beq	r6,zero,8023324 <__modsi3+0x4c>
 80232fc:	294b883a 	add	r5,r5,r5
 8023300:	31bfffc4 	addi	r6,r6,-1
 8023304:	18c7883a 	add	r3,r3,r3
 8023308:	293ffb36 	bltu	r5,r4,80232f8 <__alt_data_end+0xfffeac58>
 802330c:	18000526 	beq	r3,zero,8023324 <__modsi3+0x4c>
 8023310:	1806d07a 	srli	r3,r3,1
 8023314:	11400136 	bltu	r2,r5,802331c <__modsi3+0x44>
 8023318:	1145c83a 	sub	r2,r2,r5
 802331c:	280ad07a 	srli	r5,r5,1
 8023320:	183ffb1e 	bne	r3,zero,8023310 <__alt_data_end+0xfffeac70>
 8023324:	38000126 	beq	r7,zero,802332c <__modsi3+0x54>
 8023328:	0085c83a 	sub	r2,zero,r2
 802332c:	f800283a 	ret
 8023330:	014bc83a 	sub	r5,zero,r5
 8023334:	003fec06 	br	80232e8 <__alt_data_end+0xfffeac48>
 8023338:	0109c83a 	sub	r4,zero,r4
 802333c:	01c00044 	movi	r7,1
 8023340:	003fe706 	br	80232e0 <__alt_data_end+0xfffeac40>
 8023344:	00c00044 	movi	r3,1
 8023348:	003ff106 	br	8023310 <__alt_data_end+0xfffeac70>

0802334c <__udivsi3>:
 802334c:	200d883a 	mov	r6,r4
 8023350:	2900152e 	bgeu	r5,r4,80233a8 <__udivsi3+0x5c>
 8023354:	28001416 	blt	r5,zero,80233a8 <__udivsi3+0x5c>
 8023358:	00800804 	movi	r2,32
 802335c:	00c00044 	movi	r3,1
 8023360:	00000206 	br	802336c <__udivsi3+0x20>
 8023364:	10000e26 	beq	r2,zero,80233a0 <__udivsi3+0x54>
 8023368:	28000516 	blt	r5,zero,8023380 <__udivsi3+0x34>
 802336c:	294b883a 	add	r5,r5,r5
 8023370:	10bfffc4 	addi	r2,r2,-1
 8023374:	18c7883a 	add	r3,r3,r3
 8023378:	293ffa36 	bltu	r5,r4,8023364 <__alt_data_end+0xfffeacc4>
 802337c:	18000826 	beq	r3,zero,80233a0 <__udivsi3+0x54>
 8023380:	0005883a 	mov	r2,zero
 8023384:	31400236 	bltu	r6,r5,8023390 <__udivsi3+0x44>
 8023388:	314dc83a 	sub	r6,r6,r5
 802338c:	10c4b03a 	or	r2,r2,r3
 8023390:	1806d07a 	srli	r3,r3,1
 8023394:	280ad07a 	srli	r5,r5,1
 8023398:	183ffa1e 	bne	r3,zero,8023384 <__alt_data_end+0xfffeace4>
 802339c:	f800283a 	ret
 80233a0:	0005883a 	mov	r2,zero
 80233a4:	f800283a 	ret
 80233a8:	00c00044 	movi	r3,1
 80233ac:	003ff406 	br	8023380 <__alt_data_end+0xfffeace0>

080233b0 <__umodsi3>:
 80233b0:	2005883a 	mov	r2,r4
 80233b4:	2900122e 	bgeu	r5,r4,8023400 <__umodsi3+0x50>
 80233b8:	28001116 	blt	r5,zero,8023400 <__umodsi3+0x50>
 80233bc:	01800804 	movi	r6,32
 80233c0:	00c00044 	movi	r3,1
 80233c4:	00000206 	br	80233d0 <__umodsi3+0x20>
 80233c8:	30000c26 	beq	r6,zero,80233fc <__umodsi3+0x4c>
 80233cc:	28000516 	blt	r5,zero,80233e4 <__umodsi3+0x34>
 80233d0:	294b883a 	add	r5,r5,r5
 80233d4:	31bfffc4 	addi	r6,r6,-1
 80233d8:	18c7883a 	add	r3,r3,r3
 80233dc:	293ffa36 	bltu	r5,r4,80233c8 <__alt_data_end+0xfffead28>
 80233e0:	18000626 	beq	r3,zero,80233fc <__umodsi3+0x4c>
 80233e4:	1806d07a 	srli	r3,r3,1
 80233e8:	11400136 	bltu	r2,r5,80233f0 <__umodsi3+0x40>
 80233ec:	1145c83a 	sub	r2,r2,r5
 80233f0:	280ad07a 	srli	r5,r5,1
 80233f4:	183ffb1e 	bne	r3,zero,80233e4 <__alt_data_end+0xfffead44>
 80233f8:	f800283a 	ret
 80233fc:	f800283a 	ret
 8023400:	00c00044 	movi	r3,1
 8023404:	003ff706 	br	80233e4 <__alt_data_end+0xfffead44>

08023408 <__addsf3>:
 8023408:	defffc04 	addi	sp,sp,-16
 802340c:	2004d7fa 	srli	r2,r4,31
 8023410:	280cd5fa 	srli	r6,r5,23
 8023414:	dc000015 	stw	r16,0(sp)
 8023418:	00c02034 	movhi	r3,128
 802341c:	2020d5fa 	srli	r16,r4,23
 8023420:	280ed7fa 	srli	r7,r5,31
 8023424:	18ffffc4 	addi	r3,r3,-1
 8023428:	dc400115 	stw	r17,4(sp)
 802342c:	1908703a 	and	r4,r3,r4
 8023430:	194a703a 	and	r5,r3,r5
 8023434:	dfc00315 	stw	ra,12(sp)
 8023438:	dc800215 	stw	r18,8(sp)
 802343c:	14403fcc 	andi	r17,r2,255
 8023440:	84003fcc 	andi	r16,r16,255
 8023444:	200890fa 	slli	r4,r4,3
 8023448:	31803fcc 	andi	r6,r6,255
 802344c:	280a90fa 	slli	r5,r5,3
 8023450:	89c05026 	beq	r17,r7,8023594 <__addsf3+0x18c>
 8023454:	8185c83a 	sub	r2,r16,r6
 8023458:	00807a0e 	bge	zero,r2,8023644 <__addsf3+0x23c>
 802345c:	30001e1e 	bne	r6,zero,80234d8 <__addsf3+0xd0>
 8023460:	28006d1e 	bne	r5,zero,8023618 <__addsf3+0x210>
 8023464:	208001cc 	andi	r2,r4,7
 8023468:	10000426 	beq	r2,zero,802347c <__addsf3+0x74>
 802346c:	208003cc 	andi	r2,r4,15
 8023470:	00c00104 	movi	r3,4
 8023474:	10c00126 	beq	r2,r3,802347c <__addsf3+0x74>
 8023478:	20c9883a 	add	r4,r4,r3
 802347c:	2081002c 	andhi	r2,r4,1024
 8023480:	10003926 	beq	r2,zero,8023568 <__addsf3+0x160>
 8023484:	84000044 	addi	r16,r16,1
 8023488:	00803fc4 	movi	r2,255
 802348c:	80807826 	beq	r16,r2,8023670 <__addsf3+0x268>
 8023490:	200891ba 	slli	r4,r4,6
 8023494:	8805883a 	mov	r2,r17
 8023498:	2008d27a 	srli	r4,r4,9
 802349c:	84003fcc 	andi	r16,r16,255
 80234a0:	800695fa 	slli	r3,r16,23
 80234a4:	10803fcc 	andi	r2,r2,255
 80234a8:	04002034 	movhi	r16,128
 80234ac:	843fffc4 	addi	r16,r16,-1
 80234b0:	100497fa 	slli	r2,r2,31
 80234b4:	2408703a 	and	r4,r4,r16
 80234b8:	20e0b03a 	or	r16,r4,r3
 80234bc:	8084b03a 	or	r2,r16,r2
 80234c0:	dfc00317 	ldw	ra,12(sp)
 80234c4:	dc800217 	ldw	r18,8(sp)
 80234c8:	dc400117 	ldw	r17,4(sp)
 80234cc:	dc000017 	ldw	r16,0(sp)
 80234d0:	dec00404 	addi	sp,sp,16
 80234d4:	f800283a 	ret
 80234d8:	00c03fc4 	movi	r3,255
 80234dc:	80ffe126 	beq	r16,r3,8023464 <__alt_data_end+0xfffeadc4>
 80234e0:	29410034 	orhi	r5,r5,1024
 80234e4:	00c006c4 	movi	r3,27
 80234e8:	18807516 	blt	r3,r2,80236c0 <__addsf3+0x2b8>
 80234ec:	00c00804 	movi	r3,32
 80234f0:	1887c83a 	sub	r3,r3,r2
 80234f4:	28c6983a 	sll	r3,r5,r3
 80234f8:	288ad83a 	srl	r5,r5,r2
 80234fc:	1804c03a 	cmpne	r2,r3,zero
 8023500:	288ab03a 	or	r5,r5,r2
 8023504:	2149c83a 	sub	r4,r4,r5
 8023508:	2081002c 	andhi	r2,r4,1024
 802350c:	10001426 	beq	r2,zero,8023560 <__addsf3+0x158>
 8023510:	04810034 	movhi	r18,1024
 8023514:	94bfffc4 	addi	r18,r18,-1
 8023518:	24a4703a 	and	r18,r4,r18
 802351c:	9009883a 	mov	r4,r18
 8023520:	80266100 	call	8026610 <__clzsi2>
 8023524:	10bffec4 	addi	r2,r2,-5
 8023528:	90a4983a 	sll	r18,r18,r2
 802352c:	14005416 	blt	r2,r16,8023680 <__addsf3+0x278>
 8023530:	1405c83a 	sub	r2,r2,r16
 8023534:	11000044 	addi	r4,r2,1
 8023538:	00800804 	movi	r2,32
 802353c:	1105c83a 	sub	r2,r2,r4
 8023540:	9084983a 	sll	r2,r18,r2
 8023544:	9124d83a 	srl	r18,r18,r4
 8023548:	0021883a 	mov	r16,zero
 802354c:	1008c03a 	cmpne	r4,r2,zero
 8023550:	9108b03a 	or	r4,r18,r4
 8023554:	003fc306 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023558:	1000db26 	beq	r2,zero,80238c8 <__addsf3+0x4c0>
 802355c:	1009883a 	mov	r4,r2
 8023560:	208001cc 	andi	r2,r4,7
 8023564:	103fc11e 	bne	r2,zero,802346c <__alt_data_end+0xfffeadcc>
 8023568:	2006d0fa 	srli	r3,r4,3
 802356c:	01003fc4 	movi	r4,255
 8023570:	8805883a 	mov	r2,r17
 8023574:	8100241e 	bne	r16,r4,8023608 <__addsf3+0x200>
 8023578:	18006e26 	beq	r3,zero,8023734 <__addsf3+0x32c>
 802357c:	19001034 	orhi	r4,r3,64
 8023580:	00c02034 	movhi	r3,128
 8023584:	18ffffc4 	addi	r3,r3,-1
 8023588:	043fffc4 	movi	r16,-1
 802358c:	20c8703a 	and	r4,r4,r3
 8023590:	003fc206 	br	802349c <__alt_data_end+0xfffeadfc>
 8023594:	8187c83a 	sub	r3,r16,r6
 8023598:	00c03e0e 	bge	zero,r3,8023694 <__addsf3+0x28c>
 802359c:	30002326 	beq	r6,zero,802362c <__addsf3+0x224>
 80235a0:	01803fc4 	movi	r6,255
 80235a4:	81bfaf26 	beq	r16,r6,8023464 <__alt_data_end+0xfffeadc4>
 80235a8:	29410034 	orhi	r5,r5,1024
 80235ac:	018006c4 	movi	r6,27
 80235b0:	30c07416 	blt	r6,r3,8023784 <__addsf3+0x37c>
 80235b4:	01800804 	movi	r6,32
 80235b8:	30cdc83a 	sub	r6,r6,r3
 80235bc:	298c983a 	sll	r6,r5,r6
 80235c0:	28cad83a 	srl	r5,r5,r3
 80235c4:	3006c03a 	cmpne	r3,r6,zero
 80235c8:	28cab03a 	or	r5,r5,r3
 80235cc:	2149883a 	add	r4,r4,r5
 80235d0:	20c1002c 	andhi	r3,r4,1024
 80235d4:	183fe226 	beq	r3,zero,8023560 <__alt_data_end+0xfffeaec0>
 80235d8:	84000044 	addi	r16,r16,1
 80235dc:	00c03fc4 	movi	r3,255
 80235e0:	80c05426 	beq	r16,r3,8023734 <__addsf3+0x32c>
 80235e4:	00bf0034 	movhi	r2,64512
 80235e8:	10bfffc4 	addi	r2,r2,-1
 80235ec:	20c0004c 	andi	r3,r4,1
 80235f0:	2088703a 	and	r4,r4,r2
 80235f4:	2008d07a 	srli	r4,r4,1
 80235f8:	20c8b03a 	or	r4,r4,r3
 80235fc:	003f9906 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023600:	0007883a 	mov	r3,zero
 8023604:	0005883a 	mov	r2,zero
 8023608:	01002034 	movhi	r4,128
 802360c:	213fffc4 	addi	r4,r4,-1
 8023610:	1908703a 	and	r4,r3,r4
 8023614:	003fa106 	br	802349c <__alt_data_end+0xfffeadfc>
 8023618:	10bfffc4 	addi	r2,r2,-1
 802361c:	103fb926 	beq	r2,zero,8023504 <__alt_data_end+0xfffeae64>
 8023620:	00c03fc4 	movi	r3,255
 8023624:	80ffaf1e 	bne	r16,r3,80234e4 <__alt_data_end+0xfffeae44>
 8023628:	003f8e06 	br	8023464 <__alt_data_end+0xfffeadc4>
 802362c:	283f8d26 	beq	r5,zero,8023464 <__alt_data_end+0xfffeadc4>
 8023630:	18ffffc4 	addi	r3,r3,-1
 8023634:	183fe526 	beq	r3,zero,80235cc <__alt_data_end+0xfffeaf2c>
 8023638:	01803fc4 	movi	r6,255
 802363c:	81bfdb1e 	bne	r16,r6,80235ac <__alt_data_end+0xfffeaf0c>
 8023640:	003f8806 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023644:	1000201e 	bne	r2,zero,80236c8 <__addsf3+0x2c0>
 8023648:	80800044 	addi	r2,r16,1
 802364c:	10803fcc 	andi	r2,r2,255
 8023650:	01800044 	movi	r6,1
 8023654:	3080450e 	bge	r6,r2,802376c <__addsf3+0x364>
 8023658:	2165c83a 	sub	r18,r4,r5
 802365c:	90c1002c 	andhi	r3,r18,1024
 8023660:	18002b26 	beq	r3,zero,8023710 <__addsf3+0x308>
 8023664:	2925c83a 	sub	r18,r5,r4
 8023668:	3823883a 	mov	r17,r7
 802366c:	003fab06 	br	802351c <__alt_data_end+0xfffeae7c>
 8023670:	8805883a 	mov	r2,r17
 8023674:	043fffc4 	movi	r16,-1
 8023678:	0009883a 	mov	r4,zero
 802367c:	003f8706 	br	802349c <__alt_data_end+0xfffeadfc>
 8023680:	013f0034 	movhi	r4,64512
 8023684:	213fffc4 	addi	r4,r4,-1
 8023688:	80a1c83a 	sub	r16,r16,r2
 802368c:	9108703a 	and	r4,r18,r4
 8023690:	003f7406 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023694:	1800411e 	bne	r3,zero,802379c <__addsf3+0x394>
 8023698:	80c00044 	addi	r3,r16,1
 802369c:	19c03fcc 	andi	r7,r3,255
 80236a0:	01800044 	movi	r6,1
 80236a4:	31c0260e 	bge	r6,r7,8023740 <__addsf3+0x338>
 80236a8:	01803fc4 	movi	r6,255
 80236ac:	19802126 	beq	r3,r6,8023734 <__addsf3+0x32c>
 80236b0:	2149883a 	add	r4,r4,r5
 80236b4:	2008d07a 	srli	r4,r4,1
 80236b8:	1821883a 	mov	r16,r3
 80236bc:	003f6906 	br	8023464 <__alt_data_end+0xfffeadc4>
 80236c0:	01400044 	movi	r5,1
 80236c4:	003f8f06 	br	8023504 <__alt_data_end+0xfffeae64>
 80236c8:	8000151e 	bne	r16,zero,8023720 <__addsf3+0x318>
 80236cc:	20002f26 	beq	r4,zero,802378c <__addsf3+0x384>
 80236d0:	0084303a 	nor	r2,zero,r2
 80236d4:	10000a26 	beq	r2,zero,8023700 <__addsf3+0x2f8>
 80236d8:	00c03fc4 	movi	r3,255
 80236dc:	30c02b26 	beq	r6,r3,802378c <__addsf3+0x384>
 80236e0:	00c006c4 	movi	r3,27
 80236e4:	18806d16 	blt	r3,r2,802389c <__addsf3+0x494>
 80236e8:	00c00804 	movi	r3,32
 80236ec:	1887c83a 	sub	r3,r3,r2
 80236f0:	20c6983a 	sll	r3,r4,r3
 80236f4:	2084d83a 	srl	r2,r4,r2
 80236f8:	1808c03a 	cmpne	r4,r3,zero
 80236fc:	1108b03a 	or	r4,r2,r4
 8023700:	2909c83a 	sub	r4,r5,r4
 8023704:	3021883a 	mov	r16,r6
 8023708:	3823883a 	mov	r17,r7
 802370c:	003f7e06 	br	8023508 <__alt_data_end+0xfffeae68>
 8023710:	903f821e 	bne	r18,zero,802351c <__alt_data_end+0xfffeae7c>
 8023714:	0005883a 	mov	r2,zero
 8023718:	0021883a 	mov	r16,zero
 802371c:	003fba06 	br	8023608 <__alt_data_end+0xfffeaf68>
 8023720:	00c03fc4 	movi	r3,255
 8023724:	30c01926 	beq	r6,r3,802378c <__addsf3+0x384>
 8023728:	0085c83a 	sub	r2,zero,r2
 802372c:	21010034 	orhi	r4,r4,1024
 8023730:	003feb06 	br	80236e0 <__alt_data_end+0xfffeb040>
 8023734:	043fffc4 	movi	r16,-1
 8023738:	0009883a 	mov	r4,zero
 802373c:	003f5706 	br	802349c <__alt_data_end+0xfffeadfc>
 8023740:	80004a1e 	bne	r16,zero,802386c <__addsf3+0x464>
 8023744:	20005926 	beq	r4,zero,80238ac <__addsf3+0x4a4>
 8023748:	283f4626 	beq	r5,zero,8023464 <__alt_data_end+0xfffeadc4>
 802374c:	2149883a 	add	r4,r4,r5
 8023750:	2081002c 	andhi	r2,r4,1024
 8023754:	103f8226 	beq	r2,zero,8023560 <__alt_data_end+0xfffeaec0>
 8023758:	00bf0034 	movhi	r2,64512
 802375c:	10bfffc4 	addi	r2,r2,-1
 8023760:	3021883a 	mov	r16,r6
 8023764:	2088703a 	and	r4,r4,r2
 8023768:	003f3e06 	br	8023464 <__alt_data_end+0xfffeadc4>
 802376c:	8000121e 	bne	r16,zero,80237b8 <__addsf3+0x3b0>
 8023770:	2000261e 	bne	r4,zero,802380c <__addsf3+0x404>
 8023774:	283fa226 	beq	r5,zero,8023600 <__alt_data_end+0xfffeaf60>
 8023778:	2809883a 	mov	r4,r5
 802377c:	3823883a 	mov	r17,r7
 8023780:	003f3806 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023784:	01400044 	movi	r5,1
 8023788:	003f9006 	br	80235cc <__alt_data_end+0xfffeaf2c>
 802378c:	2809883a 	mov	r4,r5
 8023790:	3021883a 	mov	r16,r6
 8023794:	3823883a 	mov	r17,r7
 8023798:	003f3206 	br	8023464 <__alt_data_end+0xfffeadc4>
 802379c:	80000c1e 	bne	r16,zero,80237d0 <__addsf3+0x3c8>
 80237a0:	20002f26 	beq	r4,zero,8023860 <__addsf3+0x458>
 80237a4:	00c6303a 	nor	r3,zero,r3
 80237a8:	18002b1e 	bne	r3,zero,8023858 <__addsf3+0x450>
 80237ac:	2149883a 	add	r4,r4,r5
 80237b0:	3021883a 	mov	r16,r6
 80237b4:	003f8606 	br	80235d0 <__alt_data_end+0xfffeaf30>
 80237b8:	20001b1e 	bne	r4,zero,8023828 <__addsf3+0x420>
 80237bc:	28003926 	beq	r5,zero,80238a4 <__addsf3+0x49c>
 80237c0:	2809883a 	mov	r4,r5
 80237c4:	3823883a 	mov	r17,r7
 80237c8:	04003fc4 	movi	r16,255
 80237cc:	003f2506 	br	8023464 <__alt_data_end+0xfffeadc4>
 80237d0:	01c03fc4 	movi	r7,255
 80237d4:	31c02226 	beq	r6,r7,8023860 <__addsf3+0x458>
 80237d8:	00c7c83a 	sub	r3,zero,r3
 80237dc:	21010034 	orhi	r4,r4,1024
 80237e0:	01c006c4 	movi	r7,27
 80237e4:	38c03616 	blt	r7,r3,80238c0 <__addsf3+0x4b8>
 80237e8:	01c00804 	movi	r7,32
 80237ec:	38cfc83a 	sub	r7,r7,r3
 80237f0:	21ce983a 	sll	r7,r4,r7
 80237f4:	20c6d83a 	srl	r3,r4,r3
 80237f8:	3808c03a 	cmpne	r4,r7,zero
 80237fc:	1906b03a 	or	r3,r3,r4
 8023800:	1949883a 	add	r4,r3,r5
 8023804:	3021883a 	mov	r16,r6
 8023808:	003f7106 	br	80235d0 <__alt_data_end+0xfffeaf30>
 802380c:	283f1526 	beq	r5,zero,8023464 <__alt_data_end+0xfffeadc4>
 8023810:	2145c83a 	sub	r2,r4,r5
 8023814:	10c1002c 	andhi	r3,r2,1024
 8023818:	183f4f26 	beq	r3,zero,8023558 <__alt_data_end+0xfffeaeb8>
 802381c:	2909c83a 	sub	r4,r5,r4
 8023820:	3823883a 	mov	r17,r7
 8023824:	003f0f06 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023828:	28001a26 	beq	r5,zero,8023894 <__addsf3+0x48c>
 802382c:	2008d0fa 	srli	r4,r4,3
 8023830:	2080102c 	andhi	r2,r4,64
 8023834:	10000526 	beq	r2,zero,802384c <__addsf3+0x444>
 8023838:	280ad0fa 	srli	r5,r5,3
 802383c:	2880102c 	andhi	r2,r5,64
 8023840:	1000021e 	bne	r2,zero,802384c <__addsf3+0x444>
 8023844:	2809883a 	mov	r4,r5
 8023848:	3823883a 	mov	r17,r7
 802384c:	200890fa 	slli	r4,r4,3
 8023850:	04003fc4 	movi	r16,255
 8023854:	003f0306 	br	8023464 <__alt_data_end+0xfffeadc4>
 8023858:	01c03fc4 	movi	r7,255
 802385c:	31ffe01e 	bne	r6,r7,80237e0 <__alt_data_end+0xfffeb140>
 8023860:	2809883a 	mov	r4,r5
 8023864:	3021883a 	mov	r16,r6
 8023868:	003efe06 	br	8023464 <__alt_data_end+0xfffeadc4>
 802386c:	20001126 	beq	r4,zero,80238b4 <__addsf3+0x4ac>
 8023870:	28000826 	beq	r5,zero,8023894 <__addsf3+0x48c>
 8023874:	2008d0fa 	srli	r4,r4,3
 8023878:	2080102c 	andhi	r2,r4,64
 802387c:	103ff326 	beq	r2,zero,802384c <__alt_data_end+0xfffeb1ac>
 8023880:	280ad0fa 	srli	r5,r5,3
 8023884:	2880102c 	andhi	r2,r5,64
 8023888:	103ff01e 	bne	r2,zero,802384c <__alt_data_end+0xfffeb1ac>
 802388c:	2809883a 	mov	r4,r5
 8023890:	003fee06 	br	802384c <__alt_data_end+0xfffeb1ac>
 8023894:	04003fc4 	movi	r16,255
 8023898:	003ef206 	br	8023464 <__alt_data_end+0xfffeadc4>
 802389c:	01000044 	movi	r4,1
 80238a0:	003f9706 	br	8023700 <__alt_data_end+0xfffeb060>
 80238a4:	0005883a 	mov	r2,zero
 80238a8:	003f3406 	br	802357c <__alt_data_end+0xfffeaedc>
 80238ac:	2809883a 	mov	r4,r5
 80238b0:	003eec06 	br	8023464 <__alt_data_end+0xfffeadc4>
 80238b4:	2809883a 	mov	r4,r5
 80238b8:	04003fc4 	movi	r16,255
 80238bc:	003ee906 	br	8023464 <__alt_data_end+0xfffeadc4>
 80238c0:	00c00044 	movi	r3,1
 80238c4:	003fce06 	br	8023800 <__alt_data_end+0xfffeb160>
 80238c8:	0005883a 	mov	r2,zero
 80238cc:	003f4e06 	br	8023608 <__alt_data_end+0xfffeaf68>

080238d0 <__divsf3>:
 80238d0:	defff504 	addi	sp,sp,-44
 80238d4:	200cd5fa 	srli	r6,r4,23
 80238d8:	dcc00415 	stw	r19,16(sp)
 80238dc:	2026d7fa 	srli	r19,r4,31
 80238e0:	00c02034 	movhi	r3,128
 80238e4:	dd800715 	stw	r22,28(sp)
 80238e8:	dd000515 	stw	r20,20(sp)
 80238ec:	dc800315 	stw	r18,12(sp)
 80238f0:	18ffffc4 	addi	r3,r3,-1
 80238f4:	dfc00a15 	stw	ra,40(sp)
 80238f8:	df000915 	stw	fp,36(sp)
 80238fc:	ddc00815 	stw	r23,32(sp)
 8023900:	dd400615 	stw	r21,24(sp)
 8023904:	dc400215 	stw	r17,8(sp)
 8023908:	dc000115 	stw	r16,4(sp)
 802390c:	35003fcc 	andi	r20,r6,255
 8023910:	1924703a 	and	r18,r3,r4
 8023914:	9d803fcc 	andi	r22,r19,255
 8023918:	a0005226 	beq	r20,zero,8023a64 <__divsf3+0x194>
 802391c:	00803fc4 	movi	r2,255
 8023920:	a0802e26 	beq	r20,r2,80239dc <__divsf3+0x10c>
 8023924:	91002034 	orhi	r4,r18,128
 8023928:	202490fa 	slli	r18,r4,3
 802392c:	a53fe044 	addi	r20,r20,-127
 8023930:	0021883a 	mov	r16,zero
 8023934:	002f883a 	mov	r23,zero
 8023938:	280cd5fa 	srli	r6,r5,23
 802393c:	282ad7fa 	srli	r21,r5,31
 8023940:	00c02034 	movhi	r3,128
 8023944:	18ffffc4 	addi	r3,r3,-1
 8023948:	31803fcc 	andi	r6,r6,255
 802394c:	1962703a 	and	r17,r3,r5
 8023950:	af003fcc 	andi	fp,r21,255
 8023954:	30004a26 	beq	r6,zero,8023a80 <__divsf3+0x1b0>
 8023958:	00803fc4 	movi	r2,255
 802395c:	30804526 	beq	r6,r2,8023a74 <__divsf3+0x1a4>
 8023960:	89402034 	orhi	r5,r17,128
 8023964:	282290fa 	slli	r17,r5,3
 8023968:	31bfe044 	addi	r6,r6,-127
 802396c:	000b883a 	mov	r5,zero
 8023970:	2c20b03a 	or	r16,r5,r16
 8023974:	802090ba 	slli	r16,r16,2
 8023978:	008200b4 	movhi	r2,2050
 802397c:	108e6704 	addi	r2,r2,14748
 8023980:	80a1883a 	add	r16,r16,r2
 8023984:	81000017 	ldw	r4,0(r16)
 8023988:	9d46f03a 	xor	r3,r19,r21
 802398c:	180f883a 	mov	r7,r3
 8023990:	18803fcc 	andi	r2,r3,255
 8023994:	a18dc83a 	sub	r6,r20,r6
 8023998:	2000683a 	jmp	r4
 802399c:	08023b80 	call	8023b8 <__alt_mem_new_sdram_controller_0-0x37fdc48>
 80239a0:	08023a04 	addi	zero,at,2280
 80239a4:	08023b74 	orhi	zero,at,2285
 80239a8:	080239f0 	cmpltui	zero,at,2279
 80239ac:	08023b74 	orhi	zero,at,2285
 80239b0:	08023b4c 	andi	zero,at,2285
 80239b4:	08023b74 	orhi	zero,at,2285
 80239b8:	080239f0 	cmpltui	zero,at,2279
 80239bc:	08023a04 	addi	zero,at,2280
 80239c0:	08023a04 	addi	zero,at,2280
 80239c4:	08023b4c 	andi	zero,at,2285
 80239c8:	080239f0 	cmpltui	zero,at,2279
 80239cc:	08023c60 	cmpeqi	zero,at,2289
 80239d0:	08023c60 	cmpeqi	zero,at,2289
 80239d4:	08023c60 	cmpeqi	zero,at,2289
 80239d8:	08023c14 	ori	zero,at,2288
 80239dc:	9000581e 	bne	r18,zero,8023b40 <__divsf3+0x270>
 80239e0:	04000204 	movi	r16,8
 80239e4:	05c00084 	movi	r23,2
 80239e8:	003fd306 	br	8023938 <__alt_data_end+0xfffeb298>
 80239ec:	0023883a 	mov	r17,zero
 80239f0:	e02d883a 	mov	r22,fp
 80239f4:	282f883a 	mov	r23,r5
 80239f8:	00800084 	movi	r2,2
 80239fc:	b8808f1e 	bne	r23,r2,8023c3c <__divsf3+0x36c>
 8023a00:	b005883a 	mov	r2,r22
 8023a04:	11c0004c 	andi	r7,r2,1
 8023a08:	013fffc4 	movi	r4,-1
 8023a0c:	000d883a 	mov	r6,zero
 8023a10:	21003fcc 	andi	r4,r4,255
 8023a14:	200895fa 	slli	r4,r4,23
 8023a18:	38803fcc 	andi	r2,r7,255
 8023a1c:	00c02034 	movhi	r3,128
 8023a20:	100497fa 	slli	r2,r2,31
 8023a24:	18ffffc4 	addi	r3,r3,-1
 8023a28:	30c6703a 	and	r3,r6,r3
 8023a2c:	1906b03a 	or	r3,r3,r4
 8023a30:	1884b03a 	or	r2,r3,r2
 8023a34:	dfc00a17 	ldw	ra,40(sp)
 8023a38:	df000917 	ldw	fp,36(sp)
 8023a3c:	ddc00817 	ldw	r23,32(sp)
 8023a40:	dd800717 	ldw	r22,28(sp)
 8023a44:	dd400617 	ldw	r21,24(sp)
 8023a48:	dd000517 	ldw	r20,20(sp)
 8023a4c:	dcc00417 	ldw	r19,16(sp)
 8023a50:	dc800317 	ldw	r18,12(sp)
 8023a54:	dc400217 	ldw	r17,8(sp)
 8023a58:	dc000117 	ldw	r16,4(sp)
 8023a5c:	dec00b04 	addi	sp,sp,44
 8023a60:	f800283a 	ret
 8023a64:	90002b1e 	bne	r18,zero,8023b14 <__divsf3+0x244>
 8023a68:	04000104 	movi	r16,4
 8023a6c:	05c00044 	movi	r23,1
 8023a70:	003fb106 	br	8023938 <__alt_data_end+0xfffeb298>
 8023a74:	8800251e 	bne	r17,zero,8023b0c <__divsf3+0x23c>
 8023a78:	01400084 	movi	r5,2
 8023a7c:	00000206 	br	8023a88 <__divsf3+0x1b8>
 8023a80:	88001a1e 	bne	r17,zero,8023aec <__divsf3+0x21c>
 8023a84:	01400044 	movi	r5,1
 8023a88:	8160b03a 	or	r16,r16,r5
 8023a8c:	802090ba 	slli	r16,r16,2
 8023a90:	00c200b4 	movhi	r3,2050
 8023a94:	18ceab04 	addi	r3,r3,15020
 8023a98:	80e1883a 	add	r16,r16,r3
 8023a9c:	80c00017 	ldw	r3,0(r16)
 8023aa0:	9d44f03a 	xor	r2,r19,r21
 8023aa4:	a18dc83a 	sub	r6,r20,r6
 8023aa8:	1800683a 	jmp	r3
 8023aac:	08023a04 	addi	zero,at,2280
 8023ab0:	08023a04 	addi	zero,at,2280
 8023ab4:	08023c50 	cmplti	zero,at,2289
 8023ab8:	080239ec 	andhi	zero,at,2279
 8023abc:	08023c50 	cmplti	zero,at,2289
 8023ac0:	08023b4c 	andi	zero,at,2285
 8023ac4:	08023c50 	cmplti	zero,at,2289
 8023ac8:	080239ec 	andhi	zero,at,2279
 8023acc:	08023a04 	addi	zero,at,2280
 8023ad0:	08023a04 	addi	zero,at,2280
 8023ad4:	08023b4c 	andi	zero,at,2285
 8023ad8:	080239ec 	andhi	zero,at,2279
 8023adc:	08023c60 	cmpeqi	zero,at,2289
 8023ae0:	08023c60 	cmpeqi	zero,at,2289
 8023ae4:	08023c60 	cmpeqi	zero,at,2289
 8023ae8:	08023c78 	rdprs	zero,at,2289
 8023aec:	8809883a 	mov	r4,r17
 8023af0:	80266100 	call	8026610 <__clzsi2>
 8023af4:	10fffec4 	addi	r3,r2,-5
 8023af8:	10801d84 	addi	r2,r2,118
 8023afc:	88e2983a 	sll	r17,r17,r3
 8023b00:	008dc83a 	sub	r6,zero,r2
 8023b04:	000b883a 	mov	r5,zero
 8023b08:	003f9906 	br	8023970 <__alt_data_end+0xfffeb2d0>
 8023b0c:	014000c4 	movi	r5,3
 8023b10:	003f9706 	br	8023970 <__alt_data_end+0xfffeb2d0>
 8023b14:	9009883a 	mov	r4,r18
 8023b18:	d9400015 	stw	r5,0(sp)
 8023b1c:	80266100 	call	8026610 <__clzsi2>
 8023b20:	10fffec4 	addi	r3,r2,-5
 8023b24:	11801d84 	addi	r6,r2,118
 8023b28:	90e4983a 	sll	r18,r18,r3
 8023b2c:	01a9c83a 	sub	r20,zero,r6
 8023b30:	0021883a 	mov	r16,zero
 8023b34:	002f883a 	mov	r23,zero
 8023b38:	d9400017 	ldw	r5,0(sp)
 8023b3c:	003f7e06 	br	8023938 <__alt_data_end+0xfffeb298>
 8023b40:	04000304 	movi	r16,12
 8023b44:	05c000c4 	movi	r23,3
 8023b48:	003f7b06 	br	8023938 <__alt_data_end+0xfffeb298>
 8023b4c:	01802034 	movhi	r6,128
 8023b50:	000f883a 	mov	r7,zero
 8023b54:	31bfffc4 	addi	r6,r6,-1
 8023b58:	013fffc4 	movi	r4,-1
 8023b5c:	003fac06 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023b60:	01400044 	movi	r5,1
 8023b64:	2909c83a 	sub	r4,r5,r4
 8023b68:	00c006c4 	movi	r3,27
 8023b6c:	19004b0e 	bge	r3,r4,8023c9c <__divsf3+0x3cc>
 8023b70:	114e703a 	and	r7,r2,r5
 8023b74:	0009883a 	mov	r4,zero
 8023b78:	000d883a 	mov	r6,zero
 8023b7c:	003fa406 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023b80:	9006917a 	slli	r3,r18,5
 8023b84:	8822917a 	slli	r17,r17,5
 8023b88:	1c40372e 	bgeu	r3,r17,8023c68 <__divsf3+0x398>
 8023b8c:	31bfffc4 	addi	r6,r6,-1
 8023b90:	010006c4 	movi	r4,27
 8023b94:	000b883a 	mov	r5,zero
 8023b98:	180f883a 	mov	r7,r3
 8023b9c:	294b883a 	add	r5,r5,r5
 8023ba0:	18c7883a 	add	r3,r3,r3
 8023ba4:	38000116 	blt	r7,zero,8023bac <__divsf3+0x2dc>
 8023ba8:	1c400236 	bltu	r3,r17,8023bb4 <__divsf3+0x2e4>
 8023bac:	1c47c83a 	sub	r3,r3,r17
 8023bb0:	29400054 	ori	r5,r5,1
 8023bb4:	213fffc4 	addi	r4,r4,-1
 8023bb8:	203ff71e 	bne	r4,zero,8023b98 <__alt_data_end+0xfffeb4f8>
 8023bbc:	1806c03a 	cmpne	r3,r3,zero
 8023bc0:	1962b03a 	or	r17,r3,r5
 8023bc4:	31001fc4 	addi	r4,r6,127
 8023bc8:	013fe50e 	bge	zero,r4,8023b60 <__alt_data_end+0xfffeb4c0>
 8023bcc:	88c001cc 	andi	r3,r17,7
 8023bd0:	18000426 	beq	r3,zero,8023be4 <__divsf3+0x314>
 8023bd4:	88c003cc 	andi	r3,r17,15
 8023bd8:	01400104 	movi	r5,4
 8023bdc:	19400126 	beq	r3,r5,8023be4 <__divsf3+0x314>
 8023be0:	8963883a 	add	r17,r17,r5
 8023be4:	88c2002c 	andhi	r3,r17,2048
 8023be8:	18000426 	beq	r3,zero,8023bfc <__divsf3+0x32c>
 8023bec:	00fe0034 	movhi	r3,63488
 8023bf0:	18ffffc4 	addi	r3,r3,-1
 8023bf4:	31002004 	addi	r4,r6,128
 8023bf8:	88e2703a 	and	r17,r17,r3
 8023bfc:	00c03f84 	movi	r3,254
 8023c00:	193f8016 	blt	r3,r4,8023a04 <__alt_data_end+0xfffeb364>
 8023c04:	880c91ba 	slli	r6,r17,6
 8023c08:	11c0004c 	andi	r7,r2,1
 8023c0c:	300cd27a 	srli	r6,r6,9
 8023c10:	003f7f06 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023c14:	9080102c 	andhi	r2,r18,64
 8023c18:	10000226 	beq	r2,zero,8023c24 <__divsf3+0x354>
 8023c1c:	8880102c 	andhi	r2,r17,64
 8023c20:	10001826 	beq	r2,zero,8023c84 <__divsf3+0x3b4>
 8023c24:	00802034 	movhi	r2,128
 8023c28:	91801034 	orhi	r6,r18,64
 8023c2c:	10bfffc4 	addi	r2,r2,-1
 8023c30:	980f883a 	mov	r7,r19
 8023c34:	308c703a 	and	r6,r6,r2
 8023c38:	003fc706 	br	8023b58 <__alt_data_end+0xfffeb4b8>
 8023c3c:	008000c4 	movi	r2,3
 8023c40:	b8802d26 	beq	r23,r2,8023cf8 <__divsf3+0x428>
 8023c44:	00c00044 	movi	r3,1
 8023c48:	b005883a 	mov	r2,r22
 8023c4c:	b8ffdd1e 	bne	r23,r3,8023bc4 <__alt_data_end+0xfffeb524>
 8023c50:	11c0004c 	andi	r7,r2,1
 8023c54:	0009883a 	mov	r4,zero
 8023c58:	000d883a 	mov	r6,zero
 8023c5c:	003f6c06 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023c60:	9023883a 	mov	r17,r18
 8023c64:	003f6406 	br	80239f8 <__alt_data_end+0xfffeb358>
 8023c68:	1c47c83a 	sub	r3,r3,r17
 8023c6c:	01000684 	movi	r4,26
 8023c70:	01400044 	movi	r5,1
 8023c74:	003fc806 	br	8023b98 <__alt_data_end+0xfffeb4f8>
 8023c78:	9080102c 	andhi	r2,r18,64
 8023c7c:	103fe926 	beq	r2,zero,8023c24 <__alt_data_end+0xfffeb584>
 8023c80:	0023883a 	mov	r17,zero
 8023c84:	00802034 	movhi	r2,128
 8023c88:	89801034 	orhi	r6,r17,64
 8023c8c:	10bfffc4 	addi	r2,r2,-1
 8023c90:	a80f883a 	mov	r7,r21
 8023c94:	308c703a 	and	r6,r6,r2
 8023c98:	003faf06 	br	8023b58 <__alt_data_end+0xfffeb4b8>
 8023c9c:	01c00804 	movi	r7,32
 8023ca0:	390fc83a 	sub	r7,r7,r4
 8023ca4:	89ce983a 	sll	r7,r17,r7
 8023ca8:	890ad83a 	srl	r5,r17,r4
 8023cac:	380ec03a 	cmpne	r7,r7,zero
 8023cb0:	29cab03a 	or	r5,r5,r7
 8023cb4:	28c001cc 	andi	r3,r5,7
 8023cb8:	18000426 	beq	r3,zero,8023ccc <__divsf3+0x3fc>
 8023cbc:	28c003cc 	andi	r3,r5,15
 8023cc0:	01000104 	movi	r4,4
 8023cc4:	19000126 	beq	r3,r4,8023ccc <__divsf3+0x3fc>
 8023cc8:	290b883a 	add	r5,r5,r4
 8023ccc:	28c1002c 	andhi	r3,r5,1024
 8023cd0:	18000426 	beq	r3,zero,8023ce4 <__divsf3+0x414>
 8023cd4:	11c0004c 	andi	r7,r2,1
 8023cd8:	01000044 	movi	r4,1
 8023cdc:	000d883a 	mov	r6,zero
 8023ce0:	003f4b06 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023ce4:	280a91ba 	slli	r5,r5,6
 8023ce8:	11c0004c 	andi	r7,r2,1
 8023cec:	0009883a 	mov	r4,zero
 8023cf0:	280cd27a 	srli	r6,r5,9
 8023cf4:	003f4606 	br	8023a10 <__alt_data_end+0xfffeb370>
 8023cf8:	00802034 	movhi	r2,128
 8023cfc:	89801034 	orhi	r6,r17,64
 8023d00:	10bfffc4 	addi	r2,r2,-1
 8023d04:	b00f883a 	mov	r7,r22
 8023d08:	308c703a 	and	r6,r6,r2
 8023d0c:	003f9206 	br	8023b58 <__alt_data_end+0xfffeb4b8>

08023d10 <__eqsf2>:
 8023d10:	2006d5fa 	srli	r3,r4,23
 8023d14:	280cd5fa 	srli	r6,r5,23
 8023d18:	01c02034 	movhi	r7,128
 8023d1c:	39ffffc4 	addi	r7,r7,-1
 8023d20:	18c03fcc 	andi	r3,r3,255
 8023d24:	02003fc4 	movi	r8,255
 8023d28:	3904703a 	and	r2,r7,r4
 8023d2c:	31803fcc 	andi	r6,r6,255
 8023d30:	394e703a 	and	r7,r7,r5
 8023d34:	2008d7fa 	srli	r4,r4,31
 8023d38:	280ad7fa 	srli	r5,r5,31
 8023d3c:	1a000d26 	beq	r3,r8,8023d74 <__eqsf2+0x64>
 8023d40:	02003fc4 	movi	r8,255
 8023d44:	32000826 	beq	r6,r8,8023d68 <__eqsf2+0x58>
 8023d48:	19800226 	beq	r3,r6,8023d54 <__eqsf2+0x44>
 8023d4c:	00800044 	movi	r2,1
 8023d50:	f800283a 	ret
 8023d54:	11fffd1e 	bne	r2,r7,8023d4c <__alt_data_end+0xfffeb6ac>
 8023d58:	21400926 	beq	r4,r5,8023d80 <__eqsf2+0x70>
 8023d5c:	183ffb1e 	bne	r3,zero,8023d4c <__alt_data_end+0xfffeb6ac>
 8023d60:	1004c03a 	cmpne	r2,r2,zero
 8023d64:	f800283a 	ret
 8023d68:	383ff726 	beq	r7,zero,8023d48 <__alt_data_end+0xfffeb6a8>
 8023d6c:	00800044 	movi	r2,1
 8023d70:	f800283a 	ret
 8023d74:	103ff226 	beq	r2,zero,8023d40 <__alt_data_end+0xfffeb6a0>
 8023d78:	00800044 	movi	r2,1
 8023d7c:	f800283a 	ret
 8023d80:	0005883a 	mov	r2,zero
 8023d84:	f800283a 	ret

08023d88 <__gesf2>:
 8023d88:	2004d5fa 	srli	r2,r4,23
 8023d8c:	2806d5fa 	srli	r3,r5,23
 8023d90:	01802034 	movhi	r6,128
 8023d94:	31bfffc4 	addi	r6,r6,-1
 8023d98:	10803fcc 	andi	r2,r2,255
 8023d9c:	01c03fc4 	movi	r7,255
 8023da0:	3110703a 	and	r8,r6,r4
 8023da4:	18c03fcc 	andi	r3,r3,255
 8023da8:	314c703a 	and	r6,r6,r5
 8023dac:	2008d7fa 	srli	r4,r4,31
 8023db0:	280ad7fa 	srli	r5,r5,31
 8023db4:	11c01926 	beq	r2,r7,8023e1c <__gesf2+0x94>
 8023db8:	01c03fc4 	movi	r7,255
 8023dbc:	19c00f26 	beq	r3,r7,8023dfc <__gesf2+0x74>
 8023dc0:	1000061e 	bne	r2,zero,8023ddc <__gesf2+0x54>
 8023dc4:	400f003a 	cmpeq	r7,r8,zero
 8023dc8:	1800071e 	bne	r3,zero,8023de8 <__gesf2+0x60>
 8023dcc:	3000061e 	bne	r6,zero,8023de8 <__gesf2+0x60>
 8023dd0:	0005883a 	mov	r2,zero
 8023dd4:	40000e1e 	bne	r8,zero,8023e10 <__gesf2+0x88>
 8023dd8:	f800283a 	ret
 8023ddc:	18000a1e 	bne	r3,zero,8023e08 <__gesf2+0x80>
 8023de0:	30000b26 	beq	r6,zero,8023e10 <__gesf2+0x88>
 8023de4:	000f883a 	mov	r7,zero
 8023de8:	29403fcc 	andi	r5,r5,255
 8023dec:	38000726 	beq	r7,zero,8023e0c <__gesf2+0x84>
 8023df0:	28000826 	beq	r5,zero,8023e14 <__gesf2+0x8c>
 8023df4:	00800044 	movi	r2,1
 8023df8:	f800283a 	ret
 8023dfc:	303ff026 	beq	r6,zero,8023dc0 <__alt_data_end+0xfffeb720>
 8023e00:	00bfff84 	movi	r2,-2
 8023e04:	f800283a 	ret
 8023e08:	29403fcc 	andi	r5,r5,255
 8023e0c:	21400526 	beq	r4,r5,8023e24 <__gesf2+0x9c>
 8023e10:	203ff826 	beq	r4,zero,8023df4 <__alt_data_end+0xfffeb754>
 8023e14:	00bfffc4 	movi	r2,-1
 8023e18:	f800283a 	ret
 8023e1c:	403fe626 	beq	r8,zero,8023db8 <__alt_data_end+0xfffeb718>
 8023e20:	003ff706 	br	8023e00 <__alt_data_end+0xfffeb760>
 8023e24:	18bffa16 	blt	r3,r2,8023e10 <__alt_data_end+0xfffeb770>
 8023e28:	10c00216 	blt	r2,r3,8023e34 <__gesf2+0xac>
 8023e2c:	323ff836 	bltu	r6,r8,8023e10 <__alt_data_end+0xfffeb770>
 8023e30:	4180022e 	bgeu	r8,r6,8023e3c <__gesf2+0xb4>
 8023e34:	203fef1e 	bne	r4,zero,8023df4 <__alt_data_end+0xfffeb754>
 8023e38:	003ff606 	br	8023e14 <__alt_data_end+0xfffeb774>
 8023e3c:	0005883a 	mov	r2,zero
 8023e40:	f800283a 	ret

08023e44 <__lesf2>:
 8023e44:	2004d5fa 	srli	r2,r4,23
 8023e48:	280cd5fa 	srli	r6,r5,23
 8023e4c:	00c02034 	movhi	r3,128
 8023e50:	18ffffc4 	addi	r3,r3,-1
 8023e54:	10803fcc 	andi	r2,r2,255
 8023e58:	01c03fc4 	movi	r7,255
 8023e5c:	1910703a 	and	r8,r3,r4
 8023e60:	31803fcc 	andi	r6,r6,255
 8023e64:	1946703a 	and	r3,r3,r5
 8023e68:	2008d7fa 	srli	r4,r4,31
 8023e6c:	280ad7fa 	srli	r5,r5,31
 8023e70:	11c01b26 	beq	r2,r7,8023ee0 <__lesf2+0x9c>
 8023e74:	01c03fc4 	movi	r7,255
 8023e78:	31c01126 	beq	r6,r7,8023ec0 <__lesf2+0x7c>
 8023e7c:	1000071e 	bne	r2,zero,8023e9c <__lesf2+0x58>
 8023e80:	400f003a 	cmpeq	r7,r8,zero
 8023e84:	21003fcc 	andi	r4,r4,255
 8023e88:	3000081e 	bne	r6,zero,8023eac <__lesf2+0x68>
 8023e8c:	1800071e 	bne	r3,zero,8023eac <__lesf2+0x68>
 8023e90:	0005883a 	mov	r2,zero
 8023e94:	40000f1e 	bne	r8,zero,8023ed4 <__lesf2+0x90>
 8023e98:	f800283a 	ret
 8023e9c:	21003fcc 	andi	r4,r4,255
 8023ea0:	30000a1e 	bne	r6,zero,8023ecc <__lesf2+0x88>
 8023ea4:	18000b26 	beq	r3,zero,8023ed4 <__lesf2+0x90>
 8023ea8:	000f883a 	mov	r7,zero
 8023eac:	29403fcc 	andi	r5,r5,255
 8023eb0:	38000726 	beq	r7,zero,8023ed0 <__lesf2+0x8c>
 8023eb4:	28000826 	beq	r5,zero,8023ed8 <__lesf2+0x94>
 8023eb8:	00800044 	movi	r2,1
 8023ebc:	f800283a 	ret
 8023ec0:	183fee26 	beq	r3,zero,8023e7c <__alt_data_end+0xfffeb7dc>
 8023ec4:	00800084 	movi	r2,2
 8023ec8:	f800283a 	ret
 8023ecc:	29403fcc 	andi	r5,r5,255
 8023ed0:	21400626 	beq	r4,r5,8023eec <__lesf2+0xa8>
 8023ed4:	203ff826 	beq	r4,zero,8023eb8 <__alt_data_end+0xfffeb818>
 8023ed8:	00bfffc4 	movi	r2,-1
 8023edc:	f800283a 	ret
 8023ee0:	403fe426 	beq	r8,zero,8023e74 <__alt_data_end+0xfffeb7d4>
 8023ee4:	00800084 	movi	r2,2
 8023ee8:	f800283a 	ret
 8023eec:	30bff916 	blt	r6,r2,8023ed4 <__alt_data_end+0xfffeb834>
 8023ef0:	11800216 	blt	r2,r6,8023efc <__lesf2+0xb8>
 8023ef4:	1a3ff736 	bltu	r3,r8,8023ed4 <__alt_data_end+0xfffeb834>
 8023ef8:	40c0022e 	bgeu	r8,r3,8023f04 <__lesf2+0xc0>
 8023efc:	203fee1e 	bne	r4,zero,8023eb8 <__alt_data_end+0xfffeb818>
 8023f00:	003ff506 	br	8023ed8 <__alt_data_end+0xfffeb838>
 8023f04:	0005883a 	mov	r2,zero
 8023f08:	f800283a 	ret

08023f0c <__mulsf3>:
 8023f0c:	defff504 	addi	sp,sp,-44
 8023f10:	dc000115 	stw	r16,4(sp)
 8023f14:	2020d5fa 	srli	r16,r4,23
 8023f18:	dd400615 	stw	r21,24(sp)
 8023f1c:	202ad7fa 	srli	r21,r4,31
 8023f20:	dc800315 	stw	r18,12(sp)
 8023f24:	04802034 	movhi	r18,128
 8023f28:	df000915 	stw	fp,36(sp)
 8023f2c:	dd000515 	stw	r20,20(sp)
 8023f30:	94bfffc4 	addi	r18,r18,-1
 8023f34:	dfc00a15 	stw	ra,40(sp)
 8023f38:	ddc00815 	stw	r23,32(sp)
 8023f3c:	dd800715 	stw	r22,28(sp)
 8023f40:	dcc00415 	stw	r19,16(sp)
 8023f44:	dc400215 	stw	r17,8(sp)
 8023f48:	84003fcc 	andi	r16,r16,255
 8023f4c:	9124703a 	and	r18,r18,r4
 8023f50:	a829883a 	mov	r20,r21
 8023f54:	af003fcc 	andi	fp,r21,255
 8023f58:	80005426 	beq	r16,zero,80240ac <__mulsf3+0x1a0>
 8023f5c:	00803fc4 	movi	r2,255
 8023f60:	80802f26 	beq	r16,r2,8024020 <__mulsf3+0x114>
 8023f64:	91002034 	orhi	r4,r18,128
 8023f68:	202490fa 	slli	r18,r4,3
 8023f6c:	843fe044 	addi	r16,r16,-127
 8023f70:	0023883a 	mov	r17,zero
 8023f74:	002f883a 	mov	r23,zero
 8023f78:	2804d5fa 	srli	r2,r5,23
 8023f7c:	282cd7fa 	srli	r22,r5,31
 8023f80:	01002034 	movhi	r4,128
 8023f84:	213fffc4 	addi	r4,r4,-1
 8023f88:	10803fcc 	andi	r2,r2,255
 8023f8c:	2166703a 	and	r19,r4,r5
 8023f90:	b1803fcc 	andi	r6,r22,255
 8023f94:	10004c26 	beq	r2,zero,80240c8 <__mulsf3+0x1bc>
 8023f98:	00c03fc4 	movi	r3,255
 8023f9c:	10c04726 	beq	r2,r3,80240bc <__mulsf3+0x1b0>
 8023fa0:	99002034 	orhi	r4,r19,128
 8023fa4:	202690fa 	slli	r19,r4,3
 8023fa8:	10bfe044 	addi	r2,r2,-127
 8023fac:	0007883a 	mov	r3,zero
 8023fb0:	80a1883a 	add	r16,r16,r2
 8023fb4:	010003c4 	movi	r4,15
 8023fb8:	1c44b03a 	or	r2,r3,r17
 8023fbc:	b56af03a 	xor	r21,r22,r21
 8023fc0:	81c00044 	addi	r7,r16,1
 8023fc4:	20806b36 	bltu	r4,r2,8024174 <__mulsf3+0x268>
 8023fc8:	100490ba 	slli	r2,r2,2
 8023fcc:	010200b4 	movhi	r4,2050
 8023fd0:	210ff804 	addi	r4,r4,16352
 8023fd4:	1105883a 	add	r2,r2,r4
 8023fd8:	10800017 	ldw	r2,0(r2)
 8023fdc:	1000683a 	jmp	r2
 8023fe0:	08024174 	orhi	zero,at,2309
 8023fe4:	08024034 	orhi	zero,at,2304
 8023fe8:	08024034 	orhi	zero,at,2304
 8023fec:	08024030 	cmpltui	zero,at,2304
 8023ff0:	08024158 	cmpnei	zero,at,2309
 8023ff4:	08024158 	cmpnei	zero,at,2309
 8023ff8:	08024144 	addi	zero,at,2309
 8023ffc:	08024030 	cmpltui	zero,at,2304
 8024000:	08024158 	cmpnei	zero,at,2309
 8024004:	08024144 	addi	zero,at,2309
 8024008:	08024158 	cmpnei	zero,at,2309
 802400c:	08024030 	cmpltui	zero,at,2304
 8024010:	08024164 	muli	zero,at,2309
 8024014:	08024164 	muli	zero,at,2309
 8024018:	08024164 	muli	zero,at,2309
 802401c:	08024240 	call	802424 <__alt_mem_new_sdram_controller_0-0x37fdbdc>
 8024020:	90003b1e 	bne	r18,zero,8024110 <__mulsf3+0x204>
 8024024:	04400204 	movi	r17,8
 8024028:	05c00084 	movi	r23,2
 802402c:	003fd206 	br	8023f78 <__alt_data_end+0xfffeb8d8>
 8024030:	302b883a 	mov	r21,r6
 8024034:	00800084 	movi	r2,2
 8024038:	18802626 	beq	r3,r2,80240d4 <__mulsf3+0x1c8>
 802403c:	008000c4 	movi	r2,3
 8024040:	1880ab26 	beq	r3,r2,80242f0 <__mulsf3+0x3e4>
 8024044:	00800044 	movi	r2,1
 8024048:	1880a21e 	bne	r3,r2,80242d4 <__mulsf3+0x3c8>
 802404c:	a829883a 	mov	r20,r21
 8024050:	0007883a 	mov	r3,zero
 8024054:	0009883a 	mov	r4,zero
 8024058:	18803fcc 	andi	r2,r3,255
 802405c:	100695fa 	slli	r3,r2,23
 8024060:	a0803fcc 	andi	r2,r20,255
 8024064:	100a97fa 	slli	r5,r2,31
 8024068:	00802034 	movhi	r2,128
 802406c:	10bfffc4 	addi	r2,r2,-1
 8024070:	2084703a 	and	r2,r4,r2
 8024074:	10c4b03a 	or	r2,r2,r3
 8024078:	1144b03a 	or	r2,r2,r5
 802407c:	dfc00a17 	ldw	ra,40(sp)
 8024080:	df000917 	ldw	fp,36(sp)
 8024084:	ddc00817 	ldw	r23,32(sp)
 8024088:	dd800717 	ldw	r22,28(sp)
 802408c:	dd400617 	ldw	r21,24(sp)
 8024090:	dd000517 	ldw	r20,20(sp)
 8024094:	dcc00417 	ldw	r19,16(sp)
 8024098:	dc800317 	ldw	r18,12(sp)
 802409c:	dc400217 	ldw	r17,8(sp)
 80240a0:	dc000117 	ldw	r16,4(sp)
 80240a4:	dec00b04 	addi	sp,sp,44
 80240a8:	f800283a 	ret
 80240ac:	90000d1e 	bne	r18,zero,80240e4 <__mulsf3+0x1d8>
 80240b0:	04400104 	movi	r17,4
 80240b4:	05c00044 	movi	r23,1
 80240b8:	003faf06 	br	8023f78 <__alt_data_end+0xfffeb8d8>
 80240bc:	9806c03a 	cmpne	r3,r19,zero
 80240c0:	18c00084 	addi	r3,r3,2
 80240c4:	003fba06 	br	8023fb0 <__alt_data_end+0xfffeb910>
 80240c8:	9800141e 	bne	r19,zero,802411c <__mulsf3+0x210>
 80240cc:	00c00044 	movi	r3,1
 80240d0:	003fb706 	br	8023fb0 <__alt_data_end+0xfffeb910>
 80240d4:	a829883a 	mov	r20,r21
 80240d8:	00ffffc4 	movi	r3,-1
 80240dc:	0009883a 	mov	r4,zero
 80240e0:	003fdd06 	br	8024058 <__alt_data_end+0xfffeb9b8>
 80240e4:	9009883a 	mov	r4,r18
 80240e8:	d9400015 	stw	r5,0(sp)
 80240ec:	80266100 	call	8026610 <__clzsi2>
 80240f0:	10fffec4 	addi	r3,r2,-5
 80240f4:	10801d84 	addi	r2,r2,118
 80240f8:	90e4983a 	sll	r18,r18,r3
 80240fc:	00a1c83a 	sub	r16,zero,r2
 8024100:	0023883a 	mov	r17,zero
 8024104:	002f883a 	mov	r23,zero
 8024108:	d9400017 	ldw	r5,0(sp)
 802410c:	003f9a06 	br	8023f78 <__alt_data_end+0xfffeb8d8>
 8024110:	04400304 	movi	r17,12
 8024114:	05c000c4 	movi	r23,3
 8024118:	003f9706 	br	8023f78 <__alt_data_end+0xfffeb8d8>
 802411c:	9809883a 	mov	r4,r19
 8024120:	d9800015 	stw	r6,0(sp)
 8024124:	80266100 	call	8026610 <__clzsi2>
 8024128:	10fffec4 	addi	r3,r2,-5
 802412c:	10801d84 	addi	r2,r2,118
 8024130:	98e6983a 	sll	r19,r19,r3
 8024134:	0085c83a 	sub	r2,zero,r2
 8024138:	0007883a 	mov	r3,zero
 802413c:	d9800017 	ldw	r6,0(sp)
 8024140:	003f9b06 	br	8023fb0 <__alt_data_end+0xfffeb910>
 8024144:	01002034 	movhi	r4,128
 8024148:	0029883a 	mov	r20,zero
 802414c:	213fffc4 	addi	r4,r4,-1
 8024150:	00ffffc4 	movi	r3,-1
 8024154:	003fc006 	br	8024058 <__alt_data_end+0xfffeb9b8>
 8024158:	9027883a 	mov	r19,r18
 802415c:	b807883a 	mov	r3,r23
 8024160:	003fb406 	br	8024034 <__alt_data_end+0xfffeb994>
 8024164:	9027883a 	mov	r19,r18
 8024168:	e02b883a 	mov	r21,fp
 802416c:	b807883a 	mov	r3,r23
 8024170:	003fb006 	br	8024034 <__alt_data_end+0xfffeb994>
 8024174:	9004d43a 	srli	r2,r18,16
 8024178:	9810d43a 	srli	r8,r19,16
 802417c:	94bfffcc 	andi	r18,r18,65535
 8024180:	993fffcc 	andi	r4,r19,65535
 8024184:	910d383a 	mul	r6,r18,r4
 8024188:	20a7383a 	mul	r19,r4,r2
 802418c:	9225383a 	mul	r18,r18,r8
 8024190:	3006d43a 	srli	r3,r6,16
 8024194:	1211383a 	mul	r8,r2,r8
 8024198:	94e5883a 	add	r18,r18,r19
 802419c:	1c87883a 	add	r3,r3,r18
 80241a0:	1cc0022e 	bgeu	r3,r19,80241ac <__mulsf3+0x2a0>
 80241a4:	00800074 	movhi	r2,1
 80241a8:	4091883a 	add	r8,r8,r2
 80241ac:	1804943a 	slli	r2,r3,16
 80241b0:	31bfffcc 	andi	r6,r6,65535
 80241b4:	1806d43a 	srli	r3,r3,16
 80241b8:	1185883a 	add	r2,r2,r6
 80241bc:	102691ba 	slli	r19,r2,6
 80241c0:	1a07883a 	add	r3,r3,r8
 80241c4:	1004d6ba 	srli	r2,r2,26
 80241c8:	180891ba 	slli	r4,r3,6
 80241cc:	9826c03a 	cmpne	r19,r19,zero
 80241d0:	9884b03a 	or	r2,r19,r2
 80241d4:	1126b03a 	or	r19,r2,r4
 80241d8:	9882002c 	andhi	r2,r19,2048
 80241dc:	10000426 	beq	r2,zero,80241f0 <__mulsf3+0x2e4>
 80241e0:	9804d07a 	srli	r2,r19,1
 80241e4:	9900004c 	andi	r4,r19,1
 80241e8:	3821883a 	mov	r16,r7
 80241ec:	1126b03a 	or	r19,r2,r4
 80241f0:	80c01fc4 	addi	r3,r16,127
 80241f4:	00c0210e 	bge	zero,r3,802427c <__mulsf3+0x370>
 80241f8:	988001cc 	andi	r2,r19,7
 80241fc:	10000426 	beq	r2,zero,8024210 <__mulsf3+0x304>
 8024200:	988003cc 	andi	r2,r19,15
 8024204:	01000104 	movi	r4,4
 8024208:	11000126 	beq	r2,r4,8024210 <__mulsf3+0x304>
 802420c:	9927883a 	add	r19,r19,r4
 8024210:	9882002c 	andhi	r2,r19,2048
 8024214:	10000426 	beq	r2,zero,8024228 <__mulsf3+0x31c>
 8024218:	00be0034 	movhi	r2,63488
 802421c:	10bfffc4 	addi	r2,r2,-1
 8024220:	80c02004 	addi	r3,r16,128
 8024224:	98a6703a 	and	r19,r19,r2
 8024228:	00803f84 	movi	r2,254
 802422c:	10ffa916 	blt	r2,r3,80240d4 <__alt_data_end+0xfffeba34>
 8024230:	980891ba 	slli	r4,r19,6
 8024234:	a829883a 	mov	r20,r21
 8024238:	2008d27a 	srli	r4,r4,9
 802423c:	003f8606 	br	8024058 <__alt_data_end+0xfffeb9b8>
 8024240:	9080102c 	andhi	r2,r18,64
 8024244:	10000826 	beq	r2,zero,8024268 <__mulsf3+0x35c>
 8024248:	9880102c 	andhi	r2,r19,64
 802424c:	1000061e 	bne	r2,zero,8024268 <__mulsf3+0x35c>
 8024250:	00802034 	movhi	r2,128
 8024254:	99001034 	orhi	r4,r19,64
 8024258:	10bfffc4 	addi	r2,r2,-1
 802425c:	b029883a 	mov	r20,r22
 8024260:	2088703a 	and	r4,r4,r2
 8024264:	003fba06 	br	8024150 <__alt_data_end+0xfffebab0>
 8024268:	00802034 	movhi	r2,128
 802426c:	91001034 	orhi	r4,r18,64
 8024270:	10bfffc4 	addi	r2,r2,-1
 8024274:	2088703a 	and	r4,r4,r2
 8024278:	003fb506 	br	8024150 <__alt_data_end+0xfffebab0>
 802427c:	00800044 	movi	r2,1
 8024280:	10c7c83a 	sub	r3,r2,r3
 8024284:	008006c4 	movi	r2,27
 8024288:	10ff7016 	blt	r2,r3,802404c <__alt_data_end+0xfffeb9ac>
 802428c:	00800804 	movi	r2,32
 8024290:	10c5c83a 	sub	r2,r2,r3
 8024294:	9884983a 	sll	r2,r19,r2
 8024298:	98c6d83a 	srl	r3,r19,r3
 802429c:	1004c03a 	cmpne	r2,r2,zero
 80242a0:	1884b03a 	or	r2,r3,r2
 80242a4:	10c001cc 	andi	r3,r2,7
 80242a8:	18000426 	beq	r3,zero,80242bc <__mulsf3+0x3b0>
 80242ac:	10c003cc 	andi	r3,r2,15
 80242b0:	01000104 	movi	r4,4
 80242b4:	19000126 	beq	r3,r4,80242bc <__mulsf3+0x3b0>
 80242b8:	1105883a 	add	r2,r2,r4
 80242bc:	10c1002c 	andhi	r3,r2,1024
 80242c0:	18000626 	beq	r3,zero,80242dc <__mulsf3+0x3d0>
 80242c4:	a829883a 	mov	r20,r21
 80242c8:	00c00044 	movi	r3,1
 80242cc:	0009883a 	mov	r4,zero
 80242d0:	003f6106 	br	8024058 <__alt_data_end+0xfffeb9b8>
 80242d4:	3821883a 	mov	r16,r7
 80242d8:	003fc506 	br	80241f0 <__alt_data_end+0xfffebb50>
 80242dc:	100491ba 	slli	r2,r2,6
 80242e0:	a829883a 	mov	r20,r21
 80242e4:	0007883a 	mov	r3,zero
 80242e8:	1008d27a 	srli	r4,r2,9
 80242ec:	003f5a06 	br	8024058 <__alt_data_end+0xfffeb9b8>
 80242f0:	00802034 	movhi	r2,128
 80242f4:	99001034 	orhi	r4,r19,64
 80242f8:	10bfffc4 	addi	r2,r2,-1
 80242fc:	a829883a 	mov	r20,r21
 8024300:	2088703a 	and	r4,r4,r2
 8024304:	003f9206 	br	8024150 <__alt_data_end+0xfffebab0>

08024308 <__subsf3>:
 8024308:	defffc04 	addi	sp,sp,-16
 802430c:	280cd5fa 	srli	r6,r5,23
 8024310:	dc000015 	stw	r16,0(sp)
 8024314:	01c02034 	movhi	r7,128
 8024318:	2020d5fa 	srli	r16,r4,23
 802431c:	39ffffc4 	addi	r7,r7,-1
 8024320:	3906703a 	and	r3,r7,r4
 8024324:	dc400115 	stw	r17,4(sp)
 8024328:	394e703a 	and	r7,r7,r5
 802432c:	2022d7fa 	srli	r17,r4,31
 8024330:	dfc00315 	stw	ra,12(sp)
 8024334:	dc800215 	stw	r18,8(sp)
 8024338:	31803fcc 	andi	r6,r6,255
 802433c:	01003fc4 	movi	r4,255
 8024340:	84003fcc 	andi	r16,r16,255
 8024344:	180690fa 	slli	r3,r3,3
 8024348:	2804d7fa 	srli	r2,r5,31
 802434c:	380e90fa 	slli	r7,r7,3
 8024350:	31006d26 	beq	r6,r4,8024508 <__subsf3+0x200>
 8024354:	1080005c 	xori	r2,r2,1
 8024358:	8189c83a 	sub	r4,r16,r6
 802435c:	14404f26 	beq	r2,r17,802449c <__subsf3+0x194>
 8024360:	0100770e 	bge	zero,r4,8024540 <__subsf3+0x238>
 8024364:	30001e1e 	bne	r6,zero,80243e0 <__subsf3+0xd8>
 8024368:	38006a1e 	bne	r7,zero,8024514 <__subsf3+0x20c>
 802436c:	188001cc 	andi	r2,r3,7
 8024370:	10000426 	beq	r2,zero,8024384 <__subsf3+0x7c>
 8024374:	188003cc 	andi	r2,r3,15
 8024378:	01000104 	movi	r4,4
 802437c:	11000126 	beq	r2,r4,8024384 <__subsf3+0x7c>
 8024380:	1907883a 	add	r3,r3,r4
 8024384:	1881002c 	andhi	r2,r3,1024
 8024388:	10003926 	beq	r2,zero,8024470 <__subsf3+0x168>
 802438c:	84000044 	addi	r16,r16,1
 8024390:	00803fc4 	movi	r2,255
 8024394:	80807526 	beq	r16,r2,802456c <__subsf3+0x264>
 8024398:	180691ba 	slli	r3,r3,6
 802439c:	8880004c 	andi	r2,r17,1
 80243a0:	180ad27a 	srli	r5,r3,9
 80243a4:	84003fcc 	andi	r16,r16,255
 80243a8:	800695fa 	slli	r3,r16,23
 80243ac:	10803fcc 	andi	r2,r2,255
 80243b0:	01002034 	movhi	r4,128
 80243b4:	213fffc4 	addi	r4,r4,-1
 80243b8:	100497fa 	slli	r2,r2,31
 80243bc:	2920703a 	and	r16,r5,r4
 80243c0:	80e0b03a 	or	r16,r16,r3
 80243c4:	8084b03a 	or	r2,r16,r2
 80243c8:	dfc00317 	ldw	ra,12(sp)
 80243cc:	dc800217 	ldw	r18,8(sp)
 80243d0:	dc400117 	ldw	r17,4(sp)
 80243d4:	dc000017 	ldw	r16,0(sp)
 80243d8:	dec00404 	addi	sp,sp,16
 80243dc:	f800283a 	ret
 80243e0:	00803fc4 	movi	r2,255
 80243e4:	80bfe126 	beq	r16,r2,802436c <__alt_data_end+0xfffebccc>
 80243e8:	39c10034 	orhi	r7,r7,1024
 80243ec:	008006c4 	movi	r2,27
 80243f0:	11007416 	blt	r2,r4,80245c4 <__subsf3+0x2bc>
 80243f4:	00800804 	movi	r2,32
 80243f8:	1105c83a 	sub	r2,r2,r4
 80243fc:	3884983a 	sll	r2,r7,r2
 8024400:	390ed83a 	srl	r7,r7,r4
 8024404:	1008c03a 	cmpne	r4,r2,zero
 8024408:	390eb03a 	or	r7,r7,r4
 802440c:	19c7c83a 	sub	r3,r3,r7
 8024410:	1881002c 	andhi	r2,r3,1024
 8024414:	10001426 	beq	r2,zero,8024468 <__subsf3+0x160>
 8024418:	04810034 	movhi	r18,1024
 802441c:	94bfffc4 	addi	r18,r18,-1
 8024420:	1ca4703a 	and	r18,r3,r18
 8024424:	9009883a 	mov	r4,r18
 8024428:	80266100 	call	8026610 <__clzsi2>
 802442c:	10bffec4 	addi	r2,r2,-5
 8024430:	90a4983a 	sll	r18,r18,r2
 8024434:	14005116 	blt	r2,r16,802457c <__subsf3+0x274>
 8024438:	1405c83a 	sub	r2,r2,r16
 802443c:	10c00044 	addi	r3,r2,1
 8024440:	00800804 	movi	r2,32
 8024444:	10c5c83a 	sub	r2,r2,r3
 8024448:	9084983a 	sll	r2,r18,r2
 802444c:	90e4d83a 	srl	r18,r18,r3
 8024450:	0021883a 	mov	r16,zero
 8024454:	1006c03a 	cmpne	r3,r2,zero
 8024458:	90c6b03a 	or	r3,r18,r3
 802445c:	003fc306 	br	802436c <__alt_data_end+0xfffebccc>
 8024460:	2000e026 	beq	r4,zero,80247e4 <__subsf3+0x4dc>
 8024464:	2007883a 	mov	r3,r4
 8024468:	188001cc 	andi	r2,r3,7
 802446c:	103fc11e 	bne	r2,zero,8024374 <__alt_data_end+0xfffebcd4>
 8024470:	180ad0fa 	srli	r5,r3,3
 8024474:	00c03fc4 	movi	r3,255
 8024478:	8880004c 	andi	r2,r17,1
 802447c:	80c0031e 	bne	r16,r3,802448c <__subsf3+0x184>
 8024480:	28006d26 	beq	r5,zero,8024638 <__subsf3+0x330>
 8024484:	29401034 	orhi	r5,r5,64
 8024488:	043fffc4 	movi	r16,-1
 802448c:	00c02034 	movhi	r3,128
 8024490:	18ffffc4 	addi	r3,r3,-1
 8024494:	28ca703a 	and	r5,r5,r3
 8024498:	003fc206 	br	80243a4 <__alt_data_end+0xfffebd04>
 802449c:	01003c0e 	bge	zero,r4,8024590 <__subsf3+0x288>
 80244a0:	30002126 	beq	r6,zero,8024528 <__subsf3+0x220>
 80244a4:	01403fc4 	movi	r5,255
 80244a8:	817fb026 	beq	r16,r5,802436c <__alt_data_end+0xfffebccc>
 80244ac:	39c10034 	orhi	r7,r7,1024
 80244b0:	014006c4 	movi	r5,27
 80244b4:	29007416 	blt	r5,r4,8024688 <__subsf3+0x380>
 80244b8:	01400804 	movi	r5,32
 80244bc:	290bc83a 	sub	r5,r5,r4
 80244c0:	394a983a 	sll	r5,r7,r5
 80244c4:	390ed83a 	srl	r7,r7,r4
 80244c8:	2808c03a 	cmpne	r4,r5,zero
 80244cc:	390eb03a 	or	r7,r7,r4
 80244d0:	19c7883a 	add	r3,r3,r7
 80244d4:	1901002c 	andhi	r4,r3,1024
 80244d8:	20003826 	beq	r4,zero,80245bc <__subsf3+0x2b4>
 80244dc:	84000044 	addi	r16,r16,1
 80244e0:	01003fc4 	movi	r4,255
 80244e4:	81005426 	beq	r16,r4,8024638 <__subsf3+0x330>
 80244e8:	1023883a 	mov	r17,r2
 80244ec:	00bf0034 	movhi	r2,64512
 80244f0:	10bfffc4 	addi	r2,r2,-1
 80244f4:	1900004c 	andi	r4,r3,1
 80244f8:	1886703a 	and	r3,r3,r2
 80244fc:	1806d07a 	srli	r3,r3,1
 8024500:	1906b03a 	or	r3,r3,r4
 8024504:	003f9906 	br	802436c <__alt_data_end+0xfffebccc>
 8024508:	383f9226 	beq	r7,zero,8024354 <__alt_data_end+0xfffebcb4>
 802450c:	10803fcc 	andi	r2,r2,255
 8024510:	003f9106 	br	8024358 <__alt_data_end+0xfffebcb8>
 8024514:	213fffc4 	addi	r4,r4,-1
 8024518:	203fbc26 	beq	r4,zero,802440c <__alt_data_end+0xfffebd6c>
 802451c:	00803fc4 	movi	r2,255
 8024520:	80bfb21e 	bne	r16,r2,80243ec <__alt_data_end+0xfffebd4c>
 8024524:	003f9106 	br	802436c <__alt_data_end+0xfffebccc>
 8024528:	383f9026 	beq	r7,zero,802436c <__alt_data_end+0xfffebccc>
 802452c:	213fffc4 	addi	r4,r4,-1
 8024530:	203fe726 	beq	r4,zero,80244d0 <__alt_data_end+0xfffebe30>
 8024534:	01403fc4 	movi	r5,255
 8024538:	817fdd1e 	bne	r16,r5,80244b0 <__alt_data_end+0xfffebe10>
 802453c:	003f8b06 	br	802436c <__alt_data_end+0xfffebccc>
 8024540:	2000221e 	bne	r4,zero,80245cc <__subsf3+0x2c4>
 8024544:	81000044 	addi	r4,r16,1
 8024548:	21003fcc 	andi	r4,r4,255
 802454c:	01400044 	movi	r5,1
 8024550:	2900470e 	bge	r5,r4,8024670 <__subsf3+0x368>
 8024554:	19e5c83a 	sub	r18,r3,r7
 8024558:	9141002c 	andhi	r5,r18,1024
 802455c:	28002d26 	beq	r5,zero,8024614 <__subsf3+0x30c>
 8024560:	38e5c83a 	sub	r18,r7,r3
 8024564:	1023883a 	mov	r17,r2
 8024568:	003fae06 	br	8024424 <__alt_data_end+0xfffebd84>
 802456c:	8880004c 	andi	r2,r17,1
 8024570:	043fffc4 	movi	r16,-1
 8024574:	000b883a 	mov	r5,zero
 8024578:	003f8a06 	br	80243a4 <__alt_data_end+0xfffebd04>
 802457c:	00ff0034 	movhi	r3,64512
 8024580:	18ffffc4 	addi	r3,r3,-1
 8024584:	80a1c83a 	sub	r16,r16,r2
 8024588:	90c6703a 	and	r3,r18,r3
 802458c:	003f7706 	br	802436c <__alt_data_end+0xfffebccc>
 8024590:	2000431e 	bne	r4,zero,80246a0 <__subsf3+0x398>
 8024594:	81000044 	addi	r4,r16,1
 8024598:	21803fcc 	andi	r6,r4,255
 802459c:	01400044 	movi	r5,1
 80245a0:	2980280e 	bge	r5,r6,8024644 <__subsf3+0x33c>
 80245a4:	01403fc4 	movi	r5,255
 80245a8:	21402326 	beq	r4,r5,8024638 <__subsf3+0x330>
 80245ac:	19c7883a 	add	r3,r3,r7
 80245b0:	1806d07a 	srli	r3,r3,1
 80245b4:	2021883a 	mov	r16,r4
 80245b8:	003f6c06 	br	802436c <__alt_data_end+0xfffebccc>
 80245bc:	1023883a 	mov	r17,r2
 80245c0:	003fa906 	br	8024468 <__alt_data_end+0xfffebdc8>
 80245c4:	01c00044 	movi	r7,1
 80245c8:	003f9006 	br	802440c <__alt_data_end+0xfffebd6c>
 80245cc:	8000151e 	bne	r16,zero,8024624 <__subsf3+0x31c>
 80245d0:	18002f26 	beq	r3,zero,8024690 <__subsf3+0x388>
 80245d4:	0108303a 	nor	r4,zero,r4
 80245d8:	20000a26 	beq	r4,zero,8024604 <__subsf3+0x2fc>
 80245dc:	01403fc4 	movi	r5,255
 80245e0:	31402b26 	beq	r6,r5,8024690 <__subsf3+0x388>
 80245e4:	014006c4 	movi	r5,27
 80245e8:	29006e16 	blt	r5,r4,80247a4 <__subsf3+0x49c>
 80245ec:	01400804 	movi	r5,32
 80245f0:	290bc83a 	sub	r5,r5,r4
 80245f4:	194a983a 	sll	r5,r3,r5
 80245f8:	1908d83a 	srl	r4,r3,r4
 80245fc:	2806c03a 	cmpne	r3,r5,zero
 8024600:	20c6b03a 	or	r3,r4,r3
 8024604:	38c7c83a 	sub	r3,r7,r3
 8024608:	3021883a 	mov	r16,r6
 802460c:	1023883a 	mov	r17,r2
 8024610:	003f7f06 	br	8024410 <__alt_data_end+0xfffebd70>
 8024614:	903f831e 	bne	r18,zero,8024424 <__alt_data_end+0xfffebd84>
 8024618:	0005883a 	mov	r2,zero
 802461c:	0021883a 	mov	r16,zero
 8024620:	003f9a06 	br	802448c <__alt_data_end+0xfffebdec>
 8024624:	01403fc4 	movi	r5,255
 8024628:	31401926 	beq	r6,r5,8024690 <__subsf3+0x388>
 802462c:	0109c83a 	sub	r4,zero,r4
 8024630:	18c10034 	orhi	r3,r3,1024
 8024634:	003feb06 	br	80245e4 <__alt_data_end+0xfffebf44>
 8024638:	043fffc4 	movi	r16,-1
 802463c:	000b883a 	mov	r5,zero
 8024640:	003f5806 	br	80243a4 <__alt_data_end+0xfffebd04>
 8024644:	8000481e 	bne	r16,zero,8024768 <__subsf3+0x460>
 8024648:	18006226 	beq	r3,zero,80247d4 <__subsf3+0x4cc>
 802464c:	383f4726 	beq	r7,zero,802436c <__alt_data_end+0xfffebccc>
 8024650:	19c7883a 	add	r3,r3,r7
 8024654:	1881002c 	andhi	r2,r3,1024
 8024658:	103f8326 	beq	r2,zero,8024468 <__alt_data_end+0xfffebdc8>
 802465c:	00bf0034 	movhi	r2,64512
 8024660:	10bfffc4 	addi	r2,r2,-1
 8024664:	2821883a 	mov	r16,r5
 8024668:	1886703a 	and	r3,r3,r2
 802466c:	003f3f06 	br	802436c <__alt_data_end+0xfffebccc>
 8024670:	80001c1e 	bne	r16,zero,80246e4 <__subsf3+0x3dc>
 8024674:	1800261e 	bne	r3,zero,8024710 <__subsf3+0x408>
 8024678:	38004c26 	beq	r7,zero,80247ac <__subsf3+0x4a4>
 802467c:	3807883a 	mov	r3,r7
 8024680:	1023883a 	mov	r17,r2
 8024684:	003f3906 	br	802436c <__alt_data_end+0xfffebccc>
 8024688:	01c00044 	movi	r7,1
 802468c:	003f9006 	br	80244d0 <__alt_data_end+0xfffebe30>
 8024690:	3807883a 	mov	r3,r7
 8024694:	3021883a 	mov	r16,r6
 8024698:	1023883a 	mov	r17,r2
 802469c:	003f3306 	br	802436c <__alt_data_end+0xfffebccc>
 80246a0:	8000161e 	bne	r16,zero,80246fc <__subsf3+0x3f4>
 80246a4:	18002d26 	beq	r3,zero,802475c <__subsf3+0x454>
 80246a8:	0108303a 	nor	r4,zero,r4
 80246ac:	20000a26 	beq	r4,zero,80246d8 <__subsf3+0x3d0>
 80246b0:	01403fc4 	movi	r5,255
 80246b4:	31402926 	beq	r6,r5,802475c <__subsf3+0x454>
 80246b8:	014006c4 	movi	r5,27
 80246bc:	29004716 	blt	r5,r4,80247dc <__subsf3+0x4d4>
 80246c0:	01400804 	movi	r5,32
 80246c4:	290bc83a 	sub	r5,r5,r4
 80246c8:	194a983a 	sll	r5,r3,r5
 80246cc:	1908d83a 	srl	r4,r3,r4
 80246d0:	2806c03a 	cmpne	r3,r5,zero
 80246d4:	20c6b03a 	or	r3,r4,r3
 80246d8:	19c7883a 	add	r3,r3,r7
 80246dc:	3021883a 	mov	r16,r6
 80246e0:	003f7c06 	br	80244d4 <__alt_data_end+0xfffebe34>
 80246e4:	1800111e 	bne	r3,zero,802472c <__subsf3+0x424>
 80246e8:	38003326 	beq	r7,zero,80247b8 <__subsf3+0x4b0>
 80246ec:	3807883a 	mov	r3,r7
 80246f0:	1023883a 	mov	r17,r2
 80246f4:	04003fc4 	movi	r16,255
 80246f8:	003f1c06 	br	802436c <__alt_data_end+0xfffebccc>
 80246fc:	01403fc4 	movi	r5,255
 8024700:	31401626 	beq	r6,r5,802475c <__subsf3+0x454>
 8024704:	0109c83a 	sub	r4,zero,r4
 8024708:	18c10034 	orhi	r3,r3,1024
 802470c:	003fea06 	br	80246b8 <__alt_data_end+0xfffec018>
 8024710:	383f1626 	beq	r7,zero,802436c <__alt_data_end+0xfffebccc>
 8024714:	19c9c83a 	sub	r4,r3,r7
 8024718:	2141002c 	andhi	r5,r4,1024
 802471c:	283f5026 	beq	r5,zero,8024460 <__alt_data_end+0xfffebdc0>
 8024720:	38c7c83a 	sub	r3,r7,r3
 8024724:	1023883a 	mov	r17,r2
 8024728:	003f1006 	br	802436c <__alt_data_end+0xfffebccc>
 802472c:	38001b26 	beq	r7,zero,802479c <__subsf3+0x494>
 8024730:	1806d0fa 	srli	r3,r3,3
 8024734:	1900102c 	andhi	r4,r3,64
 8024738:	20000526 	beq	r4,zero,8024750 <__subsf3+0x448>
 802473c:	380ed0fa 	srli	r7,r7,3
 8024740:	3900102c 	andhi	r4,r7,64
 8024744:	2000021e 	bne	r4,zero,8024750 <__subsf3+0x448>
 8024748:	3807883a 	mov	r3,r7
 802474c:	1023883a 	mov	r17,r2
 8024750:	180690fa 	slli	r3,r3,3
 8024754:	04003fc4 	movi	r16,255
 8024758:	003f0406 	br	802436c <__alt_data_end+0xfffebccc>
 802475c:	3807883a 	mov	r3,r7
 8024760:	3021883a 	mov	r16,r6
 8024764:	003f0106 	br	802436c <__alt_data_end+0xfffebccc>
 8024768:	18001726 	beq	r3,zero,80247c8 <__subsf3+0x4c0>
 802476c:	38000b26 	beq	r7,zero,802479c <__subsf3+0x494>
 8024770:	1806d0fa 	srli	r3,r3,3
 8024774:	1900102c 	andhi	r4,r3,64
 8024778:	20000426 	beq	r4,zero,802478c <__subsf3+0x484>
 802477c:	380ed0fa 	srli	r7,r7,3
 8024780:	3900102c 	andhi	r4,r7,64
 8024784:	2000011e 	bne	r4,zero,802478c <__subsf3+0x484>
 8024788:	3807883a 	mov	r3,r7
 802478c:	180690fa 	slli	r3,r3,3
 8024790:	1023883a 	mov	r17,r2
 8024794:	04003fc4 	movi	r16,255
 8024798:	003ef406 	br	802436c <__alt_data_end+0xfffebccc>
 802479c:	04003fc4 	movi	r16,255
 80247a0:	003ef206 	br	802436c <__alt_data_end+0xfffebccc>
 80247a4:	00c00044 	movi	r3,1
 80247a8:	003f9606 	br	8024604 <__alt_data_end+0xfffebf64>
 80247ac:	000b883a 	mov	r5,zero
 80247b0:	0005883a 	mov	r2,zero
 80247b4:	003f3506 	br	802448c <__alt_data_end+0xfffebdec>
 80247b8:	01402034 	movhi	r5,128
 80247bc:	297fffc4 	addi	r5,r5,-1
 80247c0:	0005883a 	mov	r2,zero
 80247c4:	003f2f06 	br	8024484 <__alt_data_end+0xfffebde4>
 80247c8:	3807883a 	mov	r3,r7
 80247cc:	04003fc4 	movi	r16,255
 80247d0:	003ee606 	br	802436c <__alt_data_end+0xfffebccc>
 80247d4:	3807883a 	mov	r3,r7
 80247d8:	003ee406 	br	802436c <__alt_data_end+0xfffebccc>
 80247dc:	00c00044 	movi	r3,1
 80247e0:	003fbd06 	br	80246d8 <__alt_data_end+0xfffec038>
 80247e4:	0005883a 	mov	r2,zero
 80247e8:	003f2806 	br	802448c <__alt_data_end+0xfffebdec>

080247ec <__fixsfsi>:
 80247ec:	200ad5fa 	srli	r5,r4,23
 80247f0:	00c02034 	movhi	r3,128
 80247f4:	18ffffc4 	addi	r3,r3,-1
 80247f8:	29403fcc 	andi	r5,r5,255
 80247fc:	00801f84 	movi	r2,126
 8024800:	1906703a 	and	r3,r3,r4
 8024804:	2008d7fa 	srli	r4,r4,31
 8024808:	11400e0e 	bge	r2,r5,8024844 <__fixsfsi+0x58>
 802480c:	00802744 	movi	r2,157
 8024810:	11400816 	blt	r2,r5,8024834 <__fixsfsi+0x48>
 8024814:	00802544 	movi	r2,149
 8024818:	18c02034 	orhi	r3,r3,128
 802481c:	11400b0e 	bge	r2,r5,802484c <__fixsfsi+0x60>
 8024820:	28bfda84 	addi	r2,r5,-150
 8024824:	1884983a 	sll	r2,r3,r2
 8024828:	20000726 	beq	r4,zero,8024848 <__fixsfsi+0x5c>
 802482c:	0085c83a 	sub	r2,zero,r2
 8024830:	f800283a 	ret
 8024834:	00a00034 	movhi	r2,32768
 8024838:	10bfffc4 	addi	r2,r2,-1
 802483c:	2085883a 	add	r2,r4,r2
 8024840:	f800283a 	ret
 8024844:	0005883a 	mov	r2,zero
 8024848:	f800283a 	ret
 802484c:	00802584 	movi	r2,150
 8024850:	1145c83a 	sub	r2,r2,r5
 8024854:	1884d83a 	srl	r2,r3,r2
 8024858:	003ff306 	br	8024828 <__alt_data_end+0xfffec188>

0802485c <__floatsisf>:
 802485c:	defffd04 	addi	sp,sp,-12
 8024860:	dfc00215 	stw	ra,8(sp)
 8024864:	dc400115 	stw	r17,4(sp)
 8024868:	dc000015 	stw	r16,0(sp)
 802486c:	20003526 	beq	r4,zero,8024944 <__floatsisf+0xe8>
 8024870:	2021883a 	mov	r16,r4
 8024874:	2022d7fa 	srli	r17,r4,31
 8024878:	20003616 	blt	r4,zero,8024954 <__floatsisf+0xf8>
 802487c:	8009883a 	mov	r4,r16
 8024880:	80266100 	call	8026610 <__clzsi2>
 8024884:	00c02784 	movi	r3,158
 8024888:	1887c83a 	sub	r3,r3,r2
 802488c:	01002584 	movi	r4,150
 8024890:	20c01416 	blt	r4,r3,80248e4 <__floatsisf+0x88>
 8024894:	20c9c83a 	sub	r4,r4,r3
 8024898:	8120983a 	sll	r16,r16,r4
 802489c:	00802034 	movhi	r2,128
 80248a0:	10bfffc4 	addi	r2,r2,-1
 80248a4:	8809883a 	mov	r4,r17
 80248a8:	80a0703a 	and	r16,r16,r2
 80248ac:	18803fcc 	andi	r2,r3,255
 80248b0:	100695fa 	slli	r3,r2,23
 80248b4:	20803fcc 	andi	r2,r4,255
 80248b8:	100897fa 	slli	r4,r2,31
 80248bc:	00802034 	movhi	r2,128
 80248c0:	10bfffc4 	addi	r2,r2,-1
 80248c4:	8084703a 	and	r2,r16,r2
 80248c8:	10c4b03a 	or	r2,r2,r3
 80248cc:	1104b03a 	or	r2,r2,r4
 80248d0:	dfc00217 	ldw	ra,8(sp)
 80248d4:	dc400117 	ldw	r17,4(sp)
 80248d8:	dc000017 	ldw	r16,0(sp)
 80248dc:	dec00304 	addi	sp,sp,12
 80248e0:	f800283a 	ret
 80248e4:	01002644 	movi	r4,153
 80248e8:	20c01c16 	blt	r4,r3,802495c <__floatsisf+0x100>
 80248ec:	20c9c83a 	sub	r4,r4,r3
 80248f0:	8120983a 	sll	r16,r16,r4
 80248f4:	013f0034 	movhi	r4,64512
 80248f8:	213fffc4 	addi	r4,r4,-1
 80248fc:	814001cc 	andi	r5,r16,7
 8024900:	8108703a 	and	r4,r16,r4
 8024904:	28000426 	beq	r5,zero,8024918 <__floatsisf+0xbc>
 8024908:	840003cc 	andi	r16,r16,15
 802490c:	01400104 	movi	r5,4
 8024910:	81400126 	beq	r16,r5,8024918 <__floatsisf+0xbc>
 8024914:	2149883a 	add	r4,r4,r5
 8024918:	2141002c 	andhi	r5,r4,1024
 802491c:	28000526 	beq	r5,zero,8024934 <__floatsisf+0xd8>
 8024920:	00c027c4 	movi	r3,159
 8024924:	1887c83a 	sub	r3,r3,r2
 8024928:	00bf0034 	movhi	r2,64512
 802492c:	10bfffc4 	addi	r2,r2,-1
 8024930:	2088703a 	and	r4,r4,r2
 8024934:	202091ba 	slli	r16,r4,6
 8024938:	8809883a 	mov	r4,r17
 802493c:	8020d27a 	srli	r16,r16,9
 8024940:	003fda06 	br	80248ac <__alt_data_end+0xfffec20c>
 8024944:	0009883a 	mov	r4,zero
 8024948:	0007883a 	mov	r3,zero
 802494c:	0021883a 	mov	r16,zero
 8024950:	003fd606 	br	80248ac <__alt_data_end+0xfffec20c>
 8024954:	0121c83a 	sub	r16,zero,r4
 8024958:	003fc806 	br	802487c <__alt_data_end+0xfffec1dc>
 802495c:	01002e44 	movi	r4,185
 8024960:	20c9c83a 	sub	r4,r4,r3
 8024964:	01400144 	movi	r5,5
 8024968:	8108983a 	sll	r4,r16,r4
 802496c:	288bc83a 	sub	r5,r5,r2
 8024970:	8160d83a 	srl	r16,r16,r5
 8024974:	2008c03a 	cmpne	r4,r4,zero
 8024978:	8120b03a 	or	r16,r16,r4
 802497c:	003fdd06 	br	80248f4 <__alt_data_end+0xfffec254>

08024980 <__adddf3>:
 8024980:	02c00434 	movhi	r11,16
 8024984:	5affffc4 	addi	r11,r11,-1
 8024988:	2806d7fa 	srli	r3,r5,31
 802498c:	2ad4703a 	and	r10,r5,r11
 8024990:	3ad2703a 	and	r9,r7,r11
 8024994:	3804d53a 	srli	r2,r7,20
 8024998:	3018d77a 	srli	r12,r6,29
 802499c:	280ad53a 	srli	r5,r5,20
 80249a0:	501490fa 	slli	r10,r10,3
 80249a4:	2010d77a 	srli	r8,r4,29
 80249a8:	481290fa 	slli	r9,r9,3
 80249ac:	380ed7fa 	srli	r7,r7,31
 80249b0:	defffb04 	addi	sp,sp,-20
 80249b4:	dc800215 	stw	r18,8(sp)
 80249b8:	dc400115 	stw	r17,4(sp)
 80249bc:	dc000015 	stw	r16,0(sp)
 80249c0:	dfc00415 	stw	ra,16(sp)
 80249c4:	dcc00315 	stw	r19,12(sp)
 80249c8:	1c803fcc 	andi	r18,r3,255
 80249cc:	2c01ffcc 	andi	r16,r5,2047
 80249d0:	5210b03a 	or	r8,r10,r8
 80249d4:	202290fa 	slli	r17,r4,3
 80249d8:	1081ffcc 	andi	r2,r2,2047
 80249dc:	4b12b03a 	or	r9,r9,r12
 80249e0:	300c90fa 	slli	r6,r6,3
 80249e4:	91c07526 	beq	r18,r7,8024bbc <__adddf3+0x23c>
 80249e8:	8087c83a 	sub	r3,r16,r2
 80249ec:	00c0ab0e 	bge	zero,r3,8024c9c <__adddf3+0x31c>
 80249f0:	10002a1e 	bne	r2,zero,8024a9c <__adddf3+0x11c>
 80249f4:	4984b03a 	or	r2,r9,r6
 80249f8:	1000961e 	bne	r2,zero,8024c54 <__adddf3+0x2d4>
 80249fc:	888001cc 	andi	r2,r17,7
 8024a00:	10000726 	beq	r2,zero,8024a20 <__adddf3+0xa0>
 8024a04:	888003cc 	andi	r2,r17,15
 8024a08:	00c00104 	movi	r3,4
 8024a0c:	10c00426 	beq	r2,r3,8024a20 <__adddf3+0xa0>
 8024a10:	88c7883a 	add	r3,r17,r3
 8024a14:	1c63803a 	cmpltu	r17,r3,r17
 8024a18:	4451883a 	add	r8,r8,r17
 8024a1c:	1823883a 	mov	r17,r3
 8024a20:	4080202c 	andhi	r2,r8,128
 8024a24:	10005926 	beq	r2,zero,8024b8c <__adddf3+0x20c>
 8024a28:	84000044 	addi	r16,r16,1
 8024a2c:	0081ffc4 	movi	r2,2047
 8024a30:	8080ba26 	beq	r16,r2,8024d1c <__adddf3+0x39c>
 8024a34:	00bfe034 	movhi	r2,65408
 8024a38:	10bfffc4 	addi	r2,r2,-1
 8024a3c:	4090703a 	and	r8,r8,r2
 8024a40:	4004977a 	slli	r2,r8,29
 8024a44:	4010927a 	slli	r8,r8,9
 8024a48:	8822d0fa 	srli	r17,r17,3
 8024a4c:	8401ffcc 	andi	r16,r16,2047
 8024a50:	4010d33a 	srli	r8,r8,12
 8024a54:	9007883a 	mov	r3,r18
 8024a58:	1444b03a 	or	r2,r2,r17
 8024a5c:	8401ffcc 	andi	r16,r16,2047
 8024a60:	8020953a 	slli	r16,r16,20
 8024a64:	18c03fcc 	andi	r3,r3,255
 8024a68:	01000434 	movhi	r4,16
 8024a6c:	213fffc4 	addi	r4,r4,-1
 8024a70:	180697fa 	slli	r3,r3,31
 8024a74:	4110703a 	and	r8,r8,r4
 8024a78:	4410b03a 	or	r8,r8,r16
 8024a7c:	40c6b03a 	or	r3,r8,r3
 8024a80:	dfc00417 	ldw	ra,16(sp)
 8024a84:	dcc00317 	ldw	r19,12(sp)
 8024a88:	dc800217 	ldw	r18,8(sp)
 8024a8c:	dc400117 	ldw	r17,4(sp)
 8024a90:	dc000017 	ldw	r16,0(sp)
 8024a94:	dec00504 	addi	sp,sp,20
 8024a98:	f800283a 	ret
 8024a9c:	0081ffc4 	movi	r2,2047
 8024aa0:	80bfd626 	beq	r16,r2,80249fc <__alt_data_end+0xfffec35c>
 8024aa4:	4a402034 	orhi	r9,r9,128
 8024aa8:	00800e04 	movi	r2,56
 8024aac:	10c09f16 	blt	r2,r3,8024d2c <__adddf3+0x3ac>
 8024ab0:	008007c4 	movi	r2,31
 8024ab4:	10c0c216 	blt	r2,r3,8024dc0 <__adddf3+0x440>
 8024ab8:	00800804 	movi	r2,32
 8024abc:	10c5c83a 	sub	r2,r2,r3
 8024ac0:	488a983a 	sll	r5,r9,r2
 8024ac4:	30c8d83a 	srl	r4,r6,r3
 8024ac8:	3084983a 	sll	r2,r6,r2
 8024acc:	48c6d83a 	srl	r3,r9,r3
 8024ad0:	290cb03a 	or	r6,r5,r4
 8024ad4:	1004c03a 	cmpne	r2,r2,zero
 8024ad8:	308cb03a 	or	r6,r6,r2
 8024adc:	898dc83a 	sub	r6,r17,r6
 8024ae0:	89a3803a 	cmpltu	r17,r17,r6
 8024ae4:	40d1c83a 	sub	r8,r8,r3
 8024ae8:	4451c83a 	sub	r8,r8,r17
 8024aec:	3023883a 	mov	r17,r6
 8024af0:	4080202c 	andhi	r2,r8,128
 8024af4:	10002326 	beq	r2,zero,8024b84 <__adddf3+0x204>
 8024af8:	04c02034 	movhi	r19,128
 8024afc:	9cffffc4 	addi	r19,r19,-1
 8024b00:	44e6703a 	and	r19,r8,r19
 8024b04:	98007626 	beq	r19,zero,8024ce0 <__adddf3+0x360>
 8024b08:	9809883a 	mov	r4,r19
 8024b0c:	80266100 	call	8026610 <__clzsi2>
 8024b10:	10fffe04 	addi	r3,r2,-8
 8024b14:	010007c4 	movi	r4,31
 8024b18:	20c07716 	blt	r4,r3,8024cf8 <__adddf3+0x378>
 8024b1c:	00800804 	movi	r2,32
 8024b20:	10c5c83a 	sub	r2,r2,r3
 8024b24:	8884d83a 	srl	r2,r17,r2
 8024b28:	98d0983a 	sll	r8,r19,r3
 8024b2c:	88e2983a 	sll	r17,r17,r3
 8024b30:	1204b03a 	or	r2,r2,r8
 8024b34:	1c007416 	blt	r3,r16,8024d08 <__adddf3+0x388>
 8024b38:	1c21c83a 	sub	r16,r3,r16
 8024b3c:	82000044 	addi	r8,r16,1
 8024b40:	00c007c4 	movi	r3,31
 8024b44:	1a009116 	blt	r3,r8,8024d8c <__adddf3+0x40c>
 8024b48:	00c00804 	movi	r3,32
 8024b4c:	1a07c83a 	sub	r3,r3,r8
 8024b50:	8a08d83a 	srl	r4,r17,r8
 8024b54:	88e2983a 	sll	r17,r17,r3
 8024b58:	10c6983a 	sll	r3,r2,r3
 8024b5c:	1210d83a 	srl	r8,r2,r8
 8024b60:	8804c03a 	cmpne	r2,r17,zero
 8024b64:	1906b03a 	or	r3,r3,r4
 8024b68:	18a2b03a 	or	r17,r3,r2
 8024b6c:	0021883a 	mov	r16,zero
 8024b70:	003fa206 	br	80249fc <__alt_data_end+0xfffec35c>
 8024b74:	1890b03a 	or	r8,r3,r2
 8024b78:	40017d26 	beq	r8,zero,8025170 <__adddf3+0x7f0>
 8024b7c:	1011883a 	mov	r8,r2
 8024b80:	1823883a 	mov	r17,r3
 8024b84:	888001cc 	andi	r2,r17,7
 8024b88:	103f9e1e 	bne	r2,zero,8024a04 <__alt_data_end+0xfffec364>
 8024b8c:	4004977a 	slli	r2,r8,29
 8024b90:	8822d0fa 	srli	r17,r17,3
 8024b94:	4010d0fa 	srli	r8,r8,3
 8024b98:	9007883a 	mov	r3,r18
 8024b9c:	1444b03a 	or	r2,r2,r17
 8024ba0:	0101ffc4 	movi	r4,2047
 8024ba4:	81002426 	beq	r16,r4,8024c38 <__adddf3+0x2b8>
 8024ba8:	8120703a 	and	r16,r16,r4
 8024bac:	01000434 	movhi	r4,16
 8024bb0:	213fffc4 	addi	r4,r4,-1
 8024bb4:	4110703a 	and	r8,r8,r4
 8024bb8:	003fa806 	br	8024a5c <__alt_data_end+0xfffec3bc>
 8024bbc:	8089c83a 	sub	r4,r16,r2
 8024bc0:	01005e0e 	bge	zero,r4,8024d3c <__adddf3+0x3bc>
 8024bc4:	10002b26 	beq	r2,zero,8024c74 <__adddf3+0x2f4>
 8024bc8:	0081ffc4 	movi	r2,2047
 8024bcc:	80bf8b26 	beq	r16,r2,80249fc <__alt_data_end+0xfffec35c>
 8024bd0:	4a402034 	orhi	r9,r9,128
 8024bd4:	00800e04 	movi	r2,56
 8024bd8:	1100a40e 	bge	r2,r4,8024e6c <__adddf3+0x4ec>
 8024bdc:	498cb03a 	or	r6,r9,r6
 8024be0:	300ac03a 	cmpne	r5,r6,zero
 8024be4:	0013883a 	mov	r9,zero
 8024be8:	2c4b883a 	add	r5,r5,r17
 8024bec:	2c63803a 	cmpltu	r17,r5,r17
 8024bf0:	4a11883a 	add	r8,r9,r8
 8024bf4:	8a11883a 	add	r8,r17,r8
 8024bf8:	2823883a 	mov	r17,r5
 8024bfc:	4080202c 	andhi	r2,r8,128
 8024c00:	103fe026 	beq	r2,zero,8024b84 <__alt_data_end+0xfffec4e4>
 8024c04:	84000044 	addi	r16,r16,1
 8024c08:	0081ffc4 	movi	r2,2047
 8024c0c:	8080d226 	beq	r16,r2,8024f58 <__adddf3+0x5d8>
 8024c10:	00bfe034 	movhi	r2,65408
 8024c14:	10bfffc4 	addi	r2,r2,-1
 8024c18:	4090703a 	and	r8,r8,r2
 8024c1c:	880ad07a 	srli	r5,r17,1
 8024c20:	400897fa 	slli	r4,r8,31
 8024c24:	88c0004c 	andi	r3,r17,1
 8024c28:	28e2b03a 	or	r17,r5,r3
 8024c2c:	4010d07a 	srli	r8,r8,1
 8024c30:	2462b03a 	or	r17,r4,r17
 8024c34:	003f7106 	br	80249fc <__alt_data_end+0xfffec35c>
 8024c38:	4088b03a 	or	r4,r8,r2
 8024c3c:	20014526 	beq	r4,zero,8025154 <__adddf3+0x7d4>
 8024c40:	01000434 	movhi	r4,16
 8024c44:	42000234 	orhi	r8,r8,8
 8024c48:	213fffc4 	addi	r4,r4,-1
 8024c4c:	4110703a 	and	r8,r8,r4
 8024c50:	003f8206 	br	8024a5c <__alt_data_end+0xfffec3bc>
 8024c54:	18ffffc4 	addi	r3,r3,-1
 8024c58:	1800491e 	bne	r3,zero,8024d80 <__adddf3+0x400>
 8024c5c:	898bc83a 	sub	r5,r17,r6
 8024c60:	8963803a 	cmpltu	r17,r17,r5
 8024c64:	4251c83a 	sub	r8,r8,r9
 8024c68:	4451c83a 	sub	r8,r8,r17
 8024c6c:	2823883a 	mov	r17,r5
 8024c70:	003f9f06 	br	8024af0 <__alt_data_end+0xfffec450>
 8024c74:	4984b03a 	or	r2,r9,r6
 8024c78:	103f6026 	beq	r2,zero,80249fc <__alt_data_end+0xfffec35c>
 8024c7c:	213fffc4 	addi	r4,r4,-1
 8024c80:	2000931e 	bne	r4,zero,8024ed0 <__adddf3+0x550>
 8024c84:	898d883a 	add	r6,r17,r6
 8024c88:	3463803a 	cmpltu	r17,r6,r17
 8024c8c:	4251883a 	add	r8,r8,r9
 8024c90:	8a11883a 	add	r8,r17,r8
 8024c94:	3023883a 	mov	r17,r6
 8024c98:	003fd806 	br	8024bfc <__alt_data_end+0xfffec55c>
 8024c9c:	1800541e 	bne	r3,zero,8024df0 <__adddf3+0x470>
 8024ca0:	80800044 	addi	r2,r16,1
 8024ca4:	1081ffcc 	andi	r2,r2,2047
 8024ca8:	00c00044 	movi	r3,1
 8024cac:	1880a00e 	bge	r3,r2,8024f30 <__adddf3+0x5b0>
 8024cb0:	8989c83a 	sub	r4,r17,r6
 8024cb4:	8905803a 	cmpltu	r2,r17,r4
 8024cb8:	4267c83a 	sub	r19,r8,r9
 8024cbc:	98a7c83a 	sub	r19,r19,r2
 8024cc0:	9880202c 	andhi	r2,r19,128
 8024cc4:	10006326 	beq	r2,zero,8024e54 <__adddf3+0x4d4>
 8024cc8:	3463c83a 	sub	r17,r6,r17
 8024ccc:	4a07c83a 	sub	r3,r9,r8
 8024cd0:	344d803a 	cmpltu	r6,r6,r17
 8024cd4:	19a7c83a 	sub	r19,r3,r6
 8024cd8:	3825883a 	mov	r18,r7
 8024cdc:	983f8a1e 	bne	r19,zero,8024b08 <__alt_data_end+0xfffec468>
 8024ce0:	8809883a 	mov	r4,r17
 8024ce4:	80266100 	call	8026610 <__clzsi2>
 8024ce8:	10800804 	addi	r2,r2,32
 8024cec:	10fffe04 	addi	r3,r2,-8
 8024cf0:	010007c4 	movi	r4,31
 8024cf4:	20ff890e 	bge	r4,r3,8024b1c <__alt_data_end+0xfffec47c>
 8024cf8:	10bff604 	addi	r2,r2,-40
 8024cfc:	8884983a 	sll	r2,r17,r2
 8024d00:	0023883a 	mov	r17,zero
 8024d04:	1c3f8c0e 	bge	r3,r16,8024b38 <__alt_data_end+0xfffec498>
 8024d08:	023fe034 	movhi	r8,65408
 8024d0c:	423fffc4 	addi	r8,r8,-1
 8024d10:	80e1c83a 	sub	r16,r16,r3
 8024d14:	1210703a 	and	r8,r2,r8
 8024d18:	003f3806 	br	80249fc <__alt_data_end+0xfffec35c>
 8024d1c:	9007883a 	mov	r3,r18
 8024d20:	0011883a 	mov	r8,zero
 8024d24:	0005883a 	mov	r2,zero
 8024d28:	003f4c06 	br	8024a5c <__alt_data_end+0xfffec3bc>
 8024d2c:	498cb03a 	or	r6,r9,r6
 8024d30:	300cc03a 	cmpne	r6,r6,zero
 8024d34:	0007883a 	mov	r3,zero
 8024d38:	003f6806 	br	8024adc <__alt_data_end+0xfffec43c>
 8024d3c:	20009c1e 	bne	r4,zero,8024fb0 <__adddf3+0x630>
 8024d40:	80800044 	addi	r2,r16,1
 8024d44:	1141ffcc 	andi	r5,r2,2047
 8024d48:	01000044 	movi	r4,1
 8024d4c:	2140670e 	bge	r4,r5,8024eec <__adddf3+0x56c>
 8024d50:	0101ffc4 	movi	r4,2047
 8024d54:	11007f26 	beq	r2,r4,8024f54 <__adddf3+0x5d4>
 8024d58:	898d883a 	add	r6,r17,r6
 8024d5c:	4247883a 	add	r3,r8,r9
 8024d60:	3451803a 	cmpltu	r8,r6,r17
 8024d64:	40d1883a 	add	r8,r8,r3
 8024d68:	402297fa 	slli	r17,r8,31
 8024d6c:	300cd07a 	srli	r6,r6,1
 8024d70:	4010d07a 	srli	r8,r8,1
 8024d74:	1021883a 	mov	r16,r2
 8024d78:	89a2b03a 	or	r17,r17,r6
 8024d7c:	003f1f06 	br	80249fc <__alt_data_end+0xfffec35c>
 8024d80:	0081ffc4 	movi	r2,2047
 8024d84:	80bf481e 	bne	r16,r2,8024aa8 <__alt_data_end+0xfffec408>
 8024d88:	003f1c06 	br	80249fc <__alt_data_end+0xfffec35c>
 8024d8c:	843ff844 	addi	r16,r16,-31
 8024d90:	01000804 	movi	r4,32
 8024d94:	1406d83a 	srl	r3,r2,r16
 8024d98:	41005026 	beq	r8,r4,8024edc <__adddf3+0x55c>
 8024d9c:	01001004 	movi	r4,64
 8024da0:	2211c83a 	sub	r8,r4,r8
 8024da4:	1204983a 	sll	r2,r2,r8
 8024da8:	88a2b03a 	or	r17,r17,r2
 8024dac:	8822c03a 	cmpne	r17,r17,zero
 8024db0:	1c62b03a 	or	r17,r3,r17
 8024db4:	0011883a 	mov	r8,zero
 8024db8:	0021883a 	mov	r16,zero
 8024dbc:	003f7106 	br	8024b84 <__alt_data_end+0xfffec4e4>
 8024dc0:	193ff804 	addi	r4,r3,-32
 8024dc4:	00800804 	movi	r2,32
 8024dc8:	4908d83a 	srl	r4,r9,r4
 8024dcc:	18804526 	beq	r3,r2,8024ee4 <__adddf3+0x564>
 8024dd0:	00801004 	movi	r2,64
 8024dd4:	10c5c83a 	sub	r2,r2,r3
 8024dd8:	4886983a 	sll	r3,r9,r2
 8024ddc:	198cb03a 	or	r6,r3,r6
 8024de0:	300cc03a 	cmpne	r6,r6,zero
 8024de4:	218cb03a 	or	r6,r4,r6
 8024de8:	0007883a 	mov	r3,zero
 8024dec:	003f3b06 	br	8024adc <__alt_data_end+0xfffec43c>
 8024df0:	80002a26 	beq	r16,zero,8024e9c <__adddf3+0x51c>
 8024df4:	0101ffc4 	movi	r4,2047
 8024df8:	11006826 	beq	r2,r4,8024f9c <__adddf3+0x61c>
 8024dfc:	00c7c83a 	sub	r3,zero,r3
 8024e00:	42002034 	orhi	r8,r8,128
 8024e04:	01000e04 	movi	r4,56
 8024e08:	20c07c16 	blt	r4,r3,8024ffc <__adddf3+0x67c>
 8024e0c:	010007c4 	movi	r4,31
 8024e10:	20c0da16 	blt	r4,r3,802517c <__adddf3+0x7fc>
 8024e14:	01000804 	movi	r4,32
 8024e18:	20c9c83a 	sub	r4,r4,r3
 8024e1c:	4114983a 	sll	r10,r8,r4
 8024e20:	88cad83a 	srl	r5,r17,r3
 8024e24:	8908983a 	sll	r4,r17,r4
 8024e28:	40c6d83a 	srl	r3,r8,r3
 8024e2c:	5162b03a 	or	r17,r10,r5
 8024e30:	2008c03a 	cmpne	r4,r4,zero
 8024e34:	8922b03a 	or	r17,r17,r4
 8024e38:	3463c83a 	sub	r17,r6,r17
 8024e3c:	48c7c83a 	sub	r3,r9,r3
 8024e40:	344d803a 	cmpltu	r6,r6,r17
 8024e44:	1991c83a 	sub	r8,r3,r6
 8024e48:	1021883a 	mov	r16,r2
 8024e4c:	3825883a 	mov	r18,r7
 8024e50:	003f2706 	br	8024af0 <__alt_data_end+0xfffec450>
 8024e54:	24d0b03a 	or	r8,r4,r19
 8024e58:	40001b1e 	bne	r8,zero,8024ec8 <__adddf3+0x548>
 8024e5c:	0005883a 	mov	r2,zero
 8024e60:	0007883a 	mov	r3,zero
 8024e64:	0021883a 	mov	r16,zero
 8024e68:	003f4d06 	br	8024ba0 <__alt_data_end+0xfffec500>
 8024e6c:	008007c4 	movi	r2,31
 8024e70:	11003c16 	blt	r2,r4,8024f64 <__adddf3+0x5e4>
 8024e74:	00800804 	movi	r2,32
 8024e78:	1105c83a 	sub	r2,r2,r4
 8024e7c:	488e983a 	sll	r7,r9,r2
 8024e80:	310ad83a 	srl	r5,r6,r4
 8024e84:	3084983a 	sll	r2,r6,r2
 8024e88:	4912d83a 	srl	r9,r9,r4
 8024e8c:	394ab03a 	or	r5,r7,r5
 8024e90:	1004c03a 	cmpne	r2,r2,zero
 8024e94:	288ab03a 	or	r5,r5,r2
 8024e98:	003f5306 	br	8024be8 <__alt_data_end+0xfffec548>
 8024e9c:	4448b03a 	or	r4,r8,r17
 8024ea0:	20003e26 	beq	r4,zero,8024f9c <__adddf3+0x61c>
 8024ea4:	00c6303a 	nor	r3,zero,r3
 8024ea8:	18003a1e 	bne	r3,zero,8024f94 <__adddf3+0x614>
 8024eac:	3463c83a 	sub	r17,r6,r17
 8024eb0:	4a07c83a 	sub	r3,r9,r8
 8024eb4:	344d803a 	cmpltu	r6,r6,r17
 8024eb8:	1991c83a 	sub	r8,r3,r6
 8024ebc:	1021883a 	mov	r16,r2
 8024ec0:	3825883a 	mov	r18,r7
 8024ec4:	003f0a06 	br	8024af0 <__alt_data_end+0xfffec450>
 8024ec8:	2023883a 	mov	r17,r4
 8024ecc:	003f0d06 	br	8024b04 <__alt_data_end+0xfffec464>
 8024ed0:	0081ffc4 	movi	r2,2047
 8024ed4:	80bf3f1e 	bne	r16,r2,8024bd4 <__alt_data_end+0xfffec534>
 8024ed8:	003ec806 	br	80249fc <__alt_data_end+0xfffec35c>
 8024edc:	0005883a 	mov	r2,zero
 8024ee0:	003fb106 	br	8024da8 <__alt_data_end+0xfffec708>
 8024ee4:	0007883a 	mov	r3,zero
 8024ee8:	003fbc06 	br	8024ddc <__alt_data_end+0xfffec73c>
 8024eec:	4444b03a 	or	r2,r8,r17
 8024ef0:	8000871e 	bne	r16,zero,8025110 <__adddf3+0x790>
 8024ef4:	1000ba26 	beq	r2,zero,80251e0 <__adddf3+0x860>
 8024ef8:	4984b03a 	or	r2,r9,r6
 8024efc:	103ebf26 	beq	r2,zero,80249fc <__alt_data_end+0xfffec35c>
 8024f00:	8985883a 	add	r2,r17,r6
 8024f04:	4247883a 	add	r3,r8,r9
 8024f08:	1451803a 	cmpltu	r8,r2,r17
 8024f0c:	40d1883a 	add	r8,r8,r3
 8024f10:	40c0202c 	andhi	r3,r8,128
 8024f14:	1023883a 	mov	r17,r2
 8024f18:	183f1a26 	beq	r3,zero,8024b84 <__alt_data_end+0xfffec4e4>
 8024f1c:	00bfe034 	movhi	r2,65408
 8024f20:	10bfffc4 	addi	r2,r2,-1
 8024f24:	2021883a 	mov	r16,r4
 8024f28:	4090703a 	and	r8,r8,r2
 8024f2c:	003eb306 	br	80249fc <__alt_data_end+0xfffec35c>
 8024f30:	4444b03a 	or	r2,r8,r17
 8024f34:	8000291e 	bne	r16,zero,8024fdc <__adddf3+0x65c>
 8024f38:	10004b1e 	bne	r2,zero,8025068 <__adddf3+0x6e8>
 8024f3c:	4990b03a 	or	r8,r9,r6
 8024f40:	40008b26 	beq	r8,zero,8025170 <__adddf3+0x7f0>
 8024f44:	4811883a 	mov	r8,r9
 8024f48:	3023883a 	mov	r17,r6
 8024f4c:	3825883a 	mov	r18,r7
 8024f50:	003eaa06 	br	80249fc <__alt_data_end+0xfffec35c>
 8024f54:	1021883a 	mov	r16,r2
 8024f58:	0011883a 	mov	r8,zero
 8024f5c:	0005883a 	mov	r2,zero
 8024f60:	003f0f06 	br	8024ba0 <__alt_data_end+0xfffec500>
 8024f64:	217ff804 	addi	r5,r4,-32
 8024f68:	00800804 	movi	r2,32
 8024f6c:	494ad83a 	srl	r5,r9,r5
 8024f70:	20807d26 	beq	r4,r2,8025168 <__adddf3+0x7e8>
 8024f74:	00801004 	movi	r2,64
 8024f78:	1109c83a 	sub	r4,r2,r4
 8024f7c:	4912983a 	sll	r9,r9,r4
 8024f80:	498cb03a 	or	r6,r9,r6
 8024f84:	300cc03a 	cmpne	r6,r6,zero
 8024f88:	298ab03a 	or	r5,r5,r6
 8024f8c:	0013883a 	mov	r9,zero
 8024f90:	003f1506 	br	8024be8 <__alt_data_end+0xfffec548>
 8024f94:	0101ffc4 	movi	r4,2047
 8024f98:	113f9a1e 	bne	r2,r4,8024e04 <__alt_data_end+0xfffec764>
 8024f9c:	4811883a 	mov	r8,r9
 8024fa0:	3023883a 	mov	r17,r6
 8024fa4:	1021883a 	mov	r16,r2
 8024fa8:	3825883a 	mov	r18,r7
 8024fac:	003e9306 	br	80249fc <__alt_data_end+0xfffec35c>
 8024fb0:	8000161e 	bne	r16,zero,802500c <__adddf3+0x68c>
 8024fb4:	444ab03a 	or	r5,r8,r17
 8024fb8:	28005126 	beq	r5,zero,8025100 <__adddf3+0x780>
 8024fbc:	0108303a 	nor	r4,zero,r4
 8024fc0:	20004d1e 	bne	r4,zero,80250f8 <__adddf3+0x778>
 8024fc4:	89a3883a 	add	r17,r17,r6
 8024fc8:	4253883a 	add	r9,r8,r9
 8024fcc:	898d803a 	cmpltu	r6,r17,r6
 8024fd0:	3251883a 	add	r8,r6,r9
 8024fd4:	1021883a 	mov	r16,r2
 8024fd8:	003f0806 	br	8024bfc <__alt_data_end+0xfffec55c>
 8024fdc:	1000301e 	bne	r2,zero,80250a0 <__adddf3+0x720>
 8024fe0:	4984b03a 	or	r2,r9,r6
 8024fe4:	10007126 	beq	r2,zero,80251ac <__adddf3+0x82c>
 8024fe8:	4811883a 	mov	r8,r9
 8024fec:	3023883a 	mov	r17,r6
 8024ff0:	3825883a 	mov	r18,r7
 8024ff4:	0401ffc4 	movi	r16,2047
 8024ff8:	003e8006 	br	80249fc <__alt_data_end+0xfffec35c>
 8024ffc:	4462b03a 	or	r17,r8,r17
 8025000:	8822c03a 	cmpne	r17,r17,zero
 8025004:	0007883a 	mov	r3,zero
 8025008:	003f8b06 	br	8024e38 <__alt_data_end+0xfffec798>
 802500c:	0141ffc4 	movi	r5,2047
 8025010:	11403b26 	beq	r2,r5,8025100 <__adddf3+0x780>
 8025014:	0109c83a 	sub	r4,zero,r4
 8025018:	42002034 	orhi	r8,r8,128
 802501c:	01400e04 	movi	r5,56
 8025020:	29006716 	blt	r5,r4,80251c0 <__adddf3+0x840>
 8025024:	014007c4 	movi	r5,31
 8025028:	29007016 	blt	r5,r4,80251ec <__adddf3+0x86c>
 802502c:	01400804 	movi	r5,32
 8025030:	290bc83a 	sub	r5,r5,r4
 8025034:	4154983a 	sll	r10,r8,r5
 8025038:	890ed83a 	srl	r7,r17,r4
 802503c:	894a983a 	sll	r5,r17,r5
 8025040:	4108d83a 	srl	r4,r8,r4
 8025044:	51e2b03a 	or	r17,r10,r7
 8025048:	280ac03a 	cmpne	r5,r5,zero
 802504c:	8962b03a 	or	r17,r17,r5
 8025050:	89a3883a 	add	r17,r17,r6
 8025054:	2253883a 	add	r9,r4,r9
 8025058:	898d803a 	cmpltu	r6,r17,r6
 802505c:	3251883a 	add	r8,r6,r9
 8025060:	1021883a 	mov	r16,r2
 8025064:	003ee506 	br	8024bfc <__alt_data_end+0xfffec55c>
 8025068:	4984b03a 	or	r2,r9,r6
 802506c:	103e6326 	beq	r2,zero,80249fc <__alt_data_end+0xfffec35c>
 8025070:	8987c83a 	sub	r3,r17,r6
 8025074:	88c9803a 	cmpltu	r4,r17,r3
 8025078:	4245c83a 	sub	r2,r8,r9
 802507c:	1105c83a 	sub	r2,r2,r4
 8025080:	1100202c 	andhi	r4,r2,128
 8025084:	203ebb26 	beq	r4,zero,8024b74 <__alt_data_end+0xfffec4d4>
 8025088:	3463c83a 	sub	r17,r6,r17
 802508c:	4a07c83a 	sub	r3,r9,r8
 8025090:	344d803a 	cmpltu	r6,r6,r17
 8025094:	1991c83a 	sub	r8,r3,r6
 8025098:	3825883a 	mov	r18,r7
 802509c:	003e5706 	br	80249fc <__alt_data_end+0xfffec35c>
 80250a0:	4984b03a 	or	r2,r9,r6
 80250a4:	10002e26 	beq	r2,zero,8025160 <__adddf3+0x7e0>
 80250a8:	4004d0fa 	srli	r2,r8,3
 80250ac:	8822d0fa 	srli	r17,r17,3
 80250b0:	4010977a 	slli	r8,r8,29
 80250b4:	10c0022c 	andhi	r3,r2,8
 80250b8:	4462b03a 	or	r17,r8,r17
 80250bc:	18000826 	beq	r3,zero,80250e0 <__adddf3+0x760>
 80250c0:	4808d0fa 	srli	r4,r9,3
 80250c4:	20c0022c 	andhi	r3,r4,8
 80250c8:	1800051e 	bne	r3,zero,80250e0 <__adddf3+0x760>
 80250cc:	300cd0fa 	srli	r6,r6,3
 80250d0:	4806977a 	slli	r3,r9,29
 80250d4:	2005883a 	mov	r2,r4
 80250d8:	3825883a 	mov	r18,r7
 80250dc:	19a2b03a 	or	r17,r3,r6
 80250e0:	8810d77a 	srli	r8,r17,29
 80250e4:	100490fa 	slli	r2,r2,3
 80250e8:	882290fa 	slli	r17,r17,3
 80250ec:	0401ffc4 	movi	r16,2047
 80250f0:	4090b03a 	or	r8,r8,r2
 80250f4:	003e4106 	br	80249fc <__alt_data_end+0xfffec35c>
 80250f8:	0141ffc4 	movi	r5,2047
 80250fc:	117fc71e 	bne	r2,r5,802501c <__alt_data_end+0xfffec97c>
 8025100:	4811883a 	mov	r8,r9
 8025104:	3023883a 	mov	r17,r6
 8025108:	1021883a 	mov	r16,r2
 802510c:	003e3b06 	br	80249fc <__alt_data_end+0xfffec35c>
 8025110:	10002f26 	beq	r2,zero,80251d0 <__adddf3+0x850>
 8025114:	4984b03a 	or	r2,r9,r6
 8025118:	10001126 	beq	r2,zero,8025160 <__adddf3+0x7e0>
 802511c:	4004d0fa 	srli	r2,r8,3
 8025120:	8822d0fa 	srli	r17,r17,3
 8025124:	4010977a 	slli	r8,r8,29
 8025128:	10c0022c 	andhi	r3,r2,8
 802512c:	4462b03a 	or	r17,r8,r17
 8025130:	183feb26 	beq	r3,zero,80250e0 <__alt_data_end+0xfffeca40>
 8025134:	4808d0fa 	srli	r4,r9,3
 8025138:	20c0022c 	andhi	r3,r4,8
 802513c:	183fe81e 	bne	r3,zero,80250e0 <__alt_data_end+0xfffeca40>
 8025140:	300cd0fa 	srli	r6,r6,3
 8025144:	4806977a 	slli	r3,r9,29
 8025148:	2005883a 	mov	r2,r4
 802514c:	19a2b03a 	or	r17,r3,r6
 8025150:	003fe306 	br	80250e0 <__alt_data_end+0xfffeca40>
 8025154:	0011883a 	mov	r8,zero
 8025158:	0005883a 	mov	r2,zero
 802515c:	003e3f06 	br	8024a5c <__alt_data_end+0xfffec3bc>
 8025160:	0401ffc4 	movi	r16,2047
 8025164:	003e2506 	br	80249fc <__alt_data_end+0xfffec35c>
 8025168:	0013883a 	mov	r9,zero
 802516c:	003f8406 	br	8024f80 <__alt_data_end+0xfffec8e0>
 8025170:	0005883a 	mov	r2,zero
 8025174:	0007883a 	mov	r3,zero
 8025178:	003e8906 	br	8024ba0 <__alt_data_end+0xfffec500>
 802517c:	197ff804 	addi	r5,r3,-32
 8025180:	01000804 	movi	r4,32
 8025184:	414ad83a 	srl	r5,r8,r5
 8025188:	19002426 	beq	r3,r4,802521c <__adddf3+0x89c>
 802518c:	01001004 	movi	r4,64
 8025190:	20c7c83a 	sub	r3,r4,r3
 8025194:	40c6983a 	sll	r3,r8,r3
 8025198:	1c46b03a 	or	r3,r3,r17
 802519c:	1806c03a 	cmpne	r3,r3,zero
 80251a0:	28e2b03a 	or	r17,r5,r3
 80251a4:	0007883a 	mov	r3,zero
 80251a8:	003f2306 	br	8024e38 <__alt_data_end+0xfffec798>
 80251ac:	0007883a 	mov	r3,zero
 80251b0:	5811883a 	mov	r8,r11
 80251b4:	00bfffc4 	movi	r2,-1
 80251b8:	0401ffc4 	movi	r16,2047
 80251bc:	003e7806 	br	8024ba0 <__alt_data_end+0xfffec500>
 80251c0:	4462b03a 	or	r17,r8,r17
 80251c4:	8822c03a 	cmpne	r17,r17,zero
 80251c8:	0009883a 	mov	r4,zero
 80251cc:	003fa006 	br	8025050 <__alt_data_end+0xfffec9b0>
 80251d0:	4811883a 	mov	r8,r9
 80251d4:	3023883a 	mov	r17,r6
 80251d8:	0401ffc4 	movi	r16,2047
 80251dc:	003e0706 	br	80249fc <__alt_data_end+0xfffec35c>
 80251e0:	4811883a 	mov	r8,r9
 80251e4:	3023883a 	mov	r17,r6
 80251e8:	003e0406 	br	80249fc <__alt_data_end+0xfffec35c>
 80251ec:	21fff804 	addi	r7,r4,-32
 80251f0:	01400804 	movi	r5,32
 80251f4:	41ced83a 	srl	r7,r8,r7
 80251f8:	21400a26 	beq	r4,r5,8025224 <__adddf3+0x8a4>
 80251fc:	01401004 	movi	r5,64
 8025200:	2909c83a 	sub	r4,r5,r4
 8025204:	4108983a 	sll	r4,r8,r4
 8025208:	2448b03a 	or	r4,r4,r17
 802520c:	2008c03a 	cmpne	r4,r4,zero
 8025210:	3922b03a 	or	r17,r7,r4
 8025214:	0009883a 	mov	r4,zero
 8025218:	003f8d06 	br	8025050 <__alt_data_end+0xfffec9b0>
 802521c:	0007883a 	mov	r3,zero
 8025220:	003fdd06 	br	8025198 <__alt_data_end+0xfffecaf8>
 8025224:	0009883a 	mov	r4,zero
 8025228:	003ff706 	br	8025208 <__alt_data_end+0xfffecb68>

0802522c <__eqdf2>:
 802522c:	2804d53a 	srli	r2,r5,20
 8025230:	3806d53a 	srli	r3,r7,20
 8025234:	02000434 	movhi	r8,16
 8025238:	423fffc4 	addi	r8,r8,-1
 802523c:	1081ffcc 	andi	r2,r2,2047
 8025240:	0281ffc4 	movi	r10,2047
 8025244:	2a12703a 	and	r9,r5,r8
 8025248:	18c1ffcc 	andi	r3,r3,2047
 802524c:	3a10703a 	and	r8,r7,r8
 8025250:	280ad7fa 	srli	r5,r5,31
 8025254:	380ed7fa 	srli	r7,r7,31
 8025258:	12801026 	beq	r2,r10,802529c <__eqdf2+0x70>
 802525c:	0281ffc4 	movi	r10,2047
 8025260:	1a800a26 	beq	r3,r10,802528c <__eqdf2+0x60>
 8025264:	10c00226 	beq	r2,r3,8025270 <__eqdf2+0x44>
 8025268:	00800044 	movi	r2,1
 802526c:	f800283a 	ret
 8025270:	4a3ffd1e 	bne	r9,r8,8025268 <__alt_data_end+0xfffecbc8>
 8025274:	21bffc1e 	bne	r4,r6,8025268 <__alt_data_end+0xfffecbc8>
 8025278:	29c00c26 	beq	r5,r7,80252ac <__eqdf2+0x80>
 802527c:	103ffa1e 	bne	r2,zero,8025268 <__alt_data_end+0xfffecbc8>
 8025280:	2244b03a 	or	r2,r4,r9
 8025284:	1004c03a 	cmpne	r2,r2,zero
 8025288:	f800283a 	ret
 802528c:	3214b03a 	or	r10,r6,r8
 8025290:	503ff426 	beq	r10,zero,8025264 <__alt_data_end+0xfffecbc4>
 8025294:	00800044 	movi	r2,1
 8025298:	f800283a 	ret
 802529c:	2254b03a 	or	r10,r4,r9
 80252a0:	503fee26 	beq	r10,zero,802525c <__alt_data_end+0xfffecbbc>
 80252a4:	00800044 	movi	r2,1
 80252a8:	f800283a 	ret
 80252ac:	0005883a 	mov	r2,zero
 80252b0:	f800283a 	ret

080252b4 <__gedf2>:
 80252b4:	2804d53a 	srli	r2,r5,20
 80252b8:	3806d53a 	srli	r3,r7,20
 80252bc:	02000434 	movhi	r8,16
 80252c0:	423fffc4 	addi	r8,r8,-1
 80252c4:	1081ffcc 	andi	r2,r2,2047
 80252c8:	0241ffc4 	movi	r9,2047
 80252cc:	2a14703a 	and	r10,r5,r8
 80252d0:	18c1ffcc 	andi	r3,r3,2047
 80252d4:	3a10703a 	and	r8,r7,r8
 80252d8:	280ad7fa 	srli	r5,r5,31
 80252dc:	380ed7fa 	srli	r7,r7,31
 80252e0:	12401d26 	beq	r2,r9,8025358 <__gedf2+0xa4>
 80252e4:	0241ffc4 	movi	r9,2047
 80252e8:	1a401226 	beq	r3,r9,8025334 <__gedf2+0x80>
 80252ec:	1000081e 	bne	r2,zero,8025310 <__gedf2+0x5c>
 80252f0:	2296b03a 	or	r11,r4,r10
 80252f4:	5813003a 	cmpeq	r9,r11,zero
 80252f8:	1800091e 	bne	r3,zero,8025320 <__gedf2+0x6c>
 80252fc:	3218b03a 	or	r12,r6,r8
 8025300:	6000071e 	bne	r12,zero,8025320 <__gedf2+0x6c>
 8025304:	0005883a 	mov	r2,zero
 8025308:	5800101e 	bne	r11,zero,802534c <__gedf2+0x98>
 802530c:	f800283a 	ret
 8025310:	18000c1e 	bne	r3,zero,8025344 <__gedf2+0x90>
 8025314:	3212b03a 	or	r9,r6,r8
 8025318:	48000c26 	beq	r9,zero,802534c <__gedf2+0x98>
 802531c:	0013883a 	mov	r9,zero
 8025320:	39c03fcc 	andi	r7,r7,255
 8025324:	48000826 	beq	r9,zero,8025348 <__gedf2+0x94>
 8025328:	38000926 	beq	r7,zero,8025350 <__gedf2+0x9c>
 802532c:	00800044 	movi	r2,1
 8025330:	f800283a 	ret
 8025334:	3212b03a 	or	r9,r6,r8
 8025338:	483fec26 	beq	r9,zero,80252ec <__alt_data_end+0xfffecc4c>
 802533c:	00bfff84 	movi	r2,-2
 8025340:	f800283a 	ret
 8025344:	39c03fcc 	andi	r7,r7,255
 8025348:	29c00626 	beq	r5,r7,8025364 <__gedf2+0xb0>
 802534c:	283ff726 	beq	r5,zero,802532c <__alt_data_end+0xfffecc8c>
 8025350:	00bfffc4 	movi	r2,-1
 8025354:	f800283a 	ret
 8025358:	2292b03a 	or	r9,r4,r10
 802535c:	483fe126 	beq	r9,zero,80252e4 <__alt_data_end+0xfffecc44>
 8025360:	003ff606 	br	802533c <__alt_data_end+0xfffecc9c>
 8025364:	18bff916 	blt	r3,r2,802534c <__alt_data_end+0xfffeccac>
 8025368:	10c00316 	blt	r2,r3,8025378 <__gedf2+0xc4>
 802536c:	42bff736 	bltu	r8,r10,802534c <__alt_data_end+0xfffeccac>
 8025370:	52000326 	beq	r10,r8,8025380 <__gedf2+0xcc>
 8025374:	5200042e 	bgeu	r10,r8,8025388 <__gedf2+0xd4>
 8025378:	283fec1e 	bne	r5,zero,802532c <__alt_data_end+0xfffecc8c>
 802537c:	003ff406 	br	8025350 <__alt_data_end+0xfffeccb0>
 8025380:	313ff236 	bltu	r6,r4,802534c <__alt_data_end+0xfffeccac>
 8025384:	21bffc36 	bltu	r4,r6,8025378 <__alt_data_end+0xfffeccd8>
 8025388:	0005883a 	mov	r2,zero
 802538c:	f800283a 	ret

08025390 <__muldf3>:
 8025390:	defff304 	addi	sp,sp,-52
 8025394:	2804d53a 	srli	r2,r5,20
 8025398:	dd800915 	stw	r22,36(sp)
 802539c:	282cd7fa 	srli	r22,r5,31
 80253a0:	dc000315 	stw	r16,12(sp)
 80253a4:	04000434 	movhi	r16,16
 80253a8:	dd400815 	stw	r21,32(sp)
 80253ac:	dc800515 	stw	r18,20(sp)
 80253b0:	843fffc4 	addi	r16,r16,-1
 80253b4:	dfc00c15 	stw	ra,48(sp)
 80253b8:	df000b15 	stw	fp,44(sp)
 80253bc:	ddc00a15 	stw	r23,40(sp)
 80253c0:	dd000715 	stw	r20,28(sp)
 80253c4:	dcc00615 	stw	r19,24(sp)
 80253c8:	dc400415 	stw	r17,16(sp)
 80253cc:	1481ffcc 	andi	r18,r2,2047
 80253d0:	2c20703a 	and	r16,r5,r16
 80253d4:	b02b883a 	mov	r21,r22
 80253d8:	b2403fcc 	andi	r9,r22,255
 80253dc:	90006026 	beq	r18,zero,8025560 <__muldf3+0x1d0>
 80253e0:	0081ffc4 	movi	r2,2047
 80253e4:	2029883a 	mov	r20,r4
 80253e8:	90803626 	beq	r18,r2,80254c4 <__muldf3+0x134>
 80253ec:	80800434 	orhi	r2,r16,16
 80253f0:	100490fa 	slli	r2,r2,3
 80253f4:	2020d77a 	srli	r16,r4,29
 80253f8:	202890fa 	slli	r20,r4,3
 80253fc:	94bf0044 	addi	r18,r18,-1023
 8025400:	80a0b03a 	or	r16,r16,r2
 8025404:	0027883a 	mov	r19,zero
 8025408:	0039883a 	mov	fp,zero
 802540c:	3804d53a 	srli	r2,r7,20
 8025410:	382ed7fa 	srli	r23,r7,31
 8025414:	04400434 	movhi	r17,16
 8025418:	8c7fffc4 	addi	r17,r17,-1
 802541c:	1081ffcc 	andi	r2,r2,2047
 8025420:	3011883a 	mov	r8,r6
 8025424:	3c62703a 	and	r17,r7,r17
 8025428:	ba803fcc 	andi	r10,r23,255
 802542c:	10006d26 	beq	r2,zero,80255e4 <__muldf3+0x254>
 8025430:	00c1ffc4 	movi	r3,2047
 8025434:	10c06526 	beq	r2,r3,80255cc <__muldf3+0x23c>
 8025438:	88c00434 	orhi	r3,r17,16
 802543c:	180690fa 	slli	r3,r3,3
 8025440:	3022d77a 	srli	r17,r6,29
 8025444:	301090fa 	slli	r8,r6,3
 8025448:	10bf0044 	addi	r2,r2,-1023
 802544c:	88e2b03a 	or	r17,r17,r3
 8025450:	000b883a 	mov	r5,zero
 8025454:	9085883a 	add	r2,r18,r2
 8025458:	2cc8b03a 	or	r4,r5,r19
 802545c:	00c003c4 	movi	r3,15
 8025460:	bdacf03a 	xor	r22,r23,r22
 8025464:	12c00044 	addi	r11,r2,1
 8025468:	19009936 	bltu	r3,r4,80256d0 <__muldf3+0x340>
 802546c:	200890ba 	slli	r4,r4,2
 8025470:	00c200b4 	movhi	r3,2050
 8025474:	18d52104 	addi	r3,r3,21636
 8025478:	20c9883a 	add	r4,r4,r3
 802547c:	20c00017 	ldw	r3,0(r4)
 8025480:	1800683a 	jmp	r3
 8025484:	080256d0 	cmplti	zero,at,2395
 8025488:	080254e4 	muli	zero,at,2387
 802548c:	080254e4 	muli	zero,at,2387
 8025490:	080254e0 	cmpeqi	zero,at,2387
 8025494:	080256ac 	andhi	zero,at,2394
 8025498:	080256ac 	andhi	zero,at,2394
 802549c:	08025694 	ori	zero,at,2394
 80254a0:	080254e0 	cmpeqi	zero,at,2387
 80254a4:	080256ac 	andhi	zero,at,2394
 80254a8:	08025694 	ori	zero,at,2394
 80254ac:	080256ac 	andhi	zero,at,2394
 80254b0:	080254e0 	cmpeqi	zero,at,2387
 80254b4:	080256bc 	xorhi	zero,at,2394
 80254b8:	080256bc 	xorhi	zero,at,2394
 80254bc:	080256bc 	xorhi	zero,at,2394
 80254c0:	080258d8 	cmpnei	zero,at,2403
 80254c4:	2404b03a 	or	r2,r4,r16
 80254c8:	10006f1e 	bne	r2,zero,8025688 <__muldf3+0x2f8>
 80254cc:	04c00204 	movi	r19,8
 80254d0:	0021883a 	mov	r16,zero
 80254d4:	0029883a 	mov	r20,zero
 80254d8:	07000084 	movi	fp,2
 80254dc:	003fcb06 	br	802540c <__alt_data_end+0xfffecd6c>
 80254e0:	502d883a 	mov	r22,r10
 80254e4:	00800084 	movi	r2,2
 80254e8:	28805726 	beq	r5,r2,8025648 <__muldf3+0x2b8>
 80254ec:	008000c4 	movi	r2,3
 80254f0:	28816626 	beq	r5,r2,8025a8c <__muldf3+0x6fc>
 80254f4:	00800044 	movi	r2,1
 80254f8:	2881411e 	bne	r5,r2,8025a00 <__muldf3+0x670>
 80254fc:	b02b883a 	mov	r21,r22
 8025500:	0005883a 	mov	r2,zero
 8025504:	000b883a 	mov	r5,zero
 8025508:	0029883a 	mov	r20,zero
 802550c:	1004953a 	slli	r2,r2,20
 8025510:	a8c03fcc 	andi	r3,r21,255
 8025514:	04400434 	movhi	r17,16
 8025518:	8c7fffc4 	addi	r17,r17,-1
 802551c:	180697fa 	slli	r3,r3,31
 8025520:	2c4a703a 	and	r5,r5,r17
 8025524:	288ab03a 	or	r5,r5,r2
 8025528:	28c6b03a 	or	r3,r5,r3
 802552c:	a005883a 	mov	r2,r20
 8025530:	dfc00c17 	ldw	ra,48(sp)
 8025534:	df000b17 	ldw	fp,44(sp)
 8025538:	ddc00a17 	ldw	r23,40(sp)
 802553c:	dd800917 	ldw	r22,36(sp)
 8025540:	dd400817 	ldw	r21,32(sp)
 8025544:	dd000717 	ldw	r20,28(sp)
 8025548:	dcc00617 	ldw	r19,24(sp)
 802554c:	dc800517 	ldw	r18,20(sp)
 8025550:	dc400417 	ldw	r17,16(sp)
 8025554:	dc000317 	ldw	r16,12(sp)
 8025558:	dec00d04 	addi	sp,sp,52
 802555c:	f800283a 	ret
 8025560:	2404b03a 	or	r2,r4,r16
 8025564:	2027883a 	mov	r19,r4
 8025568:	10004226 	beq	r2,zero,8025674 <__muldf3+0x2e4>
 802556c:	8000fc26 	beq	r16,zero,8025960 <__muldf3+0x5d0>
 8025570:	8009883a 	mov	r4,r16
 8025574:	d9800215 	stw	r6,8(sp)
 8025578:	d9c00015 	stw	r7,0(sp)
 802557c:	da400115 	stw	r9,4(sp)
 8025580:	80266100 	call	8026610 <__clzsi2>
 8025584:	d9800217 	ldw	r6,8(sp)
 8025588:	d9c00017 	ldw	r7,0(sp)
 802558c:	da400117 	ldw	r9,4(sp)
 8025590:	113ffd44 	addi	r4,r2,-11
 8025594:	00c00704 	movi	r3,28
 8025598:	1900ed16 	blt	r3,r4,8025950 <__muldf3+0x5c0>
 802559c:	00c00744 	movi	r3,29
 80255a0:	147ffe04 	addi	r17,r2,-8
 80255a4:	1907c83a 	sub	r3,r3,r4
 80255a8:	8460983a 	sll	r16,r16,r17
 80255ac:	98c6d83a 	srl	r3,r19,r3
 80255b0:	9c68983a 	sll	r20,r19,r17
 80255b4:	1c20b03a 	or	r16,r3,r16
 80255b8:	1080fcc4 	addi	r2,r2,1011
 80255bc:	00a5c83a 	sub	r18,zero,r2
 80255c0:	0027883a 	mov	r19,zero
 80255c4:	0039883a 	mov	fp,zero
 80255c8:	003f9006 	br	802540c <__alt_data_end+0xfffecd6c>
 80255cc:	3446b03a 	or	r3,r6,r17
 80255d0:	1800261e 	bne	r3,zero,802566c <__muldf3+0x2dc>
 80255d4:	0023883a 	mov	r17,zero
 80255d8:	0011883a 	mov	r8,zero
 80255dc:	01400084 	movi	r5,2
 80255e0:	003f9c06 	br	8025454 <__alt_data_end+0xfffecdb4>
 80255e4:	3446b03a 	or	r3,r6,r17
 80255e8:	18001c26 	beq	r3,zero,802565c <__muldf3+0x2cc>
 80255ec:	8800ce26 	beq	r17,zero,8025928 <__muldf3+0x598>
 80255f0:	8809883a 	mov	r4,r17
 80255f4:	d9800215 	stw	r6,8(sp)
 80255f8:	da400115 	stw	r9,4(sp)
 80255fc:	da800015 	stw	r10,0(sp)
 8025600:	80266100 	call	8026610 <__clzsi2>
 8025604:	d9800217 	ldw	r6,8(sp)
 8025608:	da400117 	ldw	r9,4(sp)
 802560c:	da800017 	ldw	r10,0(sp)
 8025610:	113ffd44 	addi	r4,r2,-11
 8025614:	00c00704 	movi	r3,28
 8025618:	1900bf16 	blt	r3,r4,8025918 <__muldf3+0x588>
 802561c:	00c00744 	movi	r3,29
 8025620:	123ffe04 	addi	r8,r2,-8
 8025624:	1907c83a 	sub	r3,r3,r4
 8025628:	8a22983a 	sll	r17,r17,r8
 802562c:	30c6d83a 	srl	r3,r6,r3
 8025630:	3210983a 	sll	r8,r6,r8
 8025634:	1c62b03a 	or	r17,r3,r17
 8025638:	1080fcc4 	addi	r2,r2,1011
 802563c:	0085c83a 	sub	r2,zero,r2
 8025640:	000b883a 	mov	r5,zero
 8025644:	003f8306 	br	8025454 <__alt_data_end+0xfffecdb4>
 8025648:	b02b883a 	mov	r21,r22
 802564c:	0081ffc4 	movi	r2,2047
 8025650:	000b883a 	mov	r5,zero
 8025654:	0029883a 	mov	r20,zero
 8025658:	003fac06 	br	802550c <__alt_data_end+0xfffece6c>
 802565c:	0023883a 	mov	r17,zero
 8025660:	0011883a 	mov	r8,zero
 8025664:	01400044 	movi	r5,1
 8025668:	003f7a06 	br	8025454 <__alt_data_end+0xfffecdb4>
 802566c:	014000c4 	movi	r5,3
 8025670:	003f7806 	br	8025454 <__alt_data_end+0xfffecdb4>
 8025674:	04c00104 	movi	r19,4
 8025678:	0021883a 	mov	r16,zero
 802567c:	0029883a 	mov	r20,zero
 8025680:	07000044 	movi	fp,1
 8025684:	003f6106 	br	802540c <__alt_data_end+0xfffecd6c>
 8025688:	04c00304 	movi	r19,12
 802568c:	070000c4 	movi	fp,3
 8025690:	003f5e06 	br	802540c <__alt_data_end+0xfffecd6c>
 8025694:	01400434 	movhi	r5,16
 8025698:	002b883a 	mov	r21,zero
 802569c:	297fffc4 	addi	r5,r5,-1
 80256a0:	053fffc4 	movi	r20,-1
 80256a4:	0081ffc4 	movi	r2,2047
 80256a8:	003f9806 	br	802550c <__alt_data_end+0xfffece6c>
 80256ac:	8023883a 	mov	r17,r16
 80256b0:	a011883a 	mov	r8,r20
 80256b4:	e00b883a 	mov	r5,fp
 80256b8:	003f8a06 	br	80254e4 <__alt_data_end+0xfffece44>
 80256bc:	8023883a 	mov	r17,r16
 80256c0:	a011883a 	mov	r8,r20
 80256c4:	482d883a 	mov	r22,r9
 80256c8:	e00b883a 	mov	r5,fp
 80256cc:	003f8506 	br	80254e4 <__alt_data_end+0xfffece44>
 80256d0:	a00ad43a 	srli	r5,r20,16
 80256d4:	401ad43a 	srli	r13,r8,16
 80256d8:	a53fffcc 	andi	r20,r20,65535
 80256dc:	423fffcc 	andi	r8,r8,65535
 80256e0:	4519383a 	mul	r12,r8,r20
 80256e4:	4147383a 	mul	r3,r8,r5
 80256e8:	6d09383a 	mul	r4,r13,r20
 80256ec:	600cd43a 	srli	r6,r12,16
 80256f0:	2b5d383a 	mul	r14,r5,r13
 80256f4:	20c9883a 	add	r4,r4,r3
 80256f8:	310d883a 	add	r6,r6,r4
 80256fc:	30c0022e 	bgeu	r6,r3,8025708 <__muldf3+0x378>
 8025700:	00c00074 	movhi	r3,1
 8025704:	70dd883a 	add	r14,r14,r3
 8025708:	8826d43a 	srli	r19,r17,16
 802570c:	8bffffcc 	andi	r15,r17,65535
 8025710:	7d23383a 	mul	r17,r15,r20
 8025714:	7949383a 	mul	r4,r15,r5
 8025718:	9d29383a 	mul	r20,r19,r20
 802571c:	8814d43a 	srli	r10,r17,16
 8025720:	3012943a 	slli	r9,r6,16
 8025724:	a129883a 	add	r20,r20,r4
 8025728:	633fffcc 	andi	r12,r12,65535
 802572c:	5515883a 	add	r10,r10,r20
 8025730:	3006d43a 	srli	r3,r6,16
 8025734:	4b13883a 	add	r9,r9,r12
 8025738:	2ccb383a 	mul	r5,r5,r19
 802573c:	5100022e 	bgeu	r10,r4,8025748 <__muldf3+0x3b8>
 8025740:	01000074 	movhi	r4,1
 8025744:	290b883a 	add	r5,r5,r4
 8025748:	802ad43a 	srli	r21,r16,16
 802574c:	843fffcc 	andi	r16,r16,65535
 8025750:	440d383a 	mul	r6,r8,r16
 8025754:	4565383a 	mul	r18,r8,r21
 8025758:	8349383a 	mul	r4,r16,r13
 802575c:	500e943a 	slli	r7,r10,16
 8025760:	3010d43a 	srli	r8,r6,16
 8025764:	5028d43a 	srli	r20,r10,16
 8025768:	2489883a 	add	r4,r4,r18
 802576c:	8abfffcc 	andi	r10,r17,65535
 8025770:	3a95883a 	add	r10,r7,r10
 8025774:	4119883a 	add	r12,r8,r4
 8025778:	a169883a 	add	r20,r20,r5
 802577c:	1a87883a 	add	r3,r3,r10
 8025780:	6d5b383a 	mul	r13,r13,r21
 8025784:	6480022e 	bgeu	r12,r18,8025790 <__muldf3+0x400>
 8025788:	01000074 	movhi	r4,1
 802578c:	691b883a 	add	r13,r13,r4
 8025790:	7c25383a 	mul	r18,r15,r16
 8025794:	7d4b383a 	mul	r5,r15,r21
 8025798:	84cf383a 	mul	r7,r16,r19
 802579c:	901ed43a 	srli	r15,r18,16
 80257a0:	6008d43a 	srli	r4,r12,16
 80257a4:	6010943a 	slli	r8,r12,16
 80257a8:	394f883a 	add	r7,r7,r5
 80257ac:	333fffcc 	andi	r12,r6,65535
 80257b0:	79df883a 	add	r15,r15,r7
 80257b4:	235b883a 	add	r13,r4,r13
 80257b8:	9d63383a 	mul	r17,r19,r21
 80257bc:	4309883a 	add	r4,r8,r12
 80257c0:	7940022e 	bgeu	r15,r5,80257cc <__muldf3+0x43c>
 80257c4:	01400074 	movhi	r5,1
 80257c8:	8963883a 	add	r17,r17,r5
 80257cc:	780a943a 	slli	r5,r15,16
 80257d0:	91bfffcc 	andi	r6,r18,65535
 80257d4:	70c7883a 	add	r3,r14,r3
 80257d8:	298d883a 	add	r6,r5,r6
 80257dc:	1a8f803a 	cmpltu	r7,r3,r10
 80257e0:	350b883a 	add	r5,r6,r20
 80257e4:	20c7883a 	add	r3,r4,r3
 80257e8:	3955883a 	add	r10,r7,r5
 80257ec:	1909803a 	cmpltu	r4,r3,r4
 80257f0:	6a91883a 	add	r8,r13,r10
 80257f4:	780cd43a 	srli	r6,r15,16
 80257f8:	2219883a 	add	r12,r4,r8
 80257fc:	2d0b803a 	cmpltu	r5,r5,r20
 8025800:	51cf803a 	cmpltu	r7,r10,r7
 8025804:	29ceb03a 	or	r7,r5,r7
 8025808:	4351803a 	cmpltu	r8,r8,r13
 802580c:	610b803a 	cmpltu	r5,r12,r4
 8025810:	4148b03a 	or	r4,r8,r5
 8025814:	398f883a 	add	r7,r7,r6
 8025818:	3909883a 	add	r4,r7,r4
 802581c:	1810927a 	slli	r8,r3,9
 8025820:	2449883a 	add	r4,r4,r17
 8025824:	2008927a 	slli	r4,r4,9
 8025828:	6022d5fa 	srli	r17,r12,23
 802582c:	1806d5fa 	srli	r3,r3,23
 8025830:	4252b03a 	or	r9,r8,r9
 8025834:	600a927a 	slli	r5,r12,9
 8025838:	4810c03a 	cmpne	r8,r9,zero
 802583c:	2462b03a 	or	r17,r4,r17
 8025840:	40c6b03a 	or	r3,r8,r3
 8025844:	8900402c 	andhi	r4,r17,256
 8025848:	1950b03a 	or	r8,r3,r5
 802584c:	20000726 	beq	r4,zero,802586c <__muldf3+0x4dc>
 8025850:	4006d07a 	srli	r3,r8,1
 8025854:	880497fa 	slli	r2,r17,31
 8025858:	4200004c 	andi	r8,r8,1
 802585c:	8822d07a 	srli	r17,r17,1
 8025860:	1a10b03a 	or	r8,r3,r8
 8025864:	1210b03a 	or	r8,r2,r8
 8025868:	5805883a 	mov	r2,r11
 802586c:	1140ffc4 	addi	r5,r2,1023
 8025870:	0140440e 	bge	zero,r5,8025984 <__muldf3+0x5f4>
 8025874:	40c001cc 	andi	r3,r8,7
 8025878:	18000726 	beq	r3,zero,8025898 <__muldf3+0x508>
 802587c:	40c003cc 	andi	r3,r8,15
 8025880:	01000104 	movi	r4,4
 8025884:	19000426 	beq	r3,r4,8025898 <__muldf3+0x508>
 8025888:	4107883a 	add	r3,r8,r4
 802588c:	1a11803a 	cmpltu	r8,r3,r8
 8025890:	8a23883a 	add	r17,r17,r8
 8025894:	1811883a 	mov	r8,r3
 8025898:	88c0402c 	andhi	r3,r17,256
 802589c:	18000426 	beq	r3,zero,80258b0 <__muldf3+0x520>
 80258a0:	11410004 	addi	r5,r2,1024
 80258a4:	00bfc034 	movhi	r2,65280
 80258a8:	10bfffc4 	addi	r2,r2,-1
 80258ac:	88a2703a 	and	r17,r17,r2
 80258b0:	0081ff84 	movi	r2,2046
 80258b4:	117f6416 	blt	r2,r5,8025648 <__alt_data_end+0xfffecfa8>
 80258b8:	8828977a 	slli	r20,r17,29
 80258bc:	4010d0fa 	srli	r8,r8,3
 80258c0:	8822927a 	slli	r17,r17,9
 80258c4:	2881ffcc 	andi	r2,r5,2047
 80258c8:	a228b03a 	or	r20,r20,r8
 80258cc:	880ad33a 	srli	r5,r17,12
 80258d0:	b02b883a 	mov	r21,r22
 80258d4:	003f0d06 	br	802550c <__alt_data_end+0xfffece6c>
 80258d8:	8080022c 	andhi	r2,r16,8
 80258dc:	10000926 	beq	r2,zero,8025904 <__muldf3+0x574>
 80258e0:	8880022c 	andhi	r2,r17,8
 80258e4:	1000071e 	bne	r2,zero,8025904 <__muldf3+0x574>
 80258e8:	00800434 	movhi	r2,16
 80258ec:	89400234 	orhi	r5,r17,8
 80258f0:	10bfffc4 	addi	r2,r2,-1
 80258f4:	b82b883a 	mov	r21,r23
 80258f8:	288a703a 	and	r5,r5,r2
 80258fc:	4029883a 	mov	r20,r8
 8025900:	003f6806 	br	80256a4 <__alt_data_end+0xfffed004>
 8025904:	00800434 	movhi	r2,16
 8025908:	81400234 	orhi	r5,r16,8
 802590c:	10bfffc4 	addi	r2,r2,-1
 8025910:	288a703a 	and	r5,r5,r2
 8025914:	003f6306 	br	80256a4 <__alt_data_end+0xfffed004>
 8025918:	147ff604 	addi	r17,r2,-40
 802591c:	3462983a 	sll	r17,r6,r17
 8025920:	0011883a 	mov	r8,zero
 8025924:	003f4406 	br	8025638 <__alt_data_end+0xfffecf98>
 8025928:	3009883a 	mov	r4,r6
 802592c:	d9800215 	stw	r6,8(sp)
 8025930:	da400115 	stw	r9,4(sp)
 8025934:	da800015 	stw	r10,0(sp)
 8025938:	80266100 	call	8026610 <__clzsi2>
 802593c:	10800804 	addi	r2,r2,32
 8025940:	da800017 	ldw	r10,0(sp)
 8025944:	da400117 	ldw	r9,4(sp)
 8025948:	d9800217 	ldw	r6,8(sp)
 802594c:	003f3006 	br	8025610 <__alt_data_end+0xfffecf70>
 8025950:	143ff604 	addi	r16,r2,-40
 8025954:	9c20983a 	sll	r16,r19,r16
 8025958:	0029883a 	mov	r20,zero
 802595c:	003f1606 	br	80255b8 <__alt_data_end+0xfffecf18>
 8025960:	d9800215 	stw	r6,8(sp)
 8025964:	d9c00015 	stw	r7,0(sp)
 8025968:	da400115 	stw	r9,4(sp)
 802596c:	80266100 	call	8026610 <__clzsi2>
 8025970:	10800804 	addi	r2,r2,32
 8025974:	da400117 	ldw	r9,4(sp)
 8025978:	d9c00017 	ldw	r7,0(sp)
 802597c:	d9800217 	ldw	r6,8(sp)
 8025980:	003f0306 	br	8025590 <__alt_data_end+0xfffecef0>
 8025984:	00c00044 	movi	r3,1
 8025988:	1947c83a 	sub	r3,r3,r5
 802598c:	00800e04 	movi	r2,56
 8025990:	10feda16 	blt	r2,r3,80254fc <__alt_data_end+0xfffece5c>
 8025994:	008007c4 	movi	r2,31
 8025998:	10c01b16 	blt	r2,r3,8025a08 <__muldf3+0x678>
 802599c:	00800804 	movi	r2,32
 80259a0:	10c5c83a 	sub	r2,r2,r3
 80259a4:	888a983a 	sll	r5,r17,r2
 80259a8:	40c8d83a 	srl	r4,r8,r3
 80259ac:	4084983a 	sll	r2,r8,r2
 80259b0:	88e2d83a 	srl	r17,r17,r3
 80259b4:	2906b03a 	or	r3,r5,r4
 80259b8:	1004c03a 	cmpne	r2,r2,zero
 80259bc:	1886b03a 	or	r3,r3,r2
 80259c0:	188001cc 	andi	r2,r3,7
 80259c4:	10000726 	beq	r2,zero,80259e4 <__muldf3+0x654>
 80259c8:	188003cc 	andi	r2,r3,15
 80259cc:	01000104 	movi	r4,4
 80259d0:	11000426 	beq	r2,r4,80259e4 <__muldf3+0x654>
 80259d4:	1805883a 	mov	r2,r3
 80259d8:	10c00104 	addi	r3,r2,4
 80259dc:	1885803a 	cmpltu	r2,r3,r2
 80259e0:	88a3883a 	add	r17,r17,r2
 80259e4:	8880202c 	andhi	r2,r17,128
 80259e8:	10001c26 	beq	r2,zero,8025a5c <__muldf3+0x6cc>
 80259ec:	b02b883a 	mov	r21,r22
 80259f0:	00800044 	movi	r2,1
 80259f4:	000b883a 	mov	r5,zero
 80259f8:	0029883a 	mov	r20,zero
 80259fc:	003ec306 	br	802550c <__alt_data_end+0xfffece6c>
 8025a00:	5805883a 	mov	r2,r11
 8025a04:	003f9906 	br	802586c <__alt_data_end+0xfffed1cc>
 8025a08:	00bff844 	movi	r2,-31
 8025a0c:	1145c83a 	sub	r2,r2,r5
 8025a10:	8888d83a 	srl	r4,r17,r2
 8025a14:	00800804 	movi	r2,32
 8025a18:	18801a26 	beq	r3,r2,8025a84 <__muldf3+0x6f4>
 8025a1c:	00801004 	movi	r2,64
 8025a20:	10c5c83a 	sub	r2,r2,r3
 8025a24:	8884983a 	sll	r2,r17,r2
 8025a28:	1204b03a 	or	r2,r2,r8
 8025a2c:	1004c03a 	cmpne	r2,r2,zero
 8025a30:	2084b03a 	or	r2,r4,r2
 8025a34:	144001cc 	andi	r17,r2,7
 8025a38:	88000d1e 	bne	r17,zero,8025a70 <__muldf3+0x6e0>
 8025a3c:	000b883a 	mov	r5,zero
 8025a40:	1028d0fa 	srli	r20,r2,3
 8025a44:	b02b883a 	mov	r21,r22
 8025a48:	0005883a 	mov	r2,zero
 8025a4c:	a468b03a 	or	r20,r20,r17
 8025a50:	003eae06 	br	802550c <__alt_data_end+0xfffece6c>
 8025a54:	1007883a 	mov	r3,r2
 8025a58:	0023883a 	mov	r17,zero
 8025a5c:	880a927a 	slli	r5,r17,9
 8025a60:	1805883a 	mov	r2,r3
 8025a64:	8822977a 	slli	r17,r17,29
 8025a68:	280ad33a 	srli	r5,r5,12
 8025a6c:	003ff406 	br	8025a40 <__alt_data_end+0xfffed3a0>
 8025a70:	10c003cc 	andi	r3,r2,15
 8025a74:	01000104 	movi	r4,4
 8025a78:	193ff626 	beq	r3,r4,8025a54 <__alt_data_end+0xfffed3b4>
 8025a7c:	0023883a 	mov	r17,zero
 8025a80:	003fd506 	br	80259d8 <__alt_data_end+0xfffed338>
 8025a84:	0005883a 	mov	r2,zero
 8025a88:	003fe706 	br	8025a28 <__alt_data_end+0xfffed388>
 8025a8c:	00800434 	movhi	r2,16
 8025a90:	89400234 	orhi	r5,r17,8
 8025a94:	10bfffc4 	addi	r2,r2,-1
 8025a98:	b02b883a 	mov	r21,r22
 8025a9c:	288a703a 	and	r5,r5,r2
 8025aa0:	4029883a 	mov	r20,r8
 8025aa4:	003eff06 	br	80256a4 <__alt_data_end+0xfffed004>

08025aa8 <__subdf3>:
 8025aa8:	02000434 	movhi	r8,16
 8025aac:	423fffc4 	addi	r8,r8,-1
 8025ab0:	defffb04 	addi	sp,sp,-20
 8025ab4:	2a14703a 	and	r10,r5,r8
 8025ab8:	3812d53a 	srli	r9,r7,20
 8025abc:	3a10703a 	and	r8,r7,r8
 8025ac0:	2006d77a 	srli	r3,r4,29
 8025ac4:	3004d77a 	srli	r2,r6,29
 8025ac8:	dc000015 	stw	r16,0(sp)
 8025acc:	501490fa 	slli	r10,r10,3
 8025ad0:	2820d53a 	srli	r16,r5,20
 8025ad4:	401090fa 	slli	r8,r8,3
 8025ad8:	dc800215 	stw	r18,8(sp)
 8025adc:	dc400115 	stw	r17,4(sp)
 8025ae0:	dfc00415 	stw	ra,16(sp)
 8025ae4:	202290fa 	slli	r17,r4,3
 8025ae8:	dcc00315 	stw	r19,12(sp)
 8025aec:	4a41ffcc 	andi	r9,r9,2047
 8025af0:	0101ffc4 	movi	r4,2047
 8025af4:	2824d7fa 	srli	r18,r5,31
 8025af8:	8401ffcc 	andi	r16,r16,2047
 8025afc:	50c6b03a 	or	r3,r10,r3
 8025b00:	380ed7fa 	srli	r7,r7,31
 8025b04:	408ab03a 	or	r5,r8,r2
 8025b08:	300c90fa 	slli	r6,r6,3
 8025b0c:	49009626 	beq	r9,r4,8025d68 <__subdf3+0x2c0>
 8025b10:	39c0005c 	xori	r7,r7,1
 8025b14:	8245c83a 	sub	r2,r16,r9
 8025b18:	3c807426 	beq	r7,r18,8025cec <__subdf3+0x244>
 8025b1c:	0080af0e 	bge	zero,r2,8025ddc <__subdf3+0x334>
 8025b20:	48002a1e 	bne	r9,zero,8025bcc <__subdf3+0x124>
 8025b24:	2988b03a 	or	r4,r5,r6
 8025b28:	20009a1e 	bne	r4,zero,8025d94 <__subdf3+0x2ec>
 8025b2c:	888001cc 	andi	r2,r17,7
 8025b30:	10000726 	beq	r2,zero,8025b50 <__subdf3+0xa8>
 8025b34:	888003cc 	andi	r2,r17,15
 8025b38:	01000104 	movi	r4,4
 8025b3c:	11000426 	beq	r2,r4,8025b50 <__subdf3+0xa8>
 8025b40:	890b883a 	add	r5,r17,r4
 8025b44:	2c63803a 	cmpltu	r17,r5,r17
 8025b48:	1c47883a 	add	r3,r3,r17
 8025b4c:	2823883a 	mov	r17,r5
 8025b50:	1880202c 	andhi	r2,r3,128
 8025b54:	10005926 	beq	r2,zero,8025cbc <__subdf3+0x214>
 8025b58:	84000044 	addi	r16,r16,1
 8025b5c:	0081ffc4 	movi	r2,2047
 8025b60:	8080be26 	beq	r16,r2,8025e5c <__subdf3+0x3b4>
 8025b64:	017fe034 	movhi	r5,65408
 8025b68:	297fffc4 	addi	r5,r5,-1
 8025b6c:	1946703a 	and	r3,r3,r5
 8025b70:	1804977a 	slli	r2,r3,29
 8025b74:	1806927a 	slli	r3,r3,9
 8025b78:	8822d0fa 	srli	r17,r17,3
 8025b7c:	8401ffcc 	andi	r16,r16,2047
 8025b80:	180ad33a 	srli	r5,r3,12
 8025b84:	9100004c 	andi	r4,r18,1
 8025b88:	1444b03a 	or	r2,r2,r17
 8025b8c:	80c1ffcc 	andi	r3,r16,2047
 8025b90:	1820953a 	slli	r16,r3,20
 8025b94:	20c03fcc 	andi	r3,r4,255
 8025b98:	180897fa 	slli	r4,r3,31
 8025b9c:	00c00434 	movhi	r3,16
 8025ba0:	18ffffc4 	addi	r3,r3,-1
 8025ba4:	28c6703a 	and	r3,r5,r3
 8025ba8:	1c06b03a 	or	r3,r3,r16
 8025bac:	1906b03a 	or	r3,r3,r4
 8025bb0:	dfc00417 	ldw	ra,16(sp)
 8025bb4:	dcc00317 	ldw	r19,12(sp)
 8025bb8:	dc800217 	ldw	r18,8(sp)
 8025bbc:	dc400117 	ldw	r17,4(sp)
 8025bc0:	dc000017 	ldw	r16,0(sp)
 8025bc4:	dec00504 	addi	sp,sp,20
 8025bc8:	f800283a 	ret
 8025bcc:	0101ffc4 	movi	r4,2047
 8025bd0:	813fd626 	beq	r16,r4,8025b2c <__alt_data_end+0xfffed48c>
 8025bd4:	29402034 	orhi	r5,r5,128
 8025bd8:	01000e04 	movi	r4,56
 8025bdc:	2080a316 	blt	r4,r2,8025e6c <__subdf3+0x3c4>
 8025be0:	010007c4 	movi	r4,31
 8025be4:	2080c616 	blt	r4,r2,8025f00 <__subdf3+0x458>
 8025be8:	01000804 	movi	r4,32
 8025bec:	2089c83a 	sub	r4,r4,r2
 8025bf0:	2910983a 	sll	r8,r5,r4
 8025bf4:	308ed83a 	srl	r7,r6,r2
 8025bf8:	3108983a 	sll	r4,r6,r4
 8025bfc:	2884d83a 	srl	r2,r5,r2
 8025c00:	41ccb03a 	or	r6,r8,r7
 8025c04:	2008c03a 	cmpne	r4,r4,zero
 8025c08:	310cb03a 	or	r6,r6,r4
 8025c0c:	898dc83a 	sub	r6,r17,r6
 8025c10:	89a3803a 	cmpltu	r17,r17,r6
 8025c14:	1887c83a 	sub	r3,r3,r2
 8025c18:	1c47c83a 	sub	r3,r3,r17
 8025c1c:	3023883a 	mov	r17,r6
 8025c20:	1880202c 	andhi	r2,r3,128
 8025c24:	10002326 	beq	r2,zero,8025cb4 <__subdf3+0x20c>
 8025c28:	04c02034 	movhi	r19,128
 8025c2c:	9cffffc4 	addi	r19,r19,-1
 8025c30:	1ce6703a 	and	r19,r3,r19
 8025c34:	98007a26 	beq	r19,zero,8025e20 <__subdf3+0x378>
 8025c38:	9809883a 	mov	r4,r19
 8025c3c:	80266100 	call	8026610 <__clzsi2>
 8025c40:	113ffe04 	addi	r4,r2,-8
 8025c44:	00c007c4 	movi	r3,31
 8025c48:	19007b16 	blt	r3,r4,8025e38 <__subdf3+0x390>
 8025c4c:	00800804 	movi	r2,32
 8025c50:	1105c83a 	sub	r2,r2,r4
 8025c54:	8884d83a 	srl	r2,r17,r2
 8025c58:	9906983a 	sll	r3,r19,r4
 8025c5c:	8922983a 	sll	r17,r17,r4
 8025c60:	10c4b03a 	or	r2,r2,r3
 8025c64:	24007816 	blt	r4,r16,8025e48 <__subdf3+0x3a0>
 8025c68:	2421c83a 	sub	r16,r4,r16
 8025c6c:	80c00044 	addi	r3,r16,1
 8025c70:	010007c4 	movi	r4,31
 8025c74:	20c09516 	blt	r4,r3,8025ecc <__subdf3+0x424>
 8025c78:	01400804 	movi	r5,32
 8025c7c:	28cbc83a 	sub	r5,r5,r3
 8025c80:	88c8d83a 	srl	r4,r17,r3
 8025c84:	8962983a 	sll	r17,r17,r5
 8025c88:	114a983a 	sll	r5,r2,r5
 8025c8c:	10c6d83a 	srl	r3,r2,r3
 8025c90:	8804c03a 	cmpne	r2,r17,zero
 8025c94:	290ab03a 	or	r5,r5,r4
 8025c98:	28a2b03a 	or	r17,r5,r2
 8025c9c:	0021883a 	mov	r16,zero
 8025ca0:	003fa206 	br	8025b2c <__alt_data_end+0xfffed48c>
 8025ca4:	2090b03a 	or	r8,r4,r2
 8025ca8:	40018e26 	beq	r8,zero,80262e4 <__subdf3+0x83c>
 8025cac:	1007883a 	mov	r3,r2
 8025cb0:	2023883a 	mov	r17,r4
 8025cb4:	888001cc 	andi	r2,r17,7
 8025cb8:	103f9e1e 	bne	r2,zero,8025b34 <__alt_data_end+0xfffed494>
 8025cbc:	1804977a 	slli	r2,r3,29
 8025cc0:	8822d0fa 	srli	r17,r17,3
 8025cc4:	1810d0fa 	srli	r8,r3,3
 8025cc8:	9100004c 	andi	r4,r18,1
 8025ccc:	1444b03a 	or	r2,r2,r17
 8025cd0:	00c1ffc4 	movi	r3,2047
 8025cd4:	80c02826 	beq	r16,r3,8025d78 <__subdf3+0x2d0>
 8025cd8:	01400434 	movhi	r5,16
 8025cdc:	297fffc4 	addi	r5,r5,-1
 8025ce0:	80e0703a 	and	r16,r16,r3
 8025ce4:	414a703a 	and	r5,r8,r5
 8025ce8:	003fa806 	br	8025b8c <__alt_data_end+0xfffed4ec>
 8025cec:	0080630e 	bge	zero,r2,8025e7c <__subdf3+0x3d4>
 8025cf0:	48003026 	beq	r9,zero,8025db4 <__subdf3+0x30c>
 8025cf4:	0101ffc4 	movi	r4,2047
 8025cf8:	813f8c26 	beq	r16,r4,8025b2c <__alt_data_end+0xfffed48c>
 8025cfc:	29402034 	orhi	r5,r5,128
 8025d00:	01000e04 	movi	r4,56
 8025d04:	2080a90e 	bge	r4,r2,8025fac <__subdf3+0x504>
 8025d08:	298cb03a 	or	r6,r5,r6
 8025d0c:	3012c03a 	cmpne	r9,r6,zero
 8025d10:	0005883a 	mov	r2,zero
 8025d14:	4c53883a 	add	r9,r9,r17
 8025d18:	4c63803a 	cmpltu	r17,r9,r17
 8025d1c:	10c7883a 	add	r3,r2,r3
 8025d20:	88c7883a 	add	r3,r17,r3
 8025d24:	4823883a 	mov	r17,r9
 8025d28:	1880202c 	andhi	r2,r3,128
 8025d2c:	1000d026 	beq	r2,zero,8026070 <__subdf3+0x5c8>
 8025d30:	84000044 	addi	r16,r16,1
 8025d34:	0081ffc4 	movi	r2,2047
 8025d38:	8080fe26 	beq	r16,r2,8026134 <__subdf3+0x68c>
 8025d3c:	00bfe034 	movhi	r2,65408
 8025d40:	10bfffc4 	addi	r2,r2,-1
 8025d44:	1886703a 	and	r3,r3,r2
 8025d48:	880ad07a 	srli	r5,r17,1
 8025d4c:	180497fa 	slli	r2,r3,31
 8025d50:	8900004c 	andi	r4,r17,1
 8025d54:	2922b03a 	or	r17,r5,r4
 8025d58:	1806d07a 	srli	r3,r3,1
 8025d5c:	1462b03a 	or	r17,r2,r17
 8025d60:	3825883a 	mov	r18,r7
 8025d64:	003f7106 	br	8025b2c <__alt_data_end+0xfffed48c>
 8025d68:	2984b03a 	or	r2,r5,r6
 8025d6c:	103f6826 	beq	r2,zero,8025b10 <__alt_data_end+0xfffed470>
 8025d70:	39c03fcc 	andi	r7,r7,255
 8025d74:	003f6706 	br	8025b14 <__alt_data_end+0xfffed474>
 8025d78:	4086b03a 	or	r3,r8,r2
 8025d7c:	18015226 	beq	r3,zero,80262c8 <__subdf3+0x820>
 8025d80:	00c00434 	movhi	r3,16
 8025d84:	41400234 	orhi	r5,r8,8
 8025d88:	18ffffc4 	addi	r3,r3,-1
 8025d8c:	28ca703a 	and	r5,r5,r3
 8025d90:	003f7e06 	br	8025b8c <__alt_data_end+0xfffed4ec>
 8025d94:	10bfffc4 	addi	r2,r2,-1
 8025d98:	1000491e 	bne	r2,zero,8025ec0 <__subdf3+0x418>
 8025d9c:	898fc83a 	sub	r7,r17,r6
 8025da0:	89e3803a 	cmpltu	r17,r17,r7
 8025da4:	1947c83a 	sub	r3,r3,r5
 8025da8:	1c47c83a 	sub	r3,r3,r17
 8025dac:	3823883a 	mov	r17,r7
 8025db0:	003f9b06 	br	8025c20 <__alt_data_end+0xfffed580>
 8025db4:	2988b03a 	or	r4,r5,r6
 8025db8:	203f5c26 	beq	r4,zero,8025b2c <__alt_data_end+0xfffed48c>
 8025dbc:	10bfffc4 	addi	r2,r2,-1
 8025dc0:	1000931e 	bne	r2,zero,8026010 <__subdf3+0x568>
 8025dc4:	898d883a 	add	r6,r17,r6
 8025dc8:	3463803a 	cmpltu	r17,r6,r17
 8025dcc:	1947883a 	add	r3,r3,r5
 8025dd0:	88c7883a 	add	r3,r17,r3
 8025dd4:	3023883a 	mov	r17,r6
 8025dd8:	003fd306 	br	8025d28 <__alt_data_end+0xfffed688>
 8025ddc:	1000541e 	bne	r2,zero,8025f30 <__subdf3+0x488>
 8025de0:	80800044 	addi	r2,r16,1
 8025de4:	1081ffcc 	andi	r2,r2,2047
 8025de8:	01000044 	movi	r4,1
 8025dec:	2080a20e 	bge	r4,r2,8026078 <__subdf3+0x5d0>
 8025df0:	8989c83a 	sub	r4,r17,r6
 8025df4:	8905803a 	cmpltu	r2,r17,r4
 8025df8:	1967c83a 	sub	r19,r3,r5
 8025dfc:	98a7c83a 	sub	r19,r19,r2
 8025e00:	9880202c 	andhi	r2,r19,128
 8025e04:	10006326 	beq	r2,zero,8025f94 <__subdf3+0x4ec>
 8025e08:	3463c83a 	sub	r17,r6,r17
 8025e0c:	28c7c83a 	sub	r3,r5,r3
 8025e10:	344d803a 	cmpltu	r6,r6,r17
 8025e14:	19a7c83a 	sub	r19,r3,r6
 8025e18:	3825883a 	mov	r18,r7
 8025e1c:	983f861e 	bne	r19,zero,8025c38 <__alt_data_end+0xfffed598>
 8025e20:	8809883a 	mov	r4,r17
 8025e24:	80266100 	call	8026610 <__clzsi2>
 8025e28:	10800804 	addi	r2,r2,32
 8025e2c:	113ffe04 	addi	r4,r2,-8
 8025e30:	00c007c4 	movi	r3,31
 8025e34:	193f850e 	bge	r3,r4,8025c4c <__alt_data_end+0xfffed5ac>
 8025e38:	10bff604 	addi	r2,r2,-40
 8025e3c:	8884983a 	sll	r2,r17,r2
 8025e40:	0023883a 	mov	r17,zero
 8025e44:	243f880e 	bge	r4,r16,8025c68 <__alt_data_end+0xfffed5c8>
 8025e48:	00ffe034 	movhi	r3,65408
 8025e4c:	18ffffc4 	addi	r3,r3,-1
 8025e50:	8121c83a 	sub	r16,r16,r4
 8025e54:	10c6703a 	and	r3,r2,r3
 8025e58:	003f3406 	br	8025b2c <__alt_data_end+0xfffed48c>
 8025e5c:	9100004c 	andi	r4,r18,1
 8025e60:	000b883a 	mov	r5,zero
 8025e64:	0005883a 	mov	r2,zero
 8025e68:	003f4806 	br	8025b8c <__alt_data_end+0xfffed4ec>
 8025e6c:	298cb03a 	or	r6,r5,r6
 8025e70:	300cc03a 	cmpne	r6,r6,zero
 8025e74:	0005883a 	mov	r2,zero
 8025e78:	003f6406 	br	8025c0c <__alt_data_end+0xfffed56c>
 8025e7c:	10009a1e 	bne	r2,zero,80260e8 <__subdf3+0x640>
 8025e80:	82400044 	addi	r9,r16,1
 8025e84:	4881ffcc 	andi	r2,r9,2047
 8025e88:	02800044 	movi	r10,1
 8025e8c:	5080670e 	bge	r10,r2,802602c <__subdf3+0x584>
 8025e90:	0081ffc4 	movi	r2,2047
 8025e94:	4880af26 	beq	r9,r2,8026154 <__subdf3+0x6ac>
 8025e98:	898d883a 	add	r6,r17,r6
 8025e9c:	1945883a 	add	r2,r3,r5
 8025ea0:	3447803a 	cmpltu	r3,r6,r17
 8025ea4:	1887883a 	add	r3,r3,r2
 8025ea8:	182297fa 	slli	r17,r3,31
 8025eac:	300cd07a 	srli	r6,r6,1
 8025eb0:	1806d07a 	srli	r3,r3,1
 8025eb4:	4821883a 	mov	r16,r9
 8025eb8:	89a2b03a 	or	r17,r17,r6
 8025ebc:	003f1b06 	br	8025b2c <__alt_data_end+0xfffed48c>
 8025ec0:	0101ffc4 	movi	r4,2047
 8025ec4:	813f441e 	bne	r16,r4,8025bd8 <__alt_data_end+0xfffed538>
 8025ec8:	003f1806 	br	8025b2c <__alt_data_end+0xfffed48c>
 8025ecc:	843ff844 	addi	r16,r16,-31
 8025ed0:	01400804 	movi	r5,32
 8025ed4:	1408d83a 	srl	r4,r2,r16
 8025ed8:	19405026 	beq	r3,r5,802601c <__subdf3+0x574>
 8025edc:	01401004 	movi	r5,64
 8025ee0:	28c7c83a 	sub	r3,r5,r3
 8025ee4:	10c4983a 	sll	r2,r2,r3
 8025ee8:	88a2b03a 	or	r17,r17,r2
 8025eec:	8822c03a 	cmpne	r17,r17,zero
 8025ef0:	2462b03a 	or	r17,r4,r17
 8025ef4:	0007883a 	mov	r3,zero
 8025ef8:	0021883a 	mov	r16,zero
 8025efc:	003f6d06 	br	8025cb4 <__alt_data_end+0xfffed614>
 8025f00:	11fff804 	addi	r7,r2,-32
 8025f04:	01000804 	movi	r4,32
 8025f08:	29ced83a 	srl	r7,r5,r7
 8025f0c:	11004526 	beq	r2,r4,8026024 <__subdf3+0x57c>
 8025f10:	01001004 	movi	r4,64
 8025f14:	2089c83a 	sub	r4,r4,r2
 8025f18:	2904983a 	sll	r2,r5,r4
 8025f1c:	118cb03a 	or	r6,r2,r6
 8025f20:	300cc03a 	cmpne	r6,r6,zero
 8025f24:	398cb03a 	or	r6,r7,r6
 8025f28:	0005883a 	mov	r2,zero
 8025f2c:	003f3706 	br	8025c0c <__alt_data_end+0xfffed56c>
 8025f30:	80002a26 	beq	r16,zero,8025fdc <__subdf3+0x534>
 8025f34:	0101ffc4 	movi	r4,2047
 8025f38:	49006626 	beq	r9,r4,80260d4 <__subdf3+0x62c>
 8025f3c:	0085c83a 	sub	r2,zero,r2
 8025f40:	18c02034 	orhi	r3,r3,128
 8025f44:	01000e04 	movi	r4,56
 8025f48:	20807e16 	blt	r4,r2,8026144 <__subdf3+0x69c>
 8025f4c:	010007c4 	movi	r4,31
 8025f50:	2080e716 	blt	r4,r2,80262f0 <__subdf3+0x848>
 8025f54:	01000804 	movi	r4,32
 8025f58:	2089c83a 	sub	r4,r4,r2
 8025f5c:	1914983a 	sll	r10,r3,r4
 8025f60:	8890d83a 	srl	r8,r17,r2
 8025f64:	8908983a 	sll	r4,r17,r4
 8025f68:	1884d83a 	srl	r2,r3,r2
 8025f6c:	5222b03a 	or	r17,r10,r8
 8025f70:	2006c03a 	cmpne	r3,r4,zero
 8025f74:	88e2b03a 	or	r17,r17,r3
 8025f78:	3463c83a 	sub	r17,r6,r17
 8025f7c:	2885c83a 	sub	r2,r5,r2
 8025f80:	344d803a 	cmpltu	r6,r6,r17
 8025f84:	1187c83a 	sub	r3,r2,r6
 8025f88:	4821883a 	mov	r16,r9
 8025f8c:	3825883a 	mov	r18,r7
 8025f90:	003f2306 	br	8025c20 <__alt_data_end+0xfffed580>
 8025f94:	24d0b03a 	or	r8,r4,r19
 8025f98:	40001b1e 	bne	r8,zero,8026008 <__subdf3+0x560>
 8025f9c:	0005883a 	mov	r2,zero
 8025fa0:	0009883a 	mov	r4,zero
 8025fa4:	0021883a 	mov	r16,zero
 8025fa8:	003f4906 	br	8025cd0 <__alt_data_end+0xfffed630>
 8025fac:	010007c4 	movi	r4,31
 8025fb0:	20803a16 	blt	r4,r2,802609c <__subdf3+0x5f4>
 8025fb4:	01000804 	movi	r4,32
 8025fb8:	2089c83a 	sub	r4,r4,r2
 8025fbc:	2912983a 	sll	r9,r5,r4
 8025fc0:	3090d83a 	srl	r8,r6,r2
 8025fc4:	3108983a 	sll	r4,r6,r4
 8025fc8:	2884d83a 	srl	r2,r5,r2
 8025fcc:	4a12b03a 	or	r9,r9,r8
 8025fd0:	2008c03a 	cmpne	r4,r4,zero
 8025fd4:	4912b03a 	or	r9,r9,r4
 8025fd8:	003f4e06 	br	8025d14 <__alt_data_end+0xfffed674>
 8025fdc:	1c48b03a 	or	r4,r3,r17
 8025fe0:	20003c26 	beq	r4,zero,80260d4 <__subdf3+0x62c>
 8025fe4:	0084303a 	nor	r2,zero,r2
 8025fe8:	1000381e 	bne	r2,zero,80260cc <__subdf3+0x624>
 8025fec:	3463c83a 	sub	r17,r6,r17
 8025ff0:	28c5c83a 	sub	r2,r5,r3
 8025ff4:	344d803a 	cmpltu	r6,r6,r17
 8025ff8:	1187c83a 	sub	r3,r2,r6
 8025ffc:	4821883a 	mov	r16,r9
 8026000:	3825883a 	mov	r18,r7
 8026004:	003f0606 	br	8025c20 <__alt_data_end+0xfffed580>
 8026008:	2023883a 	mov	r17,r4
 802600c:	003f0906 	br	8025c34 <__alt_data_end+0xfffed594>
 8026010:	0101ffc4 	movi	r4,2047
 8026014:	813f3a1e 	bne	r16,r4,8025d00 <__alt_data_end+0xfffed660>
 8026018:	003ec406 	br	8025b2c <__alt_data_end+0xfffed48c>
 802601c:	0005883a 	mov	r2,zero
 8026020:	003fb106 	br	8025ee8 <__alt_data_end+0xfffed848>
 8026024:	0005883a 	mov	r2,zero
 8026028:	003fbc06 	br	8025f1c <__alt_data_end+0xfffed87c>
 802602c:	1c44b03a 	or	r2,r3,r17
 8026030:	80008e1e 	bne	r16,zero,802626c <__subdf3+0x7c4>
 8026034:	1000c826 	beq	r2,zero,8026358 <__subdf3+0x8b0>
 8026038:	2984b03a 	or	r2,r5,r6
 802603c:	103ebb26 	beq	r2,zero,8025b2c <__alt_data_end+0xfffed48c>
 8026040:	8989883a 	add	r4,r17,r6
 8026044:	1945883a 	add	r2,r3,r5
 8026048:	2447803a 	cmpltu	r3,r4,r17
 802604c:	1887883a 	add	r3,r3,r2
 8026050:	1880202c 	andhi	r2,r3,128
 8026054:	2023883a 	mov	r17,r4
 8026058:	103f1626 	beq	r2,zero,8025cb4 <__alt_data_end+0xfffed614>
 802605c:	00bfe034 	movhi	r2,65408
 8026060:	10bfffc4 	addi	r2,r2,-1
 8026064:	5021883a 	mov	r16,r10
 8026068:	1886703a 	and	r3,r3,r2
 802606c:	003eaf06 	br	8025b2c <__alt_data_end+0xfffed48c>
 8026070:	3825883a 	mov	r18,r7
 8026074:	003f0f06 	br	8025cb4 <__alt_data_end+0xfffed614>
 8026078:	1c44b03a 	or	r2,r3,r17
 802607c:	8000251e 	bne	r16,zero,8026114 <__subdf3+0x66c>
 8026080:	1000661e 	bne	r2,zero,802621c <__subdf3+0x774>
 8026084:	2990b03a 	or	r8,r5,r6
 8026088:	40009626 	beq	r8,zero,80262e4 <__subdf3+0x83c>
 802608c:	2807883a 	mov	r3,r5
 8026090:	3023883a 	mov	r17,r6
 8026094:	3825883a 	mov	r18,r7
 8026098:	003ea406 	br	8025b2c <__alt_data_end+0xfffed48c>
 802609c:	127ff804 	addi	r9,r2,-32
 80260a0:	01000804 	movi	r4,32
 80260a4:	2a52d83a 	srl	r9,r5,r9
 80260a8:	11008c26 	beq	r2,r4,80262dc <__subdf3+0x834>
 80260ac:	01001004 	movi	r4,64
 80260b0:	2085c83a 	sub	r2,r4,r2
 80260b4:	2884983a 	sll	r2,r5,r2
 80260b8:	118cb03a 	or	r6,r2,r6
 80260bc:	300cc03a 	cmpne	r6,r6,zero
 80260c0:	4992b03a 	or	r9,r9,r6
 80260c4:	0005883a 	mov	r2,zero
 80260c8:	003f1206 	br	8025d14 <__alt_data_end+0xfffed674>
 80260cc:	0101ffc4 	movi	r4,2047
 80260d0:	493f9c1e 	bne	r9,r4,8025f44 <__alt_data_end+0xfffed8a4>
 80260d4:	2807883a 	mov	r3,r5
 80260d8:	3023883a 	mov	r17,r6
 80260dc:	4821883a 	mov	r16,r9
 80260e0:	3825883a 	mov	r18,r7
 80260e4:	003e9106 	br	8025b2c <__alt_data_end+0xfffed48c>
 80260e8:	80001f1e 	bne	r16,zero,8026168 <__subdf3+0x6c0>
 80260ec:	1c48b03a 	or	r4,r3,r17
 80260f0:	20005a26 	beq	r4,zero,802625c <__subdf3+0x7b4>
 80260f4:	0084303a 	nor	r2,zero,r2
 80260f8:	1000561e 	bne	r2,zero,8026254 <__subdf3+0x7ac>
 80260fc:	89a3883a 	add	r17,r17,r6
 8026100:	1945883a 	add	r2,r3,r5
 8026104:	898d803a 	cmpltu	r6,r17,r6
 8026108:	3087883a 	add	r3,r6,r2
 802610c:	4821883a 	mov	r16,r9
 8026110:	003f0506 	br	8025d28 <__alt_data_end+0xfffed688>
 8026114:	10002b1e 	bne	r2,zero,80261c4 <__subdf3+0x71c>
 8026118:	2984b03a 	or	r2,r5,r6
 802611c:	10008026 	beq	r2,zero,8026320 <__subdf3+0x878>
 8026120:	2807883a 	mov	r3,r5
 8026124:	3023883a 	mov	r17,r6
 8026128:	3825883a 	mov	r18,r7
 802612c:	0401ffc4 	movi	r16,2047
 8026130:	003e7e06 	br	8025b2c <__alt_data_end+0xfffed48c>
 8026134:	3809883a 	mov	r4,r7
 8026138:	0011883a 	mov	r8,zero
 802613c:	0005883a 	mov	r2,zero
 8026140:	003ee306 	br	8025cd0 <__alt_data_end+0xfffed630>
 8026144:	1c62b03a 	or	r17,r3,r17
 8026148:	8822c03a 	cmpne	r17,r17,zero
 802614c:	0005883a 	mov	r2,zero
 8026150:	003f8906 	br	8025f78 <__alt_data_end+0xfffed8d8>
 8026154:	3809883a 	mov	r4,r7
 8026158:	4821883a 	mov	r16,r9
 802615c:	0011883a 	mov	r8,zero
 8026160:	0005883a 	mov	r2,zero
 8026164:	003eda06 	br	8025cd0 <__alt_data_end+0xfffed630>
 8026168:	0101ffc4 	movi	r4,2047
 802616c:	49003b26 	beq	r9,r4,802625c <__subdf3+0x7b4>
 8026170:	0085c83a 	sub	r2,zero,r2
 8026174:	18c02034 	orhi	r3,r3,128
 8026178:	01000e04 	movi	r4,56
 802617c:	20806e16 	blt	r4,r2,8026338 <__subdf3+0x890>
 8026180:	010007c4 	movi	r4,31
 8026184:	20807716 	blt	r4,r2,8026364 <__subdf3+0x8bc>
 8026188:	01000804 	movi	r4,32
 802618c:	2089c83a 	sub	r4,r4,r2
 8026190:	1914983a 	sll	r10,r3,r4
 8026194:	8890d83a 	srl	r8,r17,r2
 8026198:	8908983a 	sll	r4,r17,r4
 802619c:	1884d83a 	srl	r2,r3,r2
 80261a0:	5222b03a 	or	r17,r10,r8
 80261a4:	2006c03a 	cmpne	r3,r4,zero
 80261a8:	88e2b03a 	or	r17,r17,r3
 80261ac:	89a3883a 	add	r17,r17,r6
 80261b0:	1145883a 	add	r2,r2,r5
 80261b4:	898d803a 	cmpltu	r6,r17,r6
 80261b8:	3087883a 	add	r3,r6,r2
 80261bc:	4821883a 	mov	r16,r9
 80261c0:	003ed906 	br	8025d28 <__alt_data_end+0xfffed688>
 80261c4:	2984b03a 	or	r2,r5,r6
 80261c8:	10004226 	beq	r2,zero,80262d4 <__subdf3+0x82c>
 80261cc:	1808d0fa 	srli	r4,r3,3
 80261d0:	8822d0fa 	srli	r17,r17,3
 80261d4:	1806977a 	slli	r3,r3,29
 80261d8:	2080022c 	andhi	r2,r4,8
 80261dc:	1c62b03a 	or	r17,r3,r17
 80261e0:	10000826 	beq	r2,zero,8026204 <__subdf3+0x75c>
 80261e4:	2812d0fa 	srli	r9,r5,3
 80261e8:	4880022c 	andhi	r2,r9,8
 80261ec:	1000051e 	bne	r2,zero,8026204 <__subdf3+0x75c>
 80261f0:	300cd0fa 	srli	r6,r6,3
 80261f4:	2804977a 	slli	r2,r5,29
 80261f8:	4809883a 	mov	r4,r9
 80261fc:	3825883a 	mov	r18,r7
 8026200:	11a2b03a 	or	r17,r2,r6
 8026204:	8806d77a 	srli	r3,r17,29
 8026208:	200890fa 	slli	r4,r4,3
 802620c:	882290fa 	slli	r17,r17,3
 8026210:	0401ffc4 	movi	r16,2047
 8026214:	1906b03a 	or	r3,r3,r4
 8026218:	003e4406 	br	8025b2c <__alt_data_end+0xfffed48c>
 802621c:	2984b03a 	or	r2,r5,r6
 8026220:	103e4226 	beq	r2,zero,8025b2c <__alt_data_end+0xfffed48c>
 8026224:	8989c83a 	sub	r4,r17,r6
 8026228:	8911803a 	cmpltu	r8,r17,r4
 802622c:	1945c83a 	sub	r2,r3,r5
 8026230:	1205c83a 	sub	r2,r2,r8
 8026234:	1200202c 	andhi	r8,r2,128
 8026238:	403e9a26 	beq	r8,zero,8025ca4 <__alt_data_end+0xfffed604>
 802623c:	3463c83a 	sub	r17,r6,r17
 8026240:	28c5c83a 	sub	r2,r5,r3
 8026244:	344d803a 	cmpltu	r6,r6,r17
 8026248:	1187c83a 	sub	r3,r2,r6
 802624c:	3825883a 	mov	r18,r7
 8026250:	003e3606 	br	8025b2c <__alt_data_end+0xfffed48c>
 8026254:	0101ffc4 	movi	r4,2047
 8026258:	493fc71e 	bne	r9,r4,8026178 <__alt_data_end+0xfffedad8>
 802625c:	2807883a 	mov	r3,r5
 8026260:	3023883a 	mov	r17,r6
 8026264:	4821883a 	mov	r16,r9
 8026268:	003e3006 	br	8025b2c <__alt_data_end+0xfffed48c>
 802626c:	10003626 	beq	r2,zero,8026348 <__subdf3+0x8a0>
 8026270:	2984b03a 	or	r2,r5,r6
 8026274:	10001726 	beq	r2,zero,80262d4 <__subdf3+0x82c>
 8026278:	1808d0fa 	srli	r4,r3,3
 802627c:	8822d0fa 	srli	r17,r17,3
 8026280:	1806977a 	slli	r3,r3,29
 8026284:	2080022c 	andhi	r2,r4,8
 8026288:	1c62b03a 	or	r17,r3,r17
 802628c:	10000726 	beq	r2,zero,80262ac <__subdf3+0x804>
 8026290:	2812d0fa 	srli	r9,r5,3
 8026294:	4880022c 	andhi	r2,r9,8
 8026298:	1000041e 	bne	r2,zero,80262ac <__subdf3+0x804>
 802629c:	300cd0fa 	srli	r6,r6,3
 80262a0:	2804977a 	slli	r2,r5,29
 80262a4:	4809883a 	mov	r4,r9
 80262a8:	11a2b03a 	or	r17,r2,r6
 80262ac:	8806d77a 	srli	r3,r17,29
 80262b0:	200890fa 	slli	r4,r4,3
 80262b4:	882290fa 	slli	r17,r17,3
 80262b8:	3825883a 	mov	r18,r7
 80262bc:	1906b03a 	or	r3,r3,r4
 80262c0:	0401ffc4 	movi	r16,2047
 80262c4:	003e1906 	br	8025b2c <__alt_data_end+0xfffed48c>
 80262c8:	000b883a 	mov	r5,zero
 80262cc:	0005883a 	mov	r2,zero
 80262d0:	003e2e06 	br	8025b8c <__alt_data_end+0xfffed4ec>
 80262d4:	0401ffc4 	movi	r16,2047
 80262d8:	003e1406 	br	8025b2c <__alt_data_end+0xfffed48c>
 80262dc:	0005883a 	mov	r2,zero
 80262e0:	003f7506 	br	80260b8 <__alt_data_end+0xfffeda18>
 80262e4:	0005883a 	mov	r2,zero
 80262e8:	0009883a 	mov	r4,zero
 80262ec:	003e7806 	br	8025cd0 <__alt_data_end+0xfffed630>
 80262f0:	123ff804 	addi	r8,r2,-32
 80262f4:	01000804 	movi	r4,32
 80262f8:	1a10d83a 	srl	r8,r3,r8
 80262fc:	11002526 	beq	r2,r4,8026394 <__subdf3+0x8ec>
 8026300:	01001004 	movi	r4,64
 8026304:	2085c83a 	sub	r2,r4,r2
 8026308:	1884983a 	sll	r2,r3,r2
 802630c:	1444b03a 	or	r2,r2,r17
 8026310:	1004c03a 	cmpne	r2,r2,zero
 8026314:	40a2b03a 	or	r17,r8,r2
 8026318:	0005883a 	mov	r2,zero
 802631c:	003f1606 	br	8025f78 <__alt_data_end+0xfffed8d8>
 8026320:	02000434 	movhi	r8,16
 8026324:	0009883a 	mov	r4,zero
 8026328:	423fffc4 	addi	r8,r8,-1
 802632c:	00bfffc4 	movi	r2,-1
 8026330:	0401ffc4 	movi	r16,2047
 8026334:	003e6606 	br	8025cd0 <__alt_data_end+0xfffed630>
 8026338:	1c62b03a 	or	r17,r3,r17
 802633c:	8822c03a 	cmpne	r17,r17,zero
 8026340:	0005883a 	mov	r2,zero
 8026344:	003f9906 	br	80261ac <__alt_data_end+0xfffedb0c>
 8026348:	2807883a 	mov	r3,r5
 802634c:	3023883a 	mov	r17,r6
 8026350:	0401ffc4 	movi	r16,2047
 8026354:	003df506 	br	8025b2c <__alt_data_end+0xfffed48c>
 8026358:	2807883a 	mov	r3,r5
 802635c:	3023883a 	mov	r17,r6
 8026360:	003df206 	br	8025b2c <__alt_data_end+0xfffed48c>
 8026364:	123ff804 	addi	r8,r2,-32
 8026368:	01000804 	movi	r4,32
 802636c:	1a10d83a 	srl	r8,r3,r8
 8026370:	11000a26 	beq	r2,r4,802639c <__subdf3+0x8f4>
 8026374:	01001004 	movi	r4,64
 8026378:	2085c83a 	sub	r2,r4,r2
 802637c:	1884983a 	sll	r2,r3,r2
 8026380:	1444b03a 	or	r2,r2,r17
 8026384:	1004c03a 	cmpne	r2,r2,zero
 8026388:	40a2b03a 	or	r17,r8,r2
 802638c:	0005883a 	mov	r2,zero
 8026390:	003f8606 	br	80261ac <__alt_data_end+0xfffedb0c>
 8026394:	0005883a 	mov	r2,zero
 8026398:	003fdc06 	br	802630c <__alt_data_end+0xfffedc6c>
 802639c:	0005883a 	mov	r2,zero
 80263a0:	003ff706 	br	8026380 <__alt_data_end+0xfffedce0>

080263a4 <__fixdfsi>:
 80263a4:	280cd53a 	srli	r6,r5,20
 80263a8:	00c00434 	movhi	r3,16
 80263ac:	18ffffc4 	addi	r3,r3,-1
 80263b0:	3181ffcc 	andi	r6,r6,2047
 80263b4:	01c0ff84 	movi	r7,1022
 80263b8:	28c6703a 	and	r3,r5,r3
 80263bc:	280ad7fa 	srli	r5,r5,31
 80263c0:	3980120e 	bge	r7,r6,802640c <__fixdfsi+0x68>
 80263c4:	00810744 	movi	r2,1053
 80263c8:	11800c16 	blt	r2,r6,80263fc <__fixdfsi+0x58>
 80263cc:	00810cc4 	movi	r2,1075
 80263d0:	1185c83a 	sub	r2,r2,r6
 80263d4:	01c007c4 	movi	r7,31
 80263d8:	18c00434 	orhi	r3,r3,16
 80263dc:	38800d16 	blt	r7,r2,8026414 <__fixdfsi+0x70>
 80263e0:	31befb44 	addi	r6,r6,-1043
 80263e4:	2084d83a 	srl	r2,r4,r2
 80263e8:	1986983a 	sll	r3,r3,r6
 80263ec:	1884b03a 	or	r2,r3,r2
 80263f0:	28000726 	beq	r5,zero,8026410 <__fixdfsi+0x6c>
 80263f4:	0085c83a 	sub	r2,zero,r2
 80263f8:	f800283a 	ret
 80263fc:	00a00034 	movhi	r2,32768
 8026400:	10bfffc4 	addi	r2,r2,-1
 8026404:	2885883a 	add	r2,r5,r2
 8026408:	f800283a 	ret
 802640c:	0005883a 	mov	r2,zero
 8026410:	f800283a 	ret
 8026414:	008104c4 	movi	r2,1043
 8026418:	1185c83a 	sub	r2,r2,r6
 802641c:	1884d83a 	srl	r2,r3,r2
 8026420:	003ff306 	br	80263f0 <__alt_data_end+0xfffedd50>

08026424 <__floatsidf>:
 8026424:	defffd04 	addi	sp,sp,-12
 8026428:	dfc00215 	stw	ra,8(sp)
 802642c:	dc400115 	stw	r17,4(sp)
 8026430:	dc000015 	stw	r16,0(sp)
 8026434:	20002b26 	beq	r4,zero,80264e4 <__floatsidf+0xc0>
 8026438:	2023883a 	mov	r17,r4
 802643c:	2020d7fa 	srli	r16,r4,31
 8026440:	20002d16 	blt	r4,zero,80264f8 <__floatsidf+0xd4>
 8026444:	8809883a 	mov	r4,r17
 8026448:	80266100 	call	8026610 <__clzsi2>
 802644c:	01410784 	movi	r5,1054
 8026450:	288bc83a 	sub	r5,r5,r2
 8026454:	01010cc4 	movi	r4,1075
 8026458:	2149c83a 	sub	r4,r4,r5
 802645c:	00c007c4 	movi	r3,31
 8026460:	1900160e 	bge	r3,r4,80264bc <__floatsidf+0x98>
 8026464:	00c104c4 	movi	r3,1043
 8026468:	1947c83a 	sub	r3,r3,r5
 802646c:	88c6983a 	sll	r3,r17,r3
 8026470:	00800434 	movhi	r2,16
 8026474:	10bfffc4 	addi	r2,r2,-1
 8026478:	1886703a 	and	r3,r3,r2
 802647c:	2941ffcc 	andi	r5,r5,2047
 8026480:	800d883a 	mov	r6,r16
 8026484:	0005883a 	mov	r2,zero
 8026488:	280a953a 	slli	r5,r5,20
 802648c:	31803fcc 	andi	r6,r6,255
 8026490:	01000434 	movhi	r4,16
 8026494:	300c97fa 	slli	r6,r6,31
 8026498:	213fffc4 	addi	r4,r4,-1
 802649c:	1906703a 	and	r3,r3,r4
 80264a0:	1946b03a 	or	r3,r3,r5
 80264a4:	1986b03a 	or	r3,r3,r6
 80264a8:	dfc00217 	ldw	ra,8(sp)
 80264ac:	dc400117 	ldw	r17,4(sp)
 80264b0:	dc000017 	ldw	r16,0(sp)
 80264b4:	dec00304 	addi	sp,sp,12
 80264b8:	f800283a 	ret
 80264bc:	00c002c4 	movi	r3,11
 80264c0:	1887c83a 	sub	r3,r3,r2
 80264c4:	88c6d83a 	srl	r3,r17,r3
 80264c8:	8904983a 	sll	r2,r17,r4
 80264cc:	01000434 	movhi	r4,16
 80264d0:	213fffc4 	addi	r4,r4,-1
 80264d4:	2941ffcc 	andi	r5,r5,2047
 80264d8:	1906703a 	and	r3,r3,r4
 80264dc:	800d883a 	mov	r6,r16
 80264e0:	003fe906 	br	8026488 <__alt_data_end+0xfffedde8>
 80264e4:	000d883a 	mov	r6,zero
 80264e8:	000b883a 	mov	r5,zero
 80264ec:	0007883a 	mov	r3,zero
 80264f0:	0005883a 	mov	r2,zero
 80264f4:	003fe406 	br	8026488 <__alt_data_end+0xfffedde8>
 80264f8:	0123c83a 	sub	r17,zero,r4
 80264fc:	003fd106 	br	8026444 <__alt_data_end+0xfffedda4>

08026500 <__extendsfdf2>:
 8026500:	200ad5fa 	srli	r5,r4,23
 8026504:	defffd04 	addi	sp,sp,-12
 8026508:	dc400115 	stw	r17,4(sp)
 802650c:	29403fcc 	andi	r5,r5,255
 8026510:	29800044 	addi	r6,r5,1
 8026514:	04402034 	movhi	r17,128
 8026518:	dc000015 	stw	r16,0(sp)
 802651c:	8c7fffc4 	addi	r17,r17,-1
 8026520:	dfc00215 	stw	ra,8(sp)
 8026524:	31803fcc 	andi	r6,r6,255
 8026528:	00800044 	movi	r2,1
 802652c:	8922703a 	and	r17,r17,r4
 8026530:	2020d7fa 	srli	r16,r4,31
 8026534:	1180110e 	bge	r2,r6,802657c <__extendsfdf2+0x7c>
 8026538:	880cd0fa 	srli	r6,r17,3
 802653c:	8822977a 	slli	r17,r17,29
 8026540:	2940e004 	addi	r5,r5,896
 8026544:	2941ffcc 	andi	r5,r5,2047
 8026548:	2804953a 	slli	r2,r5,20
 802654c:	01400434 	movhi	r5,16
 8026550:	800697fa 	slli	r3,r16,31
 8026554:	297fffc4 	addi	r5,r5,-1
 8026558:	314a703a 	and	r5,r6,r5
 802655c:	288ab03a 	or	r5,r5,r2
 8026560:	28c6b03a 	or	r3,r5,r3
 8026564:	8805883a 	mov	r2,r17
 8026568:	dfc00217 	ldw	ra,8(sp)
 802656c:	dc400117 	ldw	r17,4(sp)
 8026570:	dc000017 	ldw	r16,0(sp)
 8026574:	dec00304 	addi	sp,sp,12
 8026578:	f800283a 	ret
 802657c:	2800111e 	bne	r5,zero,80265c4 <__extendsfdf2+0xc4>
 8026580:	88001c26 	beq	r17,zero,80265f4 <__extendsfdf2+0xf4>
 8026584:	8809883a 	mov	r4,r17
 8026588:	80266100 	call	8026610 <__clzsi2>
 802658c:	00c00284 	movi	r3,10
 8026590:	18801b16 	blt	r3,r2,8026600 <__extendsfdf2+0x100>
 8026594:	018002c4 	movi	r6,11
 8026598:	308dc83a 	sub	r6,r6,r2
 802659c:	11000544 	addi	r4,r2,21
 80265a0:	8986d83a 	srl	r3,r17,r6
 80265a4:	8922983a 	sll	r17,r17,r4
 80265a8:	0180e244 	movi	r6,905
 80265ac:	01400434 	movhi	r5,16
 80265b0:	3085c83a 	sub	r2,r6,r2
 80265b4:	297fffc4 	addi	r5,r5,-1
 80265b8:	194c703a 	and	r6,r3,r5
 80265bc:	1141ffcc 	andi	r5,r2,2047
 80265c0:	003fe006 	br	8026544 <__alt_data_end+0xfffedea4>
 80265c4:	88000826 	beq	r17,zero,80265e8 <__extendsfdf2+0xe8>
 80265c8:	880cd0fa 	srli	r6,r17,3
 80265cc:	00800434 	movhi	r2,16
 80265d0:	10bfffc4 	addi	r2,r2,-1
 80265d4:	31800234 	orhi	r6,r6,8
 80265d8:	8822977a 	slli	r17,r17,29
 80265dc:	308c703a 	and	r6,r6,r2
 80265e0:	0141ffc4 	movi	r5,2047
 80265e4:	003fd706 	br	8026544 <__alt_data_end+0xfffedea4>
 80265e8:	0141ffc4 	movi	r5,2047
 80265ec:	000d883a 	mov	r6,zero
 80265f0:	003fd406 	br	8026544 <__alt_data_end+0xfffedea4>
 80265f4:	000b883a 	mov	r5,zero
 80265f8:	000d883a 	mov	r6,zero
 80265fc:	003fd106 	br	8026544 <__alt_data_end+0xfffedea4>
 8026600:	11bffd44 	addi	r6,r2,-11
 8026604:	8986983a 	sll	r3,r17,r6
 8026608:	0023883a 	mov	r17,zero
 802660c:	003fe606 	br	80265a8 <__alt_data_end+0xfffedf08>

08026610 <__clzsi2>:
 8026610:	00bfffd4 	movui	r2,65535
 8026614:	11000536 	bltu	r2,r4,802662c <__clzsi2+0x1c>
 8026618:	00803fc4 	movi	r2,255
 802661c:	11000f36 	bltu	r2,r4,802665c <__clzsi2+0x4c>
 8026620:	00800804 	movi	r2,32
 8026624:	0007883a 	mov	r3,zero
 8026628:	00000506 	br	8026640 <__clzsi2+0x30>
 802662c:	00804034 	movhi	r2,256
 8026630:	10bfffc4 	addi	r2,r2,-1
 8026634:	11000c2e 	bgeu	r2,r4,8026668 <__clzsi2+0x58>
 8026638:	00800204 	movi	r2,8
 802663c:	00c00604 	movi	r3,24
 8026640:	20c8d83a 	srl	r4,r4,r3
 8026644:	00c200f4 	movhi	r3,2051
 8026648:	18e7ac04 	addi	r3,r3,-24912
 802664c:	1909883a 	add	r4,r3,r4
 8026650:	20c00003 	ldbu	r3,0(r4)
 8026654:	10c5c83a 	sub	r2,r2,r3
 8026658:	f800283a 	ret
 802665c:	00800604 	movi	r2,24
 8026660:	00c00204 	movi	r3,8
 8026664:	003ff606 	br	8026640 <__alt_data_end+0xfffedfa0>
 8026668:	00800404 	movi	r2,16
 802666c:	1007883a 	mov	r3,r2
 8026670:	003ff306 	br	8026640 <__alt_data_end+0xfffedfa0>

08026674 <_printf_r>:
 8026674:	defffd04 	addi	sp,sp,-12
 8026678:	dfc00015 	stw	ra,0(sp)
 802667c:	d9800115 	stw	r6,4(sp)
 8026680:	d9c00215 	stw	r7,8(sp)
 8026684:	20c00217 	ldw	r3,8(r4)
 8026688:	018200b4 	movhi	r6,2050
 802668c:	319b2a04 	addi	r6,r6,27816
 8026690:	19800115 	stw	r6,4(r3)
 8026694:	280d883a 	mov	r6,r5
 8026698:	21400217 	ldw	r5,8(r4)
 802669c:	d9c00104 	addi	r7,sp,4
 80266a0:	80267680 	call	8026768 <___vfprintf_internal_r>
 80266a4:	dfc00017 	ldw	ra,0(sp)
 80266a8:	dec00304 	addi	sp,sp,12
 80266ac:	f800283a 	ret

080266b0 <printf>:
 80266b0:	defffc04 	addi	sp,sp,-16
 80266b4:	dfc00015 	stw	ra,0(sp)
 80266b8:	d9400115 	stw	r5,4(sp)
 80266bc:	d9800215 	stw	r6,8(sp)
 80266c0:	d9c00315 	stw	r7,12(sp)
 80266c4:	008200f4 	movhi	r2,2051
 80266c8:	10a8f204 	addi	r2,r2,-23608
 80266cc:	10800017 	ldw	r2,0(r2)
 80266d0:	014200b4 	movhi	r5,2050
 80266d4:	295b2a04 	addi	r5,r5,27816
 80266d8:	10c00217 	ldw	r3,8(r2)
 80266dc:	d9800104 	addi	r6,sp,4
 80266e0:	19400115 	stw	r5,4(r3)
 80266e4:	200b883a 	mov	r5,r4
 80266e8:	11000217 	ldw	r4,8(r2)
 80266ec:	8026c8c0 	call	8026c8c <__vfprintf_internal>
 80266f0:	dfc00017 	ldw	ra,0(sp)
 80266f4:	dec00404 	addi	sp,sp,16
 80266f8:	f800283a 	ret

080266fc <print_repeat>:
 80266fc:	defffb04 	addi	sp,sp,-20
 8026700:	dc800315 	stw	r18,12(sp)
 8026704:	dc400215 	stw	r17,8(sp)
 8026708:	dc000115 	stw	r16,4(sp)
 802670c:	dfc00415 	stw	ra,16(sp)
 8026710:	2025883a 	mov	r18,r4
 8026714:	2823883a 	mov	r17,r5
 8026718:	d9800005 	stb	r6,0(sp)
 802671c:	3821883a 	mov	r16,r7
 8026720:	04000a0e 	bge	zero,r16,802674c <print_repeat+0x50>
 8026724:	88800117 	ldw	r2,4(r17)
 8026728:	01c00044 	movi	r7,1
 802672c:	d80d883a 	mov	r6,sp
 8026730:	880b883a 	mov	r5,r17
 8026734:	9009883a 	mov	r4,r18
 8026738:	103ee83a 	callr	r2
 802673c:	843fffc4 	addi	r16,r16,-1
 8026740:	103ff726 	beq	r2,zero,8026720 <__alt_data_end+0xfffee080>
 8026744:	00bfffc4 	movi	r2,-1
 8026748:	00000106 	br	8026750 <print_repeat+0x54>
 802674c:	0005883a 	mov	r2,zero
 8026750:	dfc00417 	ldw	ra,16(sp)
 8026754:	dc800317 	ldw	r18,12(sp)
 8026758:	dc400217 	ldw	r17,8(sp)
 802675c:	dc000117 	ldw	r16,4(sp)
 8026760:	dec00504 	addi	sp,sp,20
 8026764:	f800283a 	ret

08026768 <___vfprintf_internal_r>:
 8026768:	deffe504 	addi	sp,sp,-108
 802676c:	d8c00804 	addi	r3,sp,32
 8026770:	df001915 	stw	fp,100(sp)
 8026774:	ddc01815 	stw	r23,96(sp)
 8026778:	dd801715 	stw	r22,92(sp)
 802677c:	dd401615 	stw	r21,88(sp)
 8026780:	dd001515 	stw	r20,84(sp)
 8026784:	dcc01415 	stw	r19,80(sp)
 8026788:	dc801315 	stw	r18,76(sp)
 802678c:	dc401215 	stw	r17,72(sp)
 8026790:	dc001115 	stw	r16,68(sp)
 8026794:	dfc01a15 	stw	ra,104(sp)
 8026798:	2027883a 	mov	r19,r4
 802679c:	2839883a 	mov	fp,r5
 80267a0:	382d883a 	mov	r22,r7
 80267a4:	d9800f15 	stw	r6,60(sp)
 80267a8:	0021883a 	mov	r16,zero
 80267ac:	d8000e15 	stw	zero,56(sp)
 80267b0:	002f883a 	mov	r23,zero
 80267b4:	002b883a 	mov	r21,zero
 80267b8:	0025883a 	mov	r18,zero
 80267bc:	0023883a 	mov	r17,zero
 80267c0:	d8000c15 	stw	zero,48(sp)
 80267c4:	d8000b15 	stw	zero,44(sp)
 80267c8:	0029883a 	mov	r20,zero
 80267cc:	d8c00915 	stw	r3,36(sp)
 80267d0:	d8c00f17 	ldw	r3,60(sp)
 80267d4:	19000003 	ldbu	r4,0(r3)
 80267d8:	20803fcc 	andi	r2,r4,255
 80267dc:	1080201c 	xori	r2,r2,128
 80267e0:	10bfe004 	addi	r2,r2,-128
 80267e4:	10011c26 	beq	r2,zero,8026c58 <___vfprintf_internal_r+0x4f0>
 80267e8:	00c00044 	movi	r3,1
 80267ec:	a0c01426 	beq	r20,r3,8026840 <___vfprintf_internal_r+0xd8>
 80267f0:	1d000216 	blt	r3,r20,80267fc <___vfprintf_internal_r+0x94>
 80267f4:	a0000626 	beq	r20,zero,8026810 <___vfprintf_internal_r+0xa8>
 80267f8:	00011306 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 80267fc:	01400084 	movi	r5,2
 8026800:	a1401d26 	beq	r20,r5,8026878 <___vfprintf_internal_r+0x110>
 8026804:	014000c4 	movi	r5,3
 8026808:	a1402926 	beq	r20,r5,80268b0 <___vfprintf_internal_r+0x148>
 802680c:	00010e06 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 8026810:	01400944 	movi	r5,37
 8026814:	1140fb26 	beq	r2,r5,8026c04 <___vfprintf_internal_r+0x49c>
 8026818:	e0800117 	ldw	r2,4(fp)
 802681c:	d9000005 	stb	r4,0(sp)
 8026820:	01c00044 	movi	r7,1
 8026824:	d80d883a 	mov	r6,sp
 8026828:	e00b883a 	mov	r5,fp
 802682c:	9809883a 	mov	r4,r19
 8026830:	103ee83a 	callr	r2
 8026834:	1000d61e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026838:	84000044 	addi	r16,r16,1
 802683c:	00010206 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 8026840:	01400c04 	movi	r5,48
 8026844:	1140f826 	beq	r2,r5,8026c28 <___vfprintf_internal_r+0x4c0>
 8026848:	01400944 	movi	r5,37
 802684c:	11400a1e 	bne	r2,r5,8026878 <___vfprintf_internal_r+0x110>
 8026850:	d8800005 	stb	r2,0(sp)
 8026854:	e0800117 	ldw	r2,4(fp)
 8026858:	a00f883a 	mov	r7,r20
 802685c:	d80d883a 	mov	r6,sp
 8026860:	e00b883a 	mov	r5,fp
 8026864:	9809883a 	mov	r4,r19
 8026868:	103ee83a 	callr	r2
 802686c:	1000c81e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026870:	84000044 	addi	r16,r16,1
 8026874:	0000f306 	br	8026c44 <___vfprintf_internal_r+0x4dc>
 8026878:	217ff404 	addi	r5,r4,-48
 802687c:	29403fcc 	andi	r5,r5,255
 8026880:	00c00244 	movi	r3,9
 8026884:	19400736 	bltu	r3,r5,80268a4 <___vfprintf_internal_r+0x13c>
 8026888:	00bfffc4 	movi	r2,-1
 802688c:	88800226 	beq	r17,r2,8026898 <___vfprintf_internal_r+0x130>
 8026890:	8c4002a4 	muli	r17,r17,10
 8026894:	00000106 	br	802689c <___vfprintf_internal_r+0x134>
 8026898:	0023883a 	mov	r17,zero
 802689c:	2c63883a 	add	r17,r5,r17
 80268a0:	0000e206 	br	8026c2c <___vfprintf_internal_r+0x4c4>
 80268a4:	01400b84 	movi	r5,46
 80268a8:	1140e426 	beq	r2,r5,8026c3c <___vfprintf_internal_r+0x4d4>
 80268ac:	05000084 	movi	r20,2
 80268b0:	213ff404 	addi	r4,r4,-48
 80268b4:	21003fcc 	andi	r4,r4,255
 80268b8:	00c00244 	movi	r3,9
 80268bc:	19000736 	bltu	r3,r4,80268dc <___vfprintf_internal_r+0x174>
 80268c0:	00bfffc4 	movi	r2,-1
 80268c4:	90800226 	beq	r18,r2,80268d0 <___vfprintf_internal_r+0x168>
 80268c8:	948002a4 	muli	r18,r18,10
 80268cc:	00000106 	br	80268d4 <___vfprintf_internal_r+0x16c>
 80268d0:	0025883a 	mov	r18,zero
 80268d4:	24a5883a 	add	r18,r4,r18
 80268d8:	0000db06 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 80268dc:	00c01b04 	movi	r3,108
 80268e0:	10c0d426 	beq	r2,r3,8026c34 <___vfprintf_internal_r+0x4cc>
 80268e4:	013fffc4 	movi	r4,-1
 80268e8:	91000226 	beq	r18,r4,80268f4 <___vfprintf_internal_r+0x18c>
 80268ec:	d8000b15 	stw	zero,44(sp)
 80268f0:	00000106 	br	80268f8 <___vfprintf_internal_r+0x190>
 80268f4:	04800044 	movi	r18,1
 80268f8:	01001a44 	movi	r4,105
 80268fc:	11001626 	beq	r2,r4,8026958 <___vfprintf_internal_r+0x1f0>
 8026900:	20800916 	blt	r4,r2,8026928 <___vfprintf_internal_r+0x1c0>
 8026904:	010018c4 	movi	r4,99
 8026908:	11008a26 	beq	r2,r4,8026b34 <___vfprintf_internal_r+0x3cc>
 802690c:	01001904 	movi	r4,100
 8026910:	11001126 	beq	r2,r4,8026958 <___vfprintf_internal_r+0x1f0>
 8026914:	01001604 	movi	r4,88
 8026918:	1100ca1e 	bne	r2,r4,8026c44 <___vfprintf_internal_r+0x4dc>
 802691c:	00c00044 	movi	r3,1
 8026920:	d8c00e15 	stw	r3,56(sp)
 8026924:	00001406 	br	8026978 <___vfprintf_internal_r+0x210>
 8026928:	01001cc4 	movi	r4,115
 802692c:	11009a26 	beq	r2,r4,8026b98 <___vfprintf_internal_r+0x430>
 8026930:	20800416 	blt	r4,r2,8026944 <___vfprintf_internal_r+0x1dc>
 8026934:	01001bc4 	movi	r4,111
 8026938:	1100c21e 	bne	r2,r4,8026c44 <___vfprintf_internal_r+0x4dc>
 802693c:	05400204 	movi	r21,8
 8026940:	00000e06 	br	802697c <___vfprintf_internal_r+0x214>
 8026944:	01001d44 	movi	r4,117
 8026948:	11000c26 	beq	r2,r4,802697c <___vfprintf_internal_r+0x214>
 802694c:	01001e04 	movi	r4,120
 8026950:	11000926 	beq	r2,r4,8026978 <___vfprintf_internal_r+0x210>
 8026954:	0000bb06 	br	8026c44 <___vfprintf_internal_r+0x4dc>
 8026958:	b5000104 	addi	r20,r22,4
 802695c:	b8000726 	beq	r23,zero,802697c <___vfprintf_internal_r+0x214>
 8026960:	dd000d15 	stw	r20,52(sp)
 8026964:	b5800017 	ldw	r22,0(r22)
 8026968:	b000080e 	bge	r22,zero,802698c <___vfprintf_internal_r+0x224>
 802696c:	05adc83a 	sub	r22,zero,r22
 8026970:	02800044 	movi	r10,1
 8026974:	00000606 	br	8026990 <___vfprintf_internal_r+0x228>
 8026978:	05400404 	movi	r21,16
 802697c:	b0c00104 	addi	r3,r22,4
 8026980:	d8c00d15 	stw	r3,52(sp)
 8026984:	b5800017 	ldw	r22,0(r22)
 8026988:	002f883a 	mov	r23,zero
 802698c:	0015883a 	mov	r10,zero
 8026990:	d829883a 	mov	r20,sp
 8026994:	b0001426 	beq	r22,zero,80269e8 <___vfprintf_internal_r+0x280>
 8026998:	b009883a 	mov	r4,r22
 802699c:	a80b883a 	mov	r5,r21
 80269a0:	da801015 	stw	r10,64(sp)
 80269a4:	802334c0 	call	802334c <__udivsi3>
 80269a8:	1549383a 	mul	r4,r2,r21
 80269ac:	00c00244 	movi	r3,9
 80269b0:	da801017 	ldw	r10,64(sp)
 80269b4:	b12dc83a 	sub	r22,r22,r4
 80269b8:	1d800216 	blt	r3,r22,80269c4 <___vfprintf_internal_r+0x25c>
 80269bc:	b5800c04 	addi	r22,r22,48
 80269c0:	00000506 	br	80269d8 <___vfprintf_internal_r+0x270>
 80269c4:	d8c00e17 	ldw	r3,56(sp)
 80269c8:	18000226 	beq	r3,zero,80269d4 <___vfprintf_internal_r+0x26c>
 80269cc:	b5800dc4 	addi	r22,r22,55
 80269d0:	00000106 	br	80269d8 <___vfprintf_internal_r+0x270>
 80269d4:	b58015c4 	addi	r22,r22,87
 80269d8:	a5800005 	stb	r22,0(r20)
 80269dc:	a5000044 	addi	r20,r20,1
 80269e0:	102d883a 	mov	r22,r2
 80269e4:	003feb06 	br	8026994 <__alt_data_end+0xfffee2f4>
 80269e8:	a6c7c83a 	sub	r3,r20,sp
 80269ec:	d8c00a15 	stw	r3,40(sp)
 80269f0:	90c5c83a 	sub	r2,r18,r3
 80269f4:	00800a0e 	bge	zero,r2,8026a20 <___vfprintf_internal_r+0x2b8>
 80269f8:	a085883a 	add	r2,r20,r2
 80269fc:	01400c04 	movi	r5,48
 8026a00:	d8c00917 	ldw	r3,36(sp)
 8026a04:	a009883a 	mov	r4,r20
 8026a08:	a0c0032e 	bgeu	r20,r3,8026a18 <___vfprintf_internal_r+0x2b0>
 8026a0c:	a5000044 	addi	r20,r20,1
 8026a10:	21400005 	stb	r5,0(r4)
 8026a14:	a0bffa1e 	bne	r20,r2,8026a00 <__alt_data_end+0xfffee360>
 8026a18:	a6c7c83a 	sub	r3,r20,sp
 8026a1c:	d8c00a15 	stw	r3,40(sp)
 8026a20:	d8c00a17 	ldw	r3,40(sp)
 8026a24:	50d3883a 	add	r9,r10,r3
 8026a28:	d8c00b17 	ldw	r3,44(sp)
 8026a2c:	8a6dc83a 	sub	r22,r17,r9
 8026a30:	18001726 	beq	r3,zero,8026a90 <___vfprintf_internal_r+0x328>
 8026a34:	50000a26 	beq	r10,zero,8026a60 <___vfprintf_internal_r+0x2f8>
 8026a38:	00800b44 	movi	r2,45
 8026a3c:	d8800805 	stb	r2,32(sp)
 8026a40:	e0800117 	ldw	r2,4(fp)
 8026a44:	01c00044 	movi	r7,1
 8026a48:	d9800804 	addi	r6,sp,32
 8026a4c:	e00b883a 	mov	r5,fp
 8026a50:	9809883a 	mov	r4,r19
 8026a54:	103ee83a 	callr	r2
 8026a58:	10004d1e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026a5c:	84000044 	addi	r16,r16,1
 8026a60:	0580070e 	bge	zero,r22,8026a80 <___vfprintf_internal_r+0x318>
 8026a64:	b00f883a 	mov	r7,r22
 8026a68:	01800c04 	movi	r6,48
 8026a6c:	e00b883a 	mov	r5,fp
 8026a70:	9809883a 	mov	r4,r19
 8026a74:	80266fc0 	call	80266fc <print_repeat>
 8026a78:	1000451e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026a7c:	85a1883a 	add	r16,r16,r22
 8026a80:	d8c00a17 	ldw	r3,40(sp)
 8026a84:	a013883a 	mov	r9,r20
 8026a88:	1d2dc83a 	sub	r22,r3,r20
 8026a8c:	00002206 	br	8026b18 <___vfprintf_internal_r+0x3b0>
 8026a90:	0580090e 	bge	zero,r22,8026ab8 <___vfprintf_internal_r+0x350>
 8026a94:	b00f883a 	mov	r7,r22
 8026a98:	01800804 	movi	r6,32
 8026a9c:	e00b883a 	mov	r5,fp
 8026aa0:	9809883a 	mov	r4,r19
 8026aa4:	da801015 	stw	r10,64(sp)
 8026aa8:	80266fc0 	call	80266fc <print_repeat>
 8026aac:	da801017 	ldw	r10,64(sp)
 8026ab0:	1000371e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026ab4:	85a1883a 	add	r16,r16,r22
 8026ab8:	503ff126 	beq	r10,zero,8026a80 <__alt_data_end+0xfffee3e0>
 8026abc:	00800b44 	movi	r2,45
 8026ac0:	d8800805 	stb	r2,32(sp)
 8026ac4:	e0800117 	ldw	r2,4(fp)
 8026ac8:	01c00044 	movi	r7,1
 8026acc:	d9800804 	addi	r6,sp,32
 8026ad0:	e00b883a 	mov	r5,fp
 8026ad4:	9809883a 	mov	r4,r19
 8026ad8:	103ee83a 	callr	r2
 8026adc:	10002c1e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026ae0:	84000044 	addi	r16,r16,1
 8026ae4:	003fe606 	br	8026a80 <__alt_data_end+0xfffee3e0>
 8026ae8:	4a7fffc4 	addi	r9,r9,-1
 8026aec:	48800003 	ldbu	r2,0(r9)
 8026af0:	01c00044 	movi	r7,1
 8026af4:	d9800804 	addi	r6,sp,32
 8026af8:	d8800805 	stb	r2,32(sp)
 8026afc:	e0800117 	ldw	r2,4(fp)
 8026b00:	e00b883a 	mov	r5,fp
 8026b04:	da401015 	stw	r9,64(sp)
 8026b08:	9809883a 	mov	r4,r19
 8026b0c:	103ee83a 	callr	r2
 8026b10:	da401017 	ldw	r9,64(sp)
 8026b14:	10001e1e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026b18:	8245c83a 	sub	r2,r16,r9
 8026b1c:	4d89883a 	add	r4,r9,r22
 8026b20:	a085883a 	add	r2,r20,r2
 8026b24:	013ff016 	blt	zero,r4,8026ae8 <__alt_data_end+0xfffee448>
 8026b28:	1021883a 	mov	r16,r2
 8026b2c:	dd800d17 	ldw	r22,52(sp)
 8026b30:	00004406 	br	8026c44 <___vfprintf_internal_r+0x4dc>
 8026b34:	00800044 	movi	r2,1
 8026b38:	1440080e 	bge	r2,r17,8026b5c <___vfprintf_internal_r+0x3f4>
 8026b3c:	8d3fffc4 	addi	r20,r17,-1
 8026b40:	a00f883a 	mov	r7,r20
 8026b44:	01800804 	movi	r6,32
 8026b48:	e00b883a 	mov	r5,fp
 8026b4c:	9809883a 	mov	r4,r19
 8026b50:	80266fc0 	call	80266fc <print_repeat>
 8026b54:	10000e1e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026b58:	8521883a 	add	r16,r16,r20
 8026b5c:	b0800017 	ldw	r2,0(r22)
 8026b60:	01c00044 	movi	r7,1
 8026b64:	d80d883a 	mov	r6,sp
 8026b68:	d8800005 	stb	r2,0(sp)
 8026b6c:	e0800117 	ldw	r2,4(fp)
 8026b70:	e00b883a 	mov	r5,fp
 8026b74:	9809883a 	mov	r4,r19
 8026b78:	b5000104 	addi	r20,r22,4
 8026b7c:	103ee83a 	callr	r2
 8026b80:	1000031e 	bne	r2,zero,8026b90 <___vfprintf_internal_r+0x428>
 8026b84:	84000044 	addi	r16,r16,1
 8026b88:	a02d883a 	mov	r22,r20
 8026b8c:	00002d06 	br	8026c44 <___vfprintf_internal_r+0x4dc>
 8026b90:	00bfffc4 	movi	r2,-1
 8026b94:	00003106 	br	8026c5c <___vfprintf_internal_r+0x4f4>
 8026b98:	b5000017 	ldw	r20,0(r22)
 8026b9c:	b0c00104 	addi	r3,r22,4
 8026ba0:	d8c00a15 	stw	r3,40(sp)
 8026ba4:	a009883a 	mov	r4,r20
 8026ba8:	8026d600 	call	8026d60 <strlen>
 8026bac:	8893c83a 	sub	r9,r17,r2
 8026bb0:	102d883a 	mov	r22,r2
 8026bb4:	0240090e 	bge	zero,r9,8026bdc <___vfprintf_internal_r+0x474>
 8026bb8:	480f883a 	mov	r7,r9
 8026bbc:	01800804 	movi	r6,32
 8026bc0:	e00b883a 	mov	r5,fp
 8026bc4:	9809883a 	mov	r4,r19
 8026bc8:	da401015 	stw	r9,64(sp)
 8026bcc:	80266fc0 	call	80266fc <print_repeat>
 8026bd0:	da401017 	ldw	r9,64(sp)
 8026bd4:	103fee1e 	bne	r2,zero,8026b90 <__alt_data_end+0xfffee4f0>
 8026bd8:	8261883a 	add	r16,r16,r9
 8026bdc:	e0800117 	ldw	r2,4(fp)
 8026be0:	b00f883a 	mov	r7,r22
 8026be4:	a00d883a 	mov	r6,r20
 8026be8:	e00b883a 	mov	r5,fp
 8026bec:	9809883a 	mov	r4,r19
 8026bf0:	103ee83a 	callr	r2
 8026bf4:	103fe61e 	bne	r2,zero,8026b90 <__alt_data_end+0xfffee4f0>
 8026bf8:	85a1883a 	add	r16,r16,r22
 8026bfc:	dd800a17 	ldw	r22,40(sp)
 8026c00:	00001006 	br	8026c44 <___vfprintf_internal_r+0x4dc>
 8026c04:	05c00044 	movi	r23,1
 8026c08:	04bfffc4 	movi	r18,-1
 8026c0c:	d8000e15 	stw	zero,56(sp)
 8026c10:	05400284 	movi	r21,10
 8026c14:	9023883a 	mov	r17,r18
 8026c18:	d8000c15 	stw	zero,48(sp)
 8026c1c:	d8000b15 	stw	zero,44(sp)
 8026c20:	b829883a 	mov	r20,r23
 8026c24:	00000806 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 8026c28:	dd000b15 	stw	r20,44(sp)
 8026c2c:	05000084 	movi	r20,2
 8026c30:	00000506 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 8026c34:	00c00044 	movi	r3,1
 8026c38:	d8c00c15 	stw	r3,48(sp)
 8026c3c:	050000c4 	movi	r20,3
 8026c40:	00000106 	br	8026c48 <___vfprintf_internal_r+0x4e0>
 8026c44:	0029883a 	mov	r20,zero
 8026c48:	d8c00f17 	ldw	r3,60(sp)
 8026c4c:	18c00044 	addi	r3,r3,1
 8026c50:	d8c00f15 	stw	r3,60(sp)
 8026c54:	003ede06 	br	80267d0 <__alt_data_end+0xfffee130>
 8026c58:	8005883a 	mov	r2,r16
 8026c5c:	dfc01a17 	ldw	ra,104(sp)
 8026c60:	df001917 	ldw	fp,100(sp)
 8026c64:	ddc01817 	ldw	r23,96(sp)
 8026c68:	dd801717 	ldw	r22,92(sp)
 8026c6c:	dd401617 	ldw	r21,88(sp)
 8026c70:	dd001517 	ldw	r20,84(sp)
 8026c74:	dcc01417 	ldw	r19,80(sp)
 8026c78:	dc801317 	ldw	r18,76(sp)
 8026c7c:	dc401217 	ldw	r17,72(sp)
 8026c80:	dc001117 	ldw	r16,68(sp)
 8026c84:	dec01b04 	addi	sp,sp,108
 8026c88:	f800283a 	ret

08026c8c <__vfprintf_internal>:
 8026c8c:	008200f4 	movhi	r2,2051
 8026c90:	10a8f204 	addi	r2,r2,-23608
 8026c94:	300f883a 	mov	r7,r6
 8026c98:	280d883a 	mov	r6,r5
 8026c9c:	200b883a 	mov	r5,r4
 8026ca0:	11000017 	ldw	r4,0(r2)
 8026ca4:	80267681 	jmpi	8026768 <___vfprintf_internal_r>

08026ca8 <__sfvwrite_small_dev>:
 8026ca8:	2880000b 	ldhu	r2,0(r5)
 8026cac:	1080020c 	andi	r2,r2,8
 8026cb0:	10002126 	beq	r2,zero,8026d38 <__sfvwrite_small_dev+0x90>
 8026cb4:	2880008f 	ldh	r2,2(r5)
 8026cb8:	defffa04 	addi	sp,sp,-24
 8026cbc:	dc000015 	stw	r16,0(sp)
 8026cc0:	dfc00515 	stw	ra,20(sp)
 8026cc4:	dd000415 	stw	r20,16(sp)
 8026cc8:	dcc00315 	stw	r19,12(sp)
 8026ccc:	dc800215 	stw	r18,8(sp)
 8026cd0:	dc400115 	stw	r17,4(sp)
 8026cd4:	2821883a 	mov	r16,r5
 8026cd8:	10001216 	blt	r2,zero,8026d24 <__sfvwrite_small_dev+0x7c>
 8026cdc:	2027883a 	mov	r19,r4
 8026ce0:	3025883a 	mov	r18,r6
 8026ce4:	3823883a 	mov	r17,r7
 8026ce8:	05010004 	movi	r20,1024
 8026cec:	04400b0e 	bge	zero,r17,8026d1c <__sfvwrite_small_dev+0x74>
 8026cf0:	880f883a 	mov	r7,r17
 8026cf4:	a440010e 	bge	r20,r17,8026cfc <__sfvwrite_small_dev+0x54>
 8026cf8:	01c10004 	movi	r7,1024
 8026cfc:	8140008f 	ldh	r5,2(r16)
 8026d00:	900d883a 	mov	r6,r18
 8026d04:	9809883a 	mov	r4,r19
 8026d08:	8026d7c0 	call	8026d7c <_write_r>
 8026d0c:	0080050e 	bge	zero,r2,8026d24 <__sfvwrite_small_dev+0x7c>
 8026d10:	88a3c83a 	sub	r17,r17,r2
 8026d14:	90a5883a 	add	r18,r18,r2
 8026d18:	003ff406 	br	8026cec <__alt_data_end+0xfffee64c>
 8026d1c:	0005883a 	mov	r2,zero
 8026d20:	00000706 	br	8026d40 <__sfvwrite_small_dev+0x98>
 8026d24:	8080000b 	ldhu	r2,0(r16)
 8026d28:	10801014 	ori	r2,r2,64
 8026d2c:	8080000d 	sth	r2,0(r16)
 8026d30:	00bfffc4 	movi	r2,-1
 8026d34:	00000206 	br	8026d40 <__sfvwrite_small_dev+0x98>
 8026d38:	00bfffc4 	movi	r2,-1
 8026d3c:	f800283a 	ret
 8026d40:	dfc00517 	ldw	ra,20(sp)
 8026d44:	dd000417 	ldw	r20,16(sp)
 8026d48:	dcc00317 	ldw	r19,12(sp)
 8026d4c:	dc800217 	ldw	r18,8(sp)
 8026d50:	dc400117 	ldw	r17,4(sp)
 8026d54:	dc000017 	ldw	r16,0(sp)
 8026d58:	dec00604 	addi	sp,sp,24
 8026d5c:	f800283a 	ret

08026d60 <strlen>:
 8026d60:	2005883a 	mov	r2,r4
 8026d64:	10c00007 	ldb	r3,0(r2)
 8026d68:	18000226 	beq	r3,zero,8026d74 <strlen+0x14>
 8026d6c:	10800044 	addi	r2,r2,1
 8026d70:	003ffc06 	br	8026d64 <__alt_data_end+0xfffee6c4>
 8026d74:	1105c83a 	sub	r2,r2,r4
 8026d78:	f800283a 	ret

08026d7c <_write_r>:
 8026d7c:	defffd04 	addi	sp,sp,-12
 8026d80:	dc000015 	stw	r16,0(sp)
 8026d84:	040200f4 	movhi	r16,2051
 8026d88:	dc400115 	stw	r17,4(sp)
 8026d8c:	8429ed04 	addi	r16,r16,-22604
 8026d90:	2023883a 	mov	r17,r4
 8026d94:	2809883a 	mov	r4,r5
 8026d98:	300b883a 	mov	r5,r6
 8026d9c:	380d883a 	mov	r6,r7
 8026da0:	dfc00215 	stw	ra,8(sp)
 8026da4:	80000015 	stw	zero,0(r16)
 8026da8:	80271280 	call	8027128 <write>
 8026dac:	00ffffc4 	movi	r3,-1
 8026db0:	10c0031e 	bne	r2,r3,8026dc0 <_write_r+0x44>
 8026db4:	80c00017 	ldw	r3,0(r16)
 8026db8:	18000126 	beq	r3,zero,8026dc0 <_write_r+0x44>
 8026dbc:	88c00015 	stw	r3,0(r17)
 8026dc0:	dfc00217 	ldw	ra,8(sp)
 8026dc4:	dc400117 	ldw	r17,4(sp)
 8026dc8:	dc000017 	ldw	r16,0(sp)
 8026dcc:	dec00304 	addi	sp,sp,12
 8026dd0:	f800283a 	ret

08026dd4 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 8026dd4:	defff004 	addi	sp,sp,-64
 8026dd8:	df000f15 	stw	fp,60(sp)
 8026ddc:	df000f04 	addi	fp,sp,60
 8026de0:	e13ffd15 	stw	r4,-12(fp)
 8026de4:	e17ffe15 	stw	r5,-8(fp)
 8026de8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 8026dec:	00bffa84 	movi	r2,-22
 8026df0:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8026df4:	e0bffd17 	ldw	r2,-12(fp)
 8026df8:	10800828 	cmpgeui	r2,r2,32
 8026dfc:	1000501e 	bne	r2,zero,8026f40 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026e00:	0005303a 	rdctl	r2,status
 8026e04:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026e08:	e0fff617 	ldw	r3,-40(fp)
 8026e0c:	00bfff84 	movi	r2,-2
 8026e10:	1884703a 	and	r2,r3,r2
 8026e14:	1001703a 	wrctl	status,r2
  
  return context;
 8026e18:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 8026e1c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 8026e20:	008200f4 	movhi	r2,2051
 8026e24:	10a9f504 	addi	r2,r2,-22572
 8026e28:	e0fffd17 	ldw	r3,-12(fp)
 8026e2c:	180690fa 	slli	r3,r3,3
 8026e30:	10c5883a 	add	r2,r2,r3
 8026e34:	e0ffff17 	ldw	r3,-4(fp)
 8026e38:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 8026e3c:	008200f4 	movhi	r2,2051
 8026e40:	10a9f504 	addi	r2,r2,-22572
 8026e44:	e0fffd17 	ldw	r3,-12(fp)
 8026e48:	180690fa 	slli	r3,r3,3
 8026e4c:	10c5883a 	add	r2,r2,r3
 8026e50:	10800104 	addi	r2,r2,4
 8026e54:	e0fffe17 	ldw	r3,-8(fp)
 8026e58:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 8026e5c:	e0bfff17 	ldw	r2,-4(fp)
 8026e60:	10001926 	beq	r2,zero,8026ec8 <alt_irq_register+0xf4>
 8026e64:	e0bffd17 	ldw	r2,-12(fp)
 8026e68:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026e6c:	0005303a 	rdctl	r2,status
 8026e70:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026e74:	e0fff717 	ldw	r3,-36(fp)
 8026e78:	00bfff84 	movi	r2,-2
 8026e7c:	1884703a 	and	r2,r3,r2
 8026e80:	1001703a 	wrctl	status,r2
  
  return context;
 8026e84:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8026e88:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 8026e8c:	00c00044 	movi	r3,1
 8026e90:	e0bff217 	ldw	r2,-56(fp)
 8026e94:	1884983a 	sll	r2,r3,r2
 8026e98:	1007883a 	mov	r3,r2
 8026e9c:	d0a10117 	ldw	r2,-31740(gp)
 8026ea0:	1884b03a 	or	r2,r3,r2
 8026ea4:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8026ea8:	d0a10117 	ldw	r2,-31740(gp)
 8026eac:	100170fa 	wrctl	ienable,r2
 8026eb0:	e0bff817 	ldw	r2,-32(fp)
 8026eb4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8026eb8:	e0bff917 	ldw	r2,-28(fp)
 8026ebc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8026ec0:	0005883a 	mov	r2,zero
 8026ec4:	00001906 	br	8026f2c <alt_irq_register+0x158>
 8026ec8:	e0bffd17 	ldw	r2,-12(fp)
 8026ecc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8026ed0:	0005303a 	rdctl	r2,status
 8026ed4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8026ed8:	e0fffa17 	ldw	r3,-24(fp)
 8026edc:	00bfff84 	movi	r2,-2
 8026ee0:	1884703a 	and	r2,r3,r2
 8026ee4:	1001703a 	wrctl	status,r2
  
  return context;
 8026ee8:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8026eec:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 8026ef0:	00c00044 	movi	r3,1
 8026ef4:	e0bff417 	ldw	r2,-48(fp)
 8026ef8:	1884983a 	sll	r2,r3,r2
 8026efc:	0084303a 	nor	r2,zero,r2
 8026f00:	1007883a 	mov	r3,r2
 8026f04:	d0a10117 	ldw	r2,-31740(gp)
 8026f08:	1884703a 	and	r2,r3,r2
 8026f0c:	d0a10115 	stw	r2,-31740(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8026f10:	d0a10117 	ldw	r2,-31740(gp)
 8026f14:	100170fa 	wrctl	ienable,r2
 8026f18:	e0bffb17 	ldw	r2,-20(fp)
 8026f1c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8026f20:	e0bffc17 	ldw	r2,-16(fp)
 8026f24:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8026f28:	0005883a 	mov	r2,zero
 8026f2c:	e0bff115 	stw	r2,-60(fp)
 8026f30:	e0bff317 	ldw	r2,-52(fp)
 8026f34:	e0bff515 	stw	r2,-44(fp)
 8026f38:	e0bff517 	ldw	r2,-44(fp)
 8026f3c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 8026f40:	e0bff117 	ldw	r2,-60(fp)
}
 8026f44:	e037883a 	mov	sp,fp
 8026f48:	df000017 	ldw	fp,0(sp)
 8026f4c:	dec00104 	addi	sp,sp,4
 8026f50:	f800283a 	ret

08026f54 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 8026f54:	defffc04 	addi	sp,sp,-16
 8026f58:	df000315 	stw	fp,12(sp)
 8026f5c:	df000304 	addi	fp,sp,12
 8026f60:	e13ffd15 	stw	r4,-12(fp)
 8026f64:	e17ffe15 	stw	r5,-8(fp)
 8026f68:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 8026f6c:	e0fffe17 	ldw	r3,-8(fp)
 8026f70:	e0bffd17 	ldw	r2,-12(fp)
 8026f74:	18800c26 	beq	r3,r2,8026fa8 <alt_load_section+0x54>
  {
    while( to != end )
 8026f78:	00000806 	br	8026f9c <alt_load_section+0x48>
    {
      *to++ = *from++;
 8026f7c:	e0bffe17 	ldw	r2,-8(fp)
 8026f80:	10c00104 	addi	r3,r2,4
 8026f84:	e0fffe15 	stw	r3,-8(fp)
 8026f88:	e0fffd17 	ldw	r3,-12(fp)
 8026f8c:	19000104 	addi	r4,r3,4
 8026f90:	e13ffd15 	stw	r4,-12(fp)
 8026f94:	18c00017 	ldw	r3,0(r3)
 8026f98:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 8026f9c:	e0fffe17 	ldw	r3,-8(fp)
 8026fa0:	e0bfff17 	ldw	r2,-4(fp)
 8026fa4:	18bff51e 	bne	r3,r2,8026f7c <__alt_data_end+0xfffee8dc>
    {
      *to++ = *from++;
    }
  }
}
 8026fa8:	0001883a 	nop
 8026fac:	e037883a 	mov	sp,fp
 8026fb0:	df000017 	ldw	fp,0(sp)
 8026fb4:	dec00104 	addi	sp,sp,4
 8026fb8:	f800283a 	ret

08026fbc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 8026fbc:	defffe04 	addi	sp,sp,-8
 8026fc0:	dfc00115 	stw	ra,4(sp)
 8026fc4:	df000015 	stw	fp,0(sp)
 8026fc8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 8026fcc:	018200f4 	movhi	r6,2051
 8026fd0:	31a8fc04 	addi	r6,r6,-23568
 8026fd4:	014200f4 	movhi	r5,2051
 8026fd8:	29680f04 	addi	r5,r5,-24516
 8026fdc:	010200f4 	movhi	r4,2051
 8026fe0:	2128fc04 	addi	r4,r4,-23568
 8026fe4:	8026f540 	call	8026f54 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 8026fe8:	018200b4 	movhi	r6,2050
 8026fec:	31809204 	addi	r6,r6,584
 8026ff0:	014200b4 	movhi	r5,2050
 8026ff4:	29400804 	addi	r5,r5,32
 8026ff8:	010200b4 	movhi	r4,2050
 8026ffc:	21000804 	addi	r4,r4,32
 8027000:	8026f540 	call	8026f54 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 8027004:	018200f4 	movhi	r6,2051
 8027008:	31a80f04 	addi	r6,r6,-24516
 802700c:	014200f4 	movhi	r5,2051
 8027010:	29672304 	addi	r5,r5,-25460
 8027014:	010200f4 	movhi	r4,2051
 8027018:	21272304 	addi	r4,r4,-25460
 802701c:	8026f540 	call	8026f54 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 8027020:	8028d9c0 	call	8028d9c <alt_dcache_flush_all>
  alt_icache_flush_all();
 8027024:	80290400 	call	8029040 <alt_icache_flush_all>
}
 8027028:	0001883a 	nop
 802702c:	e037883a 	mov	sp,fp
 8027030:	dfc00117 	ldw	ra,4(sp)
 8027034:	df000017 	ldw	fp,0(sp)
 8027038:	dec00204 	addi	sp,sp,8
 802703c:	f800283a 	ret

08027040 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 8027040:	defffd04 	addi	sp,sp,-12
 8027044:	dfc00215 	stw	ra,8(sp)
 8027048:	df000115 	stw	fp,4(sp)
 802704c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 8027050:	0009883a 	mov	r4,zero
 8027054:	80272540 	call	8027254 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 8027058:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 802705c:	802728c0 	call	802728c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 8027060:	018200f4 	movhi	r6,2051
 8027064:	31a7ec04 	addi	r6,r6,-24656
 8027068:	014200f4 	movhi	r5,2051
 802706c:	2967ec04 	addi	r5,r5,-24656
 8027070:	010200f4 	movhi	r4,2051
 8027074:	2127ec04 	addi	r4,r4,-24656
 8027078:	80291380 	call	8029138 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 802707c:	8028ef00 	call	8028ef0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 8027080:	010200f4 	movhi	r4,2051
 8027084:	2123d404 	addi	r4,r4,-28848
 8027088:	802990c0 	call	802990c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 802708c:	d0a10217 	ldw	r2,-31736(gp)
 8027090:	d0e10317 	ldw	r3,-31732(gp)
 8027094:	d1210417 	ldw	r4,-31728(gp)
 8027098:	200d883a 	mov	r6,r4
 802709c:	180b883a 	mov	r5,r3
 80270a0:	1009883a 	mov	r4,r2
 80270a4:	80202940 	call	8020294 <main>
 80270a8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 80270ac:	01000044 	movi	r4,1
 80270b0:	8028ccc0 	call	8028ccc <close>
  exit (result);
 80270b4:	e13fff17 	ldw	r4,-4(fp)
 80270b8:	80299200 	call	8029920 <exit>

080270bc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80270bc:	defffd04 	addi	sp,sp,-12
 80270c0:	dfc00215 	stw	ra,8(sp)
 80270c4:	df000115 	stw	fp,4(sp)
 80270c8:	df000104 	addi	fp,sp,4
 80270cc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 80270d0:	e13fff17 	ldw	r4,-4(fp)
 80270d4:	8028b380 	call	8028b38 <alt_busy_sleep>
}
 80270d8:	e037883a 	mov	sp,fp
 80270dc:	dfc00117 	ldw	ra,4(sp)
 80270e0:	df000017 	ldw	fp,0(sp)
 80270e4:	dec00204 	addi	sp,sp,8
 80270e8:	f800283a 	ret

080270ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80270ec:	defffe04 	addi	sp,sp,-8
 80270f0:	dfc00115 	stw	ra,4(sp)
 80270f4:	df000015 	stw	fp,0(sp)
 80270f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80270fc:	d0a00c17 	ldw	r2,-32720(gp)
 8027100:	10000326 	beq	r2,zero,8027110 <alt_get_errno+0x24>
 8027104:	d0a00c17 	ldw	r2,-32720(gp)
 8027108:	103ee83a 	callr	r2
 802710c:	00000106 	br	8027114 <alt_get_errno+0x28>
 8027110:	d0a10004 	addi	r2,gp,-31744
}
 8027114:	e037883a 	mov	sp,fp
 8027118:	dfc00117 	ldw	ra,4(sp)
 802711c:	df000017 	ldw	fp,0(sp)
 8027120:	dec00204 	addi	sp,sp,8
 8027124:	f800283a 	ret

08027128 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 8027128:	defff904 	addi	sp,sp,-28
 802712c:	dfc00615 	stw	ra,24(sp)
 8027130:	df000515 	stw	fp,20(sp)
 8027134:	df000504 	addi	fp,sp,20
 8027138:	e13ffd15 	stw	r4,-12(fp)
 802713c:	e17ffe15 	stw	r5,-8(fp)
 8027140:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8027144:	e0bffd17 	ldw	r2,-12(fp)
 8027148:	10000616 	blt	r2,zero,8027164 <write+0x3c>
 802714c:	e0bffd17 	ldw	r2,-12(fp)
 8027150:	10c00324 	muli	r3,r2,12
 8027154:	008200f4 	movhi	r2,2051
 8027158:	10a88d04 	addi	r2,r2,-24012
 802715c:	1885883a 	add	r2,r3,r2
 8027160:	00000106 	br	8027168 <write+0x40>
 8027164:	0005883a 	mov	r2,zero
 8027168:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 802716c:	e0bffb17 	ldw	r2,-20(fp)
 8027170:	10002126 	beq	r2,zero,80271f8 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 8027174:	e0bffb17 	ldw	r2,-20(fp)
 8027178:	10800217 	ldw	r2,8(r2)
 802717c:	108000cc 	andi	r2,r2,3
 8027180:	10001826 	beq	r2,zero,80271e4 <write+0xbc>
 8027184:	e0bffb17 	ldw	r2,-20(fp)
 8027188:	10800017 	ldw	r2,0(r2)
 802718c:	10800617 	ldw	r2,24(r2)
 8027190:	10001426 	beq	r2,zero,80271e4 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 8027194:	e0bffb17 	ldw	r2,-20(fp)
 8027198:	10800017 	ldw	r2,0(r2)
 802719c:	10800617 	ldw	r2,24(r2)
 80271a0:	e0ffff17 	ldw	r3,-4(fp)
 80271a4:	180d883a 	mov	r6,r3
 80271a8:	e17ffe17 	ldw	r5,-8(fp)
 80271ac:	e13ffb17 	ldw	r4,-20(fp)
 80271b0:	103ee83a 	callr	r2
 80271b4:	e0bffc15 	stw	r2,-16(fp)
 80271b8:	e0bffc17 	ldw	r2,-16(fp)
 80271bc:	1000070e 	bge	r2,zero,80271dc <write+0xb4>
      {
        ALT_ERRNO = -rval;
 80271c0:	80270ec0 	call	80270ec <alt_get_errno>
 80271c4:	1007883a 	mov	r3,r2
 80271c8:	e0bffc17 	ldw	r2,-16(fp)
 80271cc:	0085c83a 	sub	r2,zero,r2
 80271d0:	18800015 	stw	r2,0(r3)
        return -1;
 80271d4:	00bfffc4 	movi	r2,-1
 80271d8:	00000c06 	br	802720c <write+0xe4>
      }
      return rval;
 80271dc:	e0bffc17 	ldw	r2,-16(fp)
 80271e0:	00000a06 	br	802720c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 80271e4:	80270ec0 	call	80270ec <alt_get_errno>
 80271e8:	1007883a 	mov	r3,r2
 80271ec:	00800344 	movi	r2,13
 80271f0:	18800015 	stw	r2,0(r3)
 80271f4:	00000406 	br	8027208 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 80271f8:	80270ec0 	call	80270ec <alt_get_errno>
 80271fc:	1007883a 	mov	r3,r2
 8027200:	00801444 	movi	r2,81
 8027204:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8027208:	00bfffc4 	movi	r2,-1
}
 802720c:	e037883a 	mov	sp,fp
 8027210:	dfc00117 	ldw	ra,4(sp)
 8027214:	df000017 	ldw	fp,0(sp)
 8027218:	dec00204 	addi	sp,sp,8
 802721c:	f800283a 	ret

08027220 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8027220:	defffd04 	addi	sp,sp,-12
 8027224:	dfc00215 	stw	ra,8(sp)
 8027228:	df000115 	stw	fp,4(sp)
 802722c:	df000104 	addi	fp,sp,4
 8027230:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8027234:	d1600904 	addi	r5,gp,-32732
 8027238:	e13fff17 	ldw	r4,-4(fp)
 802723c:	8028e4c0 	call	8028e4c <alt_dev_llist_insert>
}
 8027240:	e037883a 	mov	sp,fp
 8027244:	dfc00117 	ldw	ra,4(sp)
 8027248:	df000017 	ldw	fp,0(sp)
 802724c:	dec00204 	addi	sp,sp,8
 8027250:	f800283a 	ret

08027254 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8027254:	defffd04 	addi	sp,sp,-12
 8027258:	dfc00215 	stw	ra,8(sp)
 802725c:	df000115 	stw	fp,4(sp)
 8027260:	df000104 	addi	fp,sp,4
 8027264:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8027268:	80296100 	call	8029610 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 802726c:	00800044 	movi	r2,1
 8027270:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 8027274:	0001883a 	nop
 8027278:	e037883a 	mov	sp,fp
 802727c:	dfc00117 	ldw	ra,4(sp)
 8027280:	df000017 	ldw	fp,0(sp)
 8027284:	dec00204 	addi	sp,sp,8
 8027288:	f800283a 	ret

0802728c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 802728c:	defffd04 	addi	sp,sp,-12
 8027290:	dfc00215 	stw	ra,8(sp)
 8027294:	df000115 	stw	fp,4(sp)
 8027298:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 802729c:	01c00504 	movi	r7,20
 80272a0:	01800044 	movi	r6,1
 80272a4:	000b883a 	mov	r5,zero
 80272a8:	01020134 	movhi	r4,2052
 80272ac:	21040004 	addi	r4,r4,4096
 80272b0:	80278600 	call	8027860 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80272b4:	010200f4 	movhi	r4,2051
 80272b8:	21284704 	addi	r4,r4,-24292
 80272bc:	80272200 	call	8027220 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80272c0:	0001883a 	nop
    ALTERA_UP_AVALON_ACCELEROMETER_SPI_INIT ( ACCELEROMETER_SPI_0, accelerometer_spi_0);
 80272c4:	010200f4 	movhi	r4,2051
 80272c8:	21285204 	addi	r4,r4,-24248
 80272cc:	80272200 	call	8027220 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_PIXEL_BUFFER_DMA_INIT ( VIDEO_PIXEL_BUFFER_DMA_0, video_pixel_buffer_dma_0);
 80272d0:	008200f4 	movhi	r2,2051
 80272d4:	10a85d04 	addi	r2,r2,-24204
 80272d8:	10800a17 	ldw	r2,40(r2)
 80272dc:	10800017 	ldw	r2,0(r2)
 80272e0:	1007883a 	mov	r3,r2
 80272e4:	008200f4 	movhi	r2,2051
 80272e8:	10a85d04 	addi	r2,r2,-24204
 80272ec:	10c00b15 	stw	r3,44(r2)
 80272f0:	008200f4 	movhi	r2,2051
 80272f4:	10a85d04 	addi	r2,r2,-24204
 80272f8:	10800a17 	ldw	r2,40(r2)
 80272fc:	10800104 	addi	r2,r2,4
 8027300:	10800017 	ldw	r2,0(r2)
 8027304:	1007883a 	mov	r3,r2
 8027308:	008200f4 	movhi	r2,2051
 802730c:	10a85d04 	addi	r2,r2,-24204
 8027310:	10c00c15 	stw	r3,48(r2)
 8027314:	008200f4 	movhi	r2,2051
 8027318:	10a85d04 	addi	r2,r2,-24204
 802731c:	10800a17 	ldw	r2,40(r2)
 8027320:	10800204 	addi	r2,r2,8
 8027324:	10800017 	ldw	r2,0(r2)
 8027328:	10ffffcc 	andi	r3,r2,65535
 802732c:	008200f4 	movhi	r2,2051
 8027330:	10a85d04 	addi	r2,r2,-24204
 8027334:	10c00f15 	stw	r3,60(r2)
 8027338:	008200f4 	movhi	r2,2051
 802733c:	10a85d04 	addi	r2,r2,-24204
 8027340:	10800a17 	ldw	r2,40(r2)
 8027344:	10800204 	addi	r2,r2,8
 8027348:	10800017 	ldw	r2,0(r2)
 802734c:	1006d43a 	srli	r3,r2,16
 8027350:	008200f4 	movhi	r2,2051
 8027354:	10a85d04 	addi	r2,r2,-24204
 8027358:	10c01015 	stw	r3,64(r2)
 802735c:	008200f4 	movhi	r2,2051
 8027360:	10a85d04 	addi	r2,r2,-24204
 8027364:	10800a17 	ldw	r2,40(r2)
 8027368:	10800304 	addi	r2,r2,12
 802736c:	10800017 	ldw	r2,0(r2)
 8027370:	1005d07a 	srai	r2,r2,1
 8027374:	10c0004c 	andi	r3,r2,1
 8027378:	008200f4 	movhi	r2,2051
 802737c:	10a85d04 	addi	r2,r2,-24204
 8027380:	10c00d15 	stw	r3,52(r2)
 8027384:	008200f4 	movhi	r2,2051
 8027388:	10a85d04 	addi	r2,r2,-24204
 802738c:	10800a17 	ldw	r2,40(r2)
 8027390:	10800304 	addi	r2,r2,12
 8027394:	10800017 	ldw	r2,0(r2)
 8027398:	1005d13a 	srai	r2,r2,4
 802739c:	10c003cc 	andi	r3,r2,15
 80273a0:	008200f4 	movhi	r2,2051
 80273a4:	10a85d04 	addi	r2,r2,-24204
 80273a8:	10c00e15 	stw	r3,56(r2)
 80273ac:	008200f4 	movhi	r2,2051
 80273b0:	10a85d04 	addi	r2,r2,-24204
 80273b4:	10800a17 	ldw	r2,40(r2)
 80273b8:	10800304 	addi	r2,r2,12
 80273bc:	10800017 	ldw	r2,0(r2)
 80273c0:	1005d43a 	srai	r2,r2,16
 80273c4:	e0bfff05 	stb	r2,-4(fp)
 80273c8:	008200f4 	movhi	r2,2051
 80273cc:	10a85d04 	addi	r2,r2,-24204
 80273d0:	10800a17 	ldw	r2,40(r2)
 80273d4:	10800304 	addi	r2,r2,12
 80273d8:	10800017 	ldw	r2,0(r2)
 80273dc:	1004d63a 	srli	r2,r2,24
 80273e0:	e0bfff45 	stb	r2,-3(fp)
 80273e4:	008200f4 	movhi	r2,2051
 80273e8:	10a85d04 	addi	r2,r2,-24204
 80273ec:	10800e17 	ldw	r2,56(r2)
 80273f0:	10800058 	cmpnei	r2,r2,1
 80273f4:	1000041e 	bne	r2,zero,8027408 <alt_sys_init+0x17c>
 80273f8:	008200f4 	movhi	r2,2051
 80273fc:	10a85d04 	addi	r2,r2,-24204
 8027400:	10001115 	stw	zero,68(r2)
 8027404:	00000e06 	br	8027440 <alt_sys_init+0x1b4>
 8027408:	008200f4 	movhi	r2,2051
 802740c:	10a85d04 	addi	r2,r2,-24204
 8027410:	10800e17 	ldw	r2,56(r2)
 8027414:	10800098 	cmpnei	r2,r2,2
 8027418:	1000051e 	bne	r2,zero,8027430 <alt_sys_init+0x1a4>
 802741c:	008200f4 	movhi	r2,2051
 8027420:	10a85d04 	addi	r2,r2,-24204
 8027424:	00c00044 	movi	r3,1
 8027428:	10c01115 	stw	r3,68(r2)
 802742c:	00000406 	br	8027440 <alt_sys_init+0x1b4>
 8027430:	008200f4 	movhi	r2,2051
 8027434:	10a85d04 	addi	r2,r2,-24204
 8027438:	00c00084 	movi	r3,2
 802743c:	10c01115 	stw	r3,68(r2)
 8027440:	e0bfff03 	ldbu	r2,-4(fp)
 8027444:	00c00804 	movi	r3,32
 8027448:	1885c83a 	sub	r2,r3,r2
 802744c:	00ffffc4 	movi	r3,-1
 8027450:	1886d83a 	srl	r3,r3,r2
 8027454:	008200f4 	movhi	r2,2051
 8027458:	10a85d04 	addi	r2,r2,-24204
 802745c:	10c01215 	stw	r3,72(r2)
 8027460:	e0ffff03 	ldbu	r3,-4(fp)
 8027464:	008200f4 	movhi	r2,2051
 8027468:	10a85d04 	addi	r2,r2,-24204
 802746c:	10801117 	ldw	r2,68(r2)
 8027470:	1887883a 	add	r3,r3,r2
 8027474:	008200f4 	movhi	r2,2051
 8027478:	10a85d04 	addi	r2,r2,-24204
 802747c:	10c01315 	stw	r3,76(r2)
 8027480:	e0bfff43 	ldbu	r2,-3(fp)
 8027484:	00c00804 	movi	r3,32
 8027488:	1885c83a 	sub	r2,r3,r2
 802748c:	00ffffc4 	movi	r3,-1
 8027490:	1886d83a 	srl	r3,r3,r2
 8027494:	008200f4 	movhi	r2,2051
 8027498:	10a85d04 	addi	r2,r2,-24204
 802749c:	10c01415 	stw	r3,80(r2)
 80274a0:	010200f4 	movhi	r4,2051
 80274a4:	21285d04 	addi	r4,r4,-24204
 80274a8:	80272200 	call	8027220 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_RGB_RESAMPLER_INIT ( VIDEO_RGB_RESAMPLER_0, video_rgb_resampler_0);
 80274ac:	008200f4 	movhi	r2,2051
 80274b0:	10a87204 	addi	r2,r2,-24120
 80274b4:	10800a17 	ldw	r2,40(r2)
 80274b8:	10800017 	ldw	r2,0(r2)
 80274bc:	10c003cc 	andi	r3,r2,15
 80274c0:	008200f4 	movhi	r2,2051
 80274c4:	10a87204 	addi	r2,r2,-24120
 80274c8:	10c00b15 	stw	r3,44(r2)
 80274cc:	008200f4 	movhi	r2,2051
 80274d0:	10a87204 	addi	r2,r2,-24120
 80274d4:	10800a17 	ldw	r2,40(r2)
 80274d8:	10800017 	ldw	r2,0(r2)
 80274dc:	1005d13a 	srai	r2,r2,4
 80274e0:	10c0004c 	andi	r3,r2,1
 80274e4:	008200f4 	movhi	r2,2051
 80274e8:	10a87204 	addi	r2,r2,-24120
 80274ec:	10c00c15 	stw	r3,48(r2)
 80274f0:	008200f4 	movhi	r2,2051
 80274f4:	10a87204 	addi	r2,r2,-24120
 80274f8:	10800a17 	ldw	r2,40(r2)
 80274fc:	10800017 	ldw	r2,0(r2)
 8027500:	1005d17a 	srai	r2,r2,5
 8027504:	10c0004c 	andi	r3,r2,1
 8027508:	008200f4 	movhi	r2,2051
 802750c:	10a87204 	addi	r2,r2,-24120
 8027510:	10c00d15 	stw	r3,52(r2)
 8027514:	008200f4 	movhi	r2,2051
 8027518:	10a87204 	addi	r2,r2,-24120
 802751c:	10800a17 	ldw	r2,40(r2)
 8027520:	10800017 	ldw	r2,0(r2)
 8027524:	1005d43a 	srai	r2,r2,16
 8027528:	10c003cc 	andi	r3,r2,15
 802752c:	008200f4 	movhi	r2,2051
 8027530:	10a87204 	addi	r2,r2,-24120
 8027534:	10c00e15 	stw	r3,56(r2)
 8027538:	008200f4 	movhi	r2,2051
 802753c:	10a87204 	addi	r2,r2,-24120
 8027540:	10800a17 	ldw	r2,40(r2)
 8027544:	10800017 	ldw	r2,0(r2)
 8027548:	1005d53a 	srai	r2,r2,20
 802754c:	10c0004c 	andi	r3,r2,1
 8027550:	008200f4 	movhi	r2,2051
 8027554:	10a87204 	addi	r2,r2,-24120
 8027558:	10c00f15 	stw	r3,60(r2)
 802755c:	008200f4 	movhi	r2,2051
 8027560:	10a87204 	addi	r2,r2,-24120
 8027564:	10800a17 	ldw	r2,40(r2)
 8027568:	10800017 	ldw	r2,0(r2)
 802756c:	1005d57a 	srai	r2,r2,21
 8027570:	10c0004c 	andi	r3,r2,1
 8027574:	008200f4 	movhi	r2,2051
 8027578:	10a87204 	addi	r2,r2,-24120
 802757c:	10c01015 	stw	r3,64(r2)
 8027580:	010200f4 	movhi	r4,2051
 8027584:	21287204 	addi	r4,r4,-24120
 8027588:	80272200 	call	8027220 <alt_dev_reg>
}
 802758c:	0001883a 	nop
 8027590:	e037883a 	mov	sp,fp
 8027594:	dfc00117 	ldw	ra,4(sp)
 8027598:	df000017 	ldw	fp,0(sp)
 802759c:	dec00204 	addi	sp,sp,8
 80275a0:	f800283a 	ret

080275a4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80275a4:	defffa04 	addi	sp,sp,-24
 80275a8:	dfc00515 	stw	ra,20(sp)
 80275ac:	df000415 	stw	fp,16(sp)
 80275b0:	df000404 	addi	fp,sp,16
 80275b4:	e13ffd15 	stw	r4,-12(fp)
 80275b8:	e17ffe15 	stw	r5,-8(fp)
 80275bc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80275c0:	e0bffd17 	ldw	r2,-12(fp)
 80275c4:	10800017 	ldw	r2,0(r2)
 80275c8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80275cc:	e0bffc17 	ldw	r2,-16(fp)
 80275d0:	10c00a04 	addi	r3,r2,40
 80275d4:	e0bffd17 	ldw	r2,-12(fp)
 80275d8:	10800217 	ldw	r2,8(r2)
 80275dc:	100f883a 	mov	r7,r2
 80275e0:	e1bfff17 	ldw	r6,-4(fp)
 80275e4:	e17ffe17 	ldw	r5,-8(fp)
 80275e8:	1809883a 	mov	r4,r3
 80275ec:	80276640 	call	8027664 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 80275f0:	e037883a 	mov	sp,fp
 80275f4:	dfc00117 	ldw	ra,4(sp)
 80275f8:	df000017 	ldw	fp,0(sp)
 80275fc:	dec00204 	addi	sp,sp,8
 8027600:	f800283a 	ret

08027604 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8027604:	defffa04 	addi	sp,sp,-24
 8027608:	dfc00515 	stw	ra,20(sp)
 802760c:	df000415 	stw	fp,16(sp)
 8027610:	df000404 	addi	fp,sp,16
 8027614:	e13ffd15 	stw	r4,-12(fp)
 8027618:	e17ffe15 	stw	r5,-8(fp)
 802761c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8027620:	e0bffd17 	ldw	r2,-12(fp)
 8027624:	10800017 	ldw	r2,0(r2)
 8027628:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 802762c:	e0bffc17 	ldw	r2,-16(fp)
 8027630:	10c00a04 	addi	r3,r2,40
 8027634:	e0bffd17 	ldw	r2,-12(fp)
 8027638:	10800217 	ldw	r2,8(r2)
 802763c:	100f883a 	mov	r7,r2
 8027640:	e1bfff17 	ldw	r6,-4(fp)
 8027644:	e17ffe17 	ldw	r5,-8(fp)
 8027648:	1809883a 	mov	r4,r3
 802764c:	80277500 	call	8027750 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8027650:	e037883a 	mov	sp,fp
 8027654:	dfc00117 	ldw	ra,4(sp)
 8027658:	df000017 	ldw	fp,0(sp)
 802765c:	dec00204 	addi	sp,sp,8
 8027660:	f800283a 	ret

08027664 <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
 8027664:	defff704 	addi	sp,sp,-36
 8027668:	df000815 	stw	fp,32(sp)
 802766c:	df000804 	addi	fp,sp,32
 8027670:	e13ffc15 	stw	r4,-16(fp)
 8027674:	e17ffd15 	stw	r5,-12(fp)
 8027678:	e1bffe15 	stw	r6,-8(fp)
 802767c:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 8027680:	e0bffc17 	ldw	r2,-16(fp)
 8027684:	10800017 	ldw	r2,0(r2)
 8027688:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
 802768c:	e0bffd17 	ldw	r2,-12(fp)
 8027690:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
 8027694:	e0bffe17 	ldw	r2,-8(fp)
 8027698:	e0fffd17 	ldw	r3,-12(fp)
 802769c:	1885883a 	add	r2,r3,r2
 80276a0:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
 80276a4:	00001206 	br	80276f0 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80276a8:	e0bff917 	ldw	r2,-28(fp)
 80276ac:	10800037 	ldwio	r2,0(r2)
 80276b0:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
 80276b4:	e0bffb17 	ldw	r2,-20(fp)
 80276b8:	10a0000c 	andi	r2,r2,32768
 80276bc:	10000626 	beq	r2,zero,80276d8 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80276c0:	e0bff817 	ldw	r2,-32(fp)
 80276c4:	10c00044 	addi	r3,r2,1
 80276c8:	e0fff815 	stw	r3,-32(fp)
 80276cc:	e0fffb17 	ldw	r3,-20(fp)
 80276d0:	10c00005 	stb	r3,0(r2)
 80276d4:	00000606 	br	80276f0 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
 80276d8:	e0fff817 	ldw	r3,-32(fp)
 80276dc:	e0bffd17 	ldw	r2,-12(fp)
 80276e0:	1880071e 	bne	r3,r2,8027700 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
 80276e4:	e0bfff17 	ldw	r2,-4(fp)
 80276e8:	1090000c 	andi	r2,r2,16384
 80276ec:	1000061e 	bne	r2,zero,8027708 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
 80276f0:	e0fff817 	ldw	r3,-32(fp)
 80276f4:	e0bffa17 	ldw	r2,-24(fp)
 80276f8:	18bfeb36 	bltu	r3,r2,80276a8 <__alt_data_end+0xfffef008>
 80276fc:	00000306 	br	802770c <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
 8027700:	0001883a 	nop
 8027704:	00000106 	br	802770c <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
 8027708:	0001883a 	nop
    
  }

  if (ptr != buffer)
 802770c:	e0fff817 	ldw	r3,-32(fp)
 8027710:	e0bffd17 	ldw	r2,-12(fp)
 8027714:	18800426 	beq	r3,r2,8027728 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
 8027718:	e0fff817 	ldw	r3,-32(fp)
 802771c:	e0bffd17 	ldw	r2,-12(fp)
 8027720:	1885c83a 	sub	r2,r3,r2
 8027724:	00000606 	br	8027740 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
 8027728:	e0bfff17 	ldw	r2,-4(fp)
 802772c:	1090000c 	andi	r2,r2,16384
 8027730:	10000226 	beq	r2,zero,802773c <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
 8027734:	00bffd44 	movi	r2,-11
 8027738:	00000106 	br	8027740 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
 802773c:	00bffec4 	movi	r2,-5
}
 8027740:	e037883a 	mov	sp,fp
 8027744:	df000017 	ldw	fp,0(sp)
 8027748:	dec00104 	addi	sp,sp,4
 802774c:	f800283a 	ret

08027750 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8027750:	defff904 	addi	sp,sp,-28
 8027754:	df000615 	stw	fp,24(sp)
 8027758:	df000604 	addi	fp,sp,24
 802775c:	e13ffc15 	stw	r4,-16(fp)
 8027760:	e17ffd15 	stw	r5,-12(fp)
 8027764:	e1bffe15 	stw	r6,-8(fp)
 8027768:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 802776c:	e0bffc17 	ldw	r2,-16(fp)
 8027770:	10800017 	ldw	r2,0(r2)
 8027774:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 8027778:	e0bffe17 	ldw	r2,-8(fp)
 802777c:	e0fffd17 	ldw	r3,-12(fp)
 8027780:	1885883a 	add	r2,r3,r2
 8027784:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 8027788:	00000e06 	br	80277c4 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 802778c:	e0bffa17 	ldw	r2,-24(fp)
 8027790:	10800104 	addi	r2,r2,4
 8027794:	10800037 	ldwio	r2,0(r2)
 8027798:	10bfffec 	andhi	r2,r2,65535
 802779c:	10000926 	beq	r2,zero,80277c4 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 80277a0:	e0fffa17 	ldw	r3,-24(fp)
 80277a4:	e0bffd17 	ldw	r2,-12(fp)
 80277a8:	11000044 	addi	r4,r2,1
 80277ac:	e13ffd15 	stw	r4,-12(fp)
 80277b0:	10800003 	ldbu	r2,0(r2)
 80277b4:	10803fcc 	andi	r2,r2,255
 80277b8:	1080201c 	xori	r2,r2,128
 80277bc:	10bfe004 	addi	r2,r2,-128
 80277c0:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 80277c4:	e0fffd17 	ldw	r3,-12(fp)
 80277c8:	e0bffb17 	ldw	r2,-20(fp)
 80277cc:	18bfef36 	bltu	r3,r2,802778c <__alt_data_end+0xfffef0ec>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 80277d0:	e0bffe17 	ldw	r2,-8(fp)
}
 80277d4:	e037883a 	mov	sp,fp
 80277d8:	df000017 	ldw	fp,0(sp)
 80277dc:	dec00104 	addi	sp,sp,4
 80277e0:	f800283a 	ret

080277e4 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 80277e4:	defff904 	addi	sp,sp,-28
 80277e8:	dfc00615 	stw	ra,24(sp)
 80277ec:	df000515 	stw	fp,20(sp)
 80277f0:	df000504 	addi	fp,sp,20
 80277f4:	e13ffe15 	stw	r4,-8(fp)
 80277f8:	e17fff15 	stw	r5,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 80277fc:	0007883a 	mov	r3,zero
 8027800:	e0bffe17 	ldw	r2,-8(fp)
 8027804:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8027808:	e0bffe17 	ldw	r2,-8(fp)
 802780c:	10800104 	addi	r2,r2,4
 8027810:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 8027814:	0005303a 	rdctl	r2,status
 8027818:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 802781c:	e0fffc17 	ldw	r3,-16(fp)
 8027820:	00bfff84 	movi	r2,-2
 8027824:	1884703a 	and	r2,r3,r2
 8027828:	1001703a 	wrctl	status,r2
  
  return context;
 802782c:	e0bffc17 	ldw	r2,-16(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8027830:	e0bffb15 	stw	r2,-20(fp)
  alt_tick ();
 8027834:	80295080 	call	8029508 <alt_tick>
 8027838:	e0bffb17 	ldw	r2,-20(fp)
 802783c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 8027840:	e0bffd17 	ldw	r2,-12(fp)
 8027844:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8027848:	0001883a 	nop
 802784c:	e037883a 	mov	sp,fp
 8027850:	dfc00117 	ldw	ra,4(sp)
 8027854:	df000017 	ldw	fp,0(sp)
 8027858:	dec00204 	addi	sp,sp,8
 802785c:	f800283a 	ret

08027860 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8027860:	defff904 	addi	sp,sp,-28
 8027864:	dfc00615 	stw	ra,24(sp)
 8027868:	df000515 	stw	fp,20(sp)
 802786c:	df000504 	addi	fp,sp,20
 8027870:	e13ffc15 	stw	r4,-16(fp)
 8027874:	e17ffd15 	stw	r5,-12(fp)
 8027878:	e1bffe15 	stw	r6,-8(fp)
 802787c:	e1ffff15 	stw	r7,-4(fp)
 8027880:	e0bfff17 	ldw	r2,-4(fp)
 8027884:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8027888:	d0a10517 	ldw	r2,-31724(gp)
 802788c:	1000021e 	bne	r2,zero,8027898 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8027890:	e0bffb17 	ldw	r2,-20(fp)
 8027894:	d0a10515 	stw	r2,-31724(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8027898:	e0bffc17 	ldw	r2,-16(fp)
 802789c:	10800104 	addi	r2,r2,4
 80278a0:	00c001c4 	movi	r3,7
 80278a4:	10c00035 	stwio	r3,0(r2)
  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
 80278a8:	018200b4 	movhi	r6,2050
 80278ac:	319df904 	addi	r6,r6,30692
 80278b0:	e17ffc17 	ldw	r5,-16(fp)
 80278b4:	e13ffe17 	ldw	r4,-8(fp)
 80278b8:	8026dd40 	call	8026dd4 <alt_irq_register>
#endif  
}
 80278bc:	0001883a 	nop
 80278c0:	e037883a 	mov	sp,fp
 80278c4:	dfc00117 	ldw	ra,4(sp)
 80278c8:	df000017 	ldw	fp,0(sp)
 80278cc:	dec00204 	addi	sp,sp,8
 80278d0:	f800283a 	ret

080278d4 <alt_up_accelerometer_spi_open_dev>:

#include "altera_up_avalon_accelerometer_spi.h"
#include "altera_up_avalon_accelerometer_spi_regs.h"

alt_up_accelerometer_spi_dev* alt_up_accelerometer_spi_open_dev(const char* name)
{
 80278d4:	defffc04 	addi	sp,sp,-16
 80278d8:	dfc00315 	stw	ra,12(sp)
 80278dc:	df000215 	stw	fp,8(sp)
 80278e0:	df000204 	addi	fp,sp,8
 80278e4:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_accelerometer_spi_dev *dev = (alt_up_accelerometer_spi_dev*)alt_find_dev(name, &alt_dev_list);
 80278e8:	d1600904 	addi	r5,gp,-32732
 80278ec:	e13fff17 	ldw	r4,-4(fp)
 80278f0:	8028fb00 	call	8028fb0 <alt_find_dev>
 80278f4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 80278f8:	e0bffe17 	ldw	r2,-8(fp)
}
 80278fc:	e037883a 	mov	sp,fp
 8027900:	dfc00117 	ldw	ra,4(sp)
 8027904:	df000017 	ldw	fp,0(sp)
 8027908:	dec00204 	addi	sp,sp,8
 802790c:	f800283a 	ret

08027910 <alt_up_accelerometer_spi_read_address_register>:
 * @param addr -- a pointer to the location where the read address should be stored
 *
 * @return 0 for success 
 **/
int alt_up_accelerometer_spi_read_address_register(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 *addr)
{
 8027910:	defffd04 	addi	sp,sp,-12
 8027914:	df000215 	stw	fp,8(sp)
 8027918:	df000204 	addi	fp,sp,8
 802791c:	e13ffe15 	stw	r4,-8(fp)
 8027920:	e17fff15 	stw	r5,-4(fp)
	// reads data from the device Address register
	*(addr) = IORD_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base); 
 8027924:	e0bffe17 	ldw	r2,-8(fp)
 8027928:	10800a17 	ldw	r2,40(r2)
 802792c:	10800023 	ldbuio	r2,0(r2)
 8027930:	10803fcc 	andi	r2,r2,255
 8027934:	1007883a 	mov	r3,r2
 8027938:	e0bfff17 	ldw	r2,-4(fp)
 802793c:	10c00005 	stb	r3,0(r2)

	return 0;
 8027940:	0005883a 	mov	r2,zero
}
 8027944:	e037883a 	mov	sp,fp
 8027948:	df000017 	ldw	fp,0(sp)
 802794c:	dec00104 	addi	sp,sp,4
 8027950:	f800283a 	ret

08027954 <alt_up_accelerometer_spi_read>:
 * @param data -- a pointer to the location where the read data should be stored
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_read(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 *data)
{
 8027954:	defffc04 	addi	sp,sp,-16
 8027958:	df000315 	stw	fp,12(sp)
 802795c:	df000304 	addi	fp,sp,12
 8027960:	e13ffd15 	stw	r4,-12(fp)
 8027964:	2805883a 	mov	r2,r5
 8027968:	e1bfff15 	stw	r6,-4(fp)
 802796c:	e0bffe05 	stb	r2,-8(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027970:	e0bffd17 	ldw	r2,-12(fp)
 8027974:	10800a17 	ldw	r2,40(r2)
 8027978:	1007883a 	mov	r3,r2
 802797c:	e0bffe03 	ldbu	r2,-8(fp)
 8027980:	10800fcc 	andi	r2,r2,63
 8027984:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(data) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 8027988:	e0bffd17 	ldw	r2,-12(fp)
 802798c:	10800a17 	ldw	r2,40(r2)
 8027990:	10800044 	addi	r2,r2,1
 8027994:	10800023 	ldbuio	r2,0(r2)
 8027998:	10803fcc 	andi	r2,r2,255
 802799c:	1007883a 	mov	r3,r2
 80279a0:	e0bfff17 	ldw	r2,-4(fp)
 80279a4:	10c00005 	stb	r3,0(r2)

	return 0;
 80279a8:	0005883a 	mov	r2,zero
}
 80279ac:	e037883a 	mov	sp,fp
 80279b0:	df000017 	ldw	fp,0(sp)
 80279b4:	dec00104 	addi	sp,sp,4
 80279b8:	f800283a 	ret

080279bc <alt_up_accelerometer_spi_write>:
 * @param data -- the data to be written
 *
 * @return 0 for success
 **/
int alt_up_accelerometer_spi_write(alt_up_accelerometer_spi_dev *accel_spi, alt_u8 addr, alt_u8 data)
{
 80279bc:	defffc04 	addi	sp,sp,-16
 80279c0:	df000315 	stw	fp,12(sp)
 80279c4:	df000304 	addi	fp,sp,12
 80279c8:	e13ffd15 	stw	r4,-12(fp)
 80279cc:	2807883a 	mov	r3,r5
 80279d0:	3005883a 	mov	r2,r6
 80279d4:	e0fffe05 	stb	r3,-8(fp)
 80279d8:	e0bfff05 	stb	r2,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, addr & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 80279dc:	e0bffd17 	ldw	r2,-12(fp)
 80279e0:	10800a17 	ldw	r2,40(r2)
 80279e4:	1007883a 	mov	r3,r2
 80279e8:	e0bffe03 	ldbu	r2,-8(fp)
 80279ec:	10800fcc 	andi	r2,r2,63
 80279f0:	18800025 	stbio	r2,0(r3)

	// write data to the device Data register
	IOWR_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base, data & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK); 
 80279f4:	e0bffd17 	ldw	r2,-12(fp)
 80279f8:	10800a17 	ldw	r2,40(r2)
 80279fc:	10800044 	addi	r2,r2,1
 8027a00:	1007883a 	mov	r3,r2
 8027a04:	e0bfff03 	ldbu	r2,-4(fp)
 8027a08:	18800025 	stbio	r2,0(r3)

	return 0;
 8027a0c:	0005883a 	mov	r2,zero
}
 8027a10:	e037883a 	mov	sp,fp
 8027a14:	df000017 	ldw	fp,0(sp)
 8027a18:	dec00104 	addi	sp,sp,4
 8027a1c:	f800283a 	ret

08027a20 <alt_up_accelerometer_spi_read_x_axis>:
 * @param x_axis -- a pointer to the location where the x axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_x_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *x_axis)
{
 8027a20:	defffd04 	addi	sp,sp,-12
 8027a24:	df000215 	stw	fp,8(sp)
 8027a28:	df000204 	addi	fp,sp,8
 8027a2c:	e13ffe15 	stw	r4,-8(fp)
 8027a30:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027a34:	e0bffe17 	ldw	r2,-8(fp)
 8027a38:	10800a17 	ldw	r2,40(r2)
 8027a3c:	1007883a 	mov	r3,r2
 8027a40:	00800c84 	movi	r2,50
 8027a44:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 8027a48:	e0bffe17 	ldw	r2,-8(fp)
 8027a4c:	10800a17 	ldw	r2,40(r2)
 8027a50:	10800044 	addi	r2,r2,1
 8027a54:	10800023 	ldbuio	r2,0(r2)
 8027a58:	10803fcc 	andi	r2,r2,255
 8027a5c:	10ffffcc 	andi	r3,r2,65535
 8027a60:	e0bfff17 	ldw	r2,-4(fp)
 8027a64:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_X_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027a68:	e0bffe17 	ldw	r2,-8(fp)
 8027a6c:	10800a17 	ldw	r2,40(r2)
 8027a70:	1007883a 	mov	r3,r2
 8027a74:	00800cc4 	movi	r2,51
 8027a78:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(x_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 8027a7c:	e0bffe17 	ldw	r2,-8(fp)
 8027a80:	10800a17 	ldw	r2,40(r2)
 8027a84:	10800044 	addi	r2,r2,1
 8027a88:	10800023 	ldbuio	r2,0(r2)
 8027a8c:	10803fcc 	andi	r2,r2,255
 8027a90:	10bfffcc 	andi	r2,r2,65535
 8027a94:	1004923a 	slli	r2,r2,8
 8027a98:	e0ffff17 	ldw	r3,-4(fp)
 8027a9c:	18c00017 	ldw	r3,0(r3)
 8027aa0:	1885883a 	add	r2,r3,r2
 8027aa4:	1007883a 	mov	r3,r2
 8027aa8:	e0bfff17 	ldw	r2,-4(fp)
 8027aac:	10c00015 	stw	r3,0(r2)

	if (*(x_axis) & 0x00008000)
 8027ab0:	e0bfff17 	ldw	r2,-4(fp)
 8027ab4:	10800017 	ldw	r2,0(r2)
 8027ab8:	10a0000c 	andi	r2,r2,32768
 8027abc:	10000626 	beq	r2,zero,8027ad8 <alt_up_accelerometer_spi_read_x_axis+0xb8>
	{
		*(x_axis) |= 0xFFFF0000;
 8027ac0:	e0bfff17 	ldw	r2,-4(fp)
 8027ac4:	10800017 	ldw	r2,0(r2)
 8027ac8:	10bffff4 	orhi	r2,r2,65535
 8027acc:	1007883a 	mov	r3,r2
 8027ad0:	e0bfff17 	ldw	r2,-4(fp)
 8027ad4:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 8027ad8:	0005883a 	mov	r2,zero
}
 8027adc:	e037883a 	mov	sp,fp
 8027ae0:	df000017 	ldw	fp,0(sp)
 8027ae4:	dec00104 	addi	sp,sp,4
 8027ae8:	f800283a 	ret

08027aec <alt_up_accelerometer_spi_read_y_axis>:
 * @param y_axis -- a pointer to the location where the y axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_y_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *y_axis)
{
 8027aec:	defffd04 	addi	sp,sp,-12
 8027af0:	df000215 	stw	fp,8(sp)
 8027af4:	df000204 	addi	fp,sp,8
 8027af8:	e13ffe15 	stw	r4,-8(fp)
 8027afc:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027b00:	e0bffe17 	ldw	r2,-8(fp)
 8027b04:	10800a17 	ldw	r2,40(r2)
 8027b08:	1007883a 	mov	r3,r2
 8027b0c:	00800d04 	movi	r2,52
 8027b10:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 8027b14:	e0bffe17 	ldw	r2,-8(fp)
 8027b18:	10800a17 	ldw	r2,40(r2)
 8027b1c:	10800044 	addi	r2,r2,1
 8027b20:	10800023 	ldbuio	r2,0(r2)
 8027b24:	10803fcc 	andi	r2,r2,255
 8027b28:	10ffffcc 	andi	r3,r2,65535
 8027b2c:	e0bfff17 	ldw	r2,-4(fp)
 8027b30:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Y_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027b34:	e0bffe17 	ldw	r2,-8(fp)
 8027b38:	10800a17 	ldw	r2,40(r2)
 8027b3c:	1007883a 	mov	r3,r2
 8027b40:	00800d44 	movi	r2,53
 8027b44:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(y_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 8027b48:	e0bffe17 	ldw	r2,-8(fp)
 8027b4c:	10800a17 	ldw	r2,40(r2)
 8027b50:	10800044 	addi	r2,r2,1
 8027b54:	10800023 	ldbuio	r2,0(r2)
 8027b58:	10803fcc 	andi	r2,r2,255
 8027b5c:	10bfffcc 	andi	r2,r2,65535
 8027b60:	1004923a 	slli	r2,r2,8
 8027b64:	e0ffff17 	ldw	r3,-4(fp)
 8027b68:	18c00017 	ldw	r3,0(r3)
 8027b6c:	1885883a 	add	r2,r3,r2
 8027b70:	1007883a 	mov	r3,r2
 8027b74:	e0bfff17 	ldw	r2,-4(fp)
 8027b78:	10c00015 	stw	r3,0(r2)

	if (*(y_axis) & 0x00008000)
 8027b7c:	e0bfff17 	ldw	r2,-4(fp)
 8027b80:	10800017 	ldw	r2,0(r2)
 8027b84:	10a0000c 	andi	r2,r2,32768
 8027b88:	10000626 	beq	r2,zero,8027ba4 <alt_up_accelerometer_spi_read_y_axis+0xb8>
	{
		*(y_axis) |= 0xFFFF0000;
 8027b8c:	e0bfff17 	ldw	r2,-4(fp)
 8027b90:	10800017 	ldw	r2,0(r2)
 8027b94:	10bffff4 	orhi	r2,r2,65535
 8027b98:	1007883a 	mov	r3,r2
 8027b9c:	e0bfff17 	ldw	r2,-4(fp)
 8027ba0:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 8027ba4:	0005883a 	mov	r2,zero
}
 8027ba8:	e037883a 	mov	sp,fp
 8027bac:	df000017 	ldw	fp,0(sp)
 8027bb0:	dec00104 	addi	sp,sp,4
 8027bb4:	f800283a 	ret

08027bb8 <alt_up_accelerometer_spi_read_z_axis>:
 * @param z_axis -- a pointer to the location where the z axis data should be stored
 *
 * @return 0 for success or -1 for failure
 **/
int alt_up_accelerometer_spi_read_z_axis(alt_up_accelerometer_spi_dev *accel_spi, alt_32 *z_axis)
{
 8027bb8:	defffd04 	addi	sp,sp,-12
 8027bbc:	df000215 	stw	fp,8(sp)
 8027bc0:	df000204 	addi	fp,sp,8
 8027bc4:	e13ffe15 	stw	r4,-8(fp)
 8027bc8:	e17fff15 	stw	r5,-4(fp)
	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_LOWER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027bcc:	e0bffe17 	ldw	r2,-8(fp)
 8027bd0:	10800a17 	ldw	r2,40(r2)
 8027bd4:	1007883a 	mov	r3,r2
 8027bd8:	00800d84 	movi	r2,54
 8027bdc:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) = IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK;
 8027be0:	e0bffe17 	ldw	r2,-8(fp)
 8027be4:	10800a17 	ldw	r2,40(r2)
 8027be8:	10800044 	addi	r2,r2,1
 8027bec:	10800023 	ldbuio	r2,0(r2)
 8027bf0:	10803fcc 	andi	r2,r2,255
 8027bf4:	10ffffcc 	andi	r3,r2,65535
 8027bf8:	e0bfff17 	ldw	r2,-4(fp)
 8027bfc:	10c00015 	stw	r3,0(r2)

	// set the register address in the Address register
	IOWR_ALT_UP_ACCELEROMETER_SPI_ADDRESS(accel_spi->base, ACCELEROMETER_SPI_Z_AXIS_UPPER_BYTE & ALT_UP_ACCELEROMETER_SPI_ADDRESS_ADDR_MSK); 
 8027c00:	e0bffe17 	ldw	r2,-8(fp)
 8027c04:	10800a17 	ldw	r2,40(r2)
 8027c08:	1007883a 	mov	r3,r2
 8027c0c:	00800dc4 	movi	r2,55
 8027c10:	18800025 	stbio	r2,0(r3)

	// read data to the device Data register
	*(z_axis) += (IORD_ALT_UP_ACCELEROMETER_SPI_DATA(accel_spi->base) & ALT_UP_ACCELEROMETER_SPI_DATA_DATA_MSK) << 8;
 8027c14:	e0bffe17 	ldw	r2,-8(fp)
 8027c18:	10800a17 	ldw	r2,40(r2)
 8027c1c:	10800044 	addi	r2,r2,1
 8027c20:	10800023 	ldbuio	r2,0(r2)
 8027c24:	10803fcc 	andi	r2,r2,255
 8027c28:	10bfffcc 	andi	r2,r2,65535
 8027c2c:	1004923a 	slli	r2,r2,8
 8027c30:	e0ffff17 	ldw	r3,-4(fp)
 8027c34:	18c00017 	ldw	r3,0(r3)
 8027c38:	1885883a 	add	r2,r3,r2
 8027c3c:	1007883a 	mov	r3,r2
 8027c40:	e0bfff17 	ldw	r2,-4(fp)
 8027c44:	10c00015 	stw	r3,0(r2)

	if (*(z_axis) & 0x00008000)
 8027c48:	e0bfff17 	ldw	r2,-4(fp)
 8027c4c:	10800017 	ldw	r2,0(r2)
 8027c50:	10a0000c 	andi	r2,r2,32768
 8027c54:	10000626 	beq	r2,zero,8027c70 <alt_up_accelerometer_spi_read_z_axis+0xb8>
	{
		*(z_axis) |= 0xFFFF0000;
 8027c58:	e0bfff17 	ldw	r2,-4(fp)
 8027c5c:	10800017 	ldw	r2,0(r2)
 8027c60:	10bffff4 	orhi	r2,r2,65535
 8027c64:	1007883a 	mov	r3,r2
 8027c68:	e0bfff17 	ldw	r2,-4(fp)
 8027c6c:	10c00015 	stw	r3,0(r2)
	}

	return 0;
 8027c70:	0005883a 	mov	r2,zero
}
 8027c74:	e037883a 	mov	sp,fp
 8027c78:	df000017 	ldw	fp,0(sp)
 8027c7c:	dec00104 	addi	sp,sp,4
 8027c80:	f800283a 	ret

08027c84 <alt_up_pixel_buffer_dma_open_dev>:

#include "altera_up_avalon_video_pixel_buffer_dma.h"

#define ABS(x)	((x >= 0) ? (x) : (-(x)))

alt_up_pixel_buffer_dma_dev* alt_up_pixel_buffer_dma_open_dev(const char* name) {
 8027c84:	defffc04 	addi	sp,sp,-16
 8027c88:	dfc00315 	stw	ra,12(sp)
 8027c8c:	df000215 	stw	fp,8(sp)
 8027c90:	df000204 	addi	fp,sp,8
 8027c94:	e13fff15 	stw	r4,-4(fp)
  // find the device from the device list 
  // (see altera_hal/HAL/inc/priv/alt_file.h 
  // and altera_hal/HAL/src/alt_find_dev.c 
  // for details)
  alt_up_pixel_buffer_dma_dev *dev = (alt_up_pixel_buffer_dma_dev*)alt_find_dev(name, &alt_dev_list);
 8027c98:	d1600904 	addi	r5,gp,-32732
 8027c9c:	e13fff17 	ldw	r4,-4(fp)
 8027ca0:	8028fb00 	call	8028fb0 <alt_find_dev>
 8027ca4:	e0bffe15 	stw	r2,-8(fp)

  return dev;
 8027ca8:	e0bffe17 	ldw	r2,-8(fp)
}
 8027cac:	e037883a 	mov	sp,fp
 8027cb0:	dfc00117 	ldw	ra,4(sp)
 8027cb4:	df000017 	ldw	fp,0(sp)
 8027cb8:	dec00204 	addi	sp,sp,8
 8027cbc:	f800283a 	ret

08027cc0 <alt_up_pixel_buffer_dma_draw>:

int alt_up_pixel_buffer_dma_draw(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int color, unsigned int x, unsigned int y)
/* This function draws a pixel to the back buffer.
 */
{
 8027cc0:	defffa04 	addi	sp,sp,-24
 8027cc4:	df000515 	stw	fp,20(sp)
 8027cc8:	df000504 	addi	fp,sp,20
 8027ccc:	e13ffc15 	stw	r4,-16(fp)
 8027cd0:	e17ffd15 	stw	r5,-12(fp)
 8027cd4:	e1bffe15 	stw	r6,-8(fp)
 8027cd8:	e1ffff15 	stw	r7,-4(fp)
	// boundary check
	if (x >= pixel_buffer->x_resolution || y >= pixel_buffer->y_resolution )
 8027cdc:	e0bffc17 	ldw	r2,-16(fp)
 8027ce0:	10800f17 	ldw	r2,60(r2)
 8027ce4:	e0fffe17 	ldw	r3,-8(fp)
 8027ce8:	1880042e 	bgeu	r3,r2,8027cfc <alt_up_pixel_buffer_dma_draw+0x3c>
 8027cec:	e0bffc17 	ldw	r2,-16(fp)
 8027cf0:	10801017 	ldw	r2,64(r2)
 8027cf4:	e0ffff17 	ldw	r3,-4(fp)
 8027cf8:	18800236 	bltu	r3,r2,8027d04 <alt_up_pixel_buffer_dma_draw+0x44>
		return -1;
 8027cfc:	00bfffc4 	movi	r2,-1
 8027d00:	00005006 	br	8027e44 <alt_up_pixel_buffer_dma_draw+0x184>

	unsigned int addr = 0;
 8027d04:	e03ffb15 	stw	zero,-20(fp)
	/* Check the mode VGA Pixel Buffer is using. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8027d08:	e0bffc17 	ldw	r2,-16(fp)
 8027d0c:	10800d17 	ldw	r2,52(r2)
 8027d10:	1000151e 	bne	r2,zero,8027d68 <alt_up_pixel_buffer_dma_draw+0xa8>
		/* For X-Y addressing mode, the address format is | unused | Y | X |. So shift bits for coordinates X and Y into their respective locations. */
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8027d14:	e0bffc17 	ldw	r2,-16(fp)
 8027d18:	10c01217 	ldw	r3,72(r2)
 8027d1c:	e0bffe17 	ldw	r2,-8(fp)
 8027d20:	1886703a 	and	r3,r3,r2
 8027d24:	e0bffc17 	ldw	r2,-16(fp)
 8027d28:	10801117 	ldw	r2,68(r2)
 8027d2c:	1884983a 	sll	r2,r3,r2
 8027d30:	e0fffb17 	ldw	r3,-20(fp)
 8027d34:	1885883a 	add	r2,r3,r2
 8027d38:	e0bffb15 	stw	r2,-20(fp)
		addr += ((y & pixel_buffer->y_coord_mask) << pixel_buffer->y_coord_offset);
 8027d3c:	e0bffc17 	ldw	r2,-16(fp)
 8027d40:	10c01417 	ldw	r3,80(r2)
 8027d44:	e0bfff17 	ldw	r2,-4(fp)
 8027d48:	1886703a 	and	r3,r3,r2
 8027d4c:	e0bffc17 	ldw	r2,-16(fp)
 8027d50:	10801317 	ldw	r2,76(r2)
 8027d54:	1884983a 	sll	r2,r3,r2
 8027d58:	e0fffb17 	ldw	r3,-20(fp)
 8027d5c:	1885883a 	add	r2,r3,r2
 8027d60:	e0bffb15 	stw	r2,-20(fp)
 8027d64:	00001706 	br	8027dc4 <alt_up_pixel_buffer_dma_draw+0x104>
	} else {
		/* In a consecutive addressing mode, the pixels are stored in consecutive memory locations. So the address of a pixel at (x,y) can be computed as
		 * (y*x_resolution + x).*/
		addr += ((x & pixel_buffer->x_coord_mask) << pixel_buffer->x_coord_offset);
 8027d68:	e0bffc17 	ldw	r2,-16(fp)
 8027d6c:	10c01217 	ldw	r3,72(r2)
 8027d70:	e0bffe17 	ldw	r2,-8(fp)
 8027d74:	1886703a 	and	r3,r3,r2
 8027d78:	e0bffc17 	ldw	r2,-16(fp)
 8027d7c:	10801117 	ldw	r2,68(r2)
 8027d80:	1884983a 	sll	r2,r3,r2
 8027d84:	e0fffb17 	ldw	r3,-20(fp)
 8027d88:	1885883a 	add	r2,r3,r2
 8027d8c:	e0bffb15 	stw	r2,-20(fp)
		addr += (((y & pixel_buffer->y_coord_mask) * pixel_buffer->x_resolution) << pixel_buffer->x_coord_offset);
 8027d90:	e0bffc17 	ldw	r2,-16(fp)
 8027d94:	10c01417 	ldw	r3,80(r2)
 8027d98:	e0bfff17 	ldw	r2,-4(fp)
 8027d9c:	1886703a 	and	r3,r3,r2
 8027da0:	e0bffc17 	ldw	r2,-16(fp)
 8027da4:	10800f17 	ldw	r2,60(r2)
 8027da8:	1887383a 	mul	r3,r3,r2
 8027dac:	e0bffc17 	ldw	r2,-16(fp)
 8027db0:	10801117 	ldw	r2,68(r2)
 8027db4:	1884983a 	sll	r2,r3,r2
 8027db8:	e0fffb17 	ldw	r3,-20(fp)
 8027dbc:	1885883a 	add	r2,r3,r2
 8027dc0:	e0bffb15 	stw	r2,-20(fp)
	}
	/* Now, depending on the color depth, write the pixel color to the specified memory location. */
	if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8027dc4:	e0bffc17 	ldw	r2,-16(fp)
 8027dc8:	10800e17 	ldw	r2,56(r2)
 8027dcc:	10800058 	cmpnei	r2,r2,1
 8027dd0:	1000081e 	bne	r2,zero,8027df4 <alt_up_pixel_buffer_dma_draw+0x134>
		IOWR_8DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8027dd4:	e0bffc17 	ldw	r2,-16(fp)
 8027dd8:	10c00c17 	ldw	r3,48(r2)
 8027ddc:	e0bffb17 	ldw	r2,-20(fp)
 8027de0:	1885883a 	add	r2,r3,r2
 8027de4:	1007883a 	mov	r3,r2
 8027de8:	e0bffd17 	ldw	r2,-12(fp)
 8027dec:	18800025 	stbio	r2,0(r3)
 8027df0:	00001306 	br	8027e40 <alt_up_pixel_buffer_dma_draw+0x180>
	} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8027df4:	e0bffc17 	ldw	r2,-16(fp)
 8027df8:	10800e17 	ldw	r2,56(r2)
 8027dfc:	10800098 	cmpnei	r2,r2,2
 8027e00:	1000081e 	bne	r2,zero,8027e24 <alt_up_pixel_buffer_dma_draw+0x164>
		IOWR_16DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8027e04:	e0bffc17 	ldw	r2,-16(fp)
 8027e08:	10c00c17 	ldw	r3,48(r2)
 8027e0c:	e0bffb17 	ldw	r2,-20(fp)
 8027e10:	1885883a 	add	r2,r3,r2
 8027e14:	1007883a 	mov	r3,r2
 8027e18:	e0bffd17 	ldw	r2,-12(fp)
 8027e1c:	1880002d 	sthio	r2,0(r3)
 8027e20:	00000706 	br	8027e40 <alt_up_pixel_buffer_dma_draw+0x180>
	} else {
		IOWR_32DIRECT(pixel_buffer->back_buffer_start_address, addr, color);
 8027e24:	e0bffc17 	ldw	r2,-16(fp)
 8027e28:	10c00c17 	ldw	r3,48(r2)
 8027e2c:	e0bffb17 	ldw	r2,-20(fp)
 8027e30:	1885883a 	add	r2,r3,r2
 8027e34:	1007883a 	mov	r3,r2
 8027e38:	e0bffd17 	ldw	r2,-12(fp)
 8027e3c:	18800035 	stwio	r2,0(r3)
	}

	return 0;
 8027e40:	0005883a 	mov	r2,zero
}
 8027e44:	e037883a 	mov	sp,fp
 8027e48:	df000017 	ldw	fp,0(sp)
 8027e4c:	dec00104 	addi	sp,sp,4
 8027e50:	f800283a 	ret

08027e54 <alt_up_pixel_buffer_dma_change_back_buffer_address>:

int alt_up_pixel_buffer_dma_change_back_buffer_address(alt_up_pixel_buffer_dma_dev *pixel_buffer, unsigned int new_address)
/* This function changes the memory address for the back buffer. */
{
 8027e54:	defffd04 	addi	sp,sp,-12
 8027e58:	df000215 	stw	fp,8(sp)
 8027e5c:	df000204 	addi	fp,sp,8
 8027e60:	e13ffe15 	stw	r4,-8(fp)
 8027e64:	e17fff15 	stw	r5,-4(fp)
	IOWR_32DIRECT(pixel_buffer->base, 4, new_address);
 8027e68:	e0bffe17 	ldw	r2,-8(fp)
 8027e6c:	10800a17 	ldw	r2,40(r2)
 8027e70:	10800104 	addi	r2,r2,4
 8027e74:	1007883a 	mov	r3,r2
 8027e78:	e0bfff17 	ldw	r2,-4(fp)
 8027e7c:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = IORD_32DIRECT(pixel_buffer->base, 4);
 8027e80:	e0bffe17 	ldw	r2,-8(fp)
 8027e84:	10800a17 	ldw	r2,40(r2)
 8027e88:	10800104 	addi	r2,r2,4
 8027e8c:	10800037 	ldwio	r2,0(r2)
 8027e90:	1007883a 	mov	r3,r2
 8027e94:	e0bffe17 	ldw	r2,-8(fp)
 8027e98:	10c00c15 	stw	r3,48(r2)
	return 0;
 8027e9c:	0005883a 	mov	r2,zero
}
 8027ea0:	e037883a 	mov	sp,fp
 8027ea4:	df000017 	ldw	fp,0(sp)
 8027ea8:	dec00104 	addi	sp,sp,4
 8027eac:	f800283a 	ret

08027eb0 <alt_up_pixel_buffer_dma_swap_buffers>:

int alt_up_pixel_buffer_dma_swap_buffers(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function swaps the front and back buffers. At the next refresh cycle the back buffer will be drawn on the screen
 * and will become the front buffer. */
{
 8027eb0:	defffd04 	addi	sp,sp,-12
 8027eb4:	df000215 	stw	fp,8(sp)
 8027eb8:	dc000115 	stw	r16,4(sp)
 8027ebc:	df000204 	addi	fp,sp,8
 8027ec0:	e13ffe15 	stw	r4,-8(fp)
	register unsigned int temp = pixel_buffer->back_buffer_start_address;
 8027ec4:	e0bffe17 	ldw	r2,-8(fp)
 8027ec8:	14000c17 	ldw	r16,48(r2)
	IOWR_32DIRECT(pixel_buffer->base, 0, 1);
 8027ecc:	e0bffe17 	ldw	r2,-8(fp)
 8027ed0:	10800a17 	ldw	r2,40(r2)
 8027ed4:	1007883a 	mov	r3,r2
 8027ed8:	00800044 	movi	r2,1
 8027edc:	18800035 	stwio	r2,0(r3)
	pixel_buffer->back_buffer_start_address = pixel_buffer->buffer_start_address;
 8027ee0:	e0bffe17 	ldw	r2,-8(fp)
 8027ee4:	10c00b17 	ldw	r3,44(r2)
 8027ee8:	e0bffe17 	ldw	r2,-8(fp)
 8027eec:	10c00c15 	stw	r3,48(r2)
	pixel_buffer->buffer_start_address = temp;
 8027ef0:	e0bffe17 	ldw	r2,-8(fp)
 8027ef4:	14000b15 	stw	r16,44(r2)
	return 0;
 8027ef8:	0005883a 	mov	r2,zero
}
 8027efc:	e6ffff04 	addi	sp,fp,-4
 8027f00:	df000117 	ldw	fp,4(sp)
 8027f04:	dc000017 	ldw	r16,0(sp)
 8027f08:	dec00204 	addi	sp,sp,8
 8027f0c:	f800283a 	ret

08027f10 <alt_up_pixel_buffer_dma_check_swap_buffers_status>:
int alt_up_pixel_buffer_dma_check_swap_buffers_status(alt_up_pixel_buffer_dma_dev *pixel_buffer)
/* This function checks if the buffer swap has occured. Since the buffer swap only happens after an entire screen is drawn,
 * it is important to wait for this function to return 0 before proceeding to draw on either buffer. When both front and the back buffers
 * have the same address calling the alt_up_pixel_buffer_dma_swap_buffers(...) function and then waiting for this function to return 0, causes your program to
 * wait for the screen to refresh. */
{
 8027f10:	defffe04 	addi	sp,sp,-8
 8027f14:	df000115 	stw	fp,4(sp)
 8027f18:	df000104 	addi	fp,sp,4
 8027f1c:	e13fff15 	stw	r4,-4(fp)
	return (IORD_32DIRECT(pixel_buffer->base, 12) & 0x1);
 8027f20:	e0bfff17 	ldw	r2,-4(fp)
 8027f24:	10800a17 	ldw	r2,40(r2)
 8027f28:	10800304 	addi	r2,r2,12
 8027f2c:	10800037 	ldwio	r2,0(r2)
 8027f30:	1080004c 	andi	r2,r2,1
}
 8027f34:	e037883a 	mov	sp,fp
 8027f38:	df000017 	ldw	fp,0(sp)
 8027f3c:	dec00104 	addi	sp,sp,4
 8027f40:	f800283a 	ret

08027f44 <alt_up_pixel_buffer_dma_clear_screen>:

void alt_up_pixel_buffer_dma_clear_screen(alt_up_pixel_buffer_dma_dev *pixel_buffer, int backbuffer)
/* This function clears the screen by setting each pixel to a black color. */
{
 8027f44:	defff704 	addi	sp,sp,-36
 8027f48:	df000815 	stw	fp,32(sp)
 8027f4c:	dd400715 	stw	r21,28(sp)
 8027f50:	dd000615 	stw	r20,24(sp)
 8027f54:	dcc00515 	stw	r19,20(sp)
 8027f58:	dc800415 	stw	r18,16(sp)
 8027f5c:	dc400315 	stw	r17,12(sp)
 8027f60:	dc000215 	stw	r16,8(sp)
 8027f64:	df000804 	addi	fp,sp,32
 8027f68:	e13ff815 	stw	r4,-32(fp)
 8027f6c:	e17ff915 	stw	r5,-28(fp)
	register unsigned int addr;
	register unsigned int limit_x, limit_y;
	
	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8027f70:	e0bff917 	ldw	r2,-28(fp)
 8027f74:	10800058 	cmpnei	r2,r2,1
 8027f78:	1000031e 	bne	r2,zero,8027f88 <alt_up_pixel_buffer_dma_clear_screen+0x44>
		addr = pixel_buffer->back_buffer_start_address;
 8027f7c:	e0bff817 	ldw	r2,-32(fp)
 8027f80:	14400c17 	ldw	r17,48(r2)
 8027f84:	00000206 	br	8027f90 <alt_up_pixel_buffer_dma_clear_screen+0x4c>
	else
		addr = pixel_buffer->buffer_start_address;
 8027f88:	e0bff817 	ldw	r2,-32(fp)
 8027f8c:	14400b17 	ldw	r17,44(r2)
	limit_x = pixel_buffer->x_resolution;
 8027f90:	e0bff817 	ldw	r2,-32(fp)
 8027f94:	14000f17 	ldw	r16,60(r2)
	/* In 16 and 32-bit color modes we use twice or four times more memory for the display buffer.*/
	if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8027f98:	e0bff817 	ldw	r2,-32(fp)
 8027f9c:	10800e17 	ldw	r2,56(r2)
 8027fa0:	10800098 	cmpnei	r2,r2,2
 8027fa4:	1000031e 	bne	r2,zero,8027fb4 <alt_up_pixel_buffer_dma_clear_screen+0x70>
		limit_x = limit_x << 1;
 8027fa8:	8405883a 	add	r2,r16,r16
 8027fac:	1021883a 	mov	r16,r2
 8027fb0:	00000306 	br	8027fc0 <alt_up_pixel_buffer_dma_clear_screen+0x7c>
	} else {
		limit_x = limit_x << 2;
 8027fb4:	8405883a 	add	r2,r16,r16
 8027fb8:	1085883a 	add	r2,r2,r2
 8027fbc:	1021883a 	mov	r16,r2
	}	
	limit_y = pixel_buffer->y_resolution;
 8027fc0:	e0bff817 	ldw	r2,-32(fp)
 8027fc4:	14801017 	ldw	r18,64(r2)

	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8027fc8:	e0bff817 	ldw	r2,-32(fp)
 8027fcc:	10800d17 	ldw	r2,52(r2)
 8027fd0:	1000111e 	bne	r2,zero,8028018 <alt_up_pixel_buffer_dma_clear_screen+0xd4>
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8027fd4:	e0bff817 	ldw	r2,-32(fp)
 8027fd8:	15401317 	ldw	r21,76(r2)

		for (y = 0; y < limit_y; y++)
 8027fdc:	0029883a 	mov	r20,zero
 8027fe0:	00000b06 	br	8028010 <alt_up_pixel_buffer_dma_clear_screen+0xcc>
		{
			for (x = 0; x < limit_x; x = x + 4)
 8027fe4:	0027883a 	mov	r19,zero
 8027fe8:	00000406 	br	8027ffc <alt_up_pixel_buffer_dma_clear_screen+0xb8>
			{
				IOWR_32DIRECT(addr, x, 0);
 8027fec:	9c45883a 	add	r2,r19,r17
 8027ff0:	0007883a 	mov	r3,zero
 8027ff4:	10c00035 	stwio	r3,0(r2)
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
		{
			for (x = 0; x < limit_x; x = x + 4)
 8027ff8:	9cc00104 	addi	r19,r19,4
 8027ffc:	9c3ffb36 	bltu	r19,r16,8027fec <__alt_data_end+0xfffef94c>
			{
				IOWR_32DIRECT(addr, x, 0);
			}
			addr = addr + (1 << offset_y);
 8028000:	00800044 	movi	r2,1
 8028004:	1544983a 	sll	r2,r2,r21
 8028008:	88a3883a 	add	r17,r17,r2
		/* Clear the screen when the VGA is set up in an XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;

		for (y = 0; y < limit_y; y++)
 802800c:	a5000044 	addi	r20,r20,1
 8028010:	a4bff436 	bltu	r20,r18,8027fe4 <__alt_data_end+0xfffef944>
		for (x = 0; x < limit_y; x = x + 4)
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8028014:	00000a06 	br	8028040 <alt_up_pixel_buffer_dma_clear_screen+0xfc>
			addr = addr + (1 << offset_y);
		}
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	
 8028018:	9425383a 	mul	r18,r18,r16

		for (x = 0; x < limit_y; x = x + 4)
 802801c:	0021883a 	mov	r16,zero
 8028020:	00000506 	br	8028038 <alt_up_pixel_buffer_dma_clear_screen+0xf4>
		{
			IOWR_32DIRECT(addr, x, 0);
 8028024:	8005883a 	mov	r2,r16
 8028028:	1445883a 	add	r2,r2,r17
 802802c:	0007883a 	mov	r3,zero
 8028030:	10c00035 	stwio	r3,0(r2)
	} else {
		/* Clear the screen when the VGA is set up in a linear addressing mode. */
		register int x;
		limit_y = limit_x*limit_y;	

		for (x = 0; x < limit_y; x = x + 4)
 8028034:	84000104 	addi	r16,r16,4
 8028038:	8005883a 	mov	r2,r16
 802803c:	14bff936 	bltu	r2,r18,8028024 <__alt_data_end+0xfffef984>
		{
			IOWR_32DIRECT(addr, x, 0);
		}
	}
}
 8028040:	0001883a 	nop
 8028044:	e6fffa04 	addi	sp,fp,-24
 8028048:	df000617 	ldw	fp,24(sp)
 802804c:	dd400517 	ldw	r21,20(sp)
 8028050:	dd000417 	ldw	r20,16(sp)
 8028054:	dcc00317 	ldw	r19,12(sp)
 8028058:	dc800217 	ldw	r18,8(sp)
 802805c:	dc400117 	ldw	r17,4(sp)
 8028060:	dc000017 	ldw	r16,0(sp)
 8028064:	dec00704 	addi	sp,sp,28
 8028068:	f800283a 	ret

0802806c <alt_up_pixel_buffer_dma_draw_box>:

void alt_up_pixel_buffer_dma_draw_box(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a filled box. */
{
 802806c:	defff304 	addi	sp,sp,-52
 8028070:	df000c15 	stw	fp,48(sp)
 8028074:	ddc00b15 	stw	r23,44(sp)
 8028078:	dd800a15 	stw	r22,40(sp)
 802807c:	dd400915 	stw	r21,36(sp)
 8028080:	dd000815 	stw	r20,32(sp)
 8028084:	dcc00715 	stw	r19,28(sp)
 8028088:	dc800615 	stw	r18,24(sp)
 802808c:	dc400515 	stw	r17,20(sp)
 8028090:	dc000415 	stw	r16,16(sp)
 8028094:	df000c04 	addi	fp,sp,48
 8028098:	e13ff415 	stw	r4,-48(fp)
 802809c:	e17ff515 	stw	r5,-44(fp)
 80280a0:	e1bff615 	stw	r6,-40(fp)
 80280a4:	e1fff715 	stw	r7,-36(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 80280a8:	e0bff417 	ldw	r2,-48(fp)
 80280ac:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 80280b0:	e0bff417 	ldw	r2,-48(fp)
 80280b4:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 80280b8:	e5bff517 	ldw	r22,-44(fp)
	register unsigned int r_x = x1;
 80280bc:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int t_y = y0;
 80280c0:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int b_y = y1;
 80280c4:	e4c00117 	ldw	r19,4(fp)
	register unsigned int local_color = color;
 80280c8:	e5c00217 	ldw	r23,8(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80280cc:	a580032e 	bgeu	r20,r22,80280dc <alt_up_pixel_buffer_dma_draw_box+0x70>
	{
		temp = l_x;
 80280d0:	b02b883a 	mov	r21,r22
		l_x = r_x;
 80280d4:	a02d883a 	mov	r22,r20
		r_x = temp;
 80280d8:	a829883a 	mov	r20,r21
	}
	if (t_y > b_y)
 80280dc:	9c40032e 	bgeu	r19,r17,80280ec <alt_up_pixel_buffer_dma_draw_box+0x80>
	{
		temp = t_y;
 80280e0:	882b883a 	mov	r21,r17
		t_y = b_y;
 80280e4:	9823883a 	mov	r17,r19
		b_y = temp;
 80280e8:	a827883a 	mov	r19,r21
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
 80280ec:	b480892e 	bgeu	r22,r18,8028314 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
 80280f0:	8c00882e 	bgeu	r17,r16,8028314 <alt_up_pixel_buffer_dma_draw_box+0x2a8>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 80280f4:	a4800136 	bltu	r20,r18,80280fc <alt_up_pixel_buffer_dma_draw_box+0x90>
	{
		r_x = limit_x - 1;
 80280f8:	953fffc4 	addi	r20,r18,-1
	}
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 80280fc:	9c000136 	bltu	r19,r16,8028104 <alt_up_pixel_buffer_dma_draw_box+0x98>
	{
		b_y = limit_y - 1;
 8028100:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 8028104:	e0800317 	ldw	r2,12(fp)
 8028108:	10800058 	cmpnei	r2,r2,1
 802810c:	1000031e 	bne	r2,zero,802811c <alt_up_pixel_buffer_dma_draw_box+0xb0>
		addr = pixel_buffer->back_buffer_start_address;
 8028110:	e0bff417 	ldw	r2,-48(fp)
 8028114:	14000c17 	ldw	r16,48(r2)
 8028118:	00000206 	br	8028124 <alt_up_pixel_buffer_dma_draw_box+0xb8>
	else
		addr = pixel_buffer->buffer_start_address;
 802811c:	e0bff417 	ldw	r2,-48(fp)
 8028120:	14000b17 	ldw	r16,44(r2)

	/* Draw the box using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 8028124:	e0bff417 	ldw	r2,-48(fp)
 8028128:	10800d17 	ldw	r2,52(r2)
 802812c:	10003c1e 	bne	r2,zero,8028220 <alt_up_pixel_buffer_dma_draw_box+0x1b4>
		/* Draw a box of a given color on the screen using the XY addressing mode. */
		register unsigned int x,y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 8028130:	e0bff417 	ldw	r2,-48(fp)
 8028134:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8028138:	8d44983a 	sll	r2,r17,r21
 802813c:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028140:	e0bff417 	ldw	r2,-48(fp)
 8028144:	10800e17 	ldw	r2,56(r2)
 8028148:	10800058 	cmpnei	r2,r2,1
 802814c:	10000f1e 	bne	r2,zero,802818c <alt_up_pixel_buffer_dma_draw_box+0x120>
			for (y = t_y; y <= b_y; y++)
 8028150:	8825883a 	mov	r18,r17
 8028154:	00000b06 	br	8028184 <alt_up_pixel_buffer_dma_draw_box+0x118>
			{
				for (x = l_x; x <= r_x; x++)
 8028158:	b023883a 	mov	r17,r22
 802815c:	00000406 	br	8028170 <alt_up_pixel_buffer_dma_draw_box+0x104>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8028160:	8c05883a 	add	r2,r17,r16
 8028164:	b807883a 	mov	r3,r23
 8028168:	10c00025 	stbio	r3,0(r2)
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 802816c:	8c400044 	addi	r17,r17,1
 8028170:	a47ffb2e 	bgeu	r20,r17,8028160 <__alt_data_end+0xfffefac0>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
 8028174:	00800044 	movi	r2,1
 8028178:	1544983a 	sll	r2,r2,r21
 802817c:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 8028180:	94800044 	addi	r18,r18,1
 8028184:	9cbff42e 	bgeu	r19,r18,8028158 <__alt_data_end+0xfffefab8>
 8028188:	00006306 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802818c:	e0bff417 	ldw	r2,-48(fp)
 8028190:	10800e17 	ldw	r2,56(r2)
 8028194:	10800098 	cmpnei	r2,r2,2
 8028198:	1000101e 	bne	r2,zero,80281dc <alt_up_pixel_buffer_dma_draw_box+0x170>
			for (y = t_y; y <= b_y; y++)
 802819c:	8825883a 	mov	r18,r17
 80281a0:	00000c06 	br	80281d4 <alt_up_pixel_buffer_dma_draw_box+0x168>
			{
				for (x = l_x; x <= r_x; x++)
 80281a4:	b023883a 	mov	r17,r22
 80281a8:	00000506 	br	80281c0 <alt_up_pixel_buffer_dma_draw_box+0x154>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 80281ac:	8c45883a 	add	r2,r17,r17
 80281b0:	1405883a 	add	r2,r2,r16
 80281b4:	b807883a 	mov	r3,r23
 80281b8:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80281bc:	8c400044 	addi	r17,r17,1
 80281c0:	a47ffa2e 	bgeu	r20,r17,80281ac <__alt_data_end+0xfffefb0c>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + (1 << offset_y);
 80281c4:	00800044 	movi	r2,1
 80281c8:	1544983a 	sll	r2,r2,r21
 80281cc:	80a1883a 	add	r16,r16,r2
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 80281d0:	94800044 	addi	r18,r18,1
 80281d4:	9cbff32e 	bgeu	r19,r18,80281a4 <__alt_data_end+0xfffefb04>
 80281d8:	00004f06 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80281dc:	8825883a 	mov	r18,r17
 80281e0:	00000d06 	br	8028218 <alt_up_pixel_buffer_dma_draw_box+0x1ac>
			{
				for (x = l_x; x <= r_x; x++)
 80281e4:	b023883a 	mov	r17,r22
 80281e8:	00000606 	br	8028204 <alt_up_pixel_buffer_dma_draw_box+0x198>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80281ec:	8c45883a 	add	r2,r17,r17
 80281f0:	1085883a 	add	r2,r2,r2
 80281f4:	1405883a 	add	r2,r2,r16
 80281f8:	b807883a 	mov	r3,r23
 80281fc:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028200:	8c400044 	addi	r17,r17,1
 8028204:	a47ff92e 	bgeu	r20,r17,80281ec <__alt_data_end+0xfffefb4c>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + (1 << offset_y);
 8028208:	00800044 	movi	r2,1
 802820c:	1544983a 	sll	r2,r2,r21
 8028210:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8028214:	94800044 	addi	r18,r18,1
 8028218:	9cbff22e 	bgeu	r19,r18,80281e4 <__alt_data_end+0xfffefb44>
 802821c:	00003e06 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
	} else {
		/* Draw a box of a given color on the screen using the linear addressing mode. */
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028220:	e0bff417 	ldw	r2,-48(fp)
 8028224:	10800e17 	ldw	r2,56(r2)
 8028228:	10800058 	cmpnei	r2,r2,1
 802822c:	10000f1e 	bne	r2,zero,802826c <alt_up_pixel_buffer_dma_draw_box+0x200>
			addr = addr + t_y * limit_x;
 8028230:	8c85383a 	mul	r2,r17,r18
 8028234:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028238:	882b883a 	mov	r21,r17
 802823c:	00000906 	br	8028264 <alt_up_pixel_buffer_dma_draw_box+0x1f8>
			{
				for (x = l_x; x <= r_x; x++)
 8028240:	b023883a 	mov	r17,r22
 8028244:	00000406 	br	8028258 <alt_up_pixel_buffer_dma_draw_box+0x1ec>
				{
					IOWR_8DIRECT(addr, x, local_color);
 8028248:	8c05883a 	add	r2,r17,r16
 802824c:	b807883a 	mov	r3,r23
 8028250:	10c00025 	stbio	r3,0(r2)
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 8028254:	8c400044 	addi	r17,r17,1
 8028258:	a47ffb2e 	bgeu	r20,r17,8028248 <__alt_data_end+0xfffefba8>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
 802825c:	84a1883a 	add	r16,r16,r18
		register unsigned int x,y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8028260:	ad400044 	addi	r21,r21,1
 8028264:	9d7ff62e 	bgeu	r19,r21,8028240 <__alt_data_end+0xfffefba0>
 8028268:	00002b06 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				{
					IOWR_8DIRECT(addr, x, local_color);
				}
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 802826c:	e0bff417 	ldw	r2,-48(fp)
 8028270:	10800e17 	ldw	r2,56(r2)
 8028274:	10800098 	cmpnei	r2,r2,2
 8028278:	1000121e 	bne	r2,zero,80282c4 <alt_up_pixel_buffer_dma_draw_box+0x258>
			limit_x = limit_x << 1;
 802827c:	9485883a 	add	r2,r18,r18
 8028280:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 8028284:	8c85383a 	mul	r2,r17,r18
 8028288:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 802828c:	882b883a 	mov	r21,r17
 8028290:	00000a06 	br	80282bc <alt_up_pixel_buffer_dma_draw_box+0x250>
			{
				for (x = l_x; x <= r_x; x++)
 8028294:	b023883a 	mov	r17,r22
 8028298:	00000506 	br	80282b0 <alt_up_pixel_buffer_dma_draw_box+0x244>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
 802829c:	8c45883a 	add	r2,r17,r17
 80282a0:	1405883a 	add	r2,r2,r16
 80282a4:	b807883a 	mov	r3,r23
 80282a8:	10c0002d 	sthio	r3,0(r2)
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80282ac:	8c400044 	addi	r17,r17,1
 80282b0:	a47ffa2e 	bgeu	r20,r17,802829c <__alt_data_end+0xfffefbfc>
				{
					IOWR_16DIRECT(addr, x << 1, local_color);
				}
				addr = addr + limit_x;
 80282b4:	84a1883a 	add	r16,r16,r18
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80282b8:	ad400044 	addi	r21,r21,1
 80282bc:	9d7ff52e 	bgeu	r19,r21,8028294 <__alt_data_end+0xfffefbf4>
 80282c0:	00001506 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80282c4:	9485883a 	add	r2,r18,r18
 80282c8:	1085883a 	add	r2,r2,r2
 80282cc:	1025883a 	mov	r18,r2
			addr = addr + t_y * limit_x;
 80282d0:	8c85383a 	mul	r2,r17,r18
 80282d4:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80282d8:	882b883a 	mov	r21,r17
 80282dc:	00000b06 	br	802830c <alt_up_pixel_buffer_dma_draw_box+0x2a0>
			{
				for (x = l_x; x <= r_x; x++)
 80282e0:	b023883a 	mov	r17,r22
 80282e4:	00000606 	br	8028300 <alt_up_pixel_buffer_dma_draw_box+0x294>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
 80282e8:	8c45883a 	add	r2,r17,r17
 80282ec:	1085883a 	add	r2,r2,r2
 80282f0:	1405883a 	add	r2,r2,r16
 80282f4:	b807883a 	mov	r3,r23
 80282f8:	10c00035 	stwio	r3,0(r2)
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
			{
				for (x = l_x; x <= r_x; x++)
 80282fc:	8c400044 	addi	r17,r17,1
 8028300:	a47ff92e 	bgeu	r20,r17,80282e8 <__alt_data_end+0xfffefc48>
				{
					IOWR_32DIRECT(addr, x << 2, local_color);
				}
				addr = addr + limit_x;
 8028304:	84a1883a 	add	r16,r16,r18
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8028308:	ad400044 	addi	r21,r21,1
 802830c:	9d7ff42e 	bgeu	r19,r21,80282e0 <__alt_data_end+0xfffefc40>
 8028310:	00000106 	br	8028318 <alt_up_pixel_buffer_dma_draw_box+0x2ac>
		b_y = temp;
	}
	if ((l_x >= limit_x) || (t_y >= limit_y) || (r_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8028314:	0001883a 	nop
				}
				addr = addr + limit_x;
			}
		}
	}
}
 8028318:	e6fff804 	addi	sp,fp,-32
 802831c:	df000817 	ldw	fp,32(sp)
 8028320:	ddc00717 	ldw	r23,28(sp)
 8028324:	dd800617 	ldw	r22,24(sp)
 8028328:	dd400517 	ldw	r21,20(sp)
 802832c:	dd000417 	ldw	r20,16(sp)
 8028330:	dcc00317 	ldw	r19,12(sp)
 8028334:	dc800217 	ldw	r18,8(sp)
 8028338:	dc400117 	ldw	r17,4(sp)
 802833c:	dc000017 	ldw	r16,0(sp)
 8028340:	dec00904 	addi	sp,sp,36
 8028344:	f800283a 	ret

08028348 <alt_up_pixel_buffer_dma_draw_hline>:

void alt_up_pixel_buffer_dma_draw_hline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int x1, int y, int color, int backbuffer)
/* This method draws a horizontal line. This method is faster than using the line method because we know the direction of the line. */
{
 8028348:	defff404 	addi	sp,sp,-48
 802834c:	df000b15 	stw	fp,44(sp)
 8028350:	dd800a15 	stw	r22,40(sp)
 8028354:	dd400915 	stw	r21,36(sp)
 8028358:	dd000815 	stw	r20,32(sp)
 802835c:	dcc00715 	stw	r19,28(sp)
 8028360:	dc800615 	stw	r18,24(sp)
 8028364:	dc400515 	stw	r17,20(sp)
 8028368:	dc000415 	stw	r16,16(sp)
 802836c:	df000b04 	addi	fp,sp,44
 8028370:	e13ff515 	stw	r4,-44(fp)
 8028374:	e17ff615 	stw	r5,-40(fp)
 8028378:	e1bff715 	stw	r6,-36(fp)
 802837c:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8028380:	e0bff517 	ldw	r2,-44(fp)
 8028384:	14800f17 	ldw	r18,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8028388:	e0bff517 	ldw	r2,-44(fp)
 802838c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int l_x = x0;
 8028390:	e47ff617 	ldw	r17,-40(fp)
	register unsigned int r_x = x1;
 8028394:	e4fff717 	ldw	r19,-36(fp)
	register unsigned int line_y = y;
 8028398:	e53ff817 	ldw	r20,-32(fp)
	register unsigned int local_color = color;
 802839c:	e5400117 	ldw	r21,4(fp)
	
	/* Check coordinates */
	if (l_x > r_x)
 80283a0:	9c40032e 	bgeu	r19,r17,80283b0 <alt_up_pixel_buffer_dma_draw_hline+0x68>
	{
		temp = l_x;
 80283a4:	882d883a 	mov	r22,r17
		l_x = r_x;
 80283a8:	9823883a 	mov	r17,r19
		r_x = temp;
 80283ac:	b027883a 	mov	r19,r22
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
 80283b0:	8c805d2e 	bgeu	r17,r18,8028528 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
 80283b4:	a4005c2e 	bgeu	r20,r16,8028528 <alt_up_pixel_buffer_dma_draw_hline+0x1e0>
	/* Clip the box and draw only within the confines of the screen. */
	if (l_x < 0)
	{
		l_x = 0;
	}
	if (r_x >= limit_x)
 80283b8:	9c800136 	bltu	r19,r18,80283c0 <alt_up_pixel_buffer_dma_draw_hline+0x78>
	{
		r_x = limit_x - 1;
 80283bc:	94ffffc4 	addi	r19,r18,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80283c0:	e0800217 	ldw	r2,8(fp)
 80283c4:	10800058 	cmpnei	r2,r2,1
 80283c8:	1000031e 	bne	r2,zero,80283d8 <alt_up_pixel_buffer_dma_draw_hline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 80283cc:	e0bff517 	ldw	r2,-44(fp)
 80283d0:	14000c17 	ldw	r16,48(r2)
 80283d4:	00000206 	br	80283e0 <alt_up_pixel_buffer_dma_draw_hline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 80283d8:	e0bff517 	ldw	r2,-44(fp)
 80283dc:	14000b17 	ldw	r16,44(r2)

	/* Draw a horizontal line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80283e0:	e0bff517 	ldw	r2,-44(fp)
 80283e4:	10800d17 	ldw	r2,52(r2)
 80283e8:	1000231e 	bne	r2,zero,8028478 <alt_up_pixel_buffer_dma_draw_hline+0x130>
		/* Draw a horizontal line of a given color on the screen using the XY addressing mode. */
		register unsigned int x;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80283ec:	e0bff517 	ldw	r2,-44(fp)
 80283f0:	14801317 	ldw	r18,76(r2)
		addr = addr + (line_y << offset_y);
 80283f4:	a484983a 	sll	r2,r20,r18
 80283f8:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80283fc:	e0bff517 	ldw	r2,-44(fp)
 8028400:	10800e17 	ldw	r2,56(r2)
 8028404:	10800058 	cmpnei	r2,r2,1
 8028408:	1000071e 	bne	r2,zero,8028428 <alt_up_pixel_buffer_dma_draw_hline+0xe0>
			for (x = l_x; x <= r_x; x++)
 802840c:	00000406 	br	8028420 <alt_up_pixel_buffer_dma_draw_hline+0xd8>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8028410:	8c05883a 	add	r2,r17,r16
 8028414:	a807883a 	mov	r3,r21
 8028418:	10c00025 	stbio	r3,0(r2)
		addr = addr + (line_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a horizontal line. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 802841c:	8c400044 	addi	r17,r17,1
 8028420:	9c7ffb2e 	bgeu	r19,r17,8028410 <__alt_data_end+0xfffefd70>
 8028424:	00004106 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8028428:	e0bff517 	ldw	r2,-44(fp)
 802842c:	10800e17 	ldw	r2,56(r2)
 8028430:	10800098 	cmpnei	r2,r2,2
 8028434:	10000e1e 	bne	r2,zero,8028470 <alt_up_pixel_buffer_dma_draw_hline+0x128>
			for (x = l_x; x <= r_x; x++)
 8028438:	00000506 	br	8028450 <alt_up_pixel_buffer_dma_draw_hline+0x108>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 802843c:	8c45883a 	add	r2,r17,r17
 8028440:	1405883a 	add	r2,r2,r16
 8028444:	a807883a 	mov	r3,r21
 8028448:	10c0002d 	sthio	r3,0(r2)
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (x = l_x; x <= r_x; x++)
 802844c:	8c400044 	addi	r17,r17,1
 8028450:	9c7ffa2e 	bgeu	r19,r17,802843c <__alt_data_end+0xfffefd9c>
 8028454:	00003506 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8028458:	8c45883a 	add	r2,r17,r17
 802845c:	1085883a 	add	r2,r2,r2
 8028460:	1405883a 	add	r2,r2,r16
 8028464:	a807883a 	mov	r3,r21
 8028468:	10c00035 	stwio	r3,0(r2)
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			for (x = l_x; x <= r_x; x++)
 802846c:	8c400044 	addi	r17,r17,1
 8028470:	9c7ff92e 	bgeu	r19,r17,8028458 <__alt_data_end+0xfffefdb8>
 8028474:	00002d06 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
	} else {
		/* Draw a horizontal line of a given color on the screen using the linear addressing mode. */
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 8028478:	e0bff517 	ldw	r2,-44(fp)
 802847c:	10800e17 	ldw	r2,56(r2)
 8028480:	10800058 	cmpnei	r2,r2,1
 8028484:	1000091e 	bne	r2,zero,80284ac <alt_up_pixel_buffer_dma_draw_hline+0x164>
			addr = addr + line_y * limit_x;
 8028488:	a485383a 	mul	r2,r20,r18
 802848c:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8028490:	00000406 	br	80284a4 <alt_up_pixel_buffer_dma_draw_hline+0x15c>
			{
				IOWR_8DIRECT(addr, x, local_color);
 8028494:	8c05883a 	add	r2,r17,r16
 8028498:	a807883a 	mov	r3,r21
 802849c:	10c00025 	stbio	r3,0(r2)
		register unsigned int x;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 80284a0:	8c400044 	addi	r17,r17,1
 80284a4:	9c7ffb2e 	bgeu	r19,r17,8028494 <__alt_data_end+0xfffefdf4>
 80284a8:	00002006 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
			{
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80284ac:	e0bff517 	ldw	r2,-44(fp)
 80284b0:	10800e17 	ldw	r2,56(r2)
 80284b4:	10800098 	cmpnei	r2,r2,2
 80284b8:	10000c1e 	bne	r2,zero,80284ec <alt_up_pixel_buffer_dma_draw_hline+0x1a4>
			limit_x = limit_x << 1;
 80284bc:	9485883a 	add	r2,r18,r18
 80284c0:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 80284c4:	a485383a 	mul	r2,r20,r18
 80284c8:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 80284cc:	00000506 	br	80284e4 <alt_up_pixel_buffer_dma_draw_hline+0x19c>
			{
				IOWR_16DIRECT(addr, x << 1, local_color);
 80284d0:	8c45883a 	add	r2,r17,r17
 80284d4:	1405883a 	add	r2,r2,r16
 80284d8:	a807883a 	mov	r3,r21
 80284dc:	10c0002d 	sthio	r3,0(r2)
				IOWR_8DIRECT(addr, x, local_color);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 80284e0:	8c400044 	addi	r17,r17,1
 80284e4:	9c7ffa2e 	bgeu	r19,r17,80284d0 <__alt_data_end+0xfffefe30>
 80284e8:	00001006 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
				IOWR_16DIRECT(addr, x << 1, local_color);
			}
		}
		else
		{
			limit_x = limit_x << 2;
 80284ec:	9485883a 	add	r2,r18,r18
 80284f0:	1085883a 	add	r2,r2,r2
 80284f4:	1025883a 	mov	r18,r2
			addr = addr + line_y * limit_x;
 80284f8:	a485383a 	mul	r2,r20,r18
 80284fc:	80a1883a 	add	r16,r16,r2
			for (x = l_x; x <= r_x; x++)
 8028500:	00000606 	br	802851c <alt_up_pixel_buffer_dma_draw_hline+0x1d4>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
 8028504:	8c45883a 	add	r2,r17,r17
 8028508:	1085883a 	add	r2,r2,r2
 802850c:	1405883a 	add	r2,r2,r16
 8028510:	a807883a 	mov	r3,r21
 8028514:	10c00035 	stwio	r3,0(r2)
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + line_y * limit_x;
			for (x = l_x; x <= r_x; x++)
 8028518:	8c400044 	addi	r17,r17,1
 802851c:	9c7ff92e 	bgeu	r19,r17,8028504 <__alt_data_end+0xfffefe64>
			{
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
 8028520:	84a1883a 	add	r16,r16,r18
 8028524:	00000106 	br	802852c <alt_up_pixel_buffer_dma_draw_hline+0x1e4>
		r_x = temp;
	}
	if ((l_x >= limit_x) || (line_y >= limit_y) || (r_x < 0) || (line_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8028528:	0001883a 	nop
				IOWR_32DIRECT(addr, x << 2, local_color);
			}
			addr = addr + limit_x;
		}
	}
}
 802852c:	e6fff904 	addi	sp,fp,-28
 8028530:	df000717 	ldw	fp,28(sp)
 8028534:	dd800617 	ldw	r22,24(sp)
 8028538:	dd400517 	ldw	r21,20(sp)
 802853c:	dd000417 	ldw	r20,16(sp)
 8028540:	dcc00317 	ldw	r19,12(sp)
 8028544:	dc800217 	ldw	r18,8(sp)
 8028548:	dc400117 	ldw	r17,4(sp)
 802854c:	dc000017 	ldw	r16,0(sp)
 8028550:	dec00804 	addi	sp,sp,32
 8028554:	f800283a 	ret

08028558 <alt_up_pixel_buffer_dma_draw_vline>:


void alt_up_pixel_buffer_dma_draw_vline(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x, int y0, int y1, int color, int backbuffer)
/* This method draws a vertical line. This method is faster than using the line method because we know the direction of the line. */

{
 8028558:	defff404 	addi	sp,sp,-48
 802855c:	df000b15 	stw	fp,44(sp)
 8028560:	dd800a15 	stw	r22,40(sp)
 8028564:	dd400915 	stw	r21,36(sp)
 8028568:	dd000815 	stw	r20,32(sp)
 802856c:	dcc00715 	stw	r19,28(sp)
 8028570:	dc800615 	stw	r18,24(sp)
 8028574:	dc400515 	stw	r17,20(sp)
 8028578:	dc000415 	stw	r16,16(sp)
 802857c:	df000b04 	addi	fp,sp,44
 8028580:	e13ff515 	stw	r4,-44(fp)
 8028584:	e17ff615 	stw	r5,-40(fp)
 8028588:	e1bff715 	stw	r6,-36(fp)
 802858c:	e1fff815 	stw	r7,-32(fp)
	register unsigned int addr;
	register unsigned int limit_x = pixel_buffer->x_resolution;
 8028590:	e0bff517 	ldw	r2,-44(fp)
 8028594:	14400f17 	ldw	r17,60(r2)
	register unsigned int limit_y = pixel_buffer->y_resolution;
 8028598:	e0bff517 	ldw	r2,-44(fp)
 802859c:	14001017 	ldw	r16,64(r2)
	register unsigned int temp;
	register unsigned int line_x = x;
 80285a0:	e4bff617 	ldw	r18,-40(fp)
	register unsigned int t_y = y0;
 80285a4:	e53ff717 	ldw	r20,-36(fp)
	register unsigned int b_y = y1;
 80285a8:	e4fff817 	ldw	r19,-32(fp)
	register unsigned int local_color = color;
 80285ac:	e5800117 	ldw	r22,4(fp)
	
	/* Check coordinates */
	if (t_y > b_y)
 80285b0:	9d00032e 	bgeu	r19,r20,80285c0 <alt_up_pixel_buffer_dma_draw_vline+0x68>
	{
		temp = t_y;
 80285b4:	a02b883a 	mov	r21,r20
		t_y = b_y;
 80285b8:	9829883a 	mov	r20,r19
		b_y = temp;
 80285bc:	a827883a 	mov	r19,r21
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
 80285c0:	94406c2e 	bgeu	r18,r17,8028774 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
 80285c4:	a4006b2e 	bgeu	r20,r16,8028774 <alt_up_pixel_buffer_dma_draw_vline+0x21c>
	/* Clip the box and draw only within the confines of the screen. */
	if (t_y < 0)
	{
		t_y = 0;
	}
	if (b_y >= limit_y)
 80285c8:	9c000136 	bltu	r19,r16,80285d0 <alt_up_pixel_buffer_dma_draw_vline+0x78>
	{
		b_y = limit_y - 1;
 80285cc:	84ffffc4 	addi	r19,r16,-1
	}

	/* Set up the address to start clearing from and the screen boundaries. */
	if (backbuffer == 1)
 80285d0:	e0800217 	ldw	r2,8(fp)
 80285d4:	10800058 	cmpnei	r2,r2,1
 80285d8:	1000031e 	bne	r2,zero,80285e8 <alt_up_pixel_buffer_dma_draw_vline+0x90>
		addr = pixel_buffer->back_buffer_start_address;
 80285dc:	e0bff517 	ldw	r2,-44(fp)
 80285e0:	14000c17 	ldw	r16,48(r2)
 80285e4:	00000206 	br	80285f0 <alt_up_pixel_buffer_dma_draw_vline+0x98>
	else
		addr = pixel_buffer->buffer_start_address;
 80285e8:	e0bff517 	ldw	r2,-44(fp)
 80285ec:	14000b17 	ldw	r16,44(r2)

	/* Draw the vertical line using one of the addressing modes. */
	if (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) {
 80285f0:	e0bff517 	ldw	r2,-44(fp)
 80285f4:	10800d17 	ldw	r2,52(r2)
 80285f8:	1000301e 	bne	r2,zero,80286bc <alt_up_pixel_buffer_dma_draw_vline+0x164>
		/* Draw a vertical line of a given color on the screen using the XY addressing mode. */
		register unsigned int y;
		register unsigned int offset_y;
		offset_y = pixel_buffer->y_coord_offset;
 80285fc:	e0bff517 	ldw	r2,-44(fp)
 8028600:	15401317 	ldw	r21,76(r2)
		addr = addr + (t_y << offset_y);
 8028604:	a544983a 	sll	r2,r20,r21
 8028608:	80a1883a 	add	r16,r16,r2
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 802860c:	e0bff517 	ldw	r2,-44(fp)
 8028610:	10800e17 	ldw	r2,56(r2)
 8028614:	10800058 	cmpnei	r2,r2,1
 8028618:	10000b1e 	bne	r2,zero,8028648 <alt_up_pixel_buffer_dma_draw_vline+0xf0>
			for (y = t_y; y <= b_y; y++)
 802861c:	a023883a 	mov	r17,r20
 8028620:	00000706 	br	8028640 <alt_up_pixel_buffer_dma_draw_vline+0xe8>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 8028624:	9405883a 	add	r2,r18,r16
 8028628:	b007883a 	mov	r3,r22
 802862c:	10c00025 	stbio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8028630:	00800044 	movi	r2,1
 8028634:	1544983a 	sll	r2,r2,r21
 8028638:	80a1883a 	add	r16,r16,r2
		addr = addr + (t_y << offset_y);
		
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 802863c:	8c400044 	addi	r17,r17,1
 8028640:	9c7ff82e 	bgeu	r19,r17,8028624 <__alt_data_end+0xfffeff84>
 8028644:	00004c06 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 8028648:	e0bff517 	ldw	r2,-44(fp)
 802864c:	10800e17 	ldw	r2,56(r2)
 8028650:	10800098 	cmpnei	r2,r2,2
 8028654:	10000c1e 	bne	r2,zero,8028688 <alt_up_pixel_buffer_dma_draw_vline+0x130>
			for (y = t_y; y <= b_y; y++)
 8028658:	a023883a 	mov	r17,r20
 802865c:	00000806 	br	8028680 <alt_up_pixel_buffer_dma_draw_vline+0x128>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8028660:	9485883a 	add	r2,r18,r18
 8028664:	1405883a 	add	r2,r2,r16
 8028668:	b007883a 	mov	r3,r22
 802866c:	10c0002d 	sthio	r3,0(r2)
				addr = addr + (1 << offset_y);
 8028670:	00800044 	movi	r2,1
 8028674:	1544983a 	sll	r2,r2,r21
 8028678:	80a1883a 	add	r16,r16,r2
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + (1 << offset_y);
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			for (y = t_y; y <= b_y; y++)
 802867c:	8c400044 	addi	r17,r17,1
 8028680:	9c7ff72e 	bgeu	r19,r17,8028660 <__alt_data_end+0xfffeffc0>
 8028684:	00003c06 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 8028688:	a023883a 	mov	r17,r20
 802868c:	00000906 	br	80286b4 <alt_up_pixel_buffer_dma_draw_vline+0x15c>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8028690:	9485883a 	add	r2,r18,r18
 8028694:	1085883a 	add	r2,r2,r2
 8028698:	1405883a 	add	r2,r2,r16
 802869c:	b007883a 	mov	r3,r22
 80286a0:	10c00035 	stwio	r3,0(r2)
				addr = addr + (1 << offset_y);
 80286a4:	00800044 	movi	r2,1
 80286a8:	1544983a 	sll	r2,r2,r21
 80286ac:	80a1883a 	add	r16,r16,r2
				addr = addr + (1 << offset_y);
			}
		}
		else
		{
			for (y = t_y; y <= b_y; y++)
 80286b0:	8c400044 	addi	r17,r17,1
 80286b4:	9c7ff62e 	bgeu	r19,r17,8028690 <__alt_data_end+0xfffefff0>
 80286b8:	00002f06 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
	} else {
		/* Draw a vertical line of a given color on the screen using the linear addressing mode. */
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
 80286bc:	e0bff517 	ldw	r2,-44(fp)
 80286c0:	10800e17 	ldw	r2,56(r2)
 80286c4:	10800058 	cmpnei	r2,r2,1
 80286c8:	10000a1e 	bne	r2,zero,80286f4 <alt_up_pixel_buffer_dma_draw_vline+0x19c>
			addr = addr + t_y * limit_x;
 80286cc:	a445383a 	mul	r2,r20,r17
 80286d0:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 80286d4:	00000506 	br	80286ec <alt_up_pixel_buffer_dma_draw_vline+0x194>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
 80286d8:	9405883a 	add	r2,r18,r16
 80286dc:	b007883a 	mov	r3,r22
 80286e0:	10c00025 	stbio	r3,0(r2)
				addr = addr + limit_x;
 80286e4:	8461883a 	add	r16,r16,r17
		register unsigned int y;
		/* This portion of the code is purposefully replicated. This is because having a text for
		 * the mode would unnecessarily slow down the drawing of a box. */
		if (pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) {
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 80286e8:	a5000044 	addi	r20,r20,1
 80286ec:	9d3ffa2e 	bgeu	r19,r20,80286d8 <__alt_data_end+0xffff0038>
 80286f0:	00002106 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
			{
				IOWR_8DIRECT(addr, line_x, local_color);
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
 80286f4:	e0bff517 	ldw	r2,-44(fp)
 80286f8:	10800e17 	ldw	r2,56(r2)
 80286fc:	10800098 	cmpnei	r2,r2,2
 8028700:	10000d1e 	bne	r2,zero,8028738 <alt_up_pixel_buffer_dma_draw_vline+0x1e0>
			limit_x = limit_x << 1;
 8028704:	8c45883a 	add	r2,r17,r17
 8028708:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 802870c:	a445383a 	mul	r2,r20,r17
 8028710:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 8028714:	00000606 	br	8028730 <alt_up_pixel_buffer_dma_draw_vline+0x1d8>
			{
				IOWR_16DIRECT(addr, line_x << 1, local_color);
 8028718:	9485883a 	add	r2,r18,r18
 802871c:	1405883a 	add	r2,r2,r16
 8028720:	b007883a 	mov	r3,r22
 8028724:	10c0002d 	sthio	r3,0(r2)
				addr = addr + limit_x;
 8028728:	8461883a 	add	r16,r16,r17
				addr = addr + limit_x;
			}
		} else if (pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) {
			limit_x = limit_x << 1;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 802872c:	a5000044 	addi	r20,r20,1
 8028730:	9d3ff92e 	bgeu	r19,r20,8028718 <__alt_data_end+0xffff0078>
 8028734:	00001006 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
				addr = addr + limit_x;
			}
		}
		else
		{
			limit_x = limit_x << 2;
 8028738:	8c45883a 	add	r2,r17,r17
 802873c:	1085883a 	add	r2,r2,r2
 8028740:	1023883a 	mov	r17,r2
			addr = addr + t_y * limit_x;
 8028744:	a445383a 	mul	r2,r20,r17
 8028748:	80a1883a 	add	r16,r16,r2
			for (y = t_y; y <= b_y; y++)
 802874c:	00000706 	br	802876c <alt_up_pixel_buffer_dma_draw_vline+0x214>
			{
				IOWR_32DIRECT(addr, line_x << 2, local_color);
 8028750:	9485883a 	add	r2,r18,r18
 8028754:	1085883a 	add	r2,r2,r2
 8028758:	1405883a 	add	r2,r2,r16
 802875c:	b007883a 	mov	r3,r22
 8028760:	10c00035 	stwio	r3,0(r2)
				addr = addr + limit_x;
 8028764:	8461883a 	add	r16,r16,r17
		}
		else
		{
			limit_x = limit_x << 2;
			addr = addr + t_y * limit_x;
			for (y = t_y; y <= b_y; y++)
 8028768:	a5000044 	addi	r20,r20,1
 802876c:	9d3ff82e 	bgeu	r19,r20,8028750 <__alt_data_end+0xffff00b0>
 8028770:	00000106 	br	8028778 <alt_up_pixel_buffer_dma_draw_vline+0x220>
		b_y = temp;
	}
	if ((line_x >= limit_x) || (t_y >= limit_y) || (line_x < 0) || (b_y < 0))
	{
		/* Drawing outside of the window, so don't bother. */
		return;
 8028774:	0001883a 	nop
				IOWR_32DIRECT(addr, line_x << 2, local_color);
				addr = addr + limit_x;
			}
		}
	}
}
 8028778:	e6fff904 	addi	sp,fp,-28
 802877c:	df000717 	ldw	fp,28(sp)
 8028780:	dd800617 	ldw	r22,24(sp)
 8028784:	dd400517 	ldw	r21,20(sp)
 8028788:	dd000417 	ldw	r20,16(sp)
 802878c:	dcc00317 	ldw	r19,12(sp)
 8028790:	dc800217 	ldw	r18,8(sp)
 8028794:	dc400117 	ldw	r17,4(sp)
 8028798:	dc000017 	ldw	r16,0(sp)
 802879c:	dec00804 	addi	sp,sp,32
 80287a0:	f800283a 	ret

080287a4 <alt_up_pixel_buffer_dma_draw_rectangle>:

void alt_up_pixel_buffer_dma_draw_rectangle(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
{
 80287a4:	defff804 	addi	sp,sp,-32
 80287a8:	dfc00715 	stw	ra,28(sp)
 80287ac:	df000615 	stw	fp,24(sp)
 80287b0:	df000604 	addi	fp,sp,24
 80287b4:	e13ffc15 	stw	r4,-16(fp)
 80287b8:	e17ffd15 	stw	r5,-12(fp)
 80287bc:	e1bffe15 	stw	r6,-8(fp)
 80287c0:	e1ffff15 	stw	r7,-4(fp)
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y0, color, backbuffer);
 80287c4:	e0800417 	ldw	r2,16(fp)
 80287c8:	d8800115 	stw	r2,4(sp)
 80287cc:	e0800317 	ldw	r2,12(fp)
 80287d0:	d8800015 	stw	r2,0(sp)
 80287d4:	e1fffe17 	ldw	r7,-8(fp)
 80287d8:	e1bfff17 	ldw	r6,-4(fp)
 80287dc:	e17ffd17 	ldw	r5,-12(fp)
 80287e0:	e13ffc17 	ldw	r4,-16(fp)
 80287e4:	80283480 	call	8028348 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_hline(pixel_buffer, x0, x1, y1, color, backbuffer);
 80287e8:	e0800417 	ldw	r2,16(fp)
 80287ec:	d8800115 	stw	r2,4(sp)
 80287f0:	e0800317 	ldw	r2,12(fp)
 80287f4:	d8800015 	stw	r2,0(sp)
 80287f8:	e1c00217 	ldw	r7,8(fp)
 80287fc:	e1bfff17 	ldw	r6,-4(fp)
 8028800:	e17ffd17 	ldw	r5,-12(fp)
 8028804:	e13ffc17 	ldw	r4,-16(fp)
 8028808:	80283480 	call	8028348 <alt_up_pixel_buffer_dma_draw_hline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x0, y0, y1, color, backbuffer);
 802880c:	e0800417 	ldw	r2,16(fp)
 8028810:	d8800115 	stw	r2,4(sp)
 8028814:	e0800317 	ldw	r2,12(fp)
 8028818:	d8800015 	stw	r2,0(sp)
 802881c:	e1c00217 	ldw	r7,8(fp)
 8028820:	e1bffe17 	ldw	r6,-8(fp)
 8028824:	e17ffd17 	ldw	r5,-12(fp)
 8028828:	e13ffc17 	ldw	r4,-16(fp)
 802882c:	80285580 	call	8028558 <alt_up_pixel_buffer_dma_draw_vline>
	alt_up_pixel_buffer_dma_draw_vline(pixel_buffer, x1, y0, y1, color, backbuffer);
 8028830:	e0800417 	ldw	r2,16(fp)
 8028834:	d8800115 	stw	r2,4(sp)
 8028838:	e0800317 	ldw	r2,12(fp)
 802883c:	d8800015 	stw	r2,0(sp)
 8028840:	e1c00217 	ldw	r7,8(fp)
 8028844:	e1bffe17 	ldw	r6,-8(fp)
 8028848:	e17fff17 	ldw	r5,-4(fp)
 802884c:	e13ffc17 	ldw	r4,-16(fp)
 8028850:	80285580 	call	8028558 <alt_up_pixel_buffer_dma_draw_vline>
}
 8028854:	0001883a 	nop
 8028858:	e037883a 	mov	sp,fp
 802885c:	dfc00117 	ldw	ra,4(sp)
 8028860:	df000017 	ldw	fp,0(sp)
 8028864:	dec00204 	addi	sp,sp,8
 8028868:	f800283a 	ret

0802886c <helper_plot_pixel>:

void helper_plot_pixel(register unsigned int buffer_start, register int line_size, register int x, register int y, register int color, register int mode)
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
 802886c:	deffff04 	addi	sp,sp,-4
 8028870:	df000015 	stw	fp,0(sp)
 8028874:	d839883a 	mov	fp,sp
 8028878:	2005883a 	mov	r2,r4
 802887c:	3007883a 	mov	r3,r6
 8028880:	3809883a 	mov	r4,r7
 8028884:	e1800117 	ldw	r6,4(fp)
 8028888:	e1c00217 	ldw	r7,8(fp)
	if (mode == 0)
 802888c:	3800051e 	bne	r7,zero,80288a4 <helper_plot_pixel+0x38>
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
 8028890:	2909383a 	mul	r4,r5,r4
 8028894:	20c7883a 	add	r3,r4,r3
 8028898:	1885883a 	add	r2,r3,r2
 802889c:	11800025 	stbio	r6,0(r2)
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80288a0:	00000e06 	br	80288dc <helper_plot_pixel+0x70>
/* This is a helper function that draws a pixel at a given location. Note that no boundary checks are made,
 * so drawing off-screen may cause unpredictable side effects. */
{
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
 80288a4:	39c00058 	cmpnei	r7,r7,1
 80288a8:	3800061e 	bne	r7,zero,80288c4 <helper_plot_pixel+0x58>
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
 80288ac:	2909383a 	mul	r4,r5,r4
 80288b0:	20c7883a 	add	r3,r4,r3
 80288b4:	18c7883a 	add	r3,r3,r3
 80288b8:	1885883a 	add	r2,r3,r2
 80288bc:	1180002d 	sthio	r6,0(r2)
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
}
 80288c0:	00000606 	br	80288dc <helper_plot_pixel+0x70>
	if (mode == 0)
		IOWR_8DIRECT(buffer_start, line_size*y+x, color);
	else if (mode == 1)
		IOWR_16DIRECT(buffer_start, (line_size*y+x) << 1, color);
	else
		IOWR_32DIRECT(buffer_start, (line_size*y+x) << 2, color);
 80288c4:	2909383a 	mul	r4,r5,r4
 80288c8:	20c7883a 	add	r3,r4,r3
 80288cc:	18c7883a 	add	r3,r3,r3
 80288d0:	18c7883a 	add	r3,r3,r3
 80288d4:	1885883a 	add	r2,r3,r2
 80288d8:	11800035 	stwio	r6,0(r2)
}
 80288dc:	0001883a 	nop
 80288e0:	e037883a 	mov	sp,fp
 80288e4:	df000017 	ldw	fp,0(sp)
 80288e8:	dec00104 	addi	sp,sp,4
 80288ec:	f800283a 	ret

080288f0 <alt_up_pixel_buffer_dma_draw_line>:

void alt_up_pixel_buffer_dma_draw_line(alt_up_pixel_buffer_dma_dev *pixel_buffer, int x0, int y0, int x1, int y1, int color, int backbuffer)
/* This function draws a line between points (x0, y0) and (x1, y1). The function does not check if it draws a pixel within screen boundaries.
 * users should ensure that the line is drawn within the screen boundaries. */
{
 80288f0:	deffeb04 	addi	sp,sp,-84
 80288f4:	dfc01415 	stw	ra,80(sp)
 80288f8:	df001315 	stw	fp,76(sp)
 80288fc:	ddc01215 	stw	r23,72(sp)
 8028900:	dd801115 	stw	r22,68(sp)
 8028904:	dd401015 	stw	r21,64(sp)
 8028908:	dd000f15 	stw	r20,60(sp)
 802890c:	dcc00e15 	stw	r19,56(sp)
 8028910:	dc800d15 	stw	r18,52(sp)
 8028914:	dc400c15 	stw	r17,48(sp)
 8028918:	dc000b15 	stw	r16,44(sp)
 802891c:	df001304 	addi	fp,sp,76
 8028920:	e13fef15 	stw	r4,-68(fp)
 8028924:	e17ff015 	stw	r5,-64(fp)
 8028928:	e1bff115 	stw	r6,-60(fp)
 802892c:	e1fff215 	stw	r7,-56(fp)
	register int x_0 = x0;
 8028930:	e47ff017 	ldw	r17,-64(fp)
	register int y_0 = y0;
 8028934:	e4fff117 	ldw	r19,-60(fp)
	register int x_1 = x1;
 8028938:	e4bff217 	ldw	r18,-56(fp)
	register int y_1 = y1;
 802893c:	e5000217 	ldw	r20,8(fp)
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
 8028940:	a4c5c83a 	sub	r2,r20,r19
 8028944:	1000010e 	bge	r2,zero,802894c <alt_up_pixel_buffer_dma_draw_line+0x5c>
 8028948:	0085c83a 	sub	r2,zero,r2
 802894c:	1007883a 	mov	r3,r2
 8028950:	9445c83a 	sub	r2,r18,r17
 8028954:	1000010e 	bge	r2,zero,802895c <alt_up_pixel_buffer_dma_draw_line+0x6c>
 8028958:	0085c83a 	sub	r2,zero,r2
 802895c:	10c4803a 	cmplt	r2,r2,r3
 8028960:	e0bff305 	stb	r2,-52(fp)
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8028964:	e0bfef17 	ldw	r2,-68(fp)
 8028968:	10800e17 	ldw	r2,56(r2)
 802896c:	10800060 	cmpeqi	r2,r2,1
 8028970:	1000081e 	bne	r2,zero,8028994 <alt_up_pixel_buffer_dma_draw_line+0xa4>
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
 8028974:	e0bfef17 	ldw	r2,-68(fp)
 8028978:	10800e17 	ldw	r2,56(r2)
 802897c:	10800098 	cmpnei	r2,r2,2
 8028980:	1000021e 	bne	r2,zero,802898c <alt_up_pixel_buffer_dma_draw_line+0x9c>
 8028984:	00800044 	movi	r2,1
 8028988:	00000306 	br	8028998 <alt_up_pixel_buffer_dma_draw_line+0xa8>
 802898c:	00800084 	movi	r2,2
 8028990:	00000106 	br	8028998 <alt_up_pixel_buffer_dma_draw_line+0xa8>
	register int y_0 = y0;
	register int x_1 = x1;
	register int y_1 = y1;
	register char steep = (ABS(y_1 - y_0) > ABS(x_1 - x_0)) ? 1 : 0;
	register int deltax, deltay, error, ystep, x, y;
	register int color_mode =	(pixel_buffer->color_mode == ALT_UP_8BIT_COLOR_MODE) ? 0 :
 8028994:	0005883a 	mov	r2,zero
 8028998:	e0bff415 	stw	r2,-48(fp)
								(pixel_buffer->color_mode == ALT_UP_16BIT_COLOR_MODE) ? 1 : 2;
	register int line_color = color;
 802899c:	e0800317 	ldw	r2,12(fp)
 80289a0:	e0bff515 	stw	r2,-44(fp)
	register unsigned int buffer_start;
	register int line_size = (pixel_buffer->addressing_mode == ALT_UP_PIXEL_BUFFER_XY_ADDRESS_MODE) ? (1 << (pixel_buffer->y_coord_offset-color_mode)) : pixel_buffer->x_resolution;
 80289a4:	e0bfef17 	ldw	r2,-68(fp)
 80289a8:	10800d17 	ldw	r2,52(r2)
 80289ac:	1000071e 	bne	r2,zero,80289cc <alt_up_pixel_buffer_dma_draw_line+0xdc>
 80289b0:	e0bfef17 	ldw	r2,-68(fp)
 80289b4:	10801317 	ldw	r2,76(r2)
 80289b8:	e0fff417 	ldw	r3,-48(fp)
 80289bc:	10c5c83a 	sub	r2,r2,r3
 80289c0:	00c00044 	movi	r3,1
 80289c4:	1884983a 	sll	r2,r3,r2
 80289c8:	00000206 	br	80289d4 <alt_up_pixel_buffer_dma_draw_line+0xe4>
 80289cc:	e0bfef17 	ldw	r2,-68(fp)
 80289d0:	10800f17 	ldw	r2,60(r2)
 80289d4:	e0bff615 	stw	r2,-40(fp)

	if (backbuffer == 1)
 80289d8:	e0800417 	ldw	r2,16(fp)
 80289dc:	10800058 	cmpnei	r2,r2,1
 80289e0:	1000031e 	bne	r2,zero,80289f0 <alt_up_pixel_buffer_dma_draw_line+0x100>
		buffer_start = pixel_buffer->back_buffer_start_address;
 80289e4:	e0bfef17 	ldw	r2,-68(fp)
 80289e8:	15c00c17 	ldw	r23,48(r2)
 80289ec:	00000206 	br	80289f8 <alt_up_pixel_buffer_dma_draw_line+0x108>
	else
		buffer_start = pixel_buffer->buffer_start_address;
 80289f0:	e0bfef17 	ldw	r2,-68(fp)
 80289f4:	15c00b17 	ldw	r23,44(r2)

	/* Preprocessing inputs */
	if (steep > 0) {
 80289f8:	e0bff307 	ldb	r2,-52(fp)
 80289fc:	0080060e 	bge	zero,r2,8028a18 <alt_up_pixel_buffer_dma_draw_line+0x128>
		// Swap x_0 and y_0
		error = x_0;
 8028a00:	8821883a 	mov	r16,r17
		x_0 = y_0;
 8028a04:	9823883a 	mov	r17,r19
		y_0 = error;
 8028a08:	8027883a 	mov	r19,r16
		// Swap x_1 and y_1
		error = x_1;
 8028a0c:	9021883a 	mov	r16,r18
		x_1 = y_1;
 8028a10:	a025883a 	mov	r18,r20
		y_1 = error;
 8028a14:	8029883a 	mov	r20,r16
	}
	if (x_0 > x_1) {
 8028a18:	9440060e 	bge	r18,r17,8028a34 <alt_up_pixel_buffer_dma_draw_line+0x144>
		// Swap x_0 and x_1
		error = x_0;
 8028a1c:	8821883a 	mov	r16,r17
		x_0 = x_1;
 8028a20:	9023883a 	mov	r17,r18
		x_1 = error;
 8028a24:	8025883a 	mov	r18,r16
		// Swap y_0 and y_1
		error = y_0;
 8028a28:	9821883a 	mov	r16,r19
		y_0 = y_1;
 8028a2c:	a027883a 	mov	r19,r20
		y_1 = error;
 8028a30:	8029883a 	mov	r20,r16
	}

	/* Setup local variables */
	deltax = x_1 - x_0;
 8028a34:	946bc83a 	sub	r21,r18,r17
	deltay = ABS(y_1 - y_0);
 8028a38:	a4c5c83a 	sub	r2,r20,r19
 8028a3c:	1000010e 	bge	r2,zero,8028a44 <alt_up_pixel_buffer_dma_draw_line+0x154>
 8028a40:	0085c83a 	sub	r2,zero,r2
 8028a44:	e0bff715 	stw	r2,-36(fp)
	error = -(deltax / 2); 
 8028a48:	a804d7fa 	srli	r2,r21,31
 8028a4c:	1545883a 	add	r2,r2,r21
 8028a50:	1005d07a 	srai	r2,r2,1
 8028a54:	00a1c83a 	sub	r16,zero,r2
	y = y_0;
 8028a58:	982d883a 	mov	r22,r19
	if (y_0 < y_1)
 8028a5c:	9d00020e 	bge	r19,r20,8028a68 <alt_up_pixel_buffer_dma_draw_line+0x178>
		ystep = 1;
 8028a60:	04c00044 	movi	r19,1
 8028a64:	00000106 	br	8028a6c <alt_up_pixel_buffer_dma_draw_line+0x17c>
	else
		ystep = -1;
 8028a68:	04ffffc4 	movi	r19,-1

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
 8028a6c:	e0bff307 	ldb	r2,-52(fp)
 8028a70:	10800058 	cmpnei	r2,r2,1
 8028a74:	1000211e 	bne	r2,zero,8028afc <alt_up_pixel_buffer_dma_draw_line+0x20c>
	{
		for (x=x_0; x <= x_1; x++) {
 8028a78:	00000f06 	br	8028ab8 <alt_up_pixel_buffer_dma_draw_line+0x1c8>
			helper_plot_pixel(buffer_start, line_size, y, x, line_color, color_mode);
 8028a7c:	e0bff417 	ldw	r2,-48(fp)
 8028a80:	d8800115 	stw	r2,4(sp)
 8028a84:	e0bff517 	ldw	r2,-44(fp)
 8028a88:	d8800015 	stw	r2,0(sp)
 8028a8c:	880f883a 	mov	r7,r17
 8028a90:	b00d883a 	mov	r6,r22
 8028a94:	e17ff617 	ldw	r5,-40(fp)
 8028a98:	b809883a 	mov	r4,r23
 8028a9c:	802886c0 	call	802886c <helper_plot_pixel>
			error = error + deltay;
 8028aa0:	e0bff717 	ldw	r2,-36(fp)
 8028aa4:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8028aa8:	0400020e 	bge	zero,r16,8028ab4 <alt_up_pixel_buffer_dma_draw_line+0x1c4>
				y = y + ystep;
 8028aac:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8028ab0:	8561c83a 	sub	r16,r16,r21

	/* Draw a line - either go along the x axis (steep = 0) or along the y axis (steep = 1). The code is replicated to
	 * compile well on low optimization levels. */
	if (steep == 1)
	{
		for (x=x_0; x <= x_1; x++) {
 8028ab4:	8c400044 	addi	r17,r17,1
 8028ab8:	947ff00e 	bge	r18,r17,8028a7c <__alt_data_end+0xffff03dc>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8028abc:	00001006 	br	8028b00 <alt_up_pixel_buffer_dma_draw_line+0x210>
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
			helper_plot_pixel(buffer_start, line_size, x, y, line_color, color_mode);
 8028ac0:	e0bff417 	ldw	r2,-48(fp)
 8028ac4:	d8800115 	stw	r2,4(sp)
 8028ac8:	e0bff517 	ldw	r2,-44(fp)
 8028acc:	d8800015 	stw	r2,0(sp)
 8028ad0:	b00f883a 	mov	r7,r22
 8028ad4:	880d883a 	mov	r6,r17
 8028ad8:	e17ff617 	ldw	r5,-40(fp)
 8028adc:	b809883a 	mov	r4,r23
 8028ae0:	802886c0 	call	802886c <helper_plot_pixel>
			error = error + deltay;
 8028ae4:	e0bff717 	ldw	r2,-36(fp)
 8028ae8:	80a1883a 	add	r16,r16,r2
			if (error > 0) {
 8028aec:	0400020e 	bge	zero,r16,8028af8 <alt_up_pixel_buffer_dma_draw_line+0x208>
				y = y + ystep;
 8028af0:	b4ed883a 	add	r22,r22,r19
				error = error - deltax;
 8028af4:	8561c83a 	sub	r16,r16,r21
			}
		}
	}
	else
	{
		for (x=x_0; x <= x_1; x++) {
 8028af8:	8c400044 	addi	r17,r17,1
 8028afc:	947ff00e 	bge	r18,r17,8028ac0 <__alt_data_end+0xffff0420>
				y = y + ystep;
				error = error - deltax;
			}
		}
	}
}
 8028b00:	0001883a 	nop
 8028b04:	e6fff804 	addi	sp,fp,-32
 8028b08:	dfc00917 	ldw	ra,36(sp)
 8028b0c:	df000817 	ldw	fp,32(sp)
 8028b10:	ddc00717 	ldw	r23,28(sp)
 8028b14:	dd800617 	ldw	r22,24(sp)
 8028b18:	dd400517 	ldw	r21,20(sp)
 8028b1c:	dd000417 	ldw	r20,16(sp)
 8028b20:	dcc00317 	ldw	r19,12(sp)
 8028b24:	dc800217 	ldw	r18,8(sp)
 8028b28:	dc400117 	ldw	r17,4(sp)
 8028b2c:	dc000017 	ldw	r16,0(sp)
 8028b30:	dec00a04 	addi	sp,sp,40
 8028b34:	f800283a 	ret

08028b38 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8028b38:	defffa04 	addi	sp,sp,-24
 8028b3c:	dfc00515 	stw	ra,20(sp)
 8028b40:	df000415 	stw	fp,16(sp)
 8028b44:	df000404 	addi	fp,sp,16
 8028b48:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 8028b4c:	008000c4 	movi	r2,3
 8028b50:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8028b54:	e0fffd17 	ldw	r3,-12(fp)
 8028b58:	008003f4 	movhi	r2,15
 8028b5c:	10909004 	addi	r2,r2,16960
 8028b60:	1885383a 	mul	r2,r3,r2
 8028b64:	100b883a 	mov	r5,r2
 8028b68:	01017db4 	movhi	r4,1526
 8028b6c:	21384004 	addi	r4,r4,-7936
 8028b70:	802334c0 	call	802334c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 8028b74:	100b883a 	mov	r5,r2
 8028b78:	01200034 	movhi	r4,32768
 8028b7c:	213fffc4 	addi	r4,r4,-1
 8028b80:	802334c0 	call	802334c <__udivsi3>
 8028b84:	100b883a 	mov	r5,r2
 8028b88:	e13fff17 	ldw	r4,-4(fp)
 8028b8c:	802334c0 	call	802334c <__udivsi3>
 8028b90:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 8028b94:	e0bffe17 	ldw	r2,-8(fp)
 8028b98:	10002a26 	beq	r2,zero,8028c44 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8028b9c:	e03ffc15 	stw	zero,-16(fp)
 8028ba0:	00001706 	br	8028c00 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8028ba4:	00a00034 	movhi	r2,32768
 8028ba8:	10bfffc4 	addi	r2,r2,-1
 8028bac:	10bfffc4 	addi	r2,r2,-1
 8028bb0:	103ffe1e 	bne	r2,zero,8028bac <__alt_data_end+0xffff050c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8028bb4:	e0fffd17 	ldw	r3,-12(fp)
 8028bb8:	008003f4 	movhi	r2,15
 8028bbc:	10909004 	addi	r2,r2,16960
 8028bc0:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8028bc4:	100b883a 	mov	r5,r2
 8028bc8:	01017db4 	movhi	r4,1526
 8028bcc:	21384004 	addi	r4,r4,-7936
 8028bd0:	802334c0 	call	802334c <__udivsi3>
 8028bd4:	100b883a 	mov	r5,r2
 8028bd8:	01200034 	movhi	r4,32768
 8028bdc:	213fffc4 	addi	r4,r4,-1
 8028be0:	802334c0 	call	802334c <__udivsi3>
 8028be4:	1007883a 	mov	r3,r2
 8028be8:	e0bfff17 	ldw	r2,-4(fp)
 8028bec:	10c5c83a 	sub	r2,r2,r3
 8028bf0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 8028bf4:	e0bffc17 	ldw	r2,-16(fp)
 8028bf8:	10800044 	addi	r2,r2,1
 8028bfc:	e0bffc15 	stw	r2,-16(fp)
 8028c00:	e0fffc17 	ldw	r3,-16(fp)
 8028c04:	e0bffe17 	ldw	r2,-8(fp)
 8028c08:	18bfe616 	blt	r3,r2,8028ba4 <__alt_data_end+0xffff0504>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8028c0c:	e0fffd17 	ldw	r3,-12(fp)
 8028c10:	008003f4 	movhi	r2,15
 8028c14:	10909004 	addi	r2,r2,16960
 8028c18:	1885383a 	mul	r2,r3,r2
 8028c1c:	100b883a 	mov	r5,r2
 8028c20:	01017db4 	movhi	r4,1526
 8028c24:	21384004 	addi	r4,r4,-7936
 8028c28:	802334c0 	call	802334c <__udivsi3>
 8028c2c:	1007883a 	mov	r3,r2
 8028c30:	e0bfff17 	ldw	r2,-4(fp)
 8028c34:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8028c38:	10bfffc4 	addi	r2,r2,-1
 8028c3c:	103ffe1e 	bne	r2,zero,8028c38 <__alt_data_end+0xffff0598>
 8028c40:	00000d06 	br	8028c78 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8028c44:	e0fffd17 	ldw	r3,-12(fp)
 8028c48:	008003f4 	movhi	r2,15
 8028c4c:	10909004 	addi	r2,r2,16960
 8028c50:	1885383a 	mul	r2,r3,r2
 8028c54:	100b883a 	mov	r5,r2
 8028c58:	01017db4 	movhi	r4,1526
 8028c5c:	21384004 	addi	r4,r4,-7936
 8028c60:	802334c0 	call	802334c <__udivsi3>
 8028c64:	1007883a 	mov	r3,r2
 8028c68:	e0bfff17 	ldw	r2,-4(fp)
 8028c6c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 8028c70:	10bfffc4 	addi	r2,r2,-1
 8028c74:	00bffe16 	blt	zero,r2,8028c70 <__alt_data_end+0xffff05d0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8028c78:	0005883a 	mov	r2,zero
}
 8028c7c:	e037883a 	mov	sp,fp
 8028c80:	dfc00117 	ldw	ra,4(sp)
 8028c84:	df000017 	ldw	fp,0(sp)
 8028c88:	dec00204 	addi	sp,sp,8
 8028c8c:	f800283a 	ret

08028c90 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8028c90:	defffe04 	addi	sp,sp,-8
 8028c94:	dfc00115 	stw	ra,4(sp)
 8028c98:	df000015 	stw	fp,0(sp)
 8028c9c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8028ca0:	d0a00c17 	ldw	r2,-32720(gp)
 8028ca4:	10000326 	beq	r2,zero,8028cb4 <alt_get_errno+0x24>
 8028ca8:	d0a00c17 	ldw	r2,-32720(gp)
 8028cac:	103ee83a 	callr	r2
 8028cb0:	00000106 	br	8028cb8 <alt_get_errno+0x28>
 8028cb4:	d0a10004 	addi	r2,gp,-31744
}
 8028cb8:	e037883a 	mov	sp,fp
 8028cbc:	dfc00117 	ldw	ra,4(sp)
 8028cc0:	df000017 	ldw	fp,0(sp)
 8028cc4:	dec00204 	addi	sp,sp,8
 8028cc8:	f800283a 	ret

08028ccc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 8028ccc:	defffb04 	addi	sp,sp,-20
 8028cd0:	dfc00415 	stw	ra,16(sp)
 8028cd4:	df000315 	stw	fp,12(sp)
 8028cd8:	df000304 	addi	fp,sp,12
 8028cdc:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 8028ce0:	e0bfff17 	ldw	r2,-4(fp)
 8028ce4:	10000616 	blt	r2,zero,8028d00 <close+0x34>
 8028ce8:	e0bfff17 	ldw	r2,-4(fp)
 8028cec:	10c00324 	muli	r3,r2,12
 8028cf0:	008200f4 	movhi	r2,2051
 8028cf4:	10a88d04 	addi	r2,r2,-24012
 8028cf8:	1885883a 	add	r2,r3,r2
 8028cfc:	00000106 	br	8028d04 <close+0x38>
 8028d00:	0005883a 	mov	r2,zero
 8028d04:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 8028d08:	e0bffd17 	ldw	r2,-12(fp)
 8028d0c:	10001926 	beq	r2,zero,8028d74 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 8028d10:	e0bffd17 	ldw	r2,-12(fp)
 8028d14:	10800017 	ldw	r2,0(r2)
 8028d18:	10800417 	ldw	r2,16(r2)
 8028d1c:	10000626 	beq	r2,zero,8028d38 <close+0x6c>
 8028d20:	e0bffd17 	ldw	r2,-12(fp)
 8028d24:	10800017 	ldw	r2,0(r2)
 8028d28:	10800417 	ldw	r2,16(r2)
 8028d2c:	e13ffd17 	ldw	r4,-12(fp)
 8028d30:	103ee83a 	callr	r2
 8028d34:	00000106 	br	8028d3c <close+0x70>
 8028d38:	0005883a 	mov	r2,zero
 8028d3c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 8028d40:	e13fff17 	ldw	r4,-4(fp)
 8028d44:	80294080 	call	8029408 <alt_release_fd>
    if (rval < 0)
 8028d48:	e0bffe17 	ldw	r2,-8(fp)
 8028d4c:	1000070e 	bge	r2,zero,8028d6c <close+0xa0>
    {
      ALT_ERRNO = -rval;
 8028d50:	8028c900 	call	8028c90 <alt_get_errno>
 8028d54:	1007883a 	mov	r3,r2
 8028d58:	e0bffe17 	ldw	r2,-8(fp)
 8028d5c:	0085c83a 	sub	r2,zero,r2
 8028d60:	18800015 	stw	r2,0(r3)
      return -1;
 8028d64:	00bfffc4 	movi	r2,-1
 8028d68:	00000706 	br	8028d88 <close+0xbc>
    }
    return 0;
 8028d6c:	0005883a 	mov	r2,zero
 8028d70:	00000506 	br	8028d88 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 8028d74:	8028c900 	call	8028c90 <alt_get_errno>
 8028d78:	1007883a 	mov	r3,r2
 8028d7c:	00801444 	movi	r2,81
 8028d80:	18800015 	stw	r2,0(r3)
    return -1;
 8028d84:	00bfffc4 	movi	r2,-1
  }
}
 8028d88:	e037883a 	mov	sp,fp
 8028d8c:	dfc00117 	ldw	ra,4(sp)
 8028d90:	df000017 	ldw	fp,0(sp)
 8028d94:	dec00204 	addi	sp,sp,8
 8028d98:	f800283a 	ret

08028d9c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8028d9c:	defffe04 	addi	sp,sp,-8
 8028da0:	df000115 	stw	fp,4(sp)
 8028da4:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8028da8:	e03fff15 	stw	zero,-4(fp)
 8028dac:	00000506 	br	8028dc4 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 8028db0:	e0bfff17 	ldw	r2,-4(fp)
 8028db4:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 8028db8:	e0bfff17 	ldw	r2,-4(fp)
 8028dbc:	10800804 	addi	r2,r2,32
 8028dc0:	e0bfff15 	stw	r2,-4(fp)
 8028dc4:	e0bfff17 	ldw	r2,-4(fp)
 8028dc8:	10820030 	cmpltui	r2,r2,2048
 8028dcc:	103ff81e 	bne	r2,zero,8028db0 <__alt_data_end+0xffff0710>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8028dd0:	0001883a 	nop
 8028dd4:	e037883a 	mov	sp,fp
 8028dd8:	df000017 	ldw	fp,0(sp)
 8028ddc:	dec00104 	addi	sp,sp,4
 8028de0:	f800283a 	ret

08028de4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 8028de4:	defffc04 	addi	sp,sp,-16
 8028de8:	df000315 	stw	fp,12(sp)
 8028dec:	df000304 	addi	fp,sp,12
 8028df0:	e13ffd15 	stw	r4,-12(fp)
 8028df4:	e17ffe15 	stw	r5,-8(fp)
 8028df8:	e1bfff15 	stw	r6,-4(fp)
  return len;
 8028dfc:	e0bfff17 	ldw	r2,-4(fp)
}
 8028e00:	e037883a 	mov	sp,fp
 8028e04:	df000017 	ldw	fp,0(sp)
 8028e08:	dec00104 	addi	sp,sp,4
 8028e0c:	f800283a 	ret

08028e10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 8028e10:	defffe04 	addi	sp,sp,-8
 8028e14:	dfc00115 	stw	ra,4(sp)
 8028e18:	df000015 	stw	fp,0(sp)
 8028e1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8028e20:	d0a00c17 	ldw	r2,-32720(gp)
 8028e24:	10000326 	beq	r2,zero,8028e34 <alt_get_errno+0x24>
 8028e28:	d0a00c17 	ldw	r2,-32720(gp)
 8028e2c:	103ee83a 	callr	r2
 8028e30:	00000106 	br	8028e38 <alt_get_errno+0x28>
 8028e34:	d0a10004 	addi	r2,gp,-31744
}
 8028e38:	e037883a 	mov	sp,fp
 8028e3c:	dfc00117 	ldw	ra,4(sp)
 8028e40:	df000017 	ldw	fp,0(sp)
 8028e44:	dec00204 	addi	sp,sp,8
 8028e48:	f800283a 	ret

08028e4c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8028e4c:	defffa04 	addi	sp,sp,-24
 8028e50:	dfc00515 	stw	ra,20(sp)
 8028e54:	df000415 	stw	fp,16(sp)
 8028e58:	df000404 	addi	fp,sp,16
 8028e5c:	e13ffe15 	stw	r4,-8(fp)
 8028e60:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8028e64:	e0bffe17 	ldw	r2,-8(fp)
 8028e68:	10000326 	beq	r2,zero,8028e78 <alt_dev_llist_insert+0x2c>
 8028e6c:	e0bffe17 	ldw	r2,-8(fp)
 8028e70:	10800217 	ldw	r2,8(r2)
 8028e74:	1000061e 	bne	r2,zero,8028e90 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8028e78:	8028e100 	call	8028e10 <alt_get_errno>
 8028e7c:	1007883a 	mov	r3,r2
 8028e80:	00800584 	movi	r2,22
 8028e84:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8028e88:	00bffa84 	movi	r2,-22
 8028e8c:	00001306 	br	8028edc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8028e90:	e0bffe17 	ldw	r2,-8(fp)
 8028e94:	e0ffff17 	ldw	r3,-4(fp)
 8028e98:	e0fffc15 	stw	r3,-16(fp)
 8028e9c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 8028ea0:	e0bffd17 	ldw	r2,-12(fp)
 8028ea4:	e0fffc17 	ldw	r3,-16(fp)
 8028ea8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8028eac:	e0bffc17 	ldw	r2,-16(fp)
 8028eb0:	10c00017 	ldw	r3,0(r2)
 8028eb4:	e0bffd17 	ldw	r2,-12(fp)
 8028eb8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 8028ebc:	e0bffc17 	ldw	r2,-16(fp)
 8028ec0:	10800017 	ldw	r2,0(r2)
 8028ec4:	e0fffd17 	ldw	r3,-12(fp)
 8028ec8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8028ecc:	e0bffc17 	ldw	r2,-16(fp)
 8028ed0:	e0fffd17 	ldw	r3,-12(fp)
 8028ed4:	10c00015 	stw	r3,0(r2)

  return 0;  
 8028ed8:	0005883a 	mov	r2,zero
}
 8028edc:	e037883a 	mov	sp,fp
 8028ee0:	dfc00117 	ldw	ra,4(sp)
 8028ee4:	df000017 	ldw	fp,0(sp)
 8028ee8:	dec00204 	addi	sp,sp,8
 8028eec:	f800283a 	ret

08028ef0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8028ef0:	defffd04 	addi	sp,sp,-12
 8028ef4:	dfc00215 	stw	ra,8(sp)
 8028ef8:	df000115 	stw	fp,4(sp)
 8028efc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8028f00:	008200f4 	movhi	r2,2051
 8028f04:	10a72204 	addi	r2,r2,-25464
 8028f08:	e0bfff15 	stw	r2,-4(fp)
 8028f0c:	00000606 	br	8028f28 <_do_ctors+0x38>
        (*ctor) (); 
 8028f10:	e0bfff17 	ldw	r2,-4(fp)
 8028f14:	10800017 	ldw	r2,0(r2)
 8028f18:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8028f1c:	e0bfff17 	ldw	r2,-4(fp)
 8028f20:	10bfff04 	addi	r2,r2,-4
 8028f24:	e0bfff15 	stw	r2,-4(fp)
 8028f28:	e0ffff17 	ldw	r3,-4(fp)
 8028f2c:	008200f4 	movhi	r2,2051
 8028f30:	10a72304 	addi	r2,r2,-25460
 8028f34:	18bff62e 	bgeu	r3,r2,8028f10 <__alt_data_end+0xffff0870>
        (*ctor) (); 
}
 8028f38:	0001883a 	nop
 8028f3c:	e037883a 	mov	sp,fp
 8028f40:	dfc00117 	ldw	ra,4(sp)
 8028f44:	df000017 	ldw	fp,0(sp)
 8028f48:	dec00204 	addi	sp,sp,8
 8028f4c:	f800283a 	ret

08028f50 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8028f50:	defffd04 	addi	sp,sp,-12
 8028f54:	dfc00215 	stw	ra,8(sp)
 8028f58:	df000115 	stw	fp,4(sp)
 8028f5c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8028f60:	008200f4 	movhi	r2,2051
 8028f64:	10a72204 	addi	r2,r2,-25464
 8028f68:	e0bfff15 	stw	r2,-4(fp)
 8028f6c:	00000606 	br	8028f88 <_do_dtors+0x38>
        (*dtor) (); 
 8028f70:	e0bfff17 	ldw	r2,-4(fp)
 8028f74:	10800017 	ldw	r2,0(r2)
 8028f78:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8028f7c:	e0bfff17 	ldw	r2,-4(fp)
 8028f80:	10bfff04 	addi	r2,r2,-4
 8028f84:	e0bfff15 	stw	r2,-4(fp)
 8028f88:	e0ffff17 	ldw	r3,-4(fp)
 8028f8c:	008200f4 	movhi	r2,2051
 8028f90:	10a72304 	addi	r2,r2,-25460
 8028f94:	18bff62e 	bgeu	r3,r2,8028f70 <__alt_data_end+0xffff08d0>
        (*dtor) (); 
}
 8028f98:	0001883a 	nop
 8028f9c:	e037883a 	mov	sp,fp
 8028fa0:	dfc00117 	ldw	ra,4(sp)
 8028fa4:	df000017 	ldw	fp,0(sp)
 8028fa8:	dec00204 	addi	sp,sp,8
 8028fac:	f800283a 	ret

08028fb0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8028fb0:	defffa04 	addi	sp,sp,-24
 8028fb4:	dfc00515 	stw	ra,20(sp)
 8028fb8:	df000415 	stw	fp,16(sp)
 8028fbc:	df000404 	addi	fp,sp,16
 8028fc0:	e13ffe15 	stw	r4,-8(fp)
 8028fc4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8028fc8:	e0bfff17 	ldw	r2,-4(fp)
 8028fcc:	10800017 	ldw	r2,0(r2)
 8028fd0:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8028fd4:	e13ffe17 	ldw	r4,-8(fp)
 8028fd8:	8026d600 	call	8026d60 <strlen>
 8028fdc:	10800044 	addi	r2,r2,1
 8028fe0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8028fe4:	00000d06 	br	802901c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8028fe8:	e0bffc17 	ldw	r2,-16(fp)
 8028fec:	10800217 	ldw	r2,8(r2)
 8028ff0:	e0fffd17 	ldw	r3,-12(fp)
 8028ff4:	180d883a 	mov	r6,r3
 8028ff8:	e17ffe17 	ldw	r5,-8(fp)
 8028ffc:	1009883a 	mov	r4,r2
 8029000:	80299400 	call	8029940 <memcmp>
 8029004:	1000021e 	bne	r2,zero,8029010 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8029008:	e0bffc17 	ldw	r2,-16(fp)
 802900c:	00000706 	br	802902c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8029010:	e0bffc17 	ldw	r2,-16(fp)
 8029014:	10800017 	ldw	r2,0(r2)
 8029018:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 802901c:	e0fffc17 	ldw	r3,-16(fp)
 8029020:	e0bfff17 	ldw	r2,-4(fp)
 8029024:	18bff01e 	bne	r3,r2,8028fe8 <__alt_data_end+0xffff0948>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 8029028:	0005883a 	mov	r2,zero
}
 802902c:	e037883a 	mov	sp,fp
 8029030:	dfc00117 	ldw	ra,4(sp)
 8029034:	df000017 	ldw	fp,0(sp)
 8029038:	dec00204 	addi	sp,sp,8
 802903c:	f800283a 	ret

08029040 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8029040:	defffe04 	addi	sp,sp,-8
 8029044:	dfc00115 	stw	ra,4(sp)
 8029048:	df000015 	stw	fp,0(sp)
 802904c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 8029050:	01440004 	movi	r5,4096
 8029054:	0009883a 	mov	r4,zero
 8029058:	80297e00 	call	80297e0 <alt_icache_flush>
#endif
}
 802905c:	0001883a 	nop
 8029060:	e037883a 	mov	sp,fp
 8029064:	dfc00117 	ldw	ra,4(sp)
 8029068:	df000017 	ldw	fp,0(sp)
 802906c:	dec00204 	addi	sp,sp,8
 8029070:	f800283a 	ret

08029074 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8029074:	defff904 	addi	sp,sp,-28
 8029078:	dfc00615 	stw	ra,24(sp)
 802907c:	df000515 	stw	fp,20(sp)
 8029080:	df000504 	addi	fp,sp,20
 8029084:	e13ffc15 	stw	r4,-16(fp)
 8029088:	e17ffd15 	stw	r5,-12(fp)
 802908c:	e1bffe15 	stw	r6,-8(fp)
 8029090:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 8029094:	e1bfff17 	ldw	r6,-4(fp)
 8029098:	e17ffe17 	ldw	r5,-8(fp)
 802909c:	e13ffd17 	ldw	r4,-12(fp)
 80290a0:	80292b40 	call	80292b4 <open>
 80290a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 80290a8:	e0bffb17 	ldw	r2,-20(fp)
 80290ac:	10001c16 	blt	r2,zero,8029120 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 80290b0:	008200f4 	movhi	r2,2051
 80290b4:	10a88d04 	addi	r2,r2,-24012
 80290b8:	e0fffb17 	ldw	r3,-20(fp)
 80290bc:	18c00324 	muli	r3,r3,12
 80290c0:	10c5883a 	add	r2,r2,r3
 80290c4:	10c00017 	ldw	r3,0(r2)
 80290c8:	e0bffc17 	ldw	r2,-16(fp)
 80290cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80290d0:	008200f4 	movhi	r2,2051
 80290d4:	10a88d04 	addi	r2,r2,-24012
 80290d8:	e0fffb17 	ldw	r3,-20(fp)
 80290dc:	18c00324 	muli	r3,r3,12
 80290e0:	10c5883a 	add	r2,r2,r3
 80290e4:	10800104 	addi	r2,r2,4
 80290e8:	10c00017 	ldw	r3,0(r2)
 80290ec:	e0bffc17 	ldw	r2,-16(fp)
 80290f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80290f4:	008200f4 	movhi	r2,2051
 80290f8:	10a88d04 	addi	r2,r2,-24012
 80290fc:	e0fffb17 	ldw	r3,-20(fp)
 8029100:	18c00324 	muli	r3,r3,12
 8029104:	10c5883a 	add	r2,r2,r3
 8029108:	10800204 	addi	r2,r2,8
 802910c:	10c00017 	ldw	r3,0(r2)
 8029110:	e0bffc17 	ldw	r2,-16(fp)
 8029114:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8029118:	e13ffb17 	ldw	r4,-20(fp)
 802911c:	80294080 	call	8029408 <alt_release_fd>
  }
} 
 8029120:	0001883a 	nop
 8029124:	e037883a 	mov	sp,fp
 8029128:	dfc00117 	ldw	ra,4(sp)
 802912c:	df000017 	ldw	fp,0(sp)
 8029130:	dec00204 	addi	sp,sp,8
 8029134:	f800283a 	ret

08029138 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8029138:	defffb04 	addi	sp,sp,-20
 802913c:	dfc00415 	stw	ra,16(sp)
 8029140:	df000315 	stw	fp,12(sp)
 8029144:	df000304 	addi	fp,sp,12
 8029148:	e13ffd15 	stw	r4,-12(fp)
 802914c:	e17ffe15 	stw	r5,-8(fp)
 8029150:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8029154:	01c07fc4 	movi	r7,511
 8029158:	01800044 	movi	r6,1
 802915c:	e17ffd17 	ldw	r5,-12(fp)
 8029160:	010200f4 	movhi	r4,2051
 8029164:	21289004 	addi	r4,r4,-24000
 8029168:	80290740 	call	8029074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 802916c:	01c07fc4 	movi	r7,511
 8029170:	000d883a 	mov	r6,zero
 8029174:	e17ffe17 	ldw	r5,-8(fp)
 8029178:	010200f4 	movhi	r4,2051
 802917c:	21288d04 	addi	r4,r4,-24012
 8029180:	80290740 	call	8029074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8029184:	01c07fc4 	movi	r7,511
 8029188:	01800044 	movi	r6,1
 802918c:	e17fff17 	ldw	r5,-4(fp)
 8029190:	010200f4 	movhi	r4,2051
 8029194:	21289304 	addi	r4,r4,-23988
 8029198:	80290740 	call	8029074 <alt_open_fd>
}  
 802919c:	0001883a 	nop
 80291a0:	e037883a 	mov	sp,fp
 80291a4:	dfc00117 	ldw	ra,4(sp)
 80291a8:	df000017 	ldw	fp,0(sp)
 80291ac:	dec00204 	addi	sp,sp,8
 80291b0:	f800283a 	ret

080291b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 80291b4:	defffe04 	addi	sp,sp,-8
 80291b8:	dfc00115 	stw	ra,4(sp)
 80291bc:	df000015 	stw	fp,0(sp)
 80291c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80291c4:	d0a00c17 	ldw	r2,-32720(gp)
 80291c8:	10000326 	beq	r2,zero,80291d8 <alt_get_errno+0x24>
 80291cc:	d0a00c17 	ldw	r2,-32720(gp)
 80291d0:	103ee83a 	callr	r2
 80291d4:	00000106 	br	80291dc <alt_get_errno+0x28>
 80291d8:	d0a10004 	addi	r2,gp,-31744
}
 80291dc:	e037883a 	mov	sp,fp
 80291e0:	dfc00117 	ldw	ra,4(sp)
 80291e4:	df000017 	ldw	fp,0(sp)
 80291e8:	dec00204 	addi	sp,sp,8
 80291ec:	f800283a 	ret

080291f0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80291f0:	defffd04 	addi	sp,sp,-12
 80291f4:	df000215 	stw	fp,8(sp)
 80291f8:	df000204 	addi	fp,sp,8
 80291fc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8029200:	e0bfff17 	ldw	r2,-4(fp)
 8029204:	10800217 	ldw	r2,8(r2)
 8029208:	10d00034 	orhi	r3,r2,16384
 802920c:	e0bfff17 	ldw	r2,-4(fp)
 8029210:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8029214:	e03ffe15 	stw	zero,-8(fp)
 8029218:	00001d06 	br	8029290 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 802921c:	008200f4 	movhi	r2,2051
 8029220:	10a88d04 	addi	r2,r2,-24012
 8029224:	e0fffe17 	ldw	r3,-8(fp)
 8029228:	18c00324 	muli	r3,r3,12
 802922c:	10c5883a 	add	r2,r2,r3
 8029230:	10c00017 	ldw	r3,0(r2)
 8029234:	e0bfff17 	ldw	r2,-4(fp)
 8029238:	10800017 	ldw	r2,0(r2)
 802923c:	1880111e 	bne	r3,r2,8029284 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8029240:	008200f4 	movhi	r2,2051
 8029244:	10a88d04 	addi	r2,r2,-24012
 8029248:	e0fffe17 	ldw	r3,-8(fp)
 802924c:	18c00324 	muli	r3,r3,12
 8029250:	10c5883a 	add	r2,r2,r3
 8029254:	10800204 	addi	r2,r2,8
 8029258:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 802925c:	1000090e 	bge	r2,zero,8029284 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 8029260:	e0bffe17 	ldw	r2,-8(fp)
 8029264:	10c00324 	muli	r3,r2,12
 8029268:	008200f4 	movhi	r2,2051
 802926c:	10a88d04 	addi	r2,r2,-24012
 8029270:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8029274:	e0bfff17 	ldw	r2,-4(fp)
 8029278:	18800226 	beq	r3,r2,8029284 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 802927c:	00bffcc4 	movi	r2,-13
 8029280:	00000806 	br	80292a4 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 8029284:	e0bffe17 	ldw	r2,-8(fp)
 8029288:	10800044 	addi	r2,r2,1
 802928c:	e0bffe15 	stw	r2,-8(fp)
 8029290:	d0a00b17 	ldw	r2,-32724(gp)
 8029294:	1007883a 	mov	r3,r2
 8029298:	e0bffe17 	ldw	r2,-8(fp)
 802929c:	18bfdf2e 	bgeu	r3,r2,802921c <__alt_data_end+0xffff0b7c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80292a0:	0005883a 	mov	r2,zero
}
 80292a4:	e037883a 	mov	sp,fp
 80292a8:	df000017 	ldw	fp,0(sp)
 80292ac:	dec00104 	addi	sp,sp,4
 80292b0:	f800283a 	ret

080292b4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80292b4:	defff604 	addi	sp,sp,-40
 80292b8:	dfc00915 	stw	ra,36(sp)
 80292bc:	df000815 	stw	fp,32(sp)
 80292c0:	df000804 	addi	fp,sp,32
 80292c4:	e13ffd15 	stw	r4,-12(fp)
 80292c8:	e17ffe15 	stw	r5,-8(fp)
 80292cc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 80292d0:	00bfffc4 	movi	r2,-1
 80292d4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 80292d8:	00bffb44 	movi	r2,-19
 80292dc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 80292e0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80292e4:	d1600904 	addi	r5,gp,-32732
 80292e8:	e13ffd17 	ldw	r4,-12(fp)
 80292ec:	8028fb00 	call	8028fb0 <alt_find_dev>
 80292f0:	e0bff815 	stw	r2,-32(fp)
 80292f4:	e0bff817 	ldw	r2,-32(fp)
 80292f8:	1000051e 	bne	r2,zero,8029310 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80292fc:	e13ffd17 	ldw	r4,-12(fp)
 8029300:	80296340 	call	8029634 <alt_find_file>
 8029304:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 8029308:	00800044 	movi	r2,1
 802930c:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8029310:	e0bff817 	ldw	r2,-32(fp)
 8029314:	10002926 	beq	r2,zero,80293bc <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8029318:	e13ff817 	ldw	r4,-32(fp)
 802931c:	802973c0 	call	802973c <alt_get_fd>
 8029320:	e0bff915 	stw	r2,-28(fp)
 8029324:	e0bff917 	ldw	r2,-28(fp)
 8029328:	1000030e 	bge	r2,zero,8029338 <open+0x84>
    {
      status = index;
 802932c:	e0bff917 	ldw	r2,-28(fp)
 8029330:	e0bffa15 	stw	r2,-24(fp)
 8029334:	00002306 	br	80293c4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
 8029338:	e0bff917 	ldw	r2,-28(fp)
 802933c:	10c00324 	muli	r3,r2,12
 8029340:	008200f4 	movhi	r2,2051
 8029344:	10a88d04 	addi	r2,r2,-24012
 8029348:	1885883a 	add	r2,r3,r2
 802934c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8029350:	e0fffe17 	ldw	r3,-8(fp)
 8029354:	00900034 	movhi	r2,16384
 8029358:	10bfffc4 	addi	r2,r2,-1
 802935c:	1886703a 	and	r3,r3,r2
 8029360:	e0bffc17 	ldw	r2,-16(fp)
 8029364:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8029368:	e0bffb17 	ldw	r2,-20(fp)
 802936c:	1000051e 	bne	r2,zero,8029384 <open+0xd0>
 8029370:	e13ffc17 	ldw	r4,-16(fp)
 8029374:	80291f00 	call	80291f0 <alt_file_locked>
 8029378:	e0bffa15 	stw	r2,-24(fp)
 802937c:	e0bffa17 	ldw	r2,-24(fp)
 8029380:	10001016 	blt	r2,zero,80293c4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8029384:	e0bff817 	ldw	r2,-32(fp)
 8029388:	10800317 	ldw	r2,12(r2)
 802938c:	10000826 	beq	r2,zero,80293b0 <open+0xfc>
 8029390:	e0bff817 	ldw	r2,-32(fp)
 8029394:	10800317 	ldw	r2,12(r2)
 8029398:	e1ffff17 	ldw	r7,-4(fp)
 802939c:	e1bffe17 	ldw	r6,-8(fp)
 80293a0:	e17ffd17 	ldw	r5,-12(fp)
 80293a4:	e13ffc17 	ldw	r4,-16(fp)
 80293a8:	103ee83a 	callr	r2
 80293ac:	00000106 	br	80293b4 <open+0x100>
 80293b0:	0005883a 	mov	r2,zero
 80293b4:	e0bffa15 	stw	r2,-24(fp)
 80293b8:	00000206 	br	80293c4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
 80293bc:	00bffb44 	movi	r2,-19
 80293c0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 80293c4:	e0bffa17 	ldw	r2,-24(fp)
 80293c8:	1000090e 	bge	r2,zero,80293f0 <open+0x13c>
  {
    alt_release_fd (index);  
 80293cc:	e13ff917 	ldw	r4,-28(fp)
 80293d0:	80294080 	call	8029408 <alt_release_fd>
    ALT_ERRNO = -status;
 80293d4:	80291b40 	call	80291b4 <alt_get_errno>
 80293d8:	1007883a 	mov	r3,r2
 80293dc:	e0bffa17 	ldw	r2,-24(fp)
 80293e0:	0085c83a 	sub	r2,zero,r2
 80293e4:	18800015 	stw	r2,0(r3)
    return -1;
 80293e8:	00bfffc4 	movi	r2,-1
 80293ec:	00000106 	br	80293f4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 80293f0:	e0bff917 	ldw	r2,-28(fp)
}
 80293f4:	e037883a 	mov	sp,fp
 80293f8:	dfc00117 	ldw	ra,4(sp)
 80293fc:	df000017 	ldw	fp,0(sp)
 8029400:	dec00204 	addi	sp,sp,8
 8029404:	f800283a 	ret

08029408 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 8029408:	defffe04 	addi	sp,sp,-8
 802940c:	df000115 	stw	fp,4(sp)
 8029410:	df000104 	addi	fp,sp,4
 8029414:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 8029418:	e0bfff17 	ldw	r2,-4(fp)
 802941c:	108000d0 	cmplti	r2,r2,3
 8029420:	10000d1e 	bne	r2,zero,8029458 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 8029424:	008200f4 	movhi	r2,2051
 8029428:	10a88d04 	addi	r2,r2,-24012
 802942c:	e0ffff17 	ldw	r3,-4(fp)
 8029430:	18c00324 	muli	r3,r3,12
 8029434:	10c5883a 	add	r2,r2,r3
 8029438:	10800204 	addi	r2,r2,8
 802943c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 8029440:	008200f4 	movhi	r2,2051
 8029444:	10a88d04 	addi	r2,r2,-24012
 8029448:	e0ffff17 	ldw	r3,-4(fp)
 802944c:	18c00324 	muli	r3,r3,12
 8029450:	10c5883a 	add	r2,r2,r3
 8029454:	10000015 	stw	zero,0(r2)
  }
}
 8029458:	0001883a 	nop
 802945c:	e037883a 	mov	sp,fp
 8029460:	df000017 	ldw	fp,0(sp)
 8029464:	dec00104 	addi	sp,sp,4
 8029468:	f800283a 	ret

0802946c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 802946c:	defffa04 	addi	sp,sp,-24
 8029470:	df000515 	stw	fp,20(sp)
 8029474:	df000504 	addi	fp,sp,20
 8029478:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 802947c:	0005303a 	rdctl	r2,status
 8029480:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8029484:	e0fffc17 	ldw	r3,-16(fp)
 8029488:	00bfff84 	movi	r2,-2
 802948c:	1884703a 	and	r2,r3,r2
 8029490:	1001703a 	wrctl	status,r2
  
  return context;
 8029494:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 8029498:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 802949c:	e0bfff17 	ldw	r2,-4(fp)
 80294a0:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 80294a4:	e0bffd17 	ldw	r2,-12(fp)
 80294a8:	10800017 	ldw	r2,0(r2)
 80294ac:	e0fffd17 	ldw	r3,-12(fp)
 80294b0:	18c00117 	ldw	r3,4(r3)
 80294b4:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 80294b8:	e0bffd17 	ldw	r2,-12(fp)
 80294bc:	10800117 	ldw	r2,4(r2)
 80294c0:	e0fffd17 	ldw	r3,-12(fp)
 80294c4:	18c00017 	ldw	r3,0(r3)
 80294c8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 80294cc:	e0bffd17 	ldw	r2,-12(fp)
 80294d0:	e0fffd17 	ldw	r3,-12(fp)
 80294d4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 80294d8:	e0bffd17 	ldw	r2,-12(fp)
 80294dc:	e0fffd17 	ldw	r3,-12(fp)
 80294e0:	10c00015 	stw	r3,0(r2)
 80294e4:	e0bffb17 	ldw	r2,-20(fp)
 80294e8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 80294ec:	e0bffe17 	ldw	r2,-8(fp)
 80294f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 80294f4:	0001883a 	nop
 80294f8:	e037883a 	mov	sp,fp
 80294fc:	df000017 	ldw	fp,0(sp)
 8029500:	dec00104 	addi	sp,sp,4
 8029504:	f800283a 	ret

08029508 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 8029508:	defffb04 	addi	sp,sp,-20
 802950c:	dfc00415 	stw	ra,16(sp)
 8029510:	df000315 	stw	fp,12(sp)
 8029514:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 8029518:	d0a00d17 	ldw	r2,-32716(gp)
 802951c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8029520:	d0a10617 	ldw	r2,-31720(gp)
 8029524:	10800044 	addi	r2,r2,1
 8029528:	d0a10615 	stw	r2,-31720(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 802952c:	00002e06 	br	80295e8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8029530:	e0bffd17 	ldw	r2,-12(fp)
 8029534:	10800017 	ldw	r2,0(r2)
 8029538:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 802953c:	e0bffd17 	ldw	r2,-12(fp)
 8029540:	10800403 	ldbu	r2,16(r2)
 8029544:	10803fcc 	andi	r2,r2,255
 8029548:	10000426 	beq	r2,zero,802955c <alt_tick+0x54>
 802954c:	d0a10617 	ldw	r2,-31720(gp)
 8029550:	1000021e 	bne	r2,zero,802955c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8029554:	e0bffd17 	ldw	r2,-12(fp)
 8029558:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 802955c:	e0bffd17 	ldw	r2,-12(fp)
 8029560:	10800217 	ldw	r2,8(r2)
 8029564:	d0e10617 	ldw	r3,-31720(gp)
 8029568:	18801d36 	bltu	r3,r2,80295e0 <alt_tick+0xd8>
 802956c:	e0bffd17 	ldw	r2,-12(fp)
 8029570:	10800403 	ldbu	r2,16(r2)
 8029574:	10803fcc 	andi	r2,r2,255
 8029578:	1000191e 	bne	r2,zero,80295e0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 802957c:	e0bffd17 	ldw	r2,-12(fp)
 8029580:	10800317 	ldw	r2,12(r2)
 8029584:	e0fffd17 	ldw	r3,-12(fp)
 8029588:	18c00517 	ldw	r3,20(r3)
 802958c:	1809883a 	mov	r4,r3
 8029590:	103ee83a 	callr	r2
 8029594:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8029598:	e0bfff17 	ldw	r2,-4(fp)
 802959c:	1000031e 	bne	r2,zero,80295ac <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 80295a0:	e13ffd17 	ldw	r4,-12(fp)
 80295a4:	802946c0 	call	802946c <alt_alarm_stop>
 80295a8:	00000d06 	br	80295e0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 80295ac:	e0bffd17 	ldw	r2,-12(fp)
 80295b0:	10c00217 	ldw	r3,8(r2)
 80295b4:	e0bfff17 	ldw	r2,-4(fp)
 80295b8:	1887883a 	add	r3,r3,r2
 80295bc:	e0bffd17 	ldw	r2,-12(fp)
 80295c0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80295c4:	e0bffd17 	ldw	r2,-12(fp)
 80295c8:	10c00217 	ldw	r3,8(r2)
 80295cc:	d0a10617 	ldw	r2,-31720(gp)
 80295d0:	1880032e 	bgeu	r3,r2,80295e0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80295d4:	e0bffd17 	ldw	r2,-12(fp)
 80295d8:	00c00044 	movi	r3,1
 80295dc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80295e0:	e0bffe17 	ldw	r2,-8(fp)
 80295e4:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 80295e8:	e0fffd17 	ldw	r3,-12(fp)
 80295ec:	d0a00d04 	addi	r2,gp,-32716
 80295f0:	18bfcf1e 	bne	r3,r2,8029530 <__alt_data_end+0xffff0e90>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80295f4:	0001883a 	nop
}
 80295f8:	0001883a 	nop
 80295fc:	e037883a 	mov	sp,fp
 8029600:	dfc00117 	ldw	ra,4(sp)
 8029604:	df000017 	ldw	fp,0(sp)
 8029608:	dec00204 	addi	sp,sp,8
 802960c:	f800283a 	ret

08029610 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8029610:	deffff04 	addi	sp,sp,-4
 8029614:	df000015 	stw	fp,0(sp)
 8029618:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 802961c:	000170fa 	wrctl	ienable,zero
}
 8029620:	0001883a 	nop
 8029624:	e037883a 	mov	sp,fp
 8029628:	df000017 	ldw	fp,0(sp)
 802962c:	dec00104 	addi	sp,sp,4
 8029630:	f800283a 	ret

08029634 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8029634:	defffb04 	addi	sp,sp,-20
 8029638:	dfc00415 	stw	ra,16(sp)
 802963c:	df000315 	stw	fp,12(sp)
 8029640:	df000304 	addi	fp,sp,12
 8029644:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8029648:	d0a00717 	ldw	r2,-32740(gp)
 802964c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8029650:	00003106 	br	8029718 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8029654:	e0bffd17 	ldw	r2,-12(fp)
 8029658:	10800217 	ldw	r2,8(r2)
 802965c:	1009883a 	mov	r4,r2
 8029660:	8026d600 	call	8026d60 <strlen>
 8029664:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8029668:	e0bffd17 	ldw	r2,-12(fp)
 802966c:	10c00217 	ldw	r3,8(r2)
 8029670:	e0bffe17 	ldw	r2,-8(fp)
 8029674:	10bfffc4 	addi	r2,r2,-1
 8029678:	1885883a 	add	r2,r3,r2
 802967c:	10800003 	ldbu	r2,0(r2)
 8029680:	10803fcc 	andi	r2,r2,255
 8029684:	1080201c 	xori	r2,r2,128
 8029688:	10bfe004 	addi	r2,r2,-128
 802968c:	10800bd8 	cmpnei	r2,r2,47
 8029690:	1000031e 	bne	r2,zero,80296a0 <alt_find_file+0x6c>
    {
      len -= 1;
 8029694:	e0bffe17 	ldw	r2,-8(fp)
 8029698:	10bfffc4 	addi	r2,r2,-1
 802969c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 80296a0:	e0bffe17 	ldw	r2,-8(fp)
 80296a4:	e0ffff17 	ldw	r3,-4(fp)
 80296a8:	1885883a 	add	r2,r3,r2
 80296ac:	10800003 	ldbu	r2,0(r2)
 80296b0:	10803fcc 	andi	r2,r2,255
 80296b4:	1080201c 	xori	r2,r2,128
 80296b8:	10bfe004 	addi	r2,r2,-128
 80296bc:	10800be0 	cmpeqi	r2,r2,47
 80296c0:	1000081e 	bne	r2,zero,80296e4 <alt_find_file+0xb0>
 80296c4:	e0bffe17 	ldw	r2,-8(fp)
 80296c8:	e0ffff17 	ldw	r3,-4(fp)
 80296cc:	1885883a 	add	r2,r3,r2
 80296d0:	10800003 	ldbu	r2,0(r2)
 80296d4:	10803fcc 	andi	r2,r2,255
 80296d8:	1080201c 	xori	r2,r2,128
 80296dc:	10bfe004 	addi	r2,r2,-128
 80296e0:	10000a1e 	bne	r2,zero,802970c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 80296e4:	e0bffd17 	ldw	r2,-12(fp)
 80296e8:	10800217 	ldw	r2,8(r2)
 80296ec:	e0fffe17 	ldw	r3,-8(fp)
 80296f0:	180d883a 	mov	r6,r3
 80296f4:	e17fff17 	ldw	r5,-4(fp)
 80296f8:	1009883a 	mov	r4,r2
 80296fc:	80299400 	call	8029940 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8029700:	1000021e 	bne	r2,zero,802970c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 8029704:	e0bffd17 	ldw	r2,-12(fp)
 8029708:	00000706 	br	8029728 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 802970c:	e0bffd17 	ldw	r2,-12(fp)
 8029710:	10800017 	ldw	r2,0(r2)
 8029714:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8029718:	e0fffd17 	ldw	r3,-12(fp)
 802971c:	d0a00704 	addi	r2,gp,-32740
 8029720:	18bfcc1e 	bne	r3,r2,8029654 <__alt_data_end+0xffff0fb4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 8029724:	0005883a 	mov	r2,zero
}
 8029728:	e037883a 	mov	sp,fp
 802972c:	dfc00117 	ldw	ra,4(sp)
 8029730:	df000017 	ldw	fp,0(sp)
 8029734:	dec00204 	addi	sp,sp,8
 8029738:	f800283a 	ret

0802973c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 802973c:	defffc04 	addi	sp,sp,-16
 8029740:	df000315 	stw	fp,12(sp)
 8029744:	df000304 	addi	fp,sp,12
 8029748:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 802974c:	00bffa04 	movi	r2,-24
 8029750:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8029754:	e03ffd15 	stw	zero,-12(fp)
 8029758:	00001906 	br	80297c0 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
 802975c:	008200f4 	movhi	r2,2051
 8029760:	10a88d04 	addi	r2,r2,-24012
 8029764:	e0fffd17 	ldw	r3,-12(fp)
 8029768:	18c00324 	muli	r3,r3,12
 802976c:	10c5883a 	add	r2,r2,r3
 8029770:	10800017 	ldw	r2,0(r2)
 8029774:	10000f1e 	bne	r2,zero,80297b4 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
 8029778:	008200f4 	movhi	r2,2051
 802977c:	10a88d04 	addi	r2,r2,-24012
 8029780:	e0fffd17 	ldw	r3,-12(fp)
 8029784:	18c00324 	muli	r3,r3,12
 8029788:	10c5883a 	add	r2,r2,r3
 802978c:	e0ffff17 	ldw	r3,-4(fp)
 8029790:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 8029794:	d0e00b17 	ldw	r3,-32724(gp)
 8029798:	e0bffd17 	ldw	r2,-12(fp)
 802979c:	1880020e 	bge	r3,r2,80297a8 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
 80297a0:	e0bffd17 	ldw	r2,-12(fp)
 80297a4:	d0a00b15 	stw	r2,-32724(gp)
      }
      rc = i;
 80297a8:	e0bffd17 	ldw	r2,-12(fp)
 80297ac:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 80297b0:	00000606 	br	80297cc <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80297b4:	e0bffd17 	ldw	r2,-12(fp)
 80297b8:	10800044 	addi	r2,r2,1
 80297bc:	e0bffd15 	stw	r2,-12(fp)
 80297c0:	e0bffd17 	ldw	r2,-12(fp)
 80297c4:	10800810 	cmplti	r2,r2,32
 80297c8:	103fe41e 	bne	r2,zero,802975c <__alt_data_end+0xffff10bc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 80297cc:	e0bffe17 	ldw	r2,-8(fp)
}
 80297d0:	e037883a 	mov	sp,fp
 80297d4:	df000017 	ldw	fp,0(sp)
 80297d8:	dec00104 	addi	sp,sp,4
 80297dc:	f800283a 	ret

080297e0 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 80297e0:	defffb04 	addi	sp,sp,-20
 80297e4:	df000415 	stw	fp,16(sp)
 80297e8:	df000404 	addi	fp,sp,16
 80297ec:	e13ffe15 	stw	r4,-8(fp)
 80297f0:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 80297f4:	e0bfff17 	ldw	r2,-4(fp)
 80297f8:	10840070 	cmpltui	r2,r2,4097
 80297fc:	1000021e 	bne	r2,zero,8029808 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 8029800:	00840004 	movi	r2,4096
 8029804:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 8029808:	e0fffe17 	ldw	r3,-8(fp)
 802980c:	e0bfff17 	ldw	r2,-4(fp)
 8029810:	1885883a 	add	r2,r3,r2
 8029814:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 8029818:	e0bffe17 	ldw	r2,-8(fp)
 802981c:	e0bffc15 	stw	r2,-16(fp)
 8029820:	00000506 	br	8029838 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 8029824:	e0bffc17 	ldw	r2,-16(fp)
 8029828:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 802982c:	e0bffc17 	ldw	r2,-16(fp)
 8029830:	10800804 	addi	r2,r2,32
 8029834:	e0bffc15 	stw	r2,-16(fp)
 8029838:	e0fffc17 	ldw	r3,-16(fp)
 802983c:	e0bffd17 	ldw	r2,-12(fp)
 8029840:	18bff836 	bltu	r3,r2,8029824 <__alt_data_end+0xffff1184>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 8029844:	e0bffe17 	ldw	r2,-8(fp)
 8029848:	108007cc 	andi	r2,r2,31
 802984c:	10000226 	beq	r2,zero,8029858 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 8029850:	e0bffc17 	ldw	r2,-16(fp)
 8029854:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 8029858:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 802985c:	0001883a 	nop
 8029860:	e037883a 	mov	sp,fp
 8029864:	df000017 	ldw	fp,0(sp)
 8029868:	dec00104 	addi	sp,sp,4
 802986c:	f800283a 	ret

08029870 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8029870:	defffe04 	addi	sp,sp,-8
 8029874:	df000115 	stw	fp,4(sp)
 8029878:	df000104 	addi	fp,sp,4
 802987c:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8029880:	e0bfff17 	ldw	r2,-4(fp)
 8029884:	10bffe84 	addi	r2,r2,-6
 8029888:	10c00428 	cmpgeui	r3,r2,16
 802988c:	18001a1e 	bne	r3,zero,80298f8 <alt_exception_cause_generated_bad_addr+0x88>
 8029890:	100690ba 	slli	r3,r2,2
 8029894:	008200f4 	movhi	r2,2051
 8029898:	10a62a04 	addi	r2,r2,-26456
 802989c:	1885883a 	add	r2,r3,r2
 80298a0:	10800017 	ldw	r2,0(r2)
 80298a4:	1000683a 	jmp	r2
 80298a8:	080298e8 	cmpgeui	zero,at,2659
 80298ac:	080298e8 	cmpgeui	zero,at,2659
 80298b0:	080298f8 	rdprs	zero,at,2659
 80298b4:	080298f8 	rdprs	zero,at,2659
 80298b8:	080298f8 	rdprs	zero,at,2659
 80298bc:	080298e8 	cmpgeui	zero,at,2659
 80298c0:	080298f0 	cmpltui	zero,at,2659
 80298c4:	080298f8 	rdprs	zero,at,2659
 80298c8:	080298e8 	cmpgeui	zero,at,2659
 80298cc:	080298e8 	cmpgeui	zero,at,2659
 80298d0:	080298f8 	rdprs	zero,at,2659
 80298d4:	080298e8 	cmpgeui	zero,at,2659
 80298d8:	080298f0 	cmpltui	zero,at,2659
 80298dc:	080298f8 	rdprs	zero,at,2659
 80298e0:	080298f8 	rdprs	zero,at,2659
 80298e4:	080298e8 	cmpgeui	zero,at,2659
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80298e8:	00800044 	movi	r2,1
 80298ec:	00000306 	br	80298fc <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80298f0:	0005883a 	mov	r2,zero
 80298f4:	00000106 	br	80298fc <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 80298f8:	0005883a 	mov	r2,zero
  }
}
 80298fc:	e037883a 	mov	sp,fp
 8029900:	df000017 	ldw	fp,0(sp)
 8029904:	dec00104 	addi	sp,sp,4
 8029908:	f800283a 	ret

0802990c <atexit>:
 802990c:	200b883a 	mov	r5,r4
 8029910:	000f883a 	mov	r7,zero
 8029914:	000d883a 	mov	r6,zero
 8029918:	0009883a 	mov	r4,zero
 802991c:	80299701 	jmpi	8029970 <__register_exitproc>

08029920 <exit>:
 8029920:	defffe04 	addi	sp,sp,-8
 8029924:	000b883a 	mov	r5,zero
 8029928:	dc000015 	stw	r16,0(sp)
 802992c:	dfc00115 	stw	ra,4(sp)
 8029930:	2021883a 	mov	r16,r4
 8029934:	8029ac80 	call	8029ac8 <__call_exitprocs>
 8029938:	8009883a 	mov	r4,r16
 802993c:	8029c580 	call	8029c58 <_exit>

08029940 <memcmp>:
 8029940:	218d883a 	add	r6,r4,r6
 8029944:	21800826 	beq	r4,r6,8029968 <memcmp+0x28>
 8029948:	20800003 	ldbu	r2,0(r4)
 802994c:	28c00003 	ldbu	r3,0(r5)
 8029950:	10c00226 	beq	r2,r3,802995c <memcmp+0x1c>
 8029954:	10c5c83a 	sub	r2,r2,r3
 8029958:	f800283a 	ret
 802995c:	21000044 	addi	r4,r4,1
 8029960:	29400044 	addi	r5,r5,1
 8029964:	003ff706 	br	8029944 <__alt_data_end+0xffff12a4>
 8029968:	0005883a 	mov	r2,zero
 802996c:	f800283a 	ret

08029970 <__register_exitproc>:
 8029970:	008200f4 	movhi	r2,2051
 8029974:	10a8f104 	addi	r2,r2,-23612
 8029978:	10c00017 	ldw	r3,0(r2)
 802997c:	defff904 	addi	sp,sp,-28
 8029980:	dc000015 	stw	r16,0(sp)
 8029984:	1c000c17 	ldw	r16,48(r3)
 8029988:	dd400515 	stw	r21,20(sp)
 802998c:	dd000415 	stw	r20,16(sp)
 8029990:	dcc00315 	stw	r19,12(sp)
 8029994:	dc800215 	stw	r18,8(sp)
 8029998:	dc400115 	stw	r17,4(sp)
 802999c:	dfc00615 	stw	ra,24(sp)
 80299a0:	202b883a 	mov	r21,r4
 80299a4:	2823883a 	mov	r17,r5
 80299a8:	3027883a 	mov	r19,r6
 80299ac:	3825883a 	mov	r18,r7
 80299b0:	1029883a 	mov	r20,r2
 80299b4:	8000021e 	bne	r16,zero,80299c0 <__register_exitproc+0x50>
 80299b8:	1c000d04 	addi	r16,r3,52
 80299bc:	1c000c15 	stw	r16,48(r3)
 80299c0:	80800117 	ldw	r2,4(r16)
 80299c4:	00c007c4 	movi	r3,31
 80299c8:	1880110e 	bge	r3,r2,8029a10 <__register_exitproc+0xa0>
 80299cc:	00800034 	movhi	r2,0
 80299d0:	10800004 	addi	r2,r2,0
 80299d4:	1000021e 	bne	r2,zero,80299e0 <__register_exitproc+0x70>
 80299d8:	00bfffc4 	movi	r2,-1
 80299dc:	00003106 	br	8029aa4 <__register_exitproc+0x134>
 80299e0:	01002304 	movi	r4,140
 80299e4:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 80299e8:	1021883a 	mov	r16,r2
 80299ec:	103ffa26 	beq	r2,zero,80299d8 <__alt_data_end+0xffff1338>
 80299f0:	10000115 	stw	zero,4(r2)
 80299f4:	a0800017 	ldw	r2,0(r20)
 80299f8:	10c00c17 	ldw	r3,48(r2)
 80299fc:	80c00015 	stw	r3,0(r16)
 8029a00:	14000c15 	stw	r16,48(r2)
 8029a04:	80002215 	stw	zero,136(r16)
 8029a08:	a8001d26 	beq	r21,zero,8029a80 <__register_exitproc+0x110>
 8029a0c:	00000606 	br	8029a28 <__register_exitproc+0xb8>
 8029a10:	a8001b26 	beq	r21,zero,8029a80 <__register_exitproc+0x110>
 8029a14:	80802217 	ldw	r2,136(r16)
 8029a18:	1000091e 	bne	r2,zero,8029a40 <__register_exitproc+0xd0>
 8029a1c:	00800034 	movhi	r2,0
 8029a20:	10800004 	addi	r2,r2,0
 8029a24:	103fec26 	beq	r2,zero,80299d8 <__alt_data_end+0xffff1338>
 8029a28:	01004204 	movi	r4,264
 8029a2c:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8029a30:	103fe926 	beq	r2,zero,80299d8 <__alt_data_end+0xffff1338>
 8029a34:	10004015 	stw	zero,256(r2)
 8029a38:	10004115 	stw	zero,260(r2)
 8029a3c:	80802215 	stw	r2,136(r16)
 8029a40:	81400117 	ldw	r5,4(r16)
 8029a44:	01000044 	movi	r4,1
 8029a48:	2947883a 	add	r3,r5,r5
 8029a4c:	18c7883a 	add	r3,r3,r3
 8029a50:	10c7883a 	add	r3,r2,r3
 8029a54:	1cc00015 	stw	r19,0(r3)
 8029a58:	2148983a 	sll	r4,r4,r5
 8029a5c:	11404017 	ldw	r5,256(r2)
 8029a60:	290ab03a 	or	r5,r5,r4
 8029a64:	11404015 	stw	r5,256(r2)
 8029a68:	1c802015 	stw	r18,128(r3)
 8029a6c:	00c00084 	movi	r3,2
 8029a70:	a8c0031e 	bne	r21,r3,8029a80 <__register_exitproc+0x110>
 8029a74:	10c04117 	ldw	r3,260(r2)
 8029a78:	1908b03a 	or	r4,r3,r4
 8029a7c:	11004115 	stw	r4,260(r2)
 8029a80:	80800117 	ldw	r2,4(r16)
 8029a84:	10c00044 	addi	r3,r2,1
 8029a88:	10800084 	addi	r2,r2,2
 8029a8c:	1085883a 	add	r2,r2,r2
 8029a90:	1085883a 	add	r2,r2,r2
 8029a94:	80c00115 	stw	r3,4(r16)
 8029a98:	80a1883a 	add	r16,r16,r2
 8029a9c:	84400015 	stw	r17,0(r16)
 8029aa0:	0005883a 	mov	r2,zero
 8029aa4:	dfc00617 	ldw	ra,24(sp)
 8029aa8:	dd400517 	ldw	r21,20(sp)
 8029aac:	dd000417 	ldw	r20,16(sp)
 8029ab0:	dcc00317 	ldw	r19,12(sp)
 8029ab4:	dc800217 	ldw	r18,8(sp)
 8029ab8:	dc400117 	ldw	r17,4(sp)
 8029abc:	dc000017 	ldw	r16,0(sp)
 8029ac0:	dec00704 	addi	sp,sp,28
 8029ac4:	f800283a 	ret

08029ac8 <__call_exitprocs>:
 8029ac8:	defff504 	addi	sp,sp,-44
 8029acc:	dd000515 	stw	r20,20(sp)
 8029ad0:	050200f4 	movhi	r20,2051
 8029ad4:	dc800315 	stw	r18,12(sp)
 8029ad8:	dfc00a15 	stw	ra,40(sp)
 8029adc:	df000915 	stw	fp,36(sp)
 8029ae0:	ddc00815 	stw	r23,32(sp)
 8029ae4:	dd800715 	stw	r22,28(sp)
 8029ae8:	dd400615 	stw	r21,24(sp)
 8029aec:	dcc00415 	stw	r19,16(sp)
 8029af0:	dc400215 	stw	r17,8(sp)
 8029af4:	dc000115 	stw	r16,4(sp)
 8029af8:	d9000015 	stw	r4,0(sp)
 8029afc:	2825883a 	mov	r18,r5
 8029b00:	a528f104 	addi	r20,r20,-23612
 8029b04:	a4400017 	ldw	r17,0(r20)
 8029b08:	8cc00c17 	ldw	r19,48(r17)
 8029b0c:	8c400c04 	addi	r17,r17,48
 8029b10:	98004526 	beq	r19,zero,8029c28 <__call_exitprocs+0x160>
 8029b14:	9c000117 	ldw	r16,4(r19)
 8029b18:	00900034 	movhi	r2,16384
 8029b1c:	10bfffc4 	addi	r2,r2,-1
 8029b20:	9d402217 	ldw	r21,136(r19)
 8029b24:	85bfffc4 	addi	r22,r16,-1
 8029b28:	80a1883a 	add	r16,r16,r2
 8029b2c:	8421883a 	add	r16,r16,r16
 8029b30:	8421883a 	add	r16,r16,r16
 8029b34:	ac2f883a 	add	r23,r21,r16
 8029b38:	84000204 	addi	r16,r16,8
 8029b3c:	9c21883a 	add	r16,r19,r16
 8029b40:	b0002716 	blt	r22,zero,8029be0 <__call_exitprocs+0x118>
 8029b44:	90000726 	beq	r18,zero,8029b64 <__call_exitprocs+0x9c>
 8029b48:	a800041e 	bne	r21,zero,8029b5c <__call_exitprocs+0x94>
 8029b4c:	b5bfffc4 	addi	r22,r22,-1
 8029b50:	bdffff04 	addi	r23,r23,-4
 8029b54:	843fff04 	addi	r16,r16,-4
 8029b58:	003ff906 	br	8029b40 <__alt_data_end+0xffff14a0>
 8029b5c:	b9002017 	ldw	r4,128(r23)
 8029b60:	913ffa1e 	bne	r18,r4,8029b4c <__alt_data_end+0xffff14ac>
 8029b64:	99000117 	ldw	r4,4(r19)
 8029b68:	82000017 	ldw	r8,0(r16)
 8029b6c:	213fffc4 	addi	r4,r4,-1
 8029b70:	b100021e 	bne	r22,r4,8029b7c <__call_exitprocs+0xb4>
 8029b74:	9d800115 	stw	r22,4(r19)
 8029b78:	00000106 	br	8029b80 <__call_exitprocs+0xb8>
 8029b7c:	80000015 	stw	zero,0(r16)
 8029b80:	403ff226 	beq	r8,zero,8029b4c <__alt_data_end+0xffff14ac>
 8029b84:	9f000117 	ldw	fp,4(r19)
 8029b88:	a8000526 	beq	r21,zero,8029ba0 <__call_exitprocs+0xd8>
 8029b8c:	00800044 	movi	r2,1
 8029b90:	1592983a 	sll	r9,r2,r22
 8029b94:	a9404017 	ldw	r5,256(r21)
 8029b98:	494a703a 	and	r5,r9,r5
 8029b9c:	2800021e 	bne	r5,zero,8029ba8 <__call_exitprocs+0xe0>
 8029ba0:	403ee83a 	callr	r8
 8029ba4:	00000906 	br	8029bcc <__call_exitprocs+0x104>
 8029ba8:	a9004117 	ldw	r4,260(r21)
 8029bac:	4908703a 	and	r4,r9,r4
 8029bb0:	2000041e 	bne	r4,zero,8029bc4 <__call_exitprocs+0xfc>
 8029bb4:	b9400017 	ldw	r5,0(r23)
 8029bb8:	d9000017 	ldw	r4,0(sp)
 8029bbc:	403ee83a 	callr	r8
 8029bc0:	00000206 	br	8029bcc <__call_exitprocs+0x104>
 8029bc4:	b9000017 	ldw	r4,0(r23)
 8029bc8:	403ee83a 	callr	r8
 8029bcc:	99000117 	ldw	r4,4(r19)
 8029bd0:	e13fcc1e 	bne	fp,r4,8029b04 <__alt_data_end+0xffff1464>
 8029bd4:	89000017 	ldw	r4,0(r17)
 8029bd8:	993fdc26 	beq	r19,r4,8029b4c <__alt_data_end+0xffff14ac>
 8029bdc:	003fc906 	br	8029b04 <__alt_data_end+0xffff1464>
 8029be0:	00800034 	movhi	r2,0
 8029be4:	10800004 	addi	r2,r2,0
 8029be8:	10000f26 	beq	r2,zero,8029c28 <__call_exitprocs+0x160>
 8029bec:	99400117 	ldw	r5,4(r19)
 8029bf0:	99000017 	ldw	r4,0(r19)
 8029bf4:	2800091e 	bne	r5,zero,8029c1c <__call_exitprocs+0x154>
 8029bf8:	20000826 	beq	r4,zero,8029c1c <__call_exitprocs+0x154>
 8029bfc:	89000015 	stw	r4,0(r17)
 8029c00:	a8000226 	beq	r21,zero,8029c0c <__call_exitprocs+0x144>
 8029c04:	a809883a 	mov	r4,r21
 8029c08:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8029c0c:	9809883a 	mov	r4,r19
 8029c10:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x4000000>
 8029c14:	8cc00017 	ldw	r19,0(r17)
 8029c18:	003fbd06 	br	8029b10 <__alt_data_end+0xffff1470>
 8029c1c:	9823883a 	mov	r17,r19
 8029c20:	2027883a 	mov	r19,r4
 8029c24:	003fba06 	br	8029b10 <__alt_data_end+0xffff1470>
 8029c28:	dfc00a17 	ldw	ra,40(sp)
 8029c2c:	df000917 	ldw	fp,36(sp)
 8029c30:	ddc00817 	ldw	r23,32(sp)
 8029c34:	dd800717 	ldw	r22,28(sp)
 8029c38:	dd400617 	ldw	r21,24(sp)
 8029c3c:	dd000517 	ldw	r20,20(sp)
 8029c40:	dcc00417 	ldw	r19,16(sp)
 8029c44:	dc800317 	ldw	r18,12(sp)
 8029c48:	dc400217 	ldw	r17,8(sp)
 8029c4c:	dc000117 	ldw	r16,4(sp)
 8029c50:	dec00b04 	addi	sp,sp,44
 8029c54:	f800283a 	ret

08029c58 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8029c58:	defffd04 	addi	sp,sp,-12
 8029c5c:	df000215 	stw	fp,8(sp)
 8029c60:	df000204 	addi	fp,sp,8
 8029c64:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8029c68:	0001883a 	nop
 8029c6c:	e0bfff17 	ldw	r2,-4(fp)
 8029c70:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8029c74:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8029c78:	10000226 	beq	r2,zero,8029c84 <_exit+0x2c>
    ALT_SIM_FAIL();
 8029c7c:	002af070 	cmpltui	zero,zero,43969
 8029c80:	00000106 	br	8029c88 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8029c84:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8029c88:	003fff06 	br	8029c88 <__alt_data_end+0xffff15e8>
